### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Worksheet
    summary: |-
      <span data-ttu-id="a1c79-101">Ein Excel-Arbeitsblatt ist ein Raster von Zellen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-101">An Excel worksheet is a grid of cells.</span></span> <span data-ttu-id="a1c79-102">Es kann Daten, Tabellen, Diagramme usw. enthalten.</span><span class="sxs-lookup"><span data-stu-id="a1c79-102">It can contain data, tables, charts, etc.</span></span>

      <span data-ttu-id="a1c79-103">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Worksheet.activate
      - excel.Excel.Worksheet.calculate
      - excel.Excel.Worksheet.charts
      - excel.Excel.Worksheet.context
      - excel.Excel.Worksheet.copy
      - excel.Excel.Worksheet.copy_1
      - excel.Excel.Worksheet.delete
      - excel.Excel.Worksheet.freezePanes
      - excel.Excel.Worksheet.getCell
      - excel.Excel.Worksheet.getNext
      - excel.Excel.Worksheet.getNextOrNullObject
      - excel.Excel.Worksheet.getPrevious
      - excel.Excel.Worksheet.getPreviousOrNullObject
      - excel.Excel.Worksheet.getRange
      - excel.Excel.Worksheet.getRangeByIndexes
      - excel.Excel.Worksheet.getUsedRange
      - excel.Excel.Worksheet.getUsedRangeOrNullObject
      - excel.Excel.Worksheet.id
      - excel.Excel.Worksheet.load
      - excel.Excel.Worksheet.load_1
      - excel.Excel.Worksheet.load_2
      - excel.Excel.Worksheet.name
      - excel.Excel.Worksheet.names
      - excel.Excel.Worksheet.onActivated
      - excel.Excel.Worksheet.onCalculated
      - excel.Excel.Worksheet.onChanged
      - excel.Excel.Worksheet.onDeactivated
      - excel.Excel.Worksheet.onSelectionChanged
      - excel.Excel.Worksheet.pivotTables
      - excel.Excel.Worksheet.position
      - excel.Excel.Worksheet.protection
      - excel.Excel.Worksheet.set
      - excel.Excel.Worksheet.set_1
      - excel.Excel.Worksheet.showGridlines
      - excel.Excel.Worksheet.showHeadings
      - excel.Excel.Worksheet.standardHeight
      - excel.Excel.Worksheet.standardWidth
      - excel.Excel.Worksheet.tabColor
      - excel.Excel.Worksheet.tables
      - excel.Excel.Worksheet.toJSON
      - excel.Excel.Worksheet.visibility
  - uid: excel.Excel.Worksheet.activate
    summary: |-
      <span data-ttu-id="a1c79-104">Aktivieren Sie das Arbeitsblatt in der Excel-Benutzeroberfläche.</span><span class="sxs-lookup"><span data-stu-id="a1c79-104">Activate the worksheet in the Excel UI.</span></span>

      <span data-ttu-id="a1c79-105">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-105">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-106">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-106">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.calculate
    summary: |-
      <span data-ttu-id="a1c79-107">Berechnet alle Zellen auf einem Arbeitsblatt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-107">Calculates all cells on a worksheet.</span></span>

      <span data-ttu-id="a1c79-108">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-108">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: '<span data-ttu-id="a1c79-109">True, um alle als verschmutzt zu markieren.</span><span class="sxs-lookup"><span data-stu-id="a1c79-109">True, to mark all as dirty.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.charts
    summary: |-
      <span data-ttu-id="a1c79-110">Gibt die Sammlung von Diagrammen zurück, die Teil des Arbeitsblatts sind.</span><span class="sxs-lookup"><span data-stu-id="a1c79-110">Returns collection of charts that are part of the worksheet.</span></span> <span data-ttu-id="a1c79-111">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-111">Read-only.</span></span>

      <span data-ttu-id="a1c79-112">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-112">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - excel.Excel.ChartCollection
  - uid: excel.Excel.Worksheet.context
    summary: '<span data-ttu-id="a1c79-113">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="a1c79-113">The request context associated with the object.</span></span> <span data-ttu-id="a1c79-114">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="a1c79-114">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Worksheet.copy
    summary: |-
      <span data-ttu-id="a1c79-115">Kopiert eine Arbeitsmappe, und platziert sie an der angegebenen Position.</span><span class="sxs-lookup"><span data-stu-id="a1c79-115">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="a1c79-116">Gibt die kopierte Arbeitsmappe zurück.</span><span class="sxs-lookup"><span data-stu-id="a1c79-116">Return the copied worksheet.</span></span>

      <span data-ttu-id="a1c79-117">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-117">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-118">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-118">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: <span data-ttu-id="a1c79-119">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-119">Optional.</span></span>
          type:
            - excel.Excel.WorksheetPositionType
        - id: relativeTo
          description: <span data-ttu-id="a1c79-120">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-120">Optional.</span></span>
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.copy_1
    summary: |-
      <span data-ttu-id="a1c79-121">Kopiert eine Arbeitsmappe, und platziert sie an der angegebenen Position.</span><span class="sxs-lookup"><span data-stu-id="a1c79-121">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="a1c79-122">Gibt die kopierte Arbeitsmappe zurück.</span><span class="sxs-lookup"><span data-stu-id="a1c79-122">Return the copied worksheet.</span></span>

      <span data-ttu-id="a1c79-123">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-123">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: positionTypeString
          description: <span data-ttu-id="a1c79-124">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-124">Optional.</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: <span data-ttu-id="a1c79-125">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-125">Optional.</span></span>
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.delete
    summary: |-
      <span data-ttu-id="a1c79-126">Löscht das Arbeitsblatt aus der Arbeitsmappe.</span><span class="sxs-lookup"><span data-stu-id="a1c79-126">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="a1c79-127">Beachten Sie Folgendes: Wenn die Sichtbarkeit des Arbeitsblatts auf "VeryHidden" festgelegt ist, kann der Löschvorgang mit einer GeneralException fehlschlagen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-127">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with a GeneralException.</span></span>

      <span data-ttu-id="a1c79-128">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-128">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-129">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-129">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Worksheet.freezePanes
    summary: |-
      <span data-ttu-id="a1c79-130">Ruft ein Objekt ab, das zum Bearbeiten von fixierten Bereichen auf dem Arbeitsblatt verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="a1c79-130">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="a1c79-131">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-131">Read-only.</span></span>

      <span data-ttu-id="a1c79-132">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-132">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - excel.Excel.WorksheetFreezePanes
  - uid: excel.Excel.Worksheet.getCell
    summary: |-
      <span data-ttu-id="a1c79-133">Ruft das Bereichsobjekt ab, das die einzelne Zelle basierend auf Zeilen- und Spaltenanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="a1c79-133">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="a1c79-134">Die Zelle kann außerhalb der Grenzen des übergeordneten Bereichs liegen, solange Sie innerhalb des Arbeitsblatt Rasters bleibt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-134">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>

      <span data-ttu-id="a1c79-135">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-135">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-136">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-136">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="a1c79-137">Die Zeilenanzahl der abzurufenden Zelle.</span><span class="sxs-lookup"><span data-stu-id="a1c79-137">The row number of the cell to be retrieved.</span></span> <span data-ttu-id="a1c79-138">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="a1c79-138">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="a1c79-139">Die Spaltenzahl der abzurufenden Zelle.</span><span class="sxs-lookup"><span data-stu-id="a1c79-139">the column number of the cell to be retrieved.</span></span> <span data-ttu-id="a1c79-140">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="a1c79-140">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Worksheet.getNext
    summary: |-
      <span data-ttu-id="a1c79-141">Ruft das Arbeitsblatt ab, das diesem folgt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-141">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="a1c79-142">Wenn keine Arbeitsblätter folgen, wird durch diese Methode ein Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="a1c79-142">If there are no worksheets following this one, this method will throw an error.</span></span>

      <span data-ttu-id="a1c79-143">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-143">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-144">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-144">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="a1c79-145">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-145">Optional.</span></span> <span data-ttu-id="a1c79-146">Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-146">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getNextOrNullObject
    summary: |-
      <span data-ttu-id="a1c79-147">Ruft das Arbeitsblatt ab, das diesem folgt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-147">Gets the worksheet that follows this one.</span></span> <span data-ttu-id="a1c79-148">Wenn keine Arbeitsblätter folgen, wird diese Methode ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="a1c79-148">If there are no worksheets following this one, this method will return a null object.</span></span>

      <span data-ttu-id="a1c79-149">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-149">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="a1c79-150">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-150">Optional.</span></span> <span data-ttu-id="a1c79-151">Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-151">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPrevious
    summary: |-
      <span data-ttu-id="a1c79-152">Ruft das Arbeitsblatt ab, das diesem vorangestellt ist.</span><span class="sxs-lookup"><span data-stu-id="a1c79-152">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="a1c79-153">Wenn keine vorherigen Arbeitsblätter vorhanden sind, wird durch diese Methode ein Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="a1c79-153">If there are no previous worksheets, this method will throw an error.</span></span>

      <span data-ttu-id="a1c79-154">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-154">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-155">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-155">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="a1c79-156">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-156">Optional.</span></span> <span data-ttu-id="a1c79-157">Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-157">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getPreviousOrNullObject
    summary: |-
      <span data-ttu-id="a1c79-158">Ruft das Arbeitsblatt ab, das diesem vorangestellt ist.</span><span class="sxs-lookup"><span data-stu-id="a1c79-158">Gets the worksheet that precedes this one.</span></span> <span data-ttu-id="a1c79-159">Wenn keine vorherigen Arbeitsblätter vorhanden sind, gibt diese Methode eine NULL-Objet zurück.</span><span class="sxs-lookup"><span data-stu-id="a1c79-159">If there are no previous worksheets, this method will return a null objet.</span></span>

      <span data-ttu-id="a1c79-160">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-160">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="a1c79-161">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-161">Optional.</span></span> <span data-ttu-id="a1c79-162">Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-162">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getRange
    summary: |-
      <span data-ttu-id="a1c79-163">Ruft das Range-Objekt ab, das einen einzelnen rechteckigen Zellenblock darstellt, der durch die Adresse oder den Namen angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="a1c79-163">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>

      <span data-ttu-id="a1c79-164">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-164">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-165">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-165">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="a1c79-166">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-166">Optional.</span></span> <span data-ttu-id="a1c79-167">Die Zeichenfolge, die die Adresse oder den Namen des Bereichs darstellt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-167">The string representing the address or name of the range.</span></span> <span data-ttu-id="a1c79-168">Beispielsweise "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="a1c79-168">For example, "A1:B2".</span></span> <span data-ttu-id="a1c79-169">Wenn nichts angegeben ist, wird der gesamte Arbeitsblattbereich zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="a1c79-169">If not specified, the entire worksheet range is returned.</span></span>'
          type:
            - string
  - uid: excel.Excel.Worksheet.getRangeByIndexes
    summary: |-
      <span data-ttu-id="a1c79-170">Ruft das Bereichsobjekt, beginnend an einem bestimmten Zeilen- und Spaltenindex, das eine bestimmte Anzahl von Zeilen und Spalten umfasst.</span><span class="sxs-lookup"><span data-stu-id="a1c79-170">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>

      <span data-ttu-id="a1c79-171">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-171">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: startRow
          description: <span data-ttu-id="a1c79-172">Start Zeile (Null indiziert).</span><span class="sxs-lookup"><span data-stu-id="a1c79-172">Start row (zero-indexed).</span></span>
          type:
            - number
        - id: startColumn
          description: <span data-ttu-id="a1c79-173">Start Spalte (Null indiziert).</span><span class="sxs-lookup"><span data-stu-id="a1c79-173">Start column (zero-indexed).</span></span>
          type:
            - number
        - id: rowCount
          description: '<span data-ttu-id="a1c79-174">Die Anzahl der Zeilen, die in den Bereich eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-174">Number of rows to include in the range.</span></span>'
          type:
            - number
        - id: columnCount
          description: '<span data-ttu-id="a1c79-175">Die Anzahl der Spalten, die in den Bereich eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-175">Number of columns to include in the range.</span></span>'
          type:
            - number
  - uid: excel.Excel.Worksheet.getUsedRange
    summary: |-
      <span data-ttu-id="a1c79-176">Der verwendete Bereich ist der kleinste Bereich, der mindestens eine der Zellen umfasst, die einen Wert enthalten oder denen eine Formatierung zugewiesen wurde.</span><span class="sxs-lookup"><span data-stu-id="a1c79-176">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="a1c79-177">Wenn das gesamte Arbeitsblatt leer ist, gibt diese Funktion die obere linke Zelle zurück (d. h., es wird *kein* Fehler ausgelöst).</span><span class="sxs-lookup"><span data-stu-id="a1c79-177">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>

      <span data-ttu-id="a1c79-178">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-178">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-179">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-179">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="a1c79-180">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-180">Optional.</span></span> <span data-ttu-id="a1c79-181">Bei true werden nur Zellen mit Werten als verwendete Zellen berücksichtigt (wobei die Formatierung ignoriert wird).</span><span class="sxs-lookup"><span data-stu-id="a1c79-181">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="a1c79-182">\[API-Gruppe: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-182">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
    summary: |-
      <span data-ttu-id="a1c79-p122">Der verwendete Bereich ist der kleinste Bereich, der mindestens eine der Zellen umfasst, die einen Wert enthalten oder denen eine Formatierung zugewiesen wurde. Wenn das gesamte Arbeitsblatt leer ist, gibt diese Funktion ein NULL-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="a1c79-p122">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>

      <span data-ttu-id="a1c79-185">\[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-185">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="a1c79-186">Optional.</span><span class="sxs-lookup"><span data-stu-id="a1c79-186">Optional.</span></span> <span data-ttu-id="a1c79-187">Betrachtet nur Zellen mit Werten als verwendet.</span><span class="sxs-lookup"><span data-stu-id="a1c79-187">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel.Excel.Worksheet.id
    summary: |-
      <span data-ttu-id="a1c79-p124">Gibt einen Wert zurück, der das Arbeitsblatt in einer bestimmten Arbeitsmappe eindeutig identifiziert. Der Wert des Bezeichners bleibt unverändert, auch wenn das Arbeitsblatt umbenannt oder verschoben wird. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-p124">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>

      <span data-ttu-id="a1c79-191">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-191">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.load
    summary: <span data-ttu-id="a1c79-192">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="a1c79-192">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a1c79-193">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-193">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="a1c79-194">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="a1c79-194">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="a1c79-195">`load(option?: string | string[]): Excel.Worksheet`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="a1c79-195">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="a1c79-196">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-196">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="a1c79-197">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-197">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="a1c79-198">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="a1c79-198">It is similar to the preceding signature.</span></span> <span data-ttu-id="a1c79-199">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können.</span><span class="sxs-lookup"><span data-stu-id="a1c79-199">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a1c79-200">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="a1c79-200">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a1c79-201">Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.</span><span class="sxs-lookup"><span data-stu-id="a1c79-201">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.WorksheetLoadOptions
  - uid: excel.Excel.Worksheet.load_1
    summary: <span data-ttu-id="a1c79-202">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="a1c79-202">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a1c79-203">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-203">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-204">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-204">Examples</span></span>

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="a1c79-205">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="a1c79-205">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.Worksheet.load_2
    summary: <span data-ttu-id="a1c79-206">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="a1c79-206">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a1c79-207">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-207">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="a1c79-208">Dabei ist propertyNamesAndPaths. Select eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-208">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Worksheet.name
    summary: |-
      <span data-ttu-id="a1c79-209">Der Anzeigename des Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="a1c79-209">The display name of the worksheet.</span></span>

      <span data-ttu-id="a1c79-210">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-210">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Worksheet.names
    summary: |-
      <span data-ttu-id="a1c79-211">Auflistung von Namen im Bereich des aktuellen Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="a1c79-211">Collection of names scoped to the current worksheet.</span></span> <span data-ttu-id="a1c79-212">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-212">Read-only.</span></span>

      <span data-ttu-id="a1c79-213">\[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-213">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - excel.Excel.NamedItemCollection
  - uid: excel.Excel.Worksheet.onActivated
    summary: |-
      <span data-ttu-id="a1c79-214">Tritt auf, wenn das Arbeitsblatt aktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="a1c79-214">Occurs when the worksheet is activated.</span></span>

      <span data-ttu-id="a1c79-215">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-215">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-216">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-216">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.onCalculated
    summary: |-
      <span data-ttu-id="a1c79-217">Tritt auf, wenn das Arbeitsblatt berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="a1c79-217">Occurs when the worksheet is calculated.</span></span>

      <span data-ttu-id="a1c79-218">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-218">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-219">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-219">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onCalculated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The worksheet has recalculated.");
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.onChanged
    summary: |-
      <span data-ttu-id="a1c79-220">Tritt auf, wenn Daten in einem bestimmten Arbeitsblatt geändert werden.</span><span class="sxs-lookup"><span data-stu-id="a1c79-220">Occurs when data changed on a specific worksheet.</span></span>

      <span data-ttu-id="a1c79-221">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-221">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-222">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-222">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the onChanged event.");
          });
          ```
  - uid: excel.Excel.Worksheet.onDeactivated
    summary: |-
      <span data-ttu-id="a1c79-223">Tritt auf, wenn das Arbeitsblatt deaktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="a1c79-223">Occurs when the worksheet is deactivated.</span></span>

      <span data-ttu-id="a1c79-224">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-224">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-225">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-225">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.onSelectionChanged
    summary: |-
      <span data-ttu-id="a1c79-226">Tritt auf, wenn sich die Auswahl in einem bestimmten Arbeitsblatt ändert.</span><span class="sxs-lookup"><span data-stu-id="a1c79-226">Occurs when the selection changes on a specific worksheet.</span></span>

      <span data-ttu-id="a1c79-227">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-227">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-228">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-228">Examples</span></span>

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run((context) => {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.pivotTables
    summary: |-
      <span data-ttu-id="a1c79-229">Die Sammlung von PivotTables, die Teil des Arbeitsblatts sind.</span><span class="sxs-lookup"><span data-stu-id="a1c79-229">Collection of PivotTables that are part of the worksheet.</span></span> <span data-ttu-id="a1c79-230">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-230">Read-only.</span></span>

      <span data-ttu-id="a1c79-231">\[[API-Gruppe: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-231">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - excel.Excel.PivotTableCollection
  - uid: excel.Excel.Worksheet.position
    summary: |-
      <span data-ttu-id="a1c79-232">Die nullbasiert Position des Arbeitsblatts in der Arbeitsmappe.</span><span class="sxs-lookup"><span data-stu-id="a1c79-232">The zero-based position of the worksheet within the workbook.</span></span>

      <span data-ttu-id="a1c79-233">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-233">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.protection
    summary: |-
      <span data-ttu-id="a1c79-234">Gibt das Arbeitsblattschutz-Objekt für ein Arbeitsblatt zurück.</span><span class="sxs-lookup"><span data-stu-id="a1c79-234">Returns sheet protection object for a worksheet.</span></span> <span data-ttu-id="a1c79-235">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-235">Read-only.</span></span>

      <span data-ttu-id="a1c79-236">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-236">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - excel.Excel.WorksheetProtection
  - uid: excel.Excel.Worksheet.set
    summary: '<span data-ttu-id="a1c79-237">Legt mehrere Eigenschaften eines Objekts gleichzeitig fest.</span><span class="sxs-lookup"><span data-stu-id="a1c79-237">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="a1c79-238">Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.</span><span class="sxs-lookup"><span data-stu-id="a1c79-238">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="a1c79-239">Diese Methode hat die folgende zusätzliche Signatur:</span><span class="sxs-lookup"><span data-stu-id="a1c79-239">This method has the following additional signature:</span></span>

      `set(properties: Excel.Worksheet): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="a1c79-240">Ein JavaScript-Objekt mit Eigenschaften, die isomorphically für die Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a1c79-240">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - Interfaces.WorksheetUpdateData
        - id: options
          description: '<span data-ttu-id="a1c79-241">Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-241">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Worksheet.set_1
    summary: '<span data-ttu-id="a1c79-242">Legt mehrere Eigenschaften für das Objekt gleichzeitig basierend auf einem vorhandenen geladenen Objekt fest.</span><span class="sxs-lookup"><span data-stu-id="a1c79-242">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Worksheet
  - uid: excel.Excel.Worksheet.showGridlines
    summary: |-
      <span data-ttu-id="a1c79-243">Ruft die Gitternetzlinien-Kennzeichnung des Arbeitsblatts ab, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="a1c79-243">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="a1c79-244">Dieses Flag legt fest, ob Gitternetzlinien für den Benutzer sichtbar sind.</span><span class="sxs-lookup"><span data-stu-id="a1c79-244">This flag determines whether gridlines are visible to the user.</span></span>

      <span data-ttu-id="a1c79-245">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-245">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-246">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-246">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.showHeadings
    summary: |-
      <span data-ttu-id="a1c79-247">Ruft die Überschriftenkennzeichnung des Arbeitsblatts ab, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="a1c79-247">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="a1c79-248">Dieses Flag legt fest, ob die Überschriften für den Benutzer sichtbar sind.</span><span class="sxs-lookup"><span data-stu-id="a1c79-248">This flag determines whether headings are visible to the user.</span></span>

      <span data-ttu-id="a1c79-249">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-249">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Worksheet.standardHeight
    summary: |-
      <span data-ttu-id="a1c79-250">Gibt die Standardhöhe (Standard) aller Zeilen in der Arbeitsmappe in Punkt zurück.</span><span class="sxs-lookup"><span data-stu-id="a1c79-250">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="a1c79-251">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-251">Read-only.</span></span>

      <span data-ttu-id="a1c79-252">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-252">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.standardWidth
    summary: "<span data-ttu-id=\"a1c79-253\">Gibt die Standardbreite (Standard) aller Spalten in der Arbeitsmappe zurück oder legt diese fest.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a1c79-253\">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id=\"a1c79-254\">Eine Einheit der Spaltenbreite entspricht der Breite eines Zeichens im Format Normal.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a1c79-254\">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id=\"a1c79-255\">Für proportionale Schriftarten wird die Breite des Zeichens\_0 (Null) verwendet.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a1c79-255\">For proportional fonts, the width of the character 0 (zero) is used.</span></span>\n\n<span data-ttu-id=\"a1c79-256\">\\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"a1c79-256\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Worksheet.tabColor
    summary: |-
      <span data-ttu-id="a1c79-257">Ruft die Farbe der Registerkarte in der Arbeitsmappe ab oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="a1c79-257">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="a1c79-258">Wenn das Arbeitsblatt unsichtbar ist, wird beim Abrufen der Registerkarten Farbe der Wert NULL.</span><span class="sxs-lookup"><span data-stu-id="a1c79-258">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="a1c79-259">Wenn das Arbeitsblatt zwar sichtbar ist, die Registerkarten Farbe jedoch auf automatisch festgelegt ist, wird eine leere Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="a1c79-259">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="a1c79-260">Andernfalls wird die Eigenschaft auf eine Farbe festgelegt, in der Form "\#123456" beim Festlegen der Farbe, verwenden Sie eine leere Zeichenfolge, um eine "Auto"-Farbe oder eine reale Farbe anders festzulegen.</span><span class="sxs-lookup"><span data-stu-id="a1c79-260">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>

      <span data-ttu-id="a1c79-261">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-261">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a1c79-262">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a1c79-262">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: excel.Excel.Worksheet.tables
    summary: |-
      <span data-ttu-id="a1c79-263">Gibt die Sammlung von Tabellen zurück, die Teil des Arbeitsblatts sind.</span><span class="sxs-lookup"><span data-stu-id="a1c79-263">Collection of tables that are part of the worksheet.</span></span> <span data-ttu-id="a1c79-264">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a1c79-264">Read-only.</span></span>

      <span data-ttu-id="a1c79-265">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-265">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - excel.Excel.TableCollection
  - uid: excel.Excel.Worksheet.toJSON
    summary: '<span data-ttu-id="a1c79-266">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="a1c79-266">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="a1c79-267">.</span><span class="sxs-lookup"><span data-stu-id="a1c79-267"></span></span> <span data-ttu-id="a1c79-268">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="a1c79-268"></span></span><!-- --><span data-ttu-id="a1c79-269">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Excel. Worksheet-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.WorksheetData`</span><span class="sxs-lookup"><span data-stu-id="a1c79-269">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`</span></span><!-- --><span data-ttu-id="a1c79-270">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="a1c79-270">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetData
        description: ''
  - uid: excel.Excel.Worksheet.visibility
    summary: |-
      <span data-ttu-id="a1c79-271">Die Sichtbarkeit des Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="a1c79-271">The Visibility of the worksheet.</span></span>

      <span data-ttu-id="a1c79-272">\[[API-Gruppe: ExcelApi 1,1 zum Lesen der Sichtbarkeit; 1,2 zum festlegen.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="a1c79-272">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="a1c79-273">\]</span><span class="sxs-lookup"><span data-stu-id="a1c79-273"></span></span>
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"