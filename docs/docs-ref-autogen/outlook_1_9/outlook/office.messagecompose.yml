### YamlMime:TSType
name: Office.MessageCompose
uid: outlook!Office.MessageCompose:interface
package: outlook!
fullName: Office.MessageCompose
summary: >-
  Der Nachrichtenerstellmodus von [Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


  **Wichtig:** Dies ist ein internes Outlook Objekt, das nicht direkt über vorhandene Schnittstellen verfügbar gemacht wird. Sie sollten dies als Einen Modus von `Office.context.mailbox.item`<!-- -->. Weitere Informationen finden Sie auf der Seite ["Objektmodell".](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item)


  Übergeordnete Schnittstellen:


  - [ItemCompose](xref:outlook!Office.ItemCompose:interface)


  - [Nachricht](xref:outlook!Office.Message:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: bcc
  uid: outlook!Office.MessageCompose#bcc:member
  package: outlook!
  fullName: bcc
  summary: >-
    Ruft ein Objekt ab, das Methoden zum Abrufen oder Aktualisieren der Empfänger in der **Bcc-Zeile** (Blindkopie) einer Nachricht bereitstellt.


    Je nach Client/Plattform (z. B. Windows, Mac usw.) können Grenzwerte für die Anzahl der Empfänger gelten, die Sie erhalten oder aktualisieren können. Weitere [](xref:outlook!Office.Recipients:interface) Details finden Sie im Recipients-Objekt.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    Office.context.mailbox.item.bcc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.bcc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.bcc.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfBccRecipients = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgBcc = asyncResult.value;
        console.log("Message being blind-copied to:");
        for (var i = 0; i < msgBcc.length; i++) {
          console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml

    var email = $("#emailBcc")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Bcc field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'bcc: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
- name: body
  uid: outlook!Office.MessageCompose#body:member
  package: outlook!
  fullName: body
  summary: >-
    Ruft ein Objekt ab, das Methoden zum Bearbeiten des Textkörpers eines Elements bereitstellt.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'body: Body;'
    return:
      type: <xref uid="outlook!Office.Body:interface" />
- name: categories
  uid: outlook!Office.MessageCompose#categories:member
  package: outlook!
  fullName: categories
  summary: >-
    Ruft ein Objekt ab, das Methoden zum Verwalten der Kategorien des Elements bereitstellt.


    **Wichtig:** In Outlook im Web können Sie die API nicht verwenden, um Kategorien für eine Nachricht im Verfassenmodus zu verwalten.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'categories: Categories;'
    return:
      type: <xref uid="outlook!Office.Categories:interface" />
- name: cc
  uid: outlook!Office.MessageCompose#cc:member
  package: outlook!
  fullName: cc
  summary: >-
    Bietet Zugriff auf die Kopienempfänger (Cc) einer Nachricht. Der Typ des Objekts und die Zugriffsebene hängen vom Modus des aktuellen Elements ab.


    Die `cc`-Eigenschaft gibt ein `Recipients`-Objekt zurück, das Methoden zum Abrufen oder Aktualisieren der Empfänger in der **Cc**-Zeile der Nachricht bereitstellt. Je nach Client/Plattform (d. h. Windows, Mac usw.) gelten jedoch möglicherweise Grenzwerte für die Anzahl der Empfänger, die Sie erhalten oder aktualisieren können. Weitere [](xref:outlook!Office.Recipients:interface) Details finden Sie im Recipients-Objekt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    Office.context.mailbox.item.cc.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.cc.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.cc.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfCcRecipients = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgCc = asyncResult.value;
        console.log("Message being copied to:");
        for (var i = 0; i < msgCc.length; i++) {
          console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml

    var email = $("#emailCc")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting Cc field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'cc: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
- name: conversationId
  uid: outlook!Office.MessageCompose#conversationId:member
  package: outlook!
  fullName: conversationId
  summary: >-
    Ruft einen Bezeichner für die E-Mail-Unterhaltung ab, in der eine bestimmte Nachricht enthalten ist.


    Sie können für diese Eigenschaft eine ganze Zahl abrufen, wenn Ihre Mail-App in Formularen zum Lesen oder Antworten in Formularen zum Verfassen aktiviert wird. Wenn der Benutzer den Betreff der Antwortnachricht ändert, ändert sich beim Versenden die Konversations-ID für die entsprechende Nachricht, und der Wert, den Sie vorher bezogen haben, trifft nicht länger zu.


    Sie erhalten in einem Formular zum Verfassen für diese Eigenschaft für ein neues Element null. Wenn der Benutzer einen Betreff festlegt und das Element speichert, gibt die `conversationId`-Eigenschaft einen Wert zurück.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID: ${Office.context.mailbox.item.conversationId}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'conversationId: string;'
    return:
      type: string
- name: from
  uid: outlook!Office.MessageCompose#from:member
  package: outlook!
  fullName: from
  summary: >-
    Ruft die E-Mail-Adresse des Absenders einer Nachricht ab.


    Die `from` Eigenschaft gibt ein Objekt `From` zurück, das eine Methode zum Abrufen des From-Werts bereitstellt.


    \[[API-Satz: Postfach 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-from-message-compose.yaml

    Office.context.mailbox.item.from.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgFrom = asyncResult.value;
        console.log("Message from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'from: From;'
    return:
      type: <xref uid="outlook!Office.From:interface" />
- name: internetHeaders
  uid: outlook!Office.MessageCompose#internetHeaders:member
  package: outlook!
  fullName: internetHeaders
  summary: >-
    Ruft die benutzerdefinierten Internetkopfzeilen einer Nachricht ab oder legt sie fest.


    Die `internetHeaders` Eigenschaft gibt ein Objekt `InternetHeaders` zurück, das Methoden zum Verwalten der Internetheader für die Nachricht bereitstellt.


    Weitere Informationen finden Sie unter Abrufen und Festlegen von [Internetkopfzeilen in einer Nachricht in einem Outlook-Add-In](https://docs.microsoft.com/office/dev/add-ins/outlook/internet-headers)<!-- -->.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/70-mime-headers/manage-custom-internet-headers-message-compose.yaml

    Office.context.mailbox.item.internetHeaders.getAsync(
      ["x-preferred-fruit", "x-preferred-vegetable", "x-best-vegetable", "x-nonexistent-header"],
      function (asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected headers: " + JSON.stringify(asyncResult.value));
        } else {
          console.log("Error getting selected headers: " + JSON.stringify(asyncResult.error));
        }
      }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'internetHeaders: InternetHeaders;'
    return:
      type: <xref uid="outlook!Office.InternetHeaders:interface" />
- name: itemType
  uid: outlook!Office.MessageCompose#itemType:member
  package: outlook!
  fullName: itemType
  summary: >-
    Ruft den Typ des Elements ab, das eine Instanz darstellt.


    Die `itemType` Eigenschaft gibt einen der Enumerationswerte zurück, der `ItemType` angibt, ob die Elementobjektinstanz eine Nachricht oder ein Termin ist.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemType: MailboxEnums.ItemType | string;'
    return:
      type: <xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string
- name: notificationMessages
  uid: outlook!Office.MessageCompose#notificationMessages:member
  package: outlook!
  fullName: notificationMessages
  summary: >-
    Ruft die Benachrichtigungen für ein Element ab.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`\n\n**[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"progressIndicator\",\n    message: \"Progress indicator with id = \" + id\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Non-persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: false\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: true\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nOffice.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          \n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.replaceAsync(\n  id,\n  {\n    type: \"informationalMessage\",\n    message: \"Notification message with id = \" + id + \" has been replaced with an informational message.\",\n    icon: \"icon2\",\n    persistent: false\n  },\n  handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type: <xref uid="outlook!Office.NotificationMessages:interface" />
- name: seriesId
  uid: outlook!Office.MessageCompose#seriesId:member
  package: outlook!
  fullName: seriesId
  summary: >-
    Ruft die ID der Datenreihe ab, zu der eine Instanz gehört.


    In Outlook im Web- und Desktopclients gibt die `seriesId` Exchange Webdienst-ID (EWS) des übergeordneten Elements (Datenreihe) zurück, zu dem dieses Element gehört. Unter iOS und Android gibt die seriesId jedoch die REST-ID des übergeordneten Elements zurück.


    **Hinweis:** Der von der Eigenschaft zurückgegebene Bezeichner `seriesId` entspricht dem Exchange Webdienste-Elementbezeichner. Die `seriesId` Eigenschaft ist nicht identisch mit den Outlook-IDs, die von der Outlook REST-API verwendet werden. Bevor REST-API-Aufrufe mit diesem Wert ausgeführt werden, sollte er mithilfe von `Office.context.mailbox.convertToRestId`<!-- -->. Weitere Informationen finden Sie unter [Verwenden der Outlook REST-APIs aus einem Outlook-Add-In](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)<!-- -->.


    Die `seriesId` Eigenschaft gibt für Elemente `null` zurück, die keine übergeordneten Elemente haben, z. B. einzelne Termine, Datenreihenelemente oder Besprechungsanfragen, und gibt für alle anderen Elemente zurück, bei denen es sich `undefined` nicht um Besprechungsanfragen handelt.


    \[[API-Satz: Postfach 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'seriesId: string;'
    return:
      type: string
- name: subject
  uid: outlook!Office.MessageCompose#subject:member
  package: outlook!
  fullName: subject
  summary: >-
    Ruft die Beschreibung ab, die im Betrefffeld eines Elements angezeigt wird, oder legt sie fest.


    Die `subject`-Eigenschaft ruft den gesamten Betreff des Elements ab oder legt ihn fest – so, wie er vom E-Mail-Server gesendet wird.


    Die `subject`-Eigenschaft gibt ein `Subject`-Objekt zurück, das Methoden zum Abrufen und Festlegen des Betreffs bereitstellt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subject: Subject;'
    return:
      type: <xref uid="outlook!Office.Subject:interface" />
- name: to
  uid: outlook!Office.MessageCompose#to:member
  package: outlook!
  fullName: to
  summary: >-
    Bietet Zugriff auf die Empfänger in der Zeile **An** einer Nachricht. Der Typ des Objekts und die Zugriffsebene hängen vom Modus des aktuellen Elements ab.


    Die `to`-Eigenschaft gibt ein `Recipients`-Objekt zurück, das Methoden zum Abrufen oder Aktualisieren der Empfänger in der **An**-Zeile der Nachricht bereitstellt. Je nach Client/Plattform (d. h. Windows, Mac usw.) gelten jedoch möglicherweise Grenzwerte für die Anzahl der Empfänger, die Sie erhalten oder aktualisieren können. Weitere [](xref:outlook!Office.Recipients:interface) Details finden Sie im Recipients-Objekt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    Office.context.mailbox.item.to.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.to.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.to.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfToRecipients = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    Office.context.mailbox.item.to.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var msgTo = asyncResult.value;
        console.log("Message being sent to:");
        for (var i = 0; i < msgTo.length; i++) {
          console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml

    var email = $("#emailTo")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting To field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'to: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
methods:
- name: addFileAttachmentAsync(uri, attachmentName, options, callback)
  uid: outlook!Office.MessageCompose#addFileAttachmentAsync:member(1)
  package: outlook!
  fullName: addFileAttachmentAsync(uri, attachmentName, options, callback)
  summary: >-
    Fügt eine Datei zu einer Nachricht oder einem Termin als Anlage hinzu.


    Die `addFileAttachmentAsync`-Methode lädt die Datei am angegebenen URI hoch und fügt sie an das Element im Verfassenformular an.


    Anschließend können Sie den Bezeichner mit der `removeAttachmentAsync`-Methode in der gleichen Sitzung zum Entfernen der Anlage verwenden.


    **Wichtig:** In den letzten Builds von Outlook auf Windows wurde ein Fehler eingeführt, der fälschlicherweise einen Header an diese Aktion anfügt `Authorization: Bearer` (unabhängig davon, ob diese API oder die Outlook Ui verwendet wird). Um dieses Problem zu umgehen, können Sie versuchen, die `addFileAttachmentFromBase64` mit Anforderungssatz 1.8 eingeführte API zu verwenden.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `AttachmentSizeExceeded`<!-- -->: Die Anlage ist größer als zulässig.


    - `FileTypeNotSupported`<!-- -->: Die Anlage verfügt über eine Erweiterung, die nicht zulässig ist.


    - `NumberOfAttachmentsExceeded`<!-- -->: Die Nachricht oder der Termin hat zu viele Anlagen.


    #### <a name="examples"></a>Beispiele


    ```javascript

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        var attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }

    ```

    ```javascript

    // The following example adds an image file as an inline attachment and

    // references the attachment in the message body.

    Office.context.mailbox.item.addFileAttachmentAsync(
        "http://i.imgur.com/WJXklif.png",
        "cute_bird.png",
        {
            isInline: true
        },
        function (asyncResult) {
            Office.context.mailbox.item.body.setAsync(
                "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                {
                    "coercionType": "html"
                },
                function (asyncResult) {
                    // Do something here.
                });
        });
    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: uri
      description: Der URI, der den Speicherort der an die Nachricht oder den Termin anzuhängenden Datei angibt. Die maximale Länge ist 2048 Zeichen.
      type: string
    - id: attachmentName
      description: Der Name der Anlage, der beim Hochladen der Anlage angezeigt wird. Die maximale Länge ist 255 Zeichen.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten. `isInline`<!-- -->: Wenn "true", gibt an, dass die Anlage inline im Nachrichtentext angezeigt wird und nicht in der Anlagenliste angezeigt werden soll.'
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> & { isInline: boolean }'
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Bei Erfolg wird der Anlagenbezeichner in der `asyncResult.value`-Eigenschaft bereitgestellt. Wenn beim Hochladen der Anlage ein Fehler auftritt, enthält das `asyncResult`-Objekt ein `Error`-Objekt mit einer Beschreibung des Fehlers.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addFileAttachmentAsync(uri, attachmentName, callback)
  uid: outlook!Office.MessageCompose#addFileAttachmentAsync:member(2)
  package: outlook!
  fullName: addFileAttachmentAsync(uri, attachmentName, callback)
  summary: >-
    Fügt eine Datei zu einer Nachricht oder einem Termin als Anlage hinzu.


    Die `addFileAttachmentAsync`-Methode lädt die Datei am angegebenen URI hoch und fügt sie an das Element im Verfassenformular an.


    Anschließend können Sie den Bezeichner mit der `removeAttachmentAsync`-Methode in der gleichen Sitzung zum Entfernen der Anlage verwenden.


    **Wichtig:** In den letzten Builds von Outlook auf Windows wurde ein Fehler eingeführt, der fälschlicherweise einen Header an diese Aktion anfügt `Authorization: Bearer` (unabhängig davon, ob diese API oder die Outlook Ui verwendet wird). Um dieses Problem zu umgehen, können Sie versuchen, die `addFileAttachmentFromBase64` mit Anforderungssatz 1.8 eingeführte API zu verwenden.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `AttachmentSizeExceeded`<!-- -->: Die Anlage ist größer als zulässig.


    - `FileTypeNotSupported`<!-- -->: Die Anlage verfügt über eine Erweiterung, die nicht zulässig ist.


    - `NumberOfAttachmentsExceeded`<!-- -->: Die Nachricht oder der Termin hat zu viele Anlagen.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: uri
      description: Der URI, der den Speicherort der an die Nachricht oder den Termin anzuhängenden Datei angibt. Die maximale Länge ist 2048 Zeichen.
      type: string
    - id: attachmentName
      description: Der Name der Anlage, der beim Hochladen der Anlage angezeigt wird. Die maximale Länge ist 255 Zeichen.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Bei Erfolg wird der Anlagenbezeichner in der `asyncResult.value`-Eigenschaft bereitgestellt. Wenn beim Hochladen der Anlage ein Fehler auftritt, enthält das `asyncResult`-Objekt ein `Error`-Objekt mit einer Beschreibung des Fehlers.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)
  uid: outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(1)
  package: outlook!
  fullName: addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)
  summary: >-
    Fügt eine Datei zu einer Nachricht oder einem Termin als Anlage hinzu.


    Die `addFileAttachmentFromBase64Async` Methode lädt die Datei aus der base64-Codierung hoch und fügt sie an das Element im Erstellformular an. Diese Methode gibt den Anlagenbezeichner im `asyncResult.value` Objekt zurück.


    Anschließend können Sie den Bezeichner mit der `removeAttachmentAsync`-Methode in der gleichen Sitzung zum Entfernen der Anlage verwenden.


    **Hinweis:** Wenn Sie eine Daten-URL-API verwenden (z. B. `readAsDataURL`<!-- -->), müssen Sie das Daten-URL-Präfix entfernen und dann den Rest der Zeichenfolge an diese API senden. Wenn z. B. die vollständige Zeichenfolge durch `data:image/svg+xml;base64,<rest of base64 string>`<!-- -->Entfernen `data:image/svg+xml;base64,`<!-- -->.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `AttachmentSizeExceeded`<!-- -->: Die Anlage ist größer als zulässig.


    - `FileTypeNotSupported`<!-- -->: Die Anlage verfügt über eine Erweiterung, die nicht zulässig ist.


    - `NumberOfAttachmentsExceeded`<!-- -->: Die Nachricht oder der Termin hat zu viele Anlagen.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    base64String = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "logo.png",
        { isInline: false },
        function(result) { console.log(result); });
    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    var modIcon1Base64 = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, options: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: base64File
      description: Der base64-codierte Inhalt eines Bilds oder einer Datei, das einer E-Mail oder einem Ereignis hinzugefügt werden soll.
      type: string
    - id: attachmentName
      description: Der Name der Anlage, der beim Hochladen der Anlage angezeigt wird. Die maximale Länge ist 255 Zeichen.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten. `isInline`<!-- -->: Wenn "true", gibt an, dass die Anlage inline im Nachrichtentext angezeigt wird und nicht in der Anlagenliste angezeigt werden soll.'
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> & { isInline: boolean }'
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ Office aufgerufen. Asyncresult. Bei Erfolg wird der Anlagenbezeichner in der `asyncResult.value`-Eigenschaft bereitgestellt. Wenn beim Hochladen der Anlage ein Fehler auftritt, enthält das `asyncResult`-Objekt ein `Error`-Objekt mit einer Beschreibung des Fehlers.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addFileAttachmentFromBase64Async(base64File, attachmentName, callback)
  uid: outlook!Office.MessageCompose#addFileAttachmentFromBase64Async:member(2)
  package: outlook!
  fullName: addFileAttachmentFromBase64Async(base64File, attachmentName, callback)
  summary: >-
    Fügt eine Datei zu einer Nachricht oder einem Termin als Anlage hinzu.


    Die `addFileAttachmentFromBase64Async` Methode lädt die Datei aus der base64-Codierung hoch und fügt sie an das Element im Erstellformular an. Diese Methode gibt den Anlagenbezeichner im `asyncResult.value` Objekt zurück.


    Anschließend können Sie den Bezeichner mit der `removeAttachmentAsync`-Methode in der gleichen Sitzung zum Entfernen der Anlage verwenden.


    **Hinweis:** Wenn Sie eine Daten-URL-API verwenden (z. B. `readAsDataURL`<!-- -->), müssen Sie das Daten-URL-Präfix entfernen und dann den Rest der Zeichenfolge an diese API senden. Wenn z. B. die vollständige Zeichenfolge durch `data:image/svg+xml;base64,<rest of base64 string>`<!-- -->Entfernen `data:image/svg+xml;base64,`<!-- -->.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `AttachmentSizeExceeded`<!-- -->: Die Anlage ist größer als zulässig.


    - `FileTypeNotSupported`<!-- -->: Die Anlage verfügt über eine Erweiterung, die nicht zulässig ist.


    - `NumberOfAttachmentsExceeded`<!-- -->: Die Nachricht oder der Termin hat zu viele Anlagen.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: base64File
      description: Der base64-codierte Inhalt eines Bilds oder einer Datei, das einer E-Mail oder einem Ereignis hinzugefügt werden soll.
      type: string
    - id: attachmentName
      description: Der Name der Anlage, der beim Hochladen der Anlage angezeigt wird. Die maximale Länge ist 255 Zeichen.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ Office aufgerufen. Asyncresult. Bei Erfolg wird der Anlagenbezeichner in der `asyncResult.value`-Eigenschaft bereitgestellt. Wenn beim Hochladen der Anlage ein Fehler auftritt, enthält das `asyncResult`-Objekt ein `Error`-Objekt mit einer Beschreibung des Fehlers.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: outlook!Office.MessageCompose#addHandlerAsync:member(1)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: >-
    Fügt einen Ereignishandler für ein unterstütztes Ereignis hinzu. **Hinweis:** Ereignisse sind nur für die Implementierung des Aufgabenbereichs verfügbar.


    Unterstützte Ereignisse finden Sie im [Abschnitt](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item#events) zu Item-Objektmodellereignissen.<!-- -->.


    \[[API-Satz: Postfach 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            var attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Das Ereignis, das den Handler aufrufen soll
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: Die Funktion, die das Ereignis behandeln soll. Die Funktion muss einen einzigen Parameter akzeptieren (ein Objektliteral). Die `type` Eigenschaft für den Parameter stimmt mit dem Parameter überein, der `eventType` an `addHandlerAsync`<!-- -->.
      type: any
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: outlook!Office.MessageCompose#addHandlerAsync:member(2)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: >-
    Fügt einen Ereignishandler für ein unterstütztes Ereignis hinzu. **Hinweis:** Ereignisse sind nur für die Implementierung des Aufgabenbereichs verfügbar.


    Unterstützte Ereignisse finden Sie im [Abschnitt](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item#events) zu Item-Objektmodellereignissen.<!-- -->.


    \[[API-Satz: Postfach 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Das Ereignis, das den Handler aufrufen soll
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: Die Funktion, die das Ereignis behandeln soll. Die Funktion muss einen einzigen Parameter akzeptieren (ein Objektliteral). Die `type` Eigenschaft für den Parameter stimmt mit dem Parameter überein, der `eventType` an `addHandlerAsync`<!-- -->.
      type: any
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  uid: outlook!Office.MessageCompose#addItemAttachmentAsync:member(1)
  package: outlook!
  fullName: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  summary: >-
    Fügt der Nachricht oder dem Termin ein Exchange-Objekt, wie z. B. eine Nachricht, als Anhang hinzu.


    Die `addItemAttachmentAsync` Methode fügt das Element mit dem angegebenen Exchange Bezeichner an das Element im Erstellformular an. Wenn Sie eine Rückrufmethode angeben, wird die Methode mit einem Parameter aufgerufen. `asyncResult`<!-- -->, die entweder den Anlagenbezeichner oder einen Code enthält, der einen Fehler angibt, der beim Anfügen des Elements aufgetreten ist. Sie können den Optionsparameter verwenden, um Bei Bedarf Statusinformationen an die Rückrufmethode zu übergeben.


    Anschließend können Sie den Bezeichner mit der `removeAttachmentAsync`-Methode in der gleichen Sitzung zum Entfernen der Anlage verwenden.


    Wenn Ihr Office Add-In in Outlook im Web ausgeführt wird, kann die Methode `addItemAttachmentAsync` Elemente an andere Elemente anfügen als an das Element, das Sie gerade bearbeiten. Dies wird jedoch nicht unterstützt und nicht empfohlen.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `NumberOfAttachmentsExceeded`<!-- -->: Die Nachricht oder der Termin hat zu viele Anlagen.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following example adds an existing Outlook item as an attachment

    // with the name `My Attachment`.

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // EWS ID of item to attach (shortened for readability).
        var itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: itemId
      description: Der Exchange-Bezeichner des Objekts, das angehängt werden soll. Die maximale Länge beträgt 100 Zeichen.
      type: any
    - id: attachmentName
      description: Der Name der Anlage, der beim Hochladen der Anlage angezeigt wird. Die maximale Länge ist 255 Zeichen.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Bei Erfolg wird der Anlagenbezeichner in der `asyncResult.value`-Eigenschaft bereitgestellt. Wenn beim Hinzufügen der Anlage ein Fehler auftritt, enthält das `asyncResult`-Objekt ein `Error`-Objekt mit einer Beschreibung des Fehlers.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addItemAttachmentAsync(itemId, attachmentName, callback)
  uid: outlook!Office.MessageCompose#addItemAttachmentAsync:member(2)
  package: outlook!
  fullName: addItemAttachmentAsync(itemId, attachmentName, callback)
  summary: >-
    Fügt der Nachricht oder dem Termin ein Exchange-Objekt, wie z. B. eine Nachricht, als Anhang hinzu.


    Die `addItemAttachmentAsync` Methode fügt das Element mit dem angegebenen Exchange Bezeichner an das Element im Erstellformular an. Wenn Sie eine Rückrufmethode angeben, wird die Methode mit einem Parameter aufgerufen. `asyncResult`<!-- -->, die entweder den Anlagenbezeichner oder einen Code enthält, der einen Fehler angibt, der beim Anfügen des Elements aufgetreten ist. Sie können den Optionsparameter verwenden, um Bei Bedarf Statusinformationen an die Rückrufmethode zu übergeben.


    Anschließend können Sie den Bezeichner mit der `removeAttachmentAsync`-Methode in der gleichen Sitzung zum Entfernen der Anlage verwenden.


    Wenn Ihr Office Add-In in Outlook im Web ausgeführt wird, kann die Methode `addItemAttachmentAsync` Elemente an andere Elemente anfügen als an das Element, das Sie gerade bearbeiten. Dies wird jedoch nicht unterstützt und nicht empfohlen.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `NumberOfAttachmentsExceeded`<!-- -->: Die Nachricht oder der Termin hat zu viele Anlagen.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: itemId
      description: Der Exchange-Bezeichner des Objekts, das angehängt werden soll. Die maximale Länge beträgt 100 Zeichen.
      type: any
    - id: attachmentName
      description: Der Name der Anlage, der beim Hochladen der Anlage angezeigt wird. Die maximale Länge ist 255 Zeichen.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Bei Erfolg wird der Anlagenbezeichner in der `asyncResult.value`-Eigenschaft bereitgestellt. Wenn beim Hinzufügen der Anlage ein Fehler auftritt, enthält das `asyncResult`-Objekt ein `Error`-Objekt mit einer Beschreibung des Fehlers.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: close()
  uid: outlook!Office.MessageCompose#close:member(1)
  package: outlook!
  fullName: close()
  summary: >-
    Schließt das aktuelle Element, das gerade verfasst wird


    Das Verhalten der Close-Methode hängt vom aktuellen Status des zu zusammengestellten Elements ab. Wenn das Element nicht gespeicherte Änderungen enthält, fordert der Client den Benutzer auf, die Aktion zu speichern, zu verwerfen oder zu schließen.


    Wenn die Nachricht eine Inlineantwort ist, hat die Close-Methode im Outlook Desktopclient keine Auswirkung.


    **Hinweis:** In Outlook im Web, wenn das Element ein Termin ist und zuvor mithilfe von`saveAsync`<!-- -->wird der Benutzer aufgefordert, zu speichern, zu verwerfen oder abzubrechen, auch wenn seit dem letzten Speichern des Elements keine Änderungen vorgenommen wurden.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`Restricted`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/close.yaml

    Office.context.mailbox.item.close();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'close(): void;'
    return:
      type: void
      description: ''
- name: getAttachmentContentAsync(attachmentId, options, callback)
  uid: outlook!Office.MessageCompose#getAttachmentContentAsync:member(1)
  package: outlook!
  fullName: getAttachmentContentAsync(attachmentId, options, callback)
  summary: >-
    Ruft eine Anlage aus einer Nachricht oder einem Termin ab und gibt sie als `AttachmentContent` Objekt zurück.


    Die `getAttachmentContentAsync` Methode ruft die Anlage mit dem angegebenen Bezeichner aus dem Element ab. Als bewährte Methode sollten Sie den Bezeichner verwenden, um eine Anlage in derselben Sitzung abzurufen, in der die Anlagen-IDs mit dem oder dem Aufruf abgerufen `getAttachmentsAsync` `item.attachments` wurden. In Outlook im Web und für Mobilgeräte ist die Anlagen-ID nur innerhalb der gleichen Sitzung gültig. Eine Sitzung ist beendet, wenn der Benutzer die App schließt, oder wenn der Benutzer mit dem Verfassen eines Inlineformulars beginnt, wird das Formular anschließend angezeigt, um in einem separaten Fenster fortzufahren.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `AttachmentTypeNotSupported`<!-- -->: Der Anlagentyp wird nicht unterstützt. Nicht unterstützte Typen umfassen eingebettete Bilder im Rich-Text-Format oder Andere Elementanlagentypen als E-Mail- oder Kalenderelemente (z. B. einen Kontakt oder ein Aufgabenelement).


    - `InvalidAttachmentId`<!-- -->: Der Anlagenbezeichner ist nicht vorhanden.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentContentAsync(attachmentId: string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
    parameters:
    - id: attachmentId
      description: Der Bezeichner der Anlage, die Sie abrufen möchten.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt. Wenn der Aufruf fehlschlägt, enthält die `asyncResult.error` Eigenschaft einen Fehlercode mit dem Grund für den Fehler.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentContent:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentContentAsync(attachmentId, callback)
  uid: outlook!Office.MessageCompose#getAttachmentContentAsync:member(2)
  package: outlook!
  fullName: getAttachmentContentAsync(attachmentId, callback)
  summary: >-
    Ruft eine Anlage aus einer Nachricht oder einem Termin ab und gibt sie als `AttachmentContent` Objekt zurück.


    Die `getAttachmentContentAsync` Methode ruft die Anlage mit dem angegebenen Bezeichner aus dem Element ab. Als bewährte Methode sollten Sie den Bezeichner verwenden, um eine Anlage in derselben Sitzung abzurufen, in der die Anlagen-IDs mit dem oder dem Aufruf abgerufen `getAttachmentsAsync` `item.attachments` wurden. In Outlook im Web und für Mobilgeräte ist die Anlagen-ID nur innerhalb der gleichen Sitzung gültig. Eine Sitzung ist beendet, wenn der Benutzer die App schließt, oder wenn der Benutzer mit dem Verfassen eines Inlineformulars beginnt, wird das Formular anschließend angezeigt, um in einem separaten Fenster fortzufahren.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `AttachmentTypeNotSupported`<!-- -->: Der Anlagentyp wird nicht unterstützt. Nicht unterstützte Typen umfassen eingebettete Bilder im Rich-Text-Format oder Andere Elementanlagentypen als E-Mail- oder Kalenderelemente (z. B. einen Kontakt oder ein Aufgabenelement).


    - `InvalidAttachmentId`<!-- -->: Der Anlagenbezeichner ist nicht vorhanden.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentContentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
    parameters:
    - id: attachmentId
      description: Der Bezeichner der Anlage, die Sie abrufen möchten.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt. Wenn der Aufruf fehlschlägt, enthält die `asyncResult.error` Eigenschaft einen Fehlercode mit dem Grund für den Fehler.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentContent:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentsAsync(options, callback)
  uid: outlook!Office.MessageCompose#getAttachmentsAsync:member(1)
  package: outlook!
  fullName: getAttachmentsAsync(options, callback)
  summary: >-
    Ruft die Anlagen des Elements als Array ab.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (var i = 0; i < result.value.length; i++) {
                    var attachment = result.value[i];
                    console.log(`${attachment.id}. Name: ${attachment.name}, size: ${attachment.size}, isInline: ${attachment.isInline}`);
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentsAsync(options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentDetailsCompose[]>) => void): void;'
    parameters:
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Wenn der Aufruf fehlschlägt, enthält die `asyncResult.error` Eigenschaft einen Fehlercode mit dem Grund für den Fehler.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentDetailsCompose:interface" />[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentsAsync(callback)
  uid: outlook!Office.MessageCompose#getAttachmentsAsync:member(2)
  package: outlook!
  fullName: getAttachmentsAsync(callback)
  summary: >-
    Ruft die Anlagen des Elements als Array ab.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentsAsync(callback?: (asyncResult: Office.AsyncResult<AttachmentDetailsCompose[]>) => void): void;'
    parameters:
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Wenn der Aufruf fehlschlägt, enthält die `asyncResult.error` Eigenschaft einen Fehlercode mit dem Grund für den Fehler.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentDetailsCompose:interface" />[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getItemIdAsync(options, callback)
  uid: outlook!Office.MessageCompose#getItemIdAsync:member(1)
  package: outlook!
  fullName: getItemIdAsync(options, callback)
  summary: >-
    Ruft asynchron die ID eines gespeicherten Elements ab.


    Wenn sie aufgerufen wird, gibt diese Methode die Element-ID über die Rückrufmethode zurück.


    **Hinweis:** Wenn Ihr Add-In ein Element im Verfassenmodus aufruft (z. B. `getItemIdAsync` um eine Verwendung mit `itemId` EWS oder der REST-API zu erhalten), beachten Sie, dass es einige Zeit dauern kann, bis das Element mit dem Server synchronisiert wird, wenn sich Outlook im Cachemodus befindet. Bis das Element synchronisiert wird, wird es `itemId` nicht erkannt, und die Verwendung gibt einen Fehler zurück.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `ItemNotSaved`<!-- -->: Die ID kann erst abgerufen werden, wenn das Element gespeichert wurde.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemIdAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getItemIdAsync(callback)
  uid: outlook!Office.MessageCompose#getItemIdAsync:member(2)
  package: outlook!
  fullName: getItemIdAsync(callback)
  summary: >-
    Ruft asynchron die ID eines gespeicherten Elements ab.


    Wenn sie aufgerufen wird, gibt diese Methode die Element-ID über die Rückrufmethode zurück.


    **Hinweis:** Wenn Ihr Add-In ein Element im Verfassenmodus aufruft (z. B. `getItemIdAsync` um eine Verwendung mit `itemId` EWS oder der REST-API zu erhalten), beachten Sie, dass es einige Zeit dauern kann, bis das Element mit dem Server synchronisiert wird, wenn sich Outlook im Cachemodus befindet. Bis das Element synchronisiert wird, wird es `itemId` nicht erkannt, und die Verwendung gibt einen Fehler zurück.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `ItemNotSaved`<!-- -->: Die ID kann erst abgerufen werden, wenn das Element gespeichert wurde.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml

    Office.context.mailbox.item.getItemIdAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`getItemIdAsync failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemIdAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedDataAsync(coercionType, options, callback)
  uid: outlook!Office.MessageCompose#getSelectedDataAsync:member(1)
  package: outlook!
  fullName: getSelectedDataAsync(coercionType, options, callback)
  summary: >-
    Gibt asynchron ausgewählte Daten aus dem Betreff oder Textkörper einer Nachricht zurück.


    Wenn keine Auswahl vorhanden ist, aber der Cursor sich im Nachrichtentext oder Betreff befindet, gibt die Methode für die ausgewählten Daten eine leere Zeichenfolge zurück. Wenn ein anderes Feld als der Textkörper oder Betreff ausgewählt ist, gibt die Methode den `InvalidSelection`-Fehler zurück.


    Um über die Rückrufmethode auf die ausgewählten Daten zuzugreifen, rufen Sie `asyncResult.value.data`<!-- -->. Um auf die Quelleigenschaft zuzugreifen, aus der die Auswahl stammt, rufen Sie `asyncResult.value.sourceProperty`<!-- -->, die entweder `body` oder `subject`<!-- -->.


    \[[API-Satz: Postfach 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Get selected data.

    Office.initialize = function () {
        Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
    };


    function getCallback(asyncResult) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;

        console.log("Selected text in " + prop + ": " + text);
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
    parameters:
    - id: coercionType
      description: Fordert ein Format für die Daten an. Wenn `Text`<!-- -->gibt die Methode den Nur-Text als Zeichenfolge zurück, wobei alle vorhandenen HTML-Tags entfernt werden. Wenn `Html`<!-- -->gibt den markierten Text zurück, unabhängig davon, ob es sich um Nur-Text oder HTML handelt.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: Die ausgewählten Daten als Zeichenfolge, deren Format durch `coercionType`<!-- -->.
- name: getSelectedDataAsync(coercionType, callback)
  uid: outlook!Office.MessageCompose#getSelectedDataAsync:member(2)
  package: outlook!
  fullName: getSelectedDataAsync(coercionType, callback)
  summary: >-
    Gibt asynchron ausgewählte Daten aus dem Betreff oder Textkörper einer Nachricht zurück.


    Wenn keine Auswahl vorhanden ist, aber der Cursor sich im Nachrichtentext oder Betreff befindet, gibt die Methode für die ausgewählten Daten eine leere Zeichenfolge zurück. Wenn ein anderes Feld als der Textkörper oder Betreff ausgewählt ist, gibt die Methode den `InvalidSelection`-Fehler zurück.


    Um über die Rückrufmethode auf die ausgewählten Daten zuzugreifen, rufen Sie `asyncResult.value.data`<!-- -->. Um auf die Quelleigenschaft zuzugreifen, aus der die Auswahl stammt, rufen Sie `asyncResult.value.sourceProperty`<!-- -->, die entweder `body` oder `subject`<!-- -->.


    \[[API-Satz: Postfach 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
    parameters:
    - id: coercionType
      description: Fordert ein Format für die Daten an. Wenn `Text`<!-- -->gibt die Methode den Nur-Text als Zeichenfolge zurück, wobei alle vorhandenen HTML-Tags entfernt werden. Wenn `Html`<!-- -->gibt den markierten Text zurück, unabhängig davon, ob es sich um Nur-Text oder HTML handelt.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: Die ausgewählten Daten als Zeichenfolge, deren Format durch `coercionType`<!-- -->.
- name: getSharedPropertiesAsync(options, callback)
  uid: outlook!Office.MessageCompose#getSharedPropertiesAsync:member(1)
  package: outlook!
  fullName: getSharedPropertiesAsync(options, callback)
  summary: >-
    Ruft die Eigenschaften eines Termins oder einer Nachricht in einem freigegebenen Ordner ab.


    Weitere Informationen zur Verwendung dieser API finden Sie im Artikel zum [Stellvertretungszugriff.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **Wichtig:** Im Nachrichten verfassen-Modus wird diese API in Outlook im Web oder auf Windows nicht unterstützt, es sei denn, die folgenden Bedingungen sind erfüllt.


    1. Der Postfachbesitzer startet eine Nachricht. Dies kann eine neue Nachricht, eine Antwort oder eine Weiterleitung sein.


    2. Sie speichern die Nachricht und verschieben sie dann aus ihrem eigenen Ordner **"Entwürfe"** in einen Ordner, der für den Delegaten freigegeben wurde.


    3. Der Delegat öffnet den Entwurf aus dem freigegebenen Ordner und setzt dann die Erstellung fort.


    Die Nachricht befindet sich jetzt in einem freigegebenen Kontext, und Add-Ins, die diese freigegebenen Szenarien unterstützen, können die freigegebenen Eigenschaften des Elements abrufen. Nachdem die Nachricht gesendet wurde, wird sie in der Regel im Ordner **"Gesendete Elemente"** des Absenders gefunden.


    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on a message from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die Eigenschaft des freigegebenen Elements.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSharedPropertiesAsync(callback)
  uid: outlook!Office.MessageCompose#getSharedPropertiesAsync:member(2)
  package: outlook!
  fullName: getSharedPropertiesAsync(callback)
  summary: >-
    Ruft die Eigenschaften eines Termins oder einer Nachricht in einem freigegebenen Ordner ab.


    Weitere Informationen zur Verwendung dieser API finden Sie im Artikel zum [Stellvertretungszugriff.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **Wichtig:** Im Nachrichten verfassen-Modus wird diese API in Outlook im Web oder auf Windows nicht unterstützt, es sei denn, die folgenden Bedingungen sind erfüllt.


    1. Der Postfachbesitzer startet eine Nachricht. Dies kann eine neue Nachricht, eine Antwort oder eine Weiterleitung sein.


    2. Sie speichern die Nachricht und verschieben sie dann aus ihrem eigenen Ordner **"Entwürfe"** in einen Ordner, der für den Delegaten freigegeben wurde.


    3. Der Delegat öffnet den Entwurf aus dem freigegebenen Ordner und setzt dann die Erstellung fort.


    Die Nachricht befindet sich jetzt in einem freigegebenen Kontext, und Add-Ins, die diese freigegebenen Szenarien unterstützen, können die freigegebenen Eigenschaften des Elements abrufen. Nachdem die Nachricht gesendet wurde, wird sie in der Regel im Ordner **"Gesendete Elemente"** des Absenders gefunden.


    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die Eigenschaft des freigegebenen Elements.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: loadCustomPropertiesAsync(callback, userContext)
  uid: outlook!Office.MessageCompose#loadCustomPropertiesAsync:member(1)
  package: outlook!
  fullName: loadCustomPropertiesAsync(callback, userContext)
  summary: >-
    Lädt asynchron benutzerdefinierte Eigenschaften für dieses Add-In für das ausgewählte Element.


    Benutzerdefinierte Eigenschaften werden als Schlüssel-/Wert-Paare pro App und pro Element gespeichert. Diese Methode gibt ein `CustomProperties`-Objekt im Rückruf zurück, das Methoden für den Zugriff auf die benutzerdefinierten Eigenschaften für das aktuelle Element und das aktuelle Add-In bietet. Benutzerdefinierte Eigenschaften sind für das Element nicht verschlüsselt und sollten darum nicht als sicherer Speicher verwendet werden.


    Die benutzerdefinierten Eigenschaften werden `CustomProperties` in der Eigenschaft asyncResult.value als Objekt bereitgestellt. Dieses Objekt kann verwendet werden, um benutzerdefinierte Eigenschaften aus dem Element abzurufen, festzulegen und zu entfernen und um Änderungen am benutzerdefinierten Eigenschaftssatz wieder auf dem Server zu speichern.
  remarks: "**[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`\n\n**[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example shows how to use the loadCustomPropertiesAsync method\n// to asynchronously load custom properties that are specific to the current item.\n// The example also shows how to use the saveAsync method to save these properties\n// back to the server. After loading the custom properties, the example uses the\n// get method to read the custom property myProp, the set method to write the\n// custom property otherProp, and then finally calls the saveAsync method to save\n// the custom properties.\nOffice.initialize = function () {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n        // After the DOM is loaded, add-in-specific code can run.\n        var mailbox = Office.context.mailbox;\n        mailbox.item.loadCustomPropertiesAsync(customPropsCallback);\n    });\n};\n\nfunction customPropsCallback(asyncResult) {\n    var customProps = asyncResult.value;\n    var myProp = customProps.get(\"myProp\");\n\n    customProps.set(\"otherProp\", \"value\");\n    customProps.saveAsync(saveCallback);\n}\n\nfunction saveCallback(asyncResult) {\n}\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml\nOffice.context.mailbox.item.loadCustomPropertiesAsync(function (result) {\n  if (result.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Loaded following custom properties:\");\n    customProps = result.value;\n    var dataKey = Object.keys(customProps)[0];\n    var data = customProps[dataKey];\n    for (var propertyName in data)\n    {\n      var propertyValue = data[propertyName];\n      console.log(`${propertyName}: ${propertyValue}`);\n    }              \n  }\n  else {\n    console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);\n  }\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void'
    - id: userContext
      description: Optional. Entwickler können ein beliebiges Objekt bereitstellen, auf das sie in der Callbackfunktion zugreifen möchten. Der Zugriff auf dieses Objekt kann über die `asyncResult.asyncContext`-Eigenschaft in der Callbackfunktion erfolgen.
      type: any
    return:
      type: void
      description: ''
- name: removeAttachmentAsync(attachmentId, options, callback)
  uid: outlook!Office.MessageCompose#removeAttachmentAsync:member(1)
  package: outlook!
  fullName: removeAttachmentAsync(attachmentId, options, callback)
  summary: >-
    Entfernt eine Anlage aus einer Nachricht oder einem Termin.


    Die `removeAttachmentAsync`-Methode entfernt die Anlage mit dem angegebenen Bezeichner aus dem Element. Als bewährte Vorgehensweise sollten Sie den Anlagenbezeichner nur dann zum Entfernen einer Anlage verwenden, wenn die gleiche Mail-App die Anlage in der gleichen Sitzung hinzugefügt hat. In Outlook im Web und für Mobilgeräte ist die Anlagen-ID nur innerhalb der gleichen Sitzung gültig. Eine Sitzung ist beendet, wenn der Benutzer die App schließt, oder wenn der Benutzer mit dem Verfassen eines Inlineformulars beginnt, wird das Formular anschließend angezeigt, um in einem separaten Fenster fortzufahren.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `InvalidAttachmentId`<!-- -->: Der Anlagenbezeichner ist nicht vorhanden.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code removes an attachment with an identifier of '0'.

    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: attachmentId
      description: Der Bezeichner der zu entfernenden Anlage. Die maximale Zeichenfolgenlänge von `attachmentId` 200 Zeichen in Outlook im Web und auf Windows.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Wenn beim Entfernen der Anlage ein Fehler auftritt, enthält die Eigenschaft `asyncResult.error` einen Fehlercode mit dem Grund für den Fehler.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeAttachmentAsync(attachmentId, callback)
  uid: outlook!Office.MessageCompose#removeAttachmentAsync:member(2)
  package: outlook!
  fullName: removeAttachmentAsync(attachmentId, callback)
  summary: >-
    Entfernt eine Anlage aus einer Nachricht oder einem Termin.


    Die `removeAttachmentAsync`-Methode entfernt die Anlage mit dem angegebenen Bezeichner aus dem Element. Als bewährte Vorgehensweise sollten Sie den Anlagenbezeichner nur dann zum Entfernen einer Anlage verwenden, wenn die gleiche Mail-App die Anlage in der gleichen Sitzung hinzugefügt hat. In Outlook im Web und für Mobilgeräte ist die Anlagen-ID nur innerhalb der gleichen Sitzung gültig. Eine Sitzung ist beendet, wenn der Benutzer die App schließt, oder wenn der Benutzer mit dem Verfassen eines Inlineformulars beginnt, wird das Formular anschließend angezeigt, um in einem separaten Fenster fortzufahren.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `InvalidAttachmentId`<!-- -->: Der Anlagenbezeichner ist nicht vorhanden.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: attachmentId
      description: Der Bezeichner der zu entfernenden Anlage. Die maximale Zeichenfolgenlänge von `attachmentId` 200 Zeichen in Outlook im Web und auf Windows.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Wenn beim Entfernen der Anlage ein Fehler auftritt, enthält die Eigenschaft `asyncResult.error` einen Fehlercode mit dem Grund für den Fehler.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: outlook!Office.MessageCompose#removeHandlerAsync:member(1)
  package: outlook!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: >-
    Entfernt die Ereignishandler für einen unterstützten Ereignistyp. **Hinweis:** Ereignisse sind nur für die Implementierung des Aufgabenbereichs verfügbar.


    Unterstützte Ereignisse finden Sie im [Abschnitt](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item#events) zu Item-Objektmodellereignissen.<!-- -->.


    \[[API-Satz: Postfach 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Das Ereignis, das den Handler widerrufen soll.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: outlook!Office.MessageCompose#removeHandlerAsync:member(2)
  package: outlook!
  fullName: removeHandlerAsync(eventType, callback)
  summary: >-
    Entfernt die Ereignishandler für einen unterstützten Ereignistyp. **Hinweis:** Ereignisse sind nur für die Implementierung des Aufgabenbereichs verfügbar.


    Unterstützte Ereignisse finden Sie im [Abschnitt](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox.item#events) zu Item-Objektmodellereignissen.<!-- -->.


    \[[API-Satz: Postfach 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Das Ereignis, das den Handler widerrufen soll.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: saveAsync(options, callback)
  uid: outlook!Office.MessageCompose#saveAsync:member(1)
  package: outlook!
  fullName: saveAsync(options, callback)
  summary: >-
    Speicher asynchron ein Element. .


    Beim Aufrufen speichert diese Methode die aktuelle Nachricht als Entwurf und gibt die Element-ID über die Rückrufmethode zurück. In Outlook im Web oder Outlook im Onlinemodus wird das Element auf dem Server gespeichert. In Outlook im Cache-Modus wird das Element im lokalen Cache gespeichert.


    Da Termine keinen Entwurfsstatus haben, wird das Element bei Aufruf von `saveAsync` für einen Termin im Verfassenmodus als normaler Termin im Kalender des Benutzers gespeichert. Für neue Termine, die noch nicht gespeichert wurden, wird keine Einladung gesendet. Beim Speichern eines vorhandenen Termins wird eine Aktualisierung an die hinzugefügten oder entfernten Teilnehmer gesendet.


    **Hinweis:** Wenn Ihr Add-In ein Element im Verfassenmodus aufruft, `saveAsync` um eine Element-ID für die Verwendung mit EWS oder der REST-API abzurufen, beachten Sie, dass es einige Zeit dauern kann, bis das Element tatsächlich mit dem Server synchronisiert wird, wenn sich Outlook im Cachemodus befindet. Bis das Element synchronisiert wird, gibt die Verwendung der itemId einen Fehler zurück.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `InvalidAttachmentId`<!-- -->: Der Anlagenbezeichner ist nicht vorhanden.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: saveAsync(callback)
  uid: outlook!Office.MessageCompose#saveAsync:member(2)
  package: outlook!
  fullName: saveAsync(callback)
  summary: >-
    Speicher asynchron ein Element. .


    Beim Aufrufen speichert diese Methode die aktuelle Nachricht als Entwurf und  gibt die Element-ID über die Callbackmethode zurück. In Outlook im Web oder Outlook im Onlinemodus wird das Element auf dem Server gespeichert. In Outlook im Cache-Modus wird das Element im lokalen Cache gespeichert.


    Da Termine keinen Entwurfsstatus haben, wird das Element bei Aufruf von `saveAsync` für einen Termin im Verfassenmodus als normaler Termin im Kalender des Benutzers gespeichert. Für neue Termine, die noch nicht gespeichert wurden, wird keine Einladung gesendet. Beim Speichern eines vorhandenen Termins wird eine Aktualisierung an die hinzugefügten oder entfernten Teilnehmer gesendet.


    **Hinweis:** Wenn Ihr Add-In ein Element im Verfassenmodus aufruft, `saveAsync` um eine Element-ID für die Verwendung mit EWS oder der REST-API abzurufen, beachten Sie, dass es einige Zeit dauern kann, bis das Element tatsächlich mit dem Server synchronisiert wird, wenn sich Outlook im Cachemodus befindet. Bis das Element synchronisiert ist, wird durch Verwendung von `itemId` ein Fehler zurückgegeben.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `InvalidAttachmentId`<!-- -->: Der Anlagenbezeichner ist nicht vorhanden.


    #### <a name="examples"></a>Beispiele


    ```javascript

    Office.context.mailbox.item.saveAsync(
        function callback(result) {
            // Process the result.
        });

    // The following is an example of the

    // `result` parameter passed to the

    // callback function. The `value`

    // property contains the item ID of

    // the item.

    {
        "value": "AAMkADI5...AAA=",
        "status": "succeeded"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, options, callback)
  uid: outlook!Office.MessageCompose#setSelectedDataAsync:member(1)
  package: outlook!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: >-
    Fügt asynchron Daten in den Textkörper oder Betreff einer Nachricht ein.


    Die `setSelectedDataAsync`-Methode fügt die angegebene Zeichenfolge an der Cursorposition im Betreff oder im Textkörper ein, oder, falls im Editor Text ausgewählt ist, ersetzt den markierten Text. Wenn sich der Cursor nicht im Textkörper oder im Betreffsfeld befindet, wird ein Fehler zurückgegeben. Nach dem Einfügen wird der Cursor am Ende der eingefügten Inhalte platziert.


    \[[API-Satz: Postfach 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `InvalidAttachmentId`<!-- -->: Der Anlagenbezeichner ist nicht vorhanden.


    #### <a name="examples"></a>Beispiele


    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });

    ```

    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("Hello World!");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/set-selected-data.yaml

    Office.context.mailbox.item.setSelectedDataAsync("Replaced", function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Selected text has been updated successfully.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die einzufügenden Daten. Daten dürfen 1.000.000 Zeichen nicht überschreiten. Werden mehr als 1.000.000 Zeichen übergeben, wird eine `ArgumentOutOfRange`-Ausnahme ausgelöst.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten. `coercionType`<!-- -->: Wenn Text verwendet wird, wird die aktuelle Formatvorlage in Outlook im Web- und Desktopclients angewendet. Wenn das Feld ein HTML-Editor ist, werden nur die Textdaten eingefügt, selbst wenn es sich bei den Daten um HTML-Daten handelt. Wenn HTML und das Feld HTML unterstützt (der Betreff nicht), wird die aktuelle Formatvorlage in Outlook im Web und die Standardformatvorlage in Outlook auf Desktopclients angewendet. Ist das Feld ein Textfeld, wird ein Fehler des Typs `InvalidDataFormat` zurückgegeben. Wenn `coercionType` nicht festgelegt wird, hängt das Ergebnis vom Feld ab: Wenn das Feld HTML ist, wird HTML verwendet. Wenn das Feld Text ist, wird Nur-Text verwendet.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, callback)
  uid: outlook!Office.MessageCompose#setSelectedDataAsync:member(2)
  package: outlook!
  fullName: setSelectedDataAsync(data, callback)
  summary: >-
    Fügt asynchron Daten in den Textkörper oder Betreff einer Nachricht ein.


    Die `setSelectedDataAsync`-Methode fügt die angegebene Zeichenfolge an der Cursorposition im Betreff oder im Textkörper ein, oder, falls im Editor Text ausgewählt ist, ersetzt den markierten Text. Wenn sich der Cursor nicht im Textkörper oder im Betreffsfeld befindet, wird ein Fehler zurückgegeben. Nach dem Einfügen wird der Cursor am Ende der eingefügten Inhalte platziert.


    \[[API-Satz: Postfach 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen von Nachrichten


    **Fehler:**


    - `InvalidAttachmentId`<!-- -->: Der Anlagenbezeichner ist nicht vorhanden.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die einzufügenden Daten. Daten dürfen 1.000.000 Zeichen nicht überschreiten. Werden mehr als 1.000.000 Zeichen übergeben, wird eine `ArgumentOutOfRange`-Ausnahme ausgelöst.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
extends: <xref uid="outlook!Office.Message:interface" />
metadata:
  ms.openlocfilehash: f0d613a03b05b6d26c18254f131e719cf1b765a0
  ms.sourcegitcommit: 319b8cca7d91e51669407633dacc02ea6e4f4338
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 06/18/2021
  ms.locfileid: "53010016"
