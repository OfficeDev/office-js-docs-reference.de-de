### YamlMime:TSType
name: Office.Mailbox
uid: outlook!Office.Mailbox:interface
package: outlook!
fullName: Office.Mailbox
summary: >-
  Bietet Zugriff auf das Microsoft Outlook-Add-In-Objektmodell.


  Wichtige Eigenschaften:


  - `diagnostics`<!-- -->: Stellt Diagnoseinformationen für ein Outlook-Add-In bereit.


  - `item`<!-- -->: Stellt Methoden und Eigenschaften für den Zugriff auf eine Nachricht oder einen Termin in einem Outlook-Add-In bereit.


  - `userProfile`<!-- -->: Stellt Informationen über den Benutzer in einem Outlook-Add-In bereit.
remarks: >-
  **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`Restricted`


  **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
isPreview: false
isDeprecated: false
type: interface
properties:
- name: diagnostics
  uid: outlook!Office.Mailbox#diagnostics:member
  package: outlook!
  fullName: diagnostics
  summary: >-
    Stellt einem Outlook-Add-In Diagnoseinformationen bereit.


    Enthält die folgenden Elemente:


    - `hostName` (Zeichenfolge): Eine Zeichenfolge, die den Namen der Hostanwendung darstellt. Es sollte einer der folgenden Werte sein: `Outlook`<!-- -->, `OutlookWebApp`<!-- -->, `OutlookIOS`<!-- -->Oder `OutlookAndroid`<!-- -->. **Hinweis:** Der Wert "Outlook" wird für Outlook auf Desktopclients (d. h. Windows und Mac) zurückgegeben.


    - `hostVersion`(Zeichenfolge): Eine Zeichenfolge, die die Version der Hostanwendung oder der Exchange Server darstellt (z. B. "15.0.468.0"). Wenn das Mail-Add-In in Outlook auf Desktopclients oder mobilen Clients ausgeführt wird, gibt die `hostVersion` Eigenschaft die Version der Hostanwendung Outlook zurück. In Outlook im Web gibt die Eigenschaft die Version des Exchange Server zurück.


    - `OWAView`( `MailboxEnums.OWAView` oder Zeichenfolge): Eine Enumeration (oder ein Zeichenfolgenliteral), die die aktuelle Ansicht von Outlook im Web darstellt. Wenn die Hostanwendung nicht im Web Outlook ist, führt der Zugriff auf diese Eigenschaft zu undefiniert. Outlook im Web verfügt über drei Ansichten ( `OneColumn` – wird angezeigt, wenn der Bildschirm schmal ist, `TwoColumns` – wird angezeigt, wenn der Bildschirm breiter ist, und `ThreeColumns` – angezeigt, wenn der Bildschirm breit ist), die der Breite des Bildschirms und des Fensters sowie der Anzahl der Spalten entsprechen, die angezeigt werden können.


    Weitere Informationen sind unter [Office. Diagnose](xref:outlook!Office.Diagnostics:interface)<!-- -->.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'diagnostics: Diagnostics;'
    return:
      type: <xref uid="outlook!Office.Diagnostics:interface" />
- name: ewsUrl
  uid: outlook!Office.Mailbox#ewsUrl:member
  package: outlook!
  fullName: ewsUrl
  summary: >-
    Ruft die URL des EWS-Endpunkts (Exchange Web Services) für dieses E-Mail-Konto ab. Nur Lesemodus.


    Ihre App muss über die `ReadItem` im Manifest angegebene Berechtigung verfügen, um das Mitglied im Lesemodus aufzurufen. `ewsUrl`


    Im Verfassenmodus müssen Sie die `saveAsync`-Methode aufrufen, bevor Sie das `ewsUrl`-Element verwenden können. Ihre App muss `ReadWriteItem` über Berechtigungen zum Aufrufen der Methode `saveAsync` verfügen.


    **Hinweis:** Dieses Mitglied wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    Der `ewsUrl` Wert kann von einem Remotedienst verwendet werden, um EWS-Aufrufe an das Postfach des Benutzers auszuführen. Sie können z. B. einen Remotedienst erstellen, um [Anlagen aus dem ausgewählten Element abzurufen.](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ewsUrl: string;'
    return:
      type: string
- name: item
  uid: outlook!Office.Mailbox#item:member
  package: outlook!
  fullName: item
  summary: >-
    Das Postfachelement. Je nach Kontext, in dem das Add-In geöffnet wurde, kann der Elementtyp variieren. Wenn Sie IntelliSense nur für einen bestimmten Typ oder Modus anzeigen möchten, wandeln Sie dieses Element in einen der folgenden Elemente um:


    [MessageCompose](xref:outlook!Office.MessageCompose:interface)<!-- -->, [MessageRead](xref:outlook!Office.MessageRead:interface)<!-- -->, [AppointmentCompose](xref:outlook!Office.AppointmentCompose:interface)<!-- -->, [AppointmentRead](xref:outlook!Office.AppointmentRead:interface)


    **Wichtig:** `item` Kann NULL sein, wenn Ihr Add-In das Anheften des Aufgabenbereichs unterstützt. Ausführliche Informationen zur Handhabung finden Sie unter [Implementieren eines anheftbaren Aufgabenbereichs in Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/pinnable-taskpane#implement-the-event-handler)<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'item?: Item & ItemCompose & ItemRead & Message & MessageCompose & MessageRead & Appointment & AppointmentCompose & AppointmentRead;'
    return:
      type: <xref uid="outlook!Office.Item:interface" /> & <xref uid="outlook!Office.ItemCompose:interface" /> & <xref uid="outlook!Office.ItemRead:interface" /> & <xref uid="outlook!Office.Message:interface" /> & <xref uid="outlook!Office.MessageCompose:interface" /> & <xref uid="outlook!Office.MessageRead:interface" /> & <xref uid="outlook!Office.Appointment:interface" /> & <xref uid="outlook!Office.AppointmentCompose:interface" /> & <xref uid="outlook!Office.AppointmentRead:interface" />
- name: masterCategories
  uid: outlook!Office.Mailbox#masterCategories:member
  package: outlook!
  fullName: masterCategories
  summary: >-
    Ruft ein Objekt ab, das Methoden zum Verwalten der Kategorienmasterliste bereitstellt, die einem Postfach zugeordnet ist.


    \[[API-Satz: Postfach 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteMailbox`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Master categories:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories in the master list.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    var masterCategoriesToAdd = [
      {
        displayName: "TestCategory",
        color: Office.MailboxEnums.CategoryColor.Preset0
      }
    ];


    Office.context.mailbox.masterCategories.addAsync(masterCategoriesToAdd, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully added categories to master list");
      } else {
        console.log("masterCategories.addAsync call failed with error: " + asyncResult.error.message);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-master-categories.yaml

    var masterCategoriesToRemove = ["TestCategory"];


    Office.context.mailbox.masterCategories.removeAsync(masterCategoriesToRemove, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Successfully removed categories from master list");
      } else {
        console.log("masterCategories.removeAsync call failed with error: " + asyncResult.error.message);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'masterCategories: MasterCategories;'
    return:
      type: <xref uid="outlook!Office.MasterCategories:interface" />
- name: restUrl
  uid: outlook!Office.Mailbox#restUrl:member
  package: outlook!
  fullName: restUrl
  summary: >-
    Ruft die URL des REST-Endpunkts für das betreffende E-Mail-Konto ab.


    Ihre App muss über die `ReadItem` im Manifest angegebene Berechtigung verfügen, um das Mitglied im Lesemodus aufzurufen. `restUrl`


    Im Verfassenmodus müssen Sie die `saveAsync`-Methode aufrufen, bevor Sie das `restUrl`-Element verwenden können. Ihre App muss `ReadWriteItem` über Berechtigungen zum Aufrufen der Methode `saveAsync` verfügen.


    In Stellvertretungs- oder freigegebenen Szenarien sollten Sie stattdessen die Eigenschaft des Objekts verwenden `targetRestUrl` `SharedProperties` (eingeführt in Anforderungssatz 1.8). Weitere Informationen finden Sie im Artikel [zum Stellvertretungszugriff.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    \[[API-Satz: Postfach 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`\n\n**[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen\n\nDer Wert `restUrl` kann für [REST-API](https://docs.microsoft.com/outlook/rest/)-Aufrufe an das Postfach des Benutzers verwendet werden.\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml\nconsole.log(\"EWS URL: \" + Office.context.mailbox.ewsUrl);\nvar ewsId = Office.context.mailbox.item.itemId;\nconsole.log(\"EWS item ID: \" + Office.context.mailbox.item.itemId);\n\nconsole.log(\"REST URL: \" + Office.context.mailbox.restUrl);\nvar restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"REST item ID: \" + restId);\n\nvar ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"EWS ID (from REST ID): \" + ewsId2);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'restUrl: string;'
    return:
      type: string
- name: userProfile
  uid: outlook!Office.Mailbox#userProfile:member
  package: outlook!
  fullName: userProfile
  summary: >-
    Informationen zum Benutzer, der dem Postfach zugeordnet ist. Dazu gehören kontotyp, Anzeigename, E-Mail-Adresse und Zeitzone.


    Weitere Informationen sind unter [Office. UserProfile](xref:outlook!Office.UserProfile:interface)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'userProfile: UserProfile;'
    return:
      type: <xref uid="outlook!Office.UserProfile:interface" />
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: outlook!Office.Mailbox#addHandlerAsync:member(1)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: >-
    Fügt einen Ereignishandler für ein unterstütztes Ereignis hinzu. **Hinweis:** Ereignisse sind nur für die Implementierung des Aufgabenbereichs verfügbar.


    Unterstützte Ereignisse finden Sie im [Abschnitt](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox#events) "Postfachobjektmodellereignisse"<!-- -->.


    \[[API-Satz: Postfach 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    Office.initialize = function (reason) {
        $(document).ready(function () {
            Office.context.mailbox.addHandlerAsync(
                Office.EventType.ItemChanged,
                loadNewItem,
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        // Handle error.
                    }
                });
        });
    };


    function loadNewItem(eventArgs) {
        var item = Office.context.mailbox.item;

        // Check that item is not null.
        if (item !== null) {
            // Work with item, e.g., define and call function that
            // loads the properties of the newly selected item.
            loadProps(item);
        }
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Das Ereignis, das den Handler aufrufen soll
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: Die Funktion, die das Ereignis behandeln soll. Die Funktion muss einen einzigen Parameter akzeptieren (ein Objektliteral). Die `type` Eigenschaft für den Parameter stimmt mit dem Parameter überein, der `eventType` an `addHandlerAsync`<!-- -->.
      type: any
    - id: options
      description: Bietet eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, für die Verwendung in einem Rückruf.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: outlook!Office.Mailbox#addHandlerAsync:member(2)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: >-
    Fügt einen Ereignishandler für ein unterstütztes Ereignis hinzu. **Hinweis:** Ereignisse sind nur für die Implementierung des Aufgabenbereichs verfügbar.


    Unterstützte Ereignisse finden Sie im [Abschnitt](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox#events) "Postfachobjektmodellereignisse"<!-- -->.


    \[[API-Satz: Postfach 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Das Ereignis, das den Handler aufrufen soll
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: Die Funktion, die das Ereignis behandeln soll. Die Funktion muss einen einzigen Parameter akzeptieren (ein Objektliteral). Die `type` Eigenschaft für den Parameter stimmt mit dem Parameter überein, der `eventType` an `addHandlerAsync`<!-- -->.
      type: any
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: convertToEwsId(itemId, restVersion)
  uid: outlook!Office.Mailbox#convertToEwsId:member(1)
  package: outlook!
  fullName: convertToEwsId(itemId, restVersion)
  summary: >-
    Wandelt eine REST-formatierte Element-ID ins EWS-Format um.


    Element-IDs, die über eine REST-API (z. B. die Outlook Mail-API oder die Microsoft-Graph) abgerufen werden, verwenden ein anderes Format als das von Exchange Webdienste (EWS) verwendete Format. Die `convertToEwsId` Methode konvertiert eine REST-formatierte ID in das richtige Format für EWS.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`Restricted`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml

    console.log("EWS URL: " + Office.context.mailbox.ewsUrl);

    var ewsId = Office.context.mailbox.item.itemId;

    console.log("EWS item ID: " + Office.context.mailbox.item.itemId);


    console.log("REST URL: " + Office.context.mailbox.restUrl);

    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("REST item ID: " + restId);


    var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);

    console.log("EWS ID (from REST ID): " + ewsId2);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToEwsId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
    parameters:
    - id: itemId
      description: Eine Element-ID, die für die Outlook REST-APIs formatiert ist.
      type: string
    - id: restVersion
      description: Ein Wert, der die Version der Outlook-REST-API angibt, die zum Abrufen der Element-ID verwendet wurde.
      type: <xref uid="outlook!Office.MailboxEnums.RestVersion:enum" /> | string
    return:
      type: string
      description: ''
- name: convertToLocalClientTime(timeValue)
  uid: outlook!Office.Mailbox#convertToLocalClientTime:member(1)
  package: outlook!
  fullName: convertToLocalClientTime(timeValue)
  summary: >-
    Ruft ein Wörterbuch mit Uhrzeitinformationen basierend auf der Zeiteinstellung des lokalen Clients ab.


    Die Von einer Mail-App für Outlook im Web oder Desktopclients verwendeten Datums- und Uhrzeitangaben können unterschiedliche Zeitzonen verwenden. Outlook verwendet die Zeitzone des Clientcomputers. Outlook im Web verwendet die Im Exchange Admin Center (EAC) festgelegte Zeitzone. Sie sollten Datums- und Uhrzeitwerte bearbeiten, damit die auf der Benutzeroberfläche angezeigten Werte immer den von Benutzer erwarteten Zeitzonen entsprechen.


    Wenn die Mail-App in Outlook auf Desktopclients ausgeführt wird, gibt die `convertToLocalClientTime` Methode ein Wörterbuchobjekt zurück, wobei die Werte auf die Zeitzone des Clientcomputers festgelegt sind. Wenn die Mail-App in Outlook im Web ausgeführt wird, gibt die `convertToLocalClientTime` Methode ein Wörterbuchobjekt zurück, deren Werte auf die im EAC angegebene Zeitzone festgelegt sind.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
    parameters:
    - id: timeValue
      description: Ein `Date`-Objekt.
      type: Date
    return:
      type: <xref uid="outlook!Office.LocalClientTime:interface" />
      description: ''
- name: convertToRestId(itemId, restVersion)
  uid: outlook!Office.Mailbox#convertToRestId:member(1)
  package: outlook!
  fullName: convertToRestId(itemId, restVersion)
  summary: >-
    Wandelt eine EWS-formatierte Element-ID ins REST-Format um.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`Restricted`\n\n**[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen\n\nElement-IDs, die über EWS oder über die Eigenschaft abgerufen `itemId` werden, verwenden ein anderes Format als das format, das von REST-APIs verwendet wird (z. B. die [Outlook Mail-API](https://docs.microsoft.com/previous-versions/office/office-365-api/api/version-2.0/mail-rest-operations) oder die [Microsoft-Graph](https://graph.microsoft.io/)<!-- -->. Die `convertToRestId` Methode konvertiert eine EWS-formatierte ID in das richtige Format für REST.\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml\nconsole.log(\"EWS URL: \" + Office.context.mailbox.ewsUrl);\nvar ewsId = Office.context.mailbox.item.itemId;\nconsole.log(\"EWS item ID: \" + Office.context.mailbox.item.itemId);\n\nconsole.log(\"REST URL: \" + Office.context.mailbox.restUrl);\nvar restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"REST item ID: \" + restId);\n\nvar ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"EWS ID (from REST ID): \" + ewsId2);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToRestId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
    parameters:
    - id: itemId
      description: Eine für Exchange-Webdienste (EWS) formatierte Element-ID
      type: string
    - id: restVersion
      description: Ein Wert, der die Version der Outlook-REST-API angibt, mit der die konvertierte ID verwendet wird.
      type: <xref uid="outlook!Office.MailboxEnums.RestVersion:enum" /> | string
    return:
      type: string
      description: ''
- name: convertToUtcClientTime(input)
  uid: outlook!Office.Mailbox#convertToUtcClientTime:member(1)
  package: outlook!
  fullName: convertToUtcClientTime(input)
  summary: >-
    Ruft ein `Date` Objekt aus einem Wörterbuch ab, das Zeitinformationen enthält.


    Die `convertToUtcClientTime` Methode konvertiert ein Wörterbuch, das ein lokales Datum und eine lokale Uhrzeit enthält, in ein Objekt mit den `Date` richtigen Werten für das lokale Datum und die lokale Uhrzeit.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Represents 3:37 PM PDT on Monday, August 26, 2019.

    var input = {
        date: 26,
        hours: 15,
        milliseconds: 2,
        minutes: 37,
        month: 7,
        seconds: 2,
        timezoneOffset: -420,
        year: 2019
    };


    // result should be a Date object.

    var result = Office.context.mailbox.convertToUtcClientTime(input);


    // Output should be "2019-08-26T22:37:02.002Z".

    console.log(result.toISOString());

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
    parameters:
    - id: input
      description: Der zu konvertierende Wert für die lokale Uhrzeit.
      type: <xref uid="outlook!Office.LocalClientTime:interface" />
    return:
      type: Date
      description: Ein Date-Objekt der Uhrzeit in UTC.
- name: displayAppointmentForm(itemId)
  uid: outlook!Office.Mailbox#displayAppointmentForm:member(1)
  package: outlook!
  fullName: displayAppointmentForm(itemId)
  summary: >-
    Zeigt einen bestehenden Kalendertermin an.


    Mit der `displayAppointmentForm`-Methode wird ein vorhandener Kalendertermin auf dem Desktop in einem neuen Fenster oder auf Mobilgeräten in einem Dialogfeld geöffnet.


    In Outlook auf dem Mac können Sie diese Methode verwenden, um einen einzelnen Termin anzuzeigen, der nicht Teil einer Terminserie ist, oder den Mastertermin einer Terminserie. Sie können jedoch keine Instanz der Datenreihe anzeigen, da Sie nicht auf die Eigenschaften (einschließlich der Element-ID) von Instanzen einer Terminserie zugreifen können.


    In Outlook im Web öffnet diese Methode das angegebene Formular nur, wenn der Textkörper des Formulars kleiner oder gleich 32.000 Zeichen ist.


    Wenn der angegebene Elementbezeichner keinen vorhandenen Termin identifiziert, wird ein leerer Bereich auf dem Clientcomputer oder -gerät geöffnet, und es wird keine Fehlermeldung zurückgegeben.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayAppointmentForm(itemId);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayAppointmentForm(itemId: string): void;'
    parameters:
    - id: itemId
      description: Der EWS-Bezeichner (Exchange Web Services, Exchange-Webdienste) für einen vorhandenen Kalendertermin.
      type: string
    return:
      type: void
      description: ''
- name: displayAppointmentFormAsync(itemId, options, callback)
  uid: outlook!Office.Mailbox#displayAppointmentFormAsync:member(1)
  package: outlook!
  fullName: displayAppointmentFormAsync(itemId, options, callback)
  summary: >-
    Zeigt einen bestehenden Kalendertermin an.


    Mit der `displayAppointmentFormAsync`-Methode wird ein vorhandener Kalendertermin auf dem Desktop in einem neuen Fenster oder auf Mobilgeräten in einem Dialogfeld geöffnet.


    In Outlook auf dem Mac können Sie diese Methode verwenden, um einen einzelnen Termin anzuzeigen, der nicht Teil einer Terminserie ist, oder den Mastertermin einer Terminserie. Sie können jedoch keine Instanz der Datenreihe anzeigen, da Sie nicht auf die Eigenschaften (einschließlich der Element-ID) von Instanzen einer Terminserie zugreifen können.


    In Outlook im Web öffnet diese Methode das angegebene Formular nur, wenn der Textkörper des Formulars kleiner oder gleich 32.000 Zeichen ist.


    Wenn der angegebene Elementbezeichner keinen vorhandenen Termin identifiziert, wird ein leerer Bereich auf dem Clientcomputer oder -gerät geöffnet, und es wird keine Fehlermeldung zurückgegeben.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-appointment.yaml

    var itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayAppointmentFormAsync(itemId, function(asyncResult) {
      console.log("Result: " + JSON.stringify(asyncResult));
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayAppointmentFormAsync(itemId: string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: itemId
      description: Der EWS-Bezeichner (Exchange Web Services, Exchange-Webdienste) für einen vorhandenen Kalendertermin.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayAppointmentFormAsync(itemId, callback)
  uid: outlook!Office.Mailbox#displayAppointmentFormAsync:member(2)
  package: outlook!
  fullName: displayAppointmentFormAsync(itemId, callback)
  summary: >-
    Zeigt einen bestehenden Kalendertermin an.


    Mit der `displayAppointmentFormAsync`-Methode wird ein vorhandener Kalendertermin auf dem Desktop in einem neuen Fenster oder auf Mobilgeräten in einem Dialogfeld geöffnet.


    In Outlook auf dem Mac können Sie diese Methode verwenden, um einen einzelnen Termin anzuzeigen, der nicht Teil einer Terminserie ist, oder den Mastertermin einer Terminserie. Sie können jedoch keine Instanz der Datenreihe anzeigen, da Sie nicht auf die Eigenschaften (einschließlich der Element-ID) von Instanzen einer Terminserie zugreifen können.


    In Outlook im Web öffnet diese Methode das angegebene Formular nur, wenn der Textkörper des Formulars kleiner oder gleich 32.000 Zeichen ist.


    Wenn der angegebene Elementbezeichner keinen vorhandenen Termin identifiziert, wird ein leerer Bereich auf dem Clientcomputer oder -gerät geöffnet, und es wird keine Fehlermeldung zurückgegeben.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayAppointmentFormAsync(itemId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: itemId
      description: Der EWS-Bezeichner (Exchange Web Services, Exchange-Webdienste) für einen vorhandenen Kalendertermin.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayMessageForm(itemId)
  uid: outlook!Office.Mailbox#displayMessageForm:member(1)
  package: outlook!
  fullName: displayMessageForm(itemId)
  summary: >-
    Zeigt eine vorhandene Nachricht an.


    Die `displayMessageForm`-Methode öffnet eine vorhandene Nachricht in einem neuen Fenster auf dem Desktop bzw. in einem Dialogfeld auf Mobilgeräten.


    In Outlook im Web öffnet diese Methode das angegebene Formular nur, wenn der Textkörper des Formulars kleiner oder gleich 32.000 Zeichen ist.


    Wenn der angegebene Elementbezeichner keine vorhandene Nachricht identifiziert, wird keine Meldung auf dem Clientcomputer angezeigt, und es wird keine Fehlermeldung zurückgegeben.


    Verwenden Sie `displayMessageForm` dies nicht mit einer itemId, die einen Termin darstellt. Verwenden Sie die `displayAppointmentForm`-Methode, um einen vorhandenen Termin anzuzeigen, und `displayNewAppointmentForm`, um ein Formular zum Erstellen eines neuen Termins anzuzeigen.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml

    var itemId = $("#itemId").val();

    Office.context.mailbox.displayMessageForm(itemId);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayMessageForm(itemId: string): void;'
    parameters:
    - id: itemId
      description: Der Exchange-Webdienste (EWS) für eine vorhandene Nachricht.
      type: string
    return:
      type: void
      description: ''
- name: displayMessageFormAsync(itemId, options, callback)
  uid: outlook!Office.Mailbox#displayMessageFormAsync:member(1)
  package: outlook!
  fullName: displayMessageFormAsync(itemId, options, callback)
  summary: >-
    Zeigt eine vorhandene Nachricht an.


    Die `displayMessageFormAsync`-Methode öffnet eine vorhandene Nachricht in einem neuen Fenster auf dem Desktop bzw. in einem Dialogfeld auf Mobilgeräten.


    In Outlook im Web öffnet diese Methode das angegebene Formular nur, wenn der Textkörper des Formulars kleiner oder gleich 32.000 Zeichen ist.


    Wenn der angegebene Elementbezeichner keine vorhandene Nachricht identifiziert, wird keine Meldung auf dem Clientcomputer angezeigt, und es wird keine Fehlermeldung zurückgegeben.


    Verwenden Sie die `displayMessageForm` `displayMessageFormAsync` Oder-Methode nicht mit einer itemId, die einen Termin darstellt. Verwenden Sie die `displayAppointmentForm` `displayAppointmentFormAsync` Oder-Methode, um einen vorhandenen Termin anzuzeigen, `displayNewAppointmentForm` oder um ein Formular zum Erstellen eines neuen `displayNewAppointmentFormAsync` Termins anzuzeigen.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-existing-message.yaml

    var itemId = $("#itemId").val();


    // The async version will return error 9049 if the item is not found.

    // The async version is only available starting with requirement set 1.9.

    Office.context.mailbox.displayMessageFormAsync(itemId, function (asyncResult) {
     console.log("Result: " + JSON.stringify(asyncResult));
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayMessageFormAsync(itemId: string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: itemId
      description: Der Exchange-Webdienste (EWS) für eine vorhandene Nachricht.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayMessageFormAsync(itemId, callback)
  uid: outlook!Office.Mailbox#displayMessageFormAsync:member(2)
  package: outlook!
  fullName: displayMessageFormAsync(itemId, callback)
  summary: >-
    Zeigt eine vorhandene Nachricht an.


    Die `displayMessageFormAsync`-Methode öffnet eine vorhandene Nachricht in einem neuen Fenster auf dem Desktop bzw. in einem Dialogfeld auf Mobilgeräten.


    In Outlook im Web öffnet diese Methode das angegebene Formular nur, wenn der Textkörper des Formulars kleiner oder gleich 32.000 Zeichen ist.


    Wenn der angegebene Elementbezeichner keine vorhandene Nachricht identifiziert, wird keine Meldung auf dem Clientcomputer angezeigt, und es wird keine Fehlermeldung zurückgegeben.


    Verwenden Sie die `displayMessageForm` `displayMessageFormAsync` Oder-Methode nicht mit einer itemId, die einen Termin darstellt. Verwenden Sie die `displayAppointmentForm` `displayAppointmentFormAsync` Oder-Methode, um einen vorhandenen Termin anzuzeigen, `displayNewAppointmentForm` oder um ein Formular zum Erstellen eines neuen `displayNewAppointmentFormAsync` Termins anzuzeigen.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayMessageFormAsync(itemId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: itemId
      description: Der Exchange-Webdienste (EWS) für eine vorhandene Nachricht.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayNewAppointmentForm(parameters)
  uid: outlook!Office.Mailbox#displayNewAppointmentForm:member(1)
  package: outlook!
  fullName: displayNewAppointmentForm(parameters)
  summary: >-
    Zeigt ein Formular zum Erstellen eines neuen Kalendertermins an.


    Mit der `displayNewAppointmentForm`-Methode wird ein Formular geöffnet, mit dem der Benutzer einen neuen Termin oder eine Besprechung erstellen kann. Wenn Parameter angegeben wurden, werden die Felder im Terminformular automatisch mit dem Inhalt der Parameter ausgefüllt.


    In Outlook im Web zeigt diese Methode immer ein Formular mit einem Teilnehmerfeld an. Wenn Sie keine Teilnehmer als Eingabeargumente angeben, zeigt die Methode ein Formular mit einer Schaltfläche **Speichern** an. Wenn Sie Teilnehmer angegeben haben, enthält das Formular die Teilnehmer und eine Schaltfläche **Senden**.


    In the Outlook rich client and Outlook RT, if you specify any attendees or resources in the`requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->oder `resources` Parameter zeigt diese Methode ein Besprechungsformular mit einer Schaltfläche **"Senden"** an. Wenn Sie keine Empfänger angeben, zeigt diese Methode ein Terminformular mit der Schaltfläche **&amp; "Schließen speichern"** an.


    Wenn einer der Parameter die angegebenen Größenbeschränkungen überschreitet oder wenn ein unbekannter Parametername angegeben wird, wird eine Ausnahme ausgelöst.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml

    var start = new Date();

    var end = new Date();

    end.setHours(start.getHours() + 1);


    Office.context.mailbox.displayNewAppointmentForm({
      requiredAttendees: ["bob@contoso.com"],
      optionalAttendees: ["sam@contoso.com"],
      start: start,
      end: end,
      location: "Home",
      subject: "meeting",
      resources: ["projector@contoso.com"],
      body: "Hello World!"
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
    parameters:
    - id: parameters
      description: Eine `AppointmentForm` Beschreibung des neuen Termins. Alle Eigenschaften sind optional.
      type: <xref uid="outlook!Office.AppointmentForm:interface" />
    return:
      type: void
      description: ''
- name: displayNewAppointmentFormAsync(parameters, options, callback)
  uid: outlook!Office.Mailbox#displayNewAppointmentFormAsync:member(1)
  package: outlook!
  fullName: displayNewAppointmentFormAsync(parameters, options, callback)
  summary: >-
    Zeigt ein Formular zum Erstellen eines neuen Kalendertermins an.


    Mit der `displayNewAppointmentFormAsync`-Methode wird ein Formular geöffnet, mit dem der Benutzer einen neuen Termin oder eine Besprechung erstellen kann. Wenn Parameter angegeben wurden, werden die Felder im Terminformular automatisch mit dem Inhalt der Parameter ausgefüllt.


    In Outlook im Web zeigt diese Methode immer ein Formular mit einem Teilnehmerfeld an. Wenn Sie keine Teilnehmer als Eingabeargumente angeben, zeigt die Methode ein Formular mit einer Schaltfläche **Speichern** an. Wenn Sie Teilnehmer angegeben haben, enthält das Formular die Teilnehmer und eine Schaltfläche **Senden**.


    In the Outlook rich client and Outlook RT, if you specify any attendees or resources in the`requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->oder `resources` Parameter zeigt diese Methode ein Besprechungsformular mit einer Schaltfläche **"Senden"** an. Wenn Sie keine Empfänger angeben, zeigt diese Methode ein Terminformular mit der Schaltfläche **&amp; "Schließen speichern"** an.


    Wenn einer der Parameter die angegebenen Größenbeschränkungen überschreitet oder wenn ein unbekannter Parametername angegeben wird, wird eine Ausnahme ausgelöst.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-appointment.yaml

    var start = new Date();

    var end = new Date();

    end.setHours(start.getHours() + 1);


    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.displayNewAppointmentFormAsync(
      {
        requiredAttendees: ["bob@contoso.com"],
        optionalAttendees: ["sam@contoso.com"],
        start: start,
        end: end,
        location: "Home",
        subject: "meeting",
        resources: ["projector@contoso.com"],
        body: "Hello World!"
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewAppointmentFormAsync(parameters: AppointmentForm, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: parameters
      description: Eine `AppointmentForm` Beschreibung des neuen Termins. Alle Eigenschaften sind optional.
      type: <xref uid="outlook!Office.AppointmentForm:interface" />
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayNewAppointmentFormAsync(parameters, callback)
  uid: outlook!Office.Mailbox#displayNewAppointmentFormAsync:member(2)
  package: outlook!
  fullName: displayNewAppointmentFormAsync(parameters, callback)
  summary: >-
    Zeigt ein Formular zum Erstellen eines neuen Kalendertermins an.


    Mit der `displayNewAppointmentFormAsync`-Methode wird ein Formular geöffnet, mit dem der Benutzer einen neuen Termin oder eine Besprechung erstellen kann. Wenn Parameter angegeben wurden, werden die Felder im Terminformular automatisch mit dem Inhalt der Parameter ausgefüllt.


    In Outlook im Web zeigt diese Methode immer ein Formular mit einem Teilnehmerfeld an. Wenn Sie keine Teilnehmer als Eingabeargumente angeben, zeigt die Methode ein Formular mit einer Schaltfläche **Speichern** an. Wenn Sie Teilnehmer angegeben haben, enthält das Formular die Teilnehmer und eine Schaltfläche **Senden**.


    In the Outlook rich client and Outlook RT, if you specify any attendees or resources in the`requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->oder `resources` Parameter zeigt diese Methode ein Besprechungsformular mit einer Schaltfläche **"Senden"** an. Wenn Sie keine Empfänger angeben, zeigt diese Methode ein Terminformular mit der Schaltfläche **&amp; "Schließen speichern"** an.


    Wenn einer der Parameter die angegebenen Größenbeschränkungen überschreitet oder wenn ein unbekannter Parametername angegeben wird, wird eine Ausnahme ausgelöst.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewAppointmentFormAsync(parameters: AppointmentForm, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: parameters
      description: Eine `AppointmentForm` Beschreibung des neuen Termins. Alle Eigenschaften sind optional.
      type: <xref uid="outlook!Office.AppointmentForm:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayNewMessageForm(parameters)
  uid: outlook!Office.Mailbox#displayNewMessageForm:member(1)
  package: outlook!
  fullName: displayNewMessageForm(parameters)
  summary: >-
    Zeigt ein Formular zum Erstellen einer neuen Nachricht an.


    Die `displayNewMessageForm` Methode öffnet ein Formular, mit dem der Benutzer eine neue Nachricht erstellen kann. Wenn Parameter angegeben werden, werden die Felder des Nachrichtenformulars automatisch mit dem Inhalt der Parameter aufgefüllt.


    Wenn einer der Parameter die angegebenen Größenbeschränkungen überschreitet oder wenn ein unbekannter Parametername angegeben wird, wird eine Ausnahme ausgelöst.


    \[[API-Satz: Postfach 1.6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-message.yaml

    Office.context.mailbox.displayNewMessageForm({
      toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
      ccRecipients: ["sam@contoso.com"],
      subject: "Outlook add-ins are cool!",
      htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
      attachments: [
        {
          type: "file",
          name: "image.png",
          url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
          isInline: true
        }
      ]
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewMessageForm(parameters: any): void;'
    parameters:
    - id: parameters
      description: >-
        Ein Wörterbuch mit allen Werten, die für den Benutzer im neuen Formular ausgefüllt werden sollen. Alle Parameter sind optional.


        `toRecipients`<!-- -->: Ein Zeichenfolgenarray mit den E-Mail-Adressen oder ein Array mit einem [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger in der **Zeile "An".** Das Array darf maximal 100 Einträge enthalten.


        `ccRecipients`<!-- -->: Ein Zeichenfolgenarray mit den E-Mail-Adressen oder ein Array mit einem [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger in der **Cc-Zeile.** Das Array darf maximal 100 Einträge enthalten.


        `bccRecipients`<!-- -->: Ein Zeichenfolgenarray mit den E-Mail-Adressen oder ein Array mit einem [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger in der **Bcc-Zeile.** Das Array darf maximal 100 Einträge enthalten.


        `subject`<!-- -->: Eine Zeichenfolge, die den Betreff der Nachricht enthält. Die Zeichenfolge ist auf maximal 255 Zeichen beschränkt.


        `htmlBody`<!-- -->: Der HTML-Text der Nachricht. Der Textkörper ist auf eine maximale Größe von 32 KB beschränkt.


        `attachments`<!-- -->: Ein Array von JSON-Objekten, bei denen es sich entweder um Datei- oder Elementanlagen handelt.


        `attachments.type`<!-- -->: Gibt den Typ der Anlage an. Muss eine Datei für eine Dateianlage oder ein Element für eine Elementanlage sein.


        `attachments.name`<!-- -->: Eine Zeichenfolge, die den Namen der Anlage mit einer Länge von bis zu 255 Zeichen enthält.


        `attachments.url`<!-- -->: Wird nur verwendet, wenn der Typ auf "Datei" festgelegt ist. Der URI des Speicherorts für die Datei.


        `attachments.isInline`<!-- -->: Wird nur verwendet, wenn der Typ auf "Datei" festgelegt ist. Wenn "true", gibt an, dass die Anlage inline im Nachrichtentext angezeigt wird und nicht in der Anlagenliste angezeigt werden soll.


        `attachments.itemId`<!-- -->: Wird nur verwendet, wenn der Typ auf "Element" festgelegt ist. Die EWS-Element-ID der vorhandenen E-Mail, die Sie an die neue Nachricht anfügen möchten. Diese Zeichenfolge kann bis zu 100 Zeichen lang sein.
      type: any
    return:
      type: void
      description: ''
- name: displayNewMessageFormAsync(parameters, options, callback)
  uid: outlook!Office.Mailbox#displayNewMessageFormAsync:member(1)
  package: outlook!
  fullName: displayNewMessageFormAsync(parameters, options, callback)
  summary: >-
    Zeigt ein Formular zum Erstellen einer neuen Nachricht an.


    Die `displayNewMessageFormAsync` Methode öffnet ein Formular, mit dem der Benutzer eine neue Nachricht erstellen kann. Wenn Parameter angegeben werden, werden die Felder des Nachrichtenformulars automatisch mit dem Inhalt der Parameter aufgefüllt.


    Wenn einer der Parameter die angegebenen Größenbeschränkungen überschreitet oder wenn ein unbekannter Parametername angegeben wird, wird eine Ausnahme ausgelöst.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-new-message.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new message form has been created.

    Office.context.mailbox.displayNewMessageFormAsync(
      {
        toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
        ccRecipients: ["sam@contoso.com"],
        subject: "Outlook add-ins are cool!",
        htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
        attachments: [
          {
            type: "file",
            name: "image.png",
            url: "http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg",
            isInline: true
          }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewMessageFormAsync(parameters: any, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: parameters
      description: >-
        Ein Wörterbuch mit allen Werten, die für den Benutzer im neuen Formular ausgefüllt werden sollen. Alle Parameter sind optional.


        `toRecipients`<!-- -->: Ein Zeichenfolgenarray mit den E-Mail-Adressen oder ein Array mit einem [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger in der **Zeile "An".** Das Array darf maximal 100 Einträge enthalten.


        `ccRecipients`<!-- -->: Ein Zeichenfolgenarray mit den E-Mail-Adressen oder ein Array mit einem [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger in der **Cc-Zeile.** Das Array darf maximal 100 Einträge enthalten.


        `bccRecipients`<!-- -->: Ein Zeichenfolgenarray mit den E-Mail-Adressen oder ein Array mit einem [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger in der **Bcc-Zeile.** Das Array darf maximal 100 Einträge enthalten.


        `subject`<!-- -->: Eine Zeichenfolge, die den Betreff der Nachricht enthält. Die Zeichenfolge ist auf maximal 255 Zeichen beschränkt.


        `htmlBody`<!-- -->: Der HTML-Text der Nachricht. Der Textkörper ist auf eine maximale Größe von 32 KB beschränkt.


        `attachments`<!-- -->: Ein Array von JSON-Objekten, bei denen es sich entweder um Datei- oder Elementanlagen handelt.


        `attachments.type`<!-- -->: Gibt den Typ der Anlage an. Muss eine Datei für eine Dateianlage oder ein Element für eine Elementanlage sein.


        `attachments.name`<!-- -->: Eine Zeichenfolge, die den Namen der Anlage mit einer Länge von bis zu 255 Zeichen enthält.


        `attachments.url`<!-- -->: Wird nur verwendet, wenn der Typ auf "Datei" festgelegt ist. Der URI des Speicherorts für die Datei.


        `attachments.isInline`<!-- -->: Wird nur verwendet, wenn der Typ auf "Datei" festgelegt ist. Wenn "true", gibt an, dass die Anlage inline im Nachrichtentext angezeigt wird und nicht in der Anlagenliste angezeigt werden soll.


        `attachments.itemId`<!-- -->: Wird nur verwendet, wenn der Typ auf "Element" festgelegt ist. Die EWS-Element-ID der vorhandenen E-Mail, die Sie an die neue Nachricht anfügen möchten. Diese Zeichenfolge kann bis zu 100 Zeichen lang sein.
      type: any
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayNewMessageFormAsync(parameters, callback)
  uid: outlook!Office.Mailbox#displayNewMessageFormAsync:member(2)
  package: outlook!
  fullName: displayNewMessageFormAsync(parameters, callback)
  summary: >-
    Zeigt ein Formular zum Erstellen einer neuen Nachricht an.


    Die `displayNewMessageFormAsync` Methode öffnet ein Formular, mit dem der Benutzer eine neue Nachricht erstellen kann. Wenn Parameter angegeben werden, werden die Felder des Nachrichtenformulars automatisch mit dem Inhalt der Parameter aufgefüllt.


    Wenn einer der Parameter die angegebenen Größenbeschränkungen überschreitet oder wenn ein unbekannter Parametername angegeben wird, wird eine Ausnahme ausgelöst.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayNewMessageFormAsync(parameters: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: parameters
      description: >-
        Ein Wörterbuch mit allen Werten, die für den Benutzer im neuen Formular ausgefüllt werden sollen. Alle Parameter sind optional.


        `toRecipients`<!-- -->: Ein Zeichenfolgenarray mit den E-Mail-Adressen oder ein Array mit einem [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger in der **Zeile "An".** Das Array darf maximal 100 Einträge enthalten.


        `ccRecipients`<!-- -->: Ein Zeichenfolgenarray mit den E-Mail-Adressen oder ein Array mit einem [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger in der **Cc-Zeile.** Das Array darf maximal 100 Einträge enthalten.


        `bccRecipients`<!-- -->: Ein Zeichenfolgenarray mit den E-Mail-Adressen oder ein Array mit einem [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger in der **Bcc-Zeile.** Das Array darf maximal 100 Einträge enthalten.


        `subject`<!-- -->: Eine Zeichenfolge, die den Betreff der Nachricht enthält. Die Zeichenfolge ist auf maximal 255 Zeichen beschränkt.


        `htmlBody`<!-- -->: Der HTML-Text der Nachricht. Der Textkörper ist auf eine maximale Größe von 32 KB beschränkt.


        `attachments`<!-- -->: Ein Array von JSON-Objekten, bei denen es sich entweder um Datei- oder Elementanlagen handelt.


        `attachments.type`<!-- -->: Gibt den Typ der Anlage an. Muss eine Datei für eine Dateianlage oder ein Element für eine Elementanlage sein.


        `attachments.name`<!-- -->: Eine Zeichenfolge, die den Namen der Anlage mit einer Länge von bis zu 255 Zeichen enthält.


        `attachments.url`<!-- -->: Wird nur verwendet, wenn der Typ auf "Datei" festgelegt ist. Der URI des Speicherorts für die Datei.


        `attachments.isInline`<!-- -->: Wird nur verwendet, wenn der Typ auf "Datei" festgelegt ist. Wenn "true", gibt an, dass die Anlage inline im Nachrichtentext angezeigt wird und nicht in der Anlagenliste angezeigt werden soll.


        `attachments.itemId`<!-- -->: Wird nur verwendet, wenn der Typ auf "Element" festgelegt ist. Die EWS-Element-ID der vorhandenen E-Mail, die Sie an die neue Nachricht anfügen möchten. Diese Zeichenfolge kann bis zu 100 Zeichen lang sein.
      type: any
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter aufgerufen. `asyncResult`<!-- -->, bei dem es sich um ein `Office.AsyncResult` Objekt handelt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getCallbackTokenAsync(options, callback)
  uid: outlook!Office.Mailbox#getCallbackTokenAsync:member(1)
  package: outlook!
  fullName: getCallbackTokenAsync(options, callback)
  summary: >-
    Ruft eine Zeichenfolge ab, die ein Token enthält, das zum Aufrufen von REST-APIs oder Exchange Webdienste (EWS) verwendet wird.


    Die `getCallbackTokenAsync`-Methode führt einen asynchronen Aufruf zum Abruf eines nicht transparenten Tokens vom Exchange-Server aus, der das Postfach des Benutzers hostet. Die Gültigkeitsdauer des Rückruftokens beträgt 5 Minuten.


    Das Token wird als Zeichenfolge in der `asyncResult.value` Eigenschaft zurückgegeben.


    Das Aufrufen der `getCallbackTokenAsync` Methode im Lesemodus erfordert eine Minimale Berechtigungsstufe von `ReadItem`<!-- -->.


    Wenn Sie die `getCallbackTokenAsync` Methode im Verfassenmodus aufrufen, müssen Sie das Element gespeichert haben. Die `saveAsync` Methode erfordert eine minimale Berechtigungsstufe von `ReadWriteItem`<!-- -->.


    **Wichtig:** Anleitungen zu Delegaten- oder freigegebenen Szenarien finden Sie im Artikel [zum Zugriff auf Stellvertretungen.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    *REST-Token*


    Wenn ein REST-Token angefordert wird (`options.isRest` = `true`<!-- -->), kann das resultierende Token nicht zum Authentifizieren von EWS-Aufrufen verwendet werden. Der Bereich des Tokens ist auf schreibgeschützten Zugriff auf das aktuelle Element und dessen Anlagen beschränkt, es sei denn im Manifest des Add-Ins ist die Berechtigung `ReadWriteMailbox` angegeben. Ist die Berechtigung `ReadWriteMailbox` angegeben, gewährt das resultierende Token Lese-/Schreibzugriff auf E-Mails, Kalender und Kontakte und erlaubt das Senden von E-Mails.


    Das Add-In sollte die Eigenschaft `restUrl` verwenden, um die korrekte URL für REST-API-Aufrufe zu ermitteln.


    Diese API funktioniert für die folgenden Bereiche:


    - `Mail.ReadWrite`


    - `Mail.Send`


    - `Calendars.ReadWrite`


    - `Contacts.ReadWrite`


    *EWS-Tokens*


    Wenn ein EWS-Token angefordert wird (`options.isRest` = `false`<!-- -->), kann das resultierende Token nicht zum Authentifizieren von REST-API-Aufrufen verwendet werden. Der Bereich des Tokens ist auf den Zugriff auf das aktuelle Element beschränkt.


    Das Add-In sollte die Eigenschaft `ewsUrl` verwenden, um die korrekte URL für EWS-Aufrufe zu ermitteln.


    Sie können sowohl das Token als auch eine Anlagen- oder Element-ID an ein Drittanbietersystem weitergeben. Das Drittanbietersystem verwendet das Token als Trägerautorisierungstoken, um den Exchange Web Services-Vorgang (EWS) [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) oder [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) aufzurufen und eine Anlage oder ein Element zurückzugeben. Sie können z. B. einen Remotedienst erstellen, um [Anlagen aus dem ausgewählten Element abzurufen.](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    **Hinweis:** Es wird empfohlen, dass Add-Ins nach Möglichkeit die REST-APIs anstelle Exchange Webdienste verwenden.


    \[[API-Satz: Postfach 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`\n\n**[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen\n\n**Fehler:**\n\n- `HTTPRequestFailure`<!-- -->: Die Anforderung ist fehlgeschlagen. Den HTTP-Fehlercode finden Sie im Diagnoseobjekt.\n\n- `InternalServerError`<!-- -->: Der Exchange Server hat einen Fehler zurückgegeben. Weitere Informationen finden Sie im Diagnoseobjekt.\n\n- `NetworkError`<!-- -->: Der Benutzer ist nicht mehr mit dem Netzwerk verbunden. Überprüfen Sie Ihre Netzwerkverbindung, und versuchen Sie es erneut.\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCallbackTokenAsync(options: Office.AsyncContextOptions & { isRest?: boolean }, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `isRest`<!-- -->: Bestimmt, ob das bereitgestellte Token für die Outlook REST-APIs oder Exchange Webdienste verwendet wird. Standardwert ist `false`<!-- -->. `asyncContext`<!-- -->: Alle Zustandsdaten, die an die asynchrone Methode übergeben werden.'
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> & { isRest?: boolean }'
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Rückrufparameter übergebene Funktion mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Das Token wird als Zeichenfolge in der `asyncResult.value` Eigenschaft zurückgegeben. Wenn ein Fehler aufgetreten ist, können die Eigenschaften `asyncResult.error` und `asyncResult.diagnostics` weitere Informationen enthalten.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getCallbackTokenAsync(callback, userContext)
  uid: outlook!Office.Mailbox#getCallbackTokenAsync:member(2)
  package: outlook!
  fullName: getCallbackTokenAsync(callback, userContext)
  summary: >-
    Ruft eine Zeichenfolge ab, die einen Token enthält, der verwendet wird, um eine Anlage oder ein Element von einem Exchange Server abzurufen.


    Die `getCallbackTokenAsync`-Methode führt einen asynchronen Aufruf zum Abruf eines nicht transparenten Tokens vom Exchange-Server aus, der das Postfach des Benutzers hostet. Die Gültigkeitsdauer des Rückruftokens beträgt 5 Minuten.


    Das Token wird als Zeichenfolge in der `asyncResult.value` Eigenschaft zurückgegeben.


    Sie können sowohl das Token als auch eine Anlagen- oder Element-ID an ein Drittanbietersystem weitergeben. Das Drittanbietersystem verwendet das Token als Trägerautorisierungstoken, um den Exchange Web Services-Vorgang (EWS) [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) oder [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) aufzurufen und eine Anlage oder ein Element zurückzugeben. Sie können z. B. einen Remotedienst erstellen, um [Anlagen aus dem ausgewählten Element abzurufen.](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item)<!-- -->.


    Das Aufrufen der `getCallbackTokenAsync` Methode im Lesemodus erfordert eine Minimale Berechtigungsstufe von `ReadItem`<!-- -->.


    Wenn Sie die `getCallbackTokenAsync` Methode im Verfassenmodus aufrufen, müssen Sie das Element gespeichert haben. Die `saveAsync` Methode erfordert eine minimale Berechtigungsstufe von `ReadWriteItem`<!-- -->.


    **Wichtig:** Anleitungen zu Delegaten- oder freigegebenen Szenarien finden Sie im Artikel [zum Zugriff auf Stellvertretungen.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    \[[API-Satz: Alle unterstützen den Lesemodus; Postfach 1.3: Unterstützung des Verfassenmodus eingeführt](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    **Fehler:**


    - `HTTPRequestFailure`<!-- -->: Die Anforderung ist fehlgeschlagen. Den HTTP-Fehlercode finden Sie im Diagnoseobjekt.


    - `InternalServerError`<!-- -->: Der Exchange Server hat einen Fehler zurückgegeben. Weitere Informationen finden Sie im Diagnoseobjekt.


    - `NetworkError`<!-- -->: Der Benutzer ist nicht mehr mit dem Netzwerk verbunden. Überprüfen Sie Ihre Netzwerkverbindung, und versuchen Sie es erneut.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-callback-token.yaml

    Office.context.mailbox.getCallbackTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Rückrufparameter übergebene Funktion mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Das Token wird als Zeichenfolge in der `asyncResult.value` Eigenschaft zurückgegeben. Wenn ein Fehler aufgetreten ist, können die Eigenschaften `asyncResult.error` und `asyncResult.diagnostics` weitere Informationen enthalten.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: Optional. Jegliche Zustandsdaten, die an die asynchrone Methode übergeben werden.
      type: any
    return:
      type: void
      description: ''
- name: getUserIdentityTokenAsync(callback, userContext)
  uid: outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)
  package: outlook!
  fullName: getUserIdentityTokenAsync(callback, userContext)
  summary: >-
    Ruft ein Token ab, das den Benutzer und das Office-Add-In identifiziert.


    Das Token wird als Zeichenfolge in der `asyncResult.value` Eigenschaft zurückgegeben.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    Die `getUserIdentityTokenAsync` Methode gibt ein Token zurück, das Sie verwenden können, um das [Add-In und den Benutzer mit einem Drittanbietersystem](https://docs.microsoft.com/office/dev/add-ins/outlook/authentication) zu identifizieren und zu authentifizieren.<!-- -->.


    **Fehler:**


    - `HTTPRequestFailure`<!-- -->: Die Anforderung ist fehlgeschlagen. Den HTTP-Fehlercode finden Sie im Diagnoseobjekt.


    - `InternalServerError`<!-- -->: Der Exchange Server hat einen Fehler zurückgegeben. Weitere Informationen finden Sie im Diagnoseobjekt.


    - `NetworkError`<!-- -->: Der Benutzer ist nicht mehr mit dem Netzwerk verbunden. Überprüfen Sie Ihre Netzwerkverbindung, und versuchen Sie es erneut.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml

    Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Token retrieval failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Rückrufparameter übergebene Funktion mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Das Token wird als Zeichenfolge in der `asyncResult.value` Eigenschaft zurückgegeben. Wenn ein Fehler aufgetreten ist, können die Eigenschaften `asyncResult.error` und `asyncResult.diagnostics` weitere Informationen enthalten.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: Optional. Jegliche Zustandsdaten, die an die asynchrone Methode übergeben werden.
      type: any
    return:
      type: void
      description: ''
- name: makeEwsRequestAsync(data, callback, userContext)
  uid: outlook!Office.Mailbox#makeEwsRequestAsync:member(1)
  package: outlook!
  fullName: makeEwsRequestAsync(data, callback, userContext)
  summary: >-
    Stellt eine asynchrone Anforderung an einen Exchange Webdienstedienst (EWS) auf dem Exchange Server, der das Postfach des Benutzers hostet.


    In diesen Fällen sollten Add-Ins REST APIs verwenden, um auf das Postfach des Benutzers zuzugreifen.


    Die `makeEwsRequestAsync`-Methode sendet eine EWS-Anforderung für das Add-In zu Exchange.


    Sie können keine Elemente, die Ordnern zugeordnet sind, mit der `makeEwsRequestAsync`-Methode anfordern.


    Die XML-Anforderung muss UTF-8-Codierung angeben: `\<?xml version="1.0" encoding="utf-8"?\>`<!-- -->.


    Ihr Add-In muss über die `ReadWriteMailbox` Berechtigung verfügen, die Methode zu `makeEwsRequestAsync` verwenden. Informationen zur Verwendung der `ReadWriteMailbox` Berechtigung und der EWS-Vorgänge, die Sie mit der Methode aufrufen können, finden Sie unter Angeben von `makeEwsRequestAsync` Berechtigungen für den [E-Mail-Add-In-Zugriff auf das Postfach des Benutzers.](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->.


    Das XML-Ergebnis des EWS-Aufrufs wird als Zeichenfolge in der `asyncResult.value`-Eigenschaft bereitgestellt. Wenn das Ergebnis größer als 1 MB ist, wird stattdessen eine Fehlermeldung zurückgegeben.


    **Hinweis:** Diese Methode wird in den folgenden Szenarien nicht unterstützt:


    - In Outlook unter iOS oder Android.


    - Wenn das Add-In in ein Gmail-Postfach geladen wird.


    **Hinweis:** Der Serveradministrator muss `OAuthAuthentication` `true` im EWS-Verzeichnis des Clientzugriffsservers auf "EWS" festlegen, damit die `makeEwsRequestAsync` Methode EWS-Anforderungen ausführen kann.


    *Versionsunterschiede*


    Wenn Sie die Methode in Mail-Apps verwenden, die `makeEwsRequestAsync` in Outlook Versionen vor Version 15.0.4535.1004 ausgeführt werden, sollten Sie den Codierungswert auf ISO-8859-1 festlegen.


    `<?xml version="1.0" encoding="iso-8859-1"?>`


    Sie müssen den Codierungswert nicht festlegen, wenn Ihre Mail-App in Outlook im Web ausgeführt wird. Mithilfe der Eigenschaft können Sie ermitteln, ob Ihre Mail-App in Outlook oder Outlook im Web ausgeführt `mailbox.diagnostics.hostName` wird. Mithilfe der Eigenschaft können Sie ermitteln, welche Version von Outlook ausgeführt `mailbox.diagnostics.hostVersion` wird.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteMailbox`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    function getSubjectRequest(id) {
        // Return a GetItem operation request for the subject of the specified item.
        var request =
            '<?xml version="1.0" encoding="utf-8"?>' +
            '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
            '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
            '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
            '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
            '  <soap:Header>' +
            '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
            '  </soap:Header>' +
            '  <soap:Body>' +
            '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
            '      <ItemShape>' +
            '        <t:BaseShape>IdOnly</t:BaseShape>' +
            '        <t:AdditionalProperties>' +
            '            <t:FieldURI FieldURI="item:Subject"/>' +
            '        </t:AdditionalProperties>' +
            '      </ItemShape>' +
            '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
            '    </GetItem>' +
            '  </soap:Body>' +
            '</soap:Envelope>';

        return request;
    }


    function sendRequest() {
        // Create a local variable that contains the mailbox.
        Office.context.mailbox.makeEwsRequestAsync(
            getSubjectRequest(mailbox.item.itemId), callback);
    }


    function callback(asyncResult)  {
        var result = asyncResult.value;
        var context = asyncResult.asyncContext;

        // Process the returned response here.
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/make-ews-request-async.yaml

    var ewsId = Office.context.mailbox.item.itemId;

    var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
        '  <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>' +
        '  <soap:Body>' +
        '    <m:GetItem>' +
        '      <m:ItemShape>' +
        '        <t:BaseShape>IdOnly</t:BaseShape>' +
        '      </m:ItemShape >' +
        '      <m:ItemIds>' +
        '        <t:ItemId Id="' + ewsId + '" />' +
        '      </m:ItemIds>' +
        '    </m:GetItem>' +
        '  </soap:Body>' +
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/send-message-using-make-ews-request-async.yaml

    var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
        '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
        '  <soap:Body>'+
        '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
        '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
        '      <m:Items>'+
        '        <t:Message>'+
        '          <t:Subject>Hello, Outlook!</t:Subject>'+
        '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
        '          <t:ToRecipients>'+
        '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
        '          </t:ToRecipients>'+
        '        </t:Message>'+
        '      </m:Items>'+
        '    </m:CreateItem>'+
        '  </soap:Body>'+
        '</soap:Envelope>';

    Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
        console.log(result);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
    parameters:
    - id: data
      description: Die EWS-Anforderung.
      type: any
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Rückrufparameter übergebene Funktion mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Die `value` Eigenschaft des Ergebnisses ist der XML-Code der EWS-Anforderung, die als Zeichenfolge bereitgestellt wird. Wenn das Ergebnis größer als 1 MB ist, wird stattdessen eine Fehlermeldung zurückgegeben.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    - id: userContext
      description: Optional. Jegliche Zustandsdaten, die an die asynchrone Methode übergeben werden.
      type: any
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: outlook!Office.Mailbox#removeHandlerAsync:member(1)
  package: outlook!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: >-
    Entfernt die Ereignishandler für einen unterstützten Ereignistyp. **Hinweis:** Ereignisse sind nur für die Implementierung des Aufgabenbereichs verfügbar.


    Unterstützte Ereignisse finden Sie im [Abschnitt](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox#events) "Postfachobjektmodellereignisse"<!-- -->.


    \[[API-Satz: Postfach 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Das Ereignis, das den Handler widerrufen soll.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: options
      description: Bietet eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, für die Verwendung in einem Rückruf.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: outlook!Office.Mailbox#removeHandlerAsync:member(2)
  package: outlook!
  fullName: removeHandlerAsync(eventType, callback)
  summary: >-
    Entfernt die Ereignishandler für einen unterstützten Ereignistyp. **Hinweis:** Ereignisse sind nur für die Implementierung des Aufgabenbereichs verfügbar.


    Unterstützte Ereignisse finden Sie im [Abschnitt](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.9/office.context.mailbox#events) "Postfachobjektmodellereignisse"<!-- -->.


    \[[API-Satz: Postfach 1.5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Das Ereignis, das den Handler widerrufen soll.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 8f49e8521da66cd80539a2464870171b06627c02
  ms.sourcegitcommit: 1e0143ae4add09dbe22b0080d22fb25101757fba
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 06/11/2021
  ms.locfileid: "52895126"
