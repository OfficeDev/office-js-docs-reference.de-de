### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPart:class'
    summary: |-
      <span data-ttu-id="6565f-101">Stellt ein benutzerdefiniertes XML-Part-Objekt in einer Arbeitsmappe dar.</span><span class="sxs-lookup"><span data-stu-id="6565f-101">Represents a custom XML part object in a workbook.</span></span>

      <span data-ttu-id="6565f-102">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6565f-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPart
    fullName: Excel.CustomXmlPart
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPart#context:member'
      - 'excel!Excel.CustomXmlPart#delete:member(1)'
      - 'excel!Excel.CustomXmlPart#getXml:member(1)'
      - 'excel!Excel.CustomXmlPart#id:member'
      - 'excel!Excel.CustomXmlPart#load:member(1)'
      - 'excel!Excel.CustomXmlPart#load:member(2)'
      - 'excel!Excel.CustomXmlPart#load:member(3)'
      - 'excel!Excel.CustomXmlPart#namespaceUri:member'
      - 'excel!Excel.CustomXmlPart#setXml:member(1)'
      - 'excel!Excel.CustomXmlPart#toJSON:member(1)'
  - uid: 'excel!Excel.CustomXmlPart#context:member'
    summary: '<span data-ttu-id="6565f-103">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="6565f-103">The request context associated with the object.</span></span> <span data-ttu-id="6565f-104">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="6565f-104">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomXmlPart#delete:member(1)'
    summary: |-
      <span data-ttu-id="6565f-105">Löscht die benutzerdefinierte XML-Komponente.</span><span class="sxs-lookup"><span data-stu-id="6565f-105">Deletes the custom XML part.</span></span>

      <span data-ttu-id="6565f-106">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6565f-106">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6565f-107">Beispiele</span><span class="sxs-lookup"><span data-stu-id="6565f-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
  - uid: 'excel!Excel.CustomXmlPart#getXml:member(1)'
    summary: |-
      <span data-ttu-id="6565f-108">Ruft den vollständigen XML-Inhalt der benutzerdefinierten XML-Komponente ab.</span><span class="sxs-lookup"><span data-stu-id="6565f-108">Gets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="6565f-109">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6565f-109">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getXml()
    fullName: getXml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart#getXml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6565f-110">Beispiele</span><span class="sxs-lookup"><span data-stu-id="6565f-110">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPart#id:member'
    summary: |-
      <span data-ttu-id="6565f-111">Die ID des benutzerdefinierten XML-Teils.</span><span class="sxs-lookup"><span data-stu-id="6565f-111">The custom XML part's ID.</span></span> <span data-ttu-id="6565f-112">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="6565f-112">Read-only.</span></span>

      <span data-ttu-id="6565f-113">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6565f-113">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6565f-114">Beispiele</span><span class="sxs-lookup"><span data-stu-id="6565f-114">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPart#load:member(1)'
    summary: <span data-ttu-id="6565f-115">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="6565f-115">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6565f-116">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="6565f-116">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.CustomXmlPartLoadOptions): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="6565f-117">Enthält Optionen für die Eigenschaften des zu ladenden Objekts.</span><span class="sxs-lookup"><span data-stu-id="6565f-117">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.CustomXmlPartLoadOptions:interface'
  - uid: 'excel!Excel.CustomXmlPart#load:member(2)'
    summary: <span data-ttu-id="6565f-118">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="6565f-118">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6565f-119">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="6565f-119">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="6565f-120">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="6565f-120">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CustomXmlPart#load:member(3)'
    summary: <span data-ttu-id="6565f-121">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="6565f-121">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6565f-122">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="6565f-122">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.CustomXmlPart;
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="6565f-123">`propertyNamesAndPaths.select`ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften `propertyNamesAndPaths.expand` angibt, und ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="6565f-123">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.CustomXmlPart#namespaceUri:member'
    summary: |-
      <span data-ttu-id="6565f-124">Der Namespace-URI des benutzerdefinierten XML-Teils.</span><span class="sxs-lookup"><span data-stu-id="6565f-124">The custom XML part's namespace URI.</span></span> <span data-ttu-id="6565f-125">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="6565f-125">Read-only.</span></span>

      <span data-ttu-id="6565f-126">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6565f-126">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: namespaceUri
    fullName: namespaceUri
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly namespaceUri: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.CustomXmlPart#setXml:member(1)'
    summary: |-
      <span data-ttu-id="6565f-127">Legt den vollständigen XML-Inhalt der benutzerdefinierten XML-Komponente fest.</span><span class="sxs-lookup"><span data-stu-id="6565f-127">Sets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="6565f-128">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6565f-128">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setXml(xml)
    fullName: setXml(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setXml(xml: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="6565f-129">Beispiele</span><span class="sxs-lookup"><span data-stu-id="6565f-129">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="6565f-130">XML-Inhalt für das Webpart.</span><span class="sxs-lookup"><span data-stu-id="6565f-130">XML content for the part.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPart#toJSON:member(1)'
    summary: '<span data-ttu-id="6565f-131">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="6565f-131">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="6565f-132">.</span><span class="sxs-lookup"><span data-stu-id="6565f-132"></span></span> <span data-ttu-id="6565f-133">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="6565f-133"></span></span><!-- --><span data-ttu-id="6565f-134">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Excel. CustomXMLPart-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.CustomXmlPartData`</span><span class="sxs-lookup"><span data-stu-id="6565f-134">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.CustomXmlPart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartData`</span></span><!-- --><span data-ttu-id="6565f-135">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="6565f-135">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CustomXmlPartData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomXmlPart#getXml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.CustomXmlPart:class'
    name: Excel.CustomXmlPart
  - uid: 'excel!Excel.Interfaces.CustomXmlPartLoadOptions:interface'
    name: Excel.Interfaces.CustomXmlPartLoadOptions
  - uid: 'excel!Excel.Interfaces.CustomXmlPartData:interface'
    name: Excel.Interfaces.CustomXmlPartData