### YamlMime:UniversalReference
items:
  - uid: excel.Excel.DataValidation
    summary: |-
      <span data-ttu-id="71a1c-101">Stellt die Datenüberprüfung dar, die auf den aktuellen Bereich angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="71a1c-101">Represents the data validation applied to the current range.</span></span> <span data-ttu-id="71a1c-102">Weitere Informationen zum Daten Validierungs Objektmodell finden Sie unter [Hinzufügen von Datenüberprüfung zu Excel-Bereichen](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span><span class="sxs-lookup"><span data-stu-id="71a1c-102">To learn more about the data validation object model, read [Add data validation to Excel ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span></span><!-- --><span data-ttu-id="71a1c-103">.</span><span class="sxs-lookup"><span data-stu-id="71a1c-103"></span></span>

      <span data-ttu-id="71a1c-104">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-104">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.DataValidation
    fullName: Excel.DataValidation
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.DataValidation.clear
      - excel.Excel.DataValidation.context
      - excel.Excel.DataValidation.errorAlert
      - excel.Excel.DataValidation.getInvalidCells
      - excel.Excel.DataValidation.getInvalidCellsOrNullObject
      - excel.Excel.DataValidation.ignoreBlanks
      - excel.Excel.DataValidation.load
      - excel.Excel.DataValidation.load_1
      - excel.Excel.DataValidation.load_2
      - excel.Excel.DataValidation.prompt
      - excel.Excel.DataValidation.rule
      - excel.Excel.DataValidation.set
      - excel.Excel.DataValidation.set_1
      - excel.Excel.DataValidation.toJSON
      - excel.Excel.DataValidation.type
      - excel.Excel.DataValidation.valid
  - uid: excel.Excel.DataValidation.clear
    summary: |-
      <span data-ttu-id="71a1c-105">Löscht die Datenüberprüfung aus dem aktuellen Bereich.</span><span class="sxs-lookup"><span data-stu-id="71a1c-105">Clears the data validation from the current range.</span></span>

      <span data-ttu-id="71a1c-106">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-106">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.DataValidation.context
    summary: '<span data-ttu-id="71a1c-107">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="71a1c-107">The request context associated with the object.</span></span> <span data-ttu-id="71a1c-108">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="71a1c-108">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.DataValidation.errorAlert
    summary: |-
      <span data-ttu-id="71a1c-109">Fehlermeldung, wenn Benutzer ungültige Daten eingibt.</span><span class="sxs-lookup"><span data-stu-id="71a1c-109">Error alert when user enters invalid data.</span></span>

      <span data-ttu-id="71a1c-110">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-110">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: errorAlert
    fullName: errorAlert
    langs:
      - typeScript
    type: property
    syntax:
      content: 'errorAlert: Excel.DataValidationErrorAlert;'
      return:
        type:
          - excel.Excel.DataValidationErrorAlert
        description: |-


          #### <a name="examples"></a><span data-ttu-id="71a1c-111">Beispiele</span><span class="sxs-lookup"><span data-stu-id="71a1c-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const commentsRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              commentsRange.dataValidation.clear();   

              // If the value of A2 is contained in the value of C2, then 
              // SEARCH(A2,C2) returns the number where it begins. Otherwise,
              // it does not return a number.
              let redundantStringRule = {
                  custom: {
                      formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
                  }
              };
              commentsRange.dataValidation.rule = redundantStringRule;
              commentsRange.dataValidation.errorAlert = {
                  message: "It is redundant to include the baby name in the comment.",
                  showAlert: true,
                  style: "Information",
                  title: "Baby Name in Comment"
              };

              await context.sync();
          });
          ```
  - uid: excel.Excel.DataValidation.getInvalidCells
    summary: |-
      <span data-ttu-id="71a1c-112">Gibt ein RangeAreas-Objekt, das einen oder mehrere rechteckige Bereiche umfasst, mit ungültigen Zellwerten zurück.</span><span class="sxs-lookup"><span data-stu-id="71a1c-112">Returns a RangeAreas, comprising one or more rectangular ranges, with invalid cell values.</span></span> <span data-ttu-id="71a1c-113">Wenn alle Zellwerte gültig sind, löst diese Funktion einen ItemNotFound Fehler aus.</span><span class="sxs-lookup"><span data-stu-id="71a1c-113">If all cell values are valid, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="71a1c-114">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-114">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getInvalidCells()
    fullName: getInvalidCells()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInvalidCells(): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
  - uid: excel.Excel.DataValidation.getInvalidCellsOrNullObject
    summary: |-
      <span data-ttu-id="71a1c-115">Gibt ein RangeAreas-Objekt, das einen oder mehrere rechteckige Bereiche umfasst, mit ungültigen Zellwerten zurück.</span><span class="sxs-lookup"><span data-stu-id="71a1c-115">Returns a RangeAreas, comprising one or more rectangular ranges, with invalid cell values.</span></span> <span data-ttu-id="71a1c-116">Wenn alle Zellwerte gültig sind, gibt diese Funktion NULL zurück.</span><span class="sxs-lookup"><span data-stu-id="71a1c-116">If all cell values are valid, this function will return null.</span></span>

      <span data-ttu-id="71a1c-117">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-117">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getInvalidCellsOrNullObject()
    fullName: getInvalidCellsOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInvalidCellsOrNullObject(): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
  - uid: excel.Excel.DataValidation.ignoreBlanks
    summary: |-
      <span data-ttu-id="71a1c-118">Leere Zellen ignorieren: Es wird keine Datenüberprüfung für leere Zellen durchgeführt. Die Eigenschaft ist standardmäßig auf „true“ festgelegt.</span><span class="sxs-lookup"><span data-stu-id="71a1c-118">Ignore blanks: no data validation will be performed on blank cells, it defaults to true.</span></span>

      <span data-ttu-id="71a1c-119">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-119">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: ignoreBlanks
    fullName: ignoreBlanks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreBlanks: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.DataValidation.load
    summary: <span data-ttu-id="71a1c-120">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="71a1c-120">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="71a1c-121">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="71a1c-121">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="71a1c-122">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="71a1c-122">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="71a1c-123">`load(option?: string | string[]): Excel.DataValidation`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="71a1c-123">`load(option?: string | string[]): Excel.DataValidation` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="71a1c-124">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="71a1c-124">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="71a1c-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation`Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="71a1c-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation` - Only available on collection types.</span></span> <span data-ttu-id="71a1c-126">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="71a1c-126">It is similar to the preceding signature.</span></span> <span data-ttu-id="71a1c-127">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können.</span><span class="sxs-lookup"><span data-stu-id="71a1c-127">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="71a1c-128">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="71a1c-128">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="71a1c-129">Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.</span><span class="sxs-lookup"><span data-stu-id="71a1c-129">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.DataValidationLoadOptions): Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.DataValidationLoadOptions
  - uid: excel.Excel.DataValidation.load_1
    summary: <span data-ttu-id="71a1c-130">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="71a1c-130">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="71a1c-131">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="71a1c-131">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="71a1c-132">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="71a1c-132">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.DataValidation.load_2
    summary: <span data-ttu-id="71a1c-133">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="71a1c-133">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="71a1c-134">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="71a1c-134">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="71a1c-135">Dabei ist propertyNamesAndPaths. Select eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="71a1c-135">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.DataValidation.prompt
    summary: |-
      <span data-ttu-id="71a1c-136">Eingabeaufforderung, wenn Benutzer eine Zelle auswählen.</span><span class="sxs-lookup"><span data-stu-id="71a1c-136">Prompt when users select a cell.</span></span> <span data-ttu-id="71a1c-137">Das `DataValidationPrompt` Objekt muss als JSON-Objekt festgelegt werden ( `x.prompt = {...}` verwenden Sie anstelle von`x.prompt.message = ...`</span><span class="sxs-lookup"><span data-stu-id="71a1c-137">The `DataValidationPrompt` object must be set as a JSON object (use `x.prompt = {...}` instead of `x.prompt.message = ...`</span></span><!-- --><span data-ttu-id="71a1c-138">).</span><span class="sxs-lookup"><span data-stu-id="71a1c-138"></span></span>

      <span data-ttu-id="71a1c-139">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-139">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: prompt
    fullName: prompt
    langs:
      - typeScript
    type: property
    syntax:
      content: 'prompt: Excel.DataValidationPrompt;'
      return:
        type:
          - excel.Excel.DataValidationPrompt
        description: |-


          #### <a name="examples"></a><span data-ttu-id="71a1c-140">Beispiele</span><span class="sxs-lookup"><span data-stu-id="71a1c-140">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          });
          ```
  - uid: excel.Excel.DataValidation.rule
    summary: |-
      <span data-ttu-id="71a1c-141">Daten Überprüfungsregel, die unterschiedliche Typen von Daten Überprüfungskriterien enthält.</span><span class="sxs-lookup"><span data-stu-id="71a1c-141">Data validation rule that contains different type of data validation criteria.</span></span>

      <span data-ttu-id="71a1c-142">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-142">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.DataValidationRule;'
      return:
        type:
          - excel.Excel.DataValidationRule
        description: |-


          #### <a name="examples"></a><span data-ttu-id="71a1c-143">Beispiele</span><span class="sxs-lookup"><span data-stu-id="71a1c-143">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          });
          ```
  - uid: excel.Excel.DataValidation.set
    summary: '<span data-ttu-id="71a1c-144">Legt mehrere Eigenschaften eines Objekts gleichzeitig fest.</span><span class="sxs-lookup"><span data-stu-id="71a1c-144">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="71a1c-145">Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.</span><span class="sxs-lookup"><span data-stu-id="71a1c-145">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="71a1c-146">Diese Methode hat die folgende zusätzliche Signatur:</span><span class="sxs-lookup"><span data-stu-id="71a1c-146">This method has the following additional signature:</span></span>

      `set(properties: Excel.DataValidation): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.DataValidationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="71a1c-147">Ein JavaScript-Objekt mit Eigenschaften, die isomorphically für die Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="71a1c-147">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - Interfaces.DataValidationUpdateData
        - id: options
          description: '<span data-ttu-id="71a1c-148">Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.</span><span class="sxs-lookup"><span data-stu-id="71a1c-148">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.DataValidation.set_1
    summary: '<span data-ttu-id="71a1c-149">Legt mehrere Eigenschaften für das Objekt gleichzeitig basierend auf einem vorhandenen geladenen Objekt fest.</span><span class="sxs-lookup"><span data-stu-id="71a1c-149">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.DataValidation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.DataValidation
  - uid: excel.Excel.DataValidation.toJSON
    summary: '<span data-ttu-id="71a1c-150">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="71a1c-150">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="71a1c-151">.</span><span class="sxs-lookup"><span data-stu-id="71a1c-151"></span></span> <span data-ttu-id="71a1c-152">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="71a1c-152"></span></span><!-- --><span data-ttu-id="71a1c-153">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Excel. datavalidate-Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.DataValidationData`</span><span class="sxs-lookup"><span data-stu-id="71a1c-153">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.DataValidation object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataValidationData`</span></span><!-- --><span data-ttu-id="71a1c-154">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="71a1c-154">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.DataValidationData;'
      return:
        type:
          - excel.Excel.Interfaces.DataValidationData
        description: ''
  - uid: excel.Excel.DataValidation.type
    summary: |-
      <span data-ttu-id="71a1c-155">Informationen zum Typ der Datenüberprüfung finden Sie unter Excel.DataValidationType.</span><span class="sxs-lookup"><span data-stu-id="71a1c-155">Type of the data validation, see Excel.DataValidationType for details.</span></span>

      <span data-ttu-id="71a1c-156">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-156">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria";'
      return:
        type:
          - Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
  - uid: excel.Excel.DataValidation.valid
    summary: |-
      <span data-ttu-id="71a1c-157">Gibt an, ob alle Zellwerte entsprechend den Datenüberprüfungsregeln gültig sind.</span><span class="sxs-lookup"><span data-stu-id="71a1c-157">Represents if all cell values are valid according to the data validation rules.</span></span> <span data-ttu-id="71a1c-158">Gibt true zurück, wenn alle Zellenwerte gültig sind, oder false, wenn alle Zellenwerte ungültig sind.</span><span class="sxs-lookup"><span data-stu-id="71a1c-158">Returns true if all cell values are valid, or false if all cell values are invalid.</span></span> <span data-ttu-id="71a1c-159">Gibt NULL zurück, wenn es sowohl gültige als auch ungültige Zellenwerte innerhalb des Bereichs gibt.</span><span class="sxs-lookup"><span data-stu-id="71a1c-159">Returns null if there are both valid and invalid cell values within the range.</span></span>

      <span data-ttu-id="71a1c-160">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="71a1c-160">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valid
    fullName: valid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valid: boolean;'
      return:
        type:
          - boolean