### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TextConditionalFormat:class'
    summary: |-
      <span data-ttu-id="8d20a-101">Stellt ein bestimmtes Text bedingtes Format dar.</span><span class="sxs-lookup"><span data-stu-id="8d20a-101">Represents a specific text conditional format.</span></span>

      <span data-ttu-id="8d20a-102">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d20a-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.TextConditionalFormat
    fullName: Excel.TextConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TextConditionalFormat#context:member'
      - 'excel!Excel.TextConditionalFormat#format:member'
      - 'excel!Excel.TextConditionalFormat#load:member(1)'
      - 'excel!Excel.TextConditionalFormat#load:member(2)'
      - 'excel!Excel.TextConditionalFormat#load:member(3)'
      - 'excel!Excel.TextConditionalFormat#rule:member'
      - 'excel!Excel.TextConditionalFormat#set:member(1)'
      - 'excel!Excel.TextConditionalFormat#set:member(2)'
      - 'excel!Excel.TextConditionalFormat#toJSON:member(1)'
  - uid: 'excel!Excel.TextConditionalFormat#context:member'
    summary: '<span data-ttu-id="8d20a-103">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="8d20a-103">The request context associated with the object.</span></span> <span data-ttu-id="8d20a-104">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="8d20a-104">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TextConditionalFormat#format:member'
    summary: |-
      <span data-ttu-id="8d20a-105">Gibt ein Format-Objekt zurück, das die Schriftart, Füllung, Rahmen und andere Eigenschaften für bedingte Formate kapselt.</span><span class="sxs-lookup"><span data-stu-id="8d20a-105">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.</span></span> <span data-ttu-id="8d20a-106">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="8d20a-106">Read-only.</span></span>

      <span data-ttu-id="8d20a-107">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d20a-107">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.ConditionalRangeFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalRangeFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8d20a-108">Beispiele</span><span class="sxs-lookup"><span data-stu-id="8d20a-108">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.TextConditionalFormat#load:member(1)'
    summary: <span data-ttu-id="8d20a-109">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="8d20a-109">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8d20a-110">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="8d20a-110">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.TextConditionalFormatLoadOptions): Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="8d20a-111">Enthält Optionen für die Eigenschaften des zu ladenden Objekts.</span><span class="sxs-lookup"><span data-stu-id="8d20a-111">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.TextConditionalFormatLoadOptions:interface'
  - uid: 'excel!Excel.TextConditionalFormat#load:member(2)'
    summary: <span data-ttu-id="8d20a-112">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="8d20a-112">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8d20a-113">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="8d20a-113">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="8d20a-114">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="8d20a-114">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TextConditionalFormat#load:member(3)'
    summary: <span data-ttu-id="8d20a-115">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="8d20a-115">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8d20a-116">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="8d20a-116">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.TextConditionalFormat;
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="8d20a-117">`propertyNamesAndPaths.select`ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften `propertyNamesAndPaths.expand` angibt, und ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="8d20a-117">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.TextConditionalFormat#rule:member'
    summary: |-
      <span data-ttu-id="8d20a-118">Die Regel des bedingten Formats.</span><span class="sxs-lookup"><span data-stu-id="8d20a-118">The rule of the conditional format.</span></span>

      <span data-ttu-id="8d20a-119">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d20a-119">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.ConditionalTextComparisonRule;'
      return:
        type:
          - 'excel!Excel.ConditionalTextComparisonRule:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8d20a-120">Beispiele</span><span class="sxs-lookup"><span data-stu-id="8d20a-120">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.TextConditionalFormat#set:member(1)'
    summary: '<span data-ttu-id="8d20a-121">Legt mehrere Eigenschaften eines Objekts gleichzeitig fest.</span><span class="sxs-lookup"><span data-stu-id="8d20a-121">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="8d20a-122">Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.</span><span class="sxs-lookup"><span data-stu-id="8d20a-122">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="8d20a-123">Diese Methode hat die folgende zusätzliche Signatur:</span><span class="sxs-lookup"><span data-stu-id="8d20a-123">This method has the following additional signature:</span></span>

      `set(properties: Excel.TextConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.TextConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="8d20a-124">Ein JavaScript-Objekt mit Eigenschaften, die isomorphically für die Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="8d20a-124">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - 'excel!Excel.Interfaces.TextConditionalFormatUpdateData:interface'
        - id: options
          description: '<span data-ttu-id="8d20a-125">Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.</span><span class="sxs-lookup"><span data-stu-id="8d20a-125">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.TextConditionalFormat#set:member(2)'
    summary: '<span data-ttu-id="8d20a-126">Legt mehrere Eigenschaften für das Objekt gleichzeitig basierend auf einem vorhandenen geladenen Objekt fest.</span><span class="sxs-lookup"><span data-stu-id="8d20a-126">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.TextConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.TextConditionalFormat:class'
  - uid: 'excel!Excel.TextConditionalFormat#toJSON:member(1)'
    summary: '<span data-ttu-id="8d20a-127">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="8d20a-127">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="8d20a-128">.</span><span class="sxs-lookup"><span data-stu-id="8d20a-128"></span></span> <span data-ttu-id="8d20a-129">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="8d20a-129"></span></span><!-- --><span data-ttu-id="8d20a-130">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Excel. TextConditionalFormat-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.TextConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="8d20a-130">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.TextConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TextConditionalFormatData`</span></span><!-- --><span data-ttu-id="8d20a-131">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="8d20a-131">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TextConditionalFormatData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TextConditionalFormatData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.ConditionalRangeFormat:class'
    name: Excel.ConditionalRangeFormat
  - uid: 'excel!Excel.TextConditionalFormat:class'
    name: Excel.TextConditionalFormat
  - uid: 'excel!Excel.Interfaces.TextConditionalFormatLoadOptions:interface'
    name: Excel.Interfaces.TextConditionalFormatLoadOptions
  - uid: 'excel!Excel.ConditionalTextComparisonRule:interface'
    name: Excel.ConditionalTextComparisonRule
  - uid: 'excel!Excel.Interfaces.TextConditionalFormatUpdateData:interface'
    name: Interfaces.TextConditionalFormatUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.TextConditionalFormatData:interface'
    name: Excel.Interfaces.TextConditionalFormatData