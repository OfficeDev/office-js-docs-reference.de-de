### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Range
    summary: |-
      <span data-ttu-id="4db2d-101">Range stellt eine Gruppe von einer oder mehreren zusammenhängenden Zellen dar, wie eine Zelle, eine Zeile, eine Spalte, ein Zellenblock usw. Weitere Informationen zur Verwendung von Bereichen in der API finden Sie unter [Arbeiten mit Bereichen mithilfe der Excel-JavaScript-API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) und [Arbeiten mit Bereichen mithilfe der Excel-JavaScript-API (erweitert)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span><span class="sxs-lookup"><span data-stu-id="4db2d-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id="4db2d-102">.</span><span class="sxs-lookup"><span data-stu-id="4db2d-102"></span></span>

      <span data-ttu-id="4db2d-103">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Range.address
      - excel.Excel.Range.addressLocal
      - excel.Excel.Range.cellCount
      - excel.Excel.Range.clear
      - excel.Excel.Range.clear_1
      - excel.Excel.Range.columnCount
      - excel.Excel.Range.columnIndex
      - excel.Excel.Range.context
      - excel.Excel.Range.delete
      - excel.Excel.Range.delete_1
      - excel.Excel.Range.format
      - excel.Excel.Range.formulas
      - excel.Excel.Range.formulasLocal
      - excel.Excel.Range.getBoundingRect
      - excel.Excel.Range.getCell
      - excel.Excel.Range.getColumn
      - excel.Excel.Range.getEntireColumn
      - excel.Excel.Range.getEntireRow
      - excel.Excel.Range.getIntersection
      - excel.Excel.Range.getLastCell
      - excel.Excel.Range.getLastColumn
      - excel.Excel.Range.getLastRow
      - excel.Excel.Range.getOffsetRange
      - excel.Excel.Range.getRow
      - excel.Excel.Range.insert
      - excel.Excel.Range.insert_1
      - excel.Excel.Range.load
      - excel.Excel.Range.load_1
      - excel.Excel.Range.load_2
      - excel.Excel.Range.numberFormat
      - excel.Excel.Range.rowCount
      - excel.Excel.Range.rowIndex
      - excel.Excel.Range.select
      - excel.Excel.Range.set
      - excel.Excel.Range.set_1
      - excel.Excel.Range.text
      - excel.Excel.Range.toJSON
      - excel.Excel.Range.track
      - excel.Excel.Range.untrack
      - excel.Excel.Range.values
      - excel.Excel.Range.valueTypes
      - excel.Excel.Range.worksheet
  - uid: excel.Excel.Range.address
    summary: |-
      <span data-ttu-id="4db2d-104">Stellt den Bereichsverweis im a1-Format dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="4db2d-105">Der Wert der Adresse enthält die Blatt Referenz (z. b. "Sheet1! A1: B4 ").</span><span class="sxs-lookup"><span data-stu-id="4db2d-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="4db2d-106">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-106">Read-only.</span></span>

      <span data-ttu-id="4db2d-107">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Range.addressLocal
    summary: |-
      <span data-ttu-id="4db2d-108">Stellt den Bereichsbezug für den angegebenen Bereich in der Sprache des Benutzers dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-108">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="4db2d-109">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-109">Read-only.</span></span>

      <span data-ttu-id="4db2d-110">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Range.cellCount
    summary: |-
      <span data-ttu-id="4db2d-111">Anzahl der Zellen im Bereich.</span><span class="sxs-lookup"><span data-stu-id="4db2d-111">Number of cells in the range.</span></span> <span data-ttu-id="4db2d-112">Diese API gibt -1 zurück, wenn die Zellenanzahl 2^31-1 (2.147.483.647) überschreitet.</span><span class="sxs-lookup"><span data-stu-id="4db2d-112">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id="4db2d-113">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-113">Read-only.</span></span>

      <span data-ttu-id="4db2d-114">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-114">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.clear
    summary: |-
      <span data-ttu-id="4db2d-115">Löscht Bereichswerte, Format, Füllung, Rahmen usw.</span><span class="sxs-lookup"><span data-stu-id="4db2d-115">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="4db2d-116">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-117">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-117">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: <span data-ttu-id="4db2d-118">Optional.</span><span class="sxs-lookup"><span data-stu-id="4db2d-118">Optional.</span></span> <span data-ttu-id="4db2d-119">Bestimmt den Typ der Löschaktion.</span><span class="sxs-lookup"><span data-stu-id="4db2d-119">Determines the type of clear action.</span></span> <span data-ttu-id="4db2d-120">Weitere Informationen finden Sie unter Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="4db2d-120">See Excel.ClearApplyTo for details.</span></span>
          type:
            - excel.Excel.ClearApplyTo
  - uid: excel.Excel.Range.clear_1
    summary: |-
      <span data-ttu-id="4db2d-121">Löscht Bereichswerte, Format, Füllung, Rahmen usw.</span><span class="sxs-lookup"><span data-stu-id="4db2d-121">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="4db2d-122">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-122">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: <span data-ttu-id="4db2d-123">Optional.</span><span class="sxs-lookup"><span data-stu-id="4db2d-123">Optional.</span></span> <span data-ttu-id="4db2d-124">Bestimmt den Typ der Löschaktion.</span><span class="sxs-lookup"><span data-stu-id="4db2d-124">Determines the type of clear action.</span></span> <span data-ttu-id="4db2d-125">Weitere Informationen finden Sie unter Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="4db2d-125">See Excel.ClearApplyTo for details.</span></span>
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: excel.Excel.Range.columnCount
    summary: |-
      <span data-ttu-id="4db2d-126">Stellt die Gesamtanzahl der Spalten im Bereich dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-126">Represents the total number of columns in the range.</span></span> <span data-ttu-id="4db2d-127">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-127">Read-only.</span></span>

      <span data-ttu-id="4db2d-128">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-128">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.columnIndex
    summary: |-
      <span data-ttu-id="4db2d-129">Stellt die Spaltenanzahl der ersten Zelle im Bereich dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-129">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="4db2d-130">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="4db2d-130">Zero-indexed.</span></span> <span data-ttu-id="4db2d-131">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-131">Read-only.</span></span>

      <span data-ttu-id="4db2d-132">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-132">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.context
    summary: '<span data-ttu-id="4db2d-133">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="4db2d-133">The request context associated with the object.</span></span> <span data-ttu-id="4db2d-134">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="4db2d-134">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Range.delete
    summary: |-
      <span data-ttu-id="4db2d-135">Löscht die dem Bereich zugeordneten Zellen.</span><span class="sxs-lookup"><span data-stu-id="4db2d-135">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="4db2d-136">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-136">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: '<span data-ttu-id="4db2d-137">Gibt an, wohin die Zellen verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="4db2d-137">Specifies which way to shift the cells.</span></span> <span data-ttu-id="4db2d-138">Weitere Informationen finden Sie unter Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="4db2d-138">See Excel.DeleteShiftDirection for details.</span></span>'
          type:
            - excel.Excel.DeleteShiftDirection
  - uid: excel.Excel.Range.delete_1
    summary: |-
      <span data-ttu-id="4db2d-139">Löscht die dem Bereich zugeordneten Zellen.</span><span class="sxs-lookup"><span data-stu-id="4db2d-139">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="4db2d-140">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-140">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-141">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-141">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shiftString
          description: '<span data-ttu-id="4db2d-142">Gibt an, wohin die Zellen verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="4db2d-142">Specifies which way to shift the cells.</span></span> <span data-ttu-id="4db2d-143">Weitere Informationen finden Sie unter Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="4db2d-143">See Excel.DeleteShiftDirection for details.</span></span>'
          type:
            - '"Up" | "Left"'
  - uid: excel.Excel.Range.format
    summary: |-
      <span data-ttu-id="4db2d-144">Gibt ein Formatobjekt zurück, das die Schriftart des Bereichs, Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften verschachtelt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-144">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="4db2d-145">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-145">Read-only.</span></span>

      <span data-ttu-id="4db2d-146">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-146">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - excel.Excel.RangeFormat
  - uid: excel.Excel.Range.formulas
    summary: |-
      <span data-ttu-id="4db2d-147">Stellt die Formel in der A1-Schreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-147">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="4db2d-148">Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="4db2d-148">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="4db2d-149">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="4db2d-149">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="4db2d-150">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-150">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.formulasLocal
    summary: |-
      <span data-ttu-id="4db2d-151">Stellt die Formel in der A1-Schreibweise, Sprache des Benutzers und im Gebietsschema der Zahlenformatierung dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-151">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="4db2d-152">Beispielsweise würde die englische Formel „= SUM(A1, 1.5)“ in Deutsch „= SUMME(A1; 1,5)“ werden.</span><span class="sxs-lookup"><span data-stu-id="4db2d-152">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="4db2d-153">Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="4db2d-153">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="4db2d-154">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="4db2d-154">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="4db2d-155">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-155">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.getBoundingRect
    summary: |-
      <span data-ttu-id="4db2d-156">Ruft das kleinste Bereichsobjekt ab, das die angegebenen Bereiche umfasst.</span><span class="sxs-lookup"><span data-stu-id="4db2d-156">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id="4db2d-157">Beispielsweise das GetBoundingRect von "B2:C5" und "D10:E15" lautet "B2:E15".</span><span class="sxs-lookup"><span data-stu-id="4db2d-157">For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>

      <span data-ttu-id="4db2d-158">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-158">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-159">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-159">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="4db2d-160">Das Bereichsobjekt oder die Adresse oder der Bereichsname.</span><span class="sxs-lookup"><span data-stu-id="4db2d-160">The range object or address or range name.</span></span>
          type:
            - Range | string
  - uid: excel.Excel.Range.getCell
    summary: |-
      <span data-ttu-id="4db2d-161">Ruft das Bereichsobjekt ab, das die einzelne Zelle basierend auf Zeilen- und Spaltenanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="4db2d-161">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="4db2d-162">Die Zelle kann außerhalb der Grenzen des übergeordneten Bereichs liegen, solange Sie innerhalb des Arbeitsblatt Rasters bleibt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-162">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="4db2d-163">Die zurückgegebene Zelle befindet sich relativ zur obersten linken Zelle des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="4db2d-163">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="4db2d-164">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-164">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-165">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-165">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="4db2d-166">Zeilenanzahl der abzurufenden Zelle.</span><span class="sxs-lookup"><span data-stu-id="4db2d-166">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="4db2d-167">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="4db2d-167">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="4db2d-168">Spaltenanzahl der abzurufenden Zelle.</span><span class="sxs-lookup"><span data-stu-id="4db2d-168">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="4db2d-169">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="4db2d-169">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.getColumn
    summary: |-
      <span data-ttu-id="4db2d-170">Ruft eine Spalte ab, die im Bereich enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="4db2d-170">Gets a column contained in the range.</span></span>

      <span data-ttu-id="4db2d-171">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-171">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-172">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-172">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="4db2d-173">Spaltenanzahl des abzurufenden Bereichs.</span><span class="sxs-lookup"><span data-stu-id="4db2d-173">Column number of the range to be retrieved.</span></span> <span data-ttu-id="4db2d-174">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="4db2d-174">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.getEntireColumn
    summary: |-
      <span data-ttu-id="4db2d-175">Ruft ein Objekt ab, das die gesamte Spalte des Bereichs darstellt (beispielsweise, wenn der aktuelle Bereich die Zellen "B4: e11" darstellt `getEntireColumn` , sein Wert ist ein Bereich, der die Spalten "B:E" darstellt).</span><span class="sxs-lookup"><span data-stu-id="4db2d-175">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="4db2d-176">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-176">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-177">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-177">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getEntireRow
    summary: |-
      <span data-ttu-id="4db2d-178">Ruft ein Objekt ab, das die gesamte Zeile des Bereichs darstellt (beispielsweise, wenn der aktuelle Bereich die Zellen "B4: e11" darstellt `GetEntireRow` , sein Wert ist ein Bereich, der die Zeilen "4:11") darstellt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-178">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="4db2d-179">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-179">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-180">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-180">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getIntersection
    summary: |-
      <span data-ttu-id="4db2d-181">Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-181">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="4db2d-182">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-182">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-183">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-183">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: '<span data-ttu-id="4db2d-184">Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="4db2d-184">The range object or range address that will be used to determine the intersection of ranges.</span></span>'
          type:
            - Range | string
  - uid: excel.Excel.Range.getLastCell
    summary: |-
      <span data-ttu-id="4db2d-185">Ruft die letzte Zelle im Bereich ab.</span><span class="sxs-lookup"><span data-stu-id="4db2d-185">Gets the last cell within the range.</span></span> <span data-ttu-id="4db2d-186">Beispielsweise lautet die letzte Zelle des Bereichs „B2: D5“ „D5“.</span><span class="sxs-lookup"><span data-stu-id="4db2d-186">For example, the last cell of "B2:D5" is "D5".</span></span>

      <span data-ttu-id="4db2d-187">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-187">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-188">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-188">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getLastColumn
    summary: |-
      <span data-ttu-id="4db2d-189">Ruft die letzte Spalte im Bereich ab.</span><span class="sxs-lookup"><span data-stu-id="4db2d-189">Gets the last column within the range.</span></span> <span data-ttu-id="4db2d-190">Beispielsweise lautet die letzte Spalte von „B2:D5“ „D2:D5“.</span><span class="sxs-lookup"><span data-stu-id="4db2d-190">For example, the last column of "B2:D5" is "D2:D5".</span></span>

      <span data-ttu-id="4db2d-191">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-191">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-192">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-192">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getLastRow
    summary: |-
      <span data-ttu-id="4db2d-193">Ruft die letzte Zeile im Bereich ab.</span><span class="sxs-lookup"><span data-stu-id="4db2d-193">Gets the last row within the range.</span></span> <span data-ttu-id="4db2d-194">Beispielsweise lautet die letzte Zelle des Bereichs "B2: D5" "B5:D5".</span><span class="sxs-lookup"><span data-stu-id="4db2d-194">For example, the last row of "B2:D5" is "B5:D5".</span></span>

      <span data-ttu-id="4db2d-195">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-195">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-196">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-196">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getOffsetRange
    summary: |-
      <span data-ttu-id="4db2d-p122">Ruft ein Objekt ab, das einen Bereich darstellt, der aus dem angegebenen Bereich versetzt ist. Die Dimension des zurückgegebenen Bereichs entspricht diesem Bereich. Wenn der resultierende Bereich außerhalb des Arbeitsblatt-Rasters erzwungen wird, wird ein Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="4db2d-p122">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="4db2d-200">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-200">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-201">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-201">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="4db2d-p123">Die Anzahl an Zeilen (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-p123">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="4db2d-p124">Die Anzahl an Spalten (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-p124">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getRow
    summary: |-
      <span data-ttu-id="4db2d-206">Ruft eine Zelle ab, die im Bereich enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="4db2d-206">Gets a row contained in the range.</span></span>

      <span data-ttu-id="4db2d-207">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-207">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-208">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-208">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="4db2d-209">Zeilenanzahl des abzurufenden Bereichs.</span><span class="sxs-lookup"><span data-stu-id="4db2d-209">Row number of the range to be retrieved.</span></span> <span data-ttu-id="4db2d-210">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="4db2d-210">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.insert
    summary: |-
      <span data-ttu-id="4db2d-p126">Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues Bereichsobjekt in dem nun leeren Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="4db2d-p126">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="4db2d-213">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-213">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-214">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-214">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: '<span data-ttu-id="4db2d-215">Gibt an, wohin die Zellen verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="4db2d-215">Specifies which way to shift the cells.</span></span> <span data-ttu-id="4db2d-216">Weitere Informationen finden Sie unter Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="4db2d-216">See Excel.InsertShiftDirection for details.</span></span>'
          type:
            - excel.Excel.InsertShiftDirection
  - uid: excel.Excel.Range.insert_1
    summary: |-
      <span data-ttu-id="4db2d-p128">Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues Bereichsobjekt in dem nun leeren Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="4db2d-p128">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="4db2d-219">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-219">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: shiftString
          description: '<span data-ttu-id="4db2d-220">Gibt an, wohin die Zellen verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="4db2d-220">Specifies which way to shift the cells.</span></span> <span data-ttu-id="4db2d-221">Weitere Informationen finden Sie unter Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="4db2d-221">See Excel.InsertShiftDirection for details.</span></span>'
          type:
            - '"Down" | "Right"'
  - uid: excel.Excel.Range.load
    summary: <span data-ttu-id="4db2d-222">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="4db2d-222">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4db2d-223">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="4db2d-223">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="4db2d-224">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="4db2d-224">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="4db2d-225">`load(option?: string | string[]): Excel.Range`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="4db2d-225">`load(option?: string | string[]): Excel.Range` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="4db2d-226">`load(option?: { select?: string; expand?: string; }): Excel.Range`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-226">`load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="4db2d-227">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="4db2d-227">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types.</span></span> <span data-ttu-id="4db2d-228">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="4db2d-228">It is similar to the preceding signature.</span></span> <span data-ttu-id="4db2d-229">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können.</span><span class="sxs-lookup"><span data-stu-id="4db2d-229">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="4db2d-230">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="4db2d-230">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="4db2d-231">Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.</span><span class="sxs-lookup"><span data-stu-id="4db2d-231">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.RangeLoadOptions
  - uid: excel.Excel.Range.load_1
    summary: <span data-ttu-id="4db2d-232">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="4db2d-232">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4db2d-233">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="4db2d-233">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-234">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-234">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="4db2d-235">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="4db2d-235">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.Range.load_2
    summary: <span data-ttu-id="4db2d-236">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="4db2d-236">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4db2d-237">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="4db2d-237">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="4db2d-238">Dabei ist propertyNamesAndPaths. Select eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-238">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Range.numberFormat
    summary: |-
      <span data-ttu-id="4db2d-239">Stellt den Zahlenformatcode für Excel für den angegebenen Bereich dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-239">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="4db2d-240">Beim Festlegen des Zahlenformats für einen Bereich kann das value-Argument entweder ein einzelner Wert (Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="4db2d-240">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="4db2d-241">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="4db2d-241">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="4db2d-242">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-242">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.rowCount
    summary: |-
      <span data-ttu-id="4db2d-243">Gibt die Anzahl der Zeilen im Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="4db2d-243">Returns the total number of rows in the range.</span></span> <span data-ttu-id="4db2d-244">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-244">Read-only.</span></span>

      <span data-ttu-id="4db2d-245">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-245">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.rowIndex
    summary: |-
      <span data-ttu-id="4db2d-246">Gibt die Spaltenanzahl der ersten Zelle im Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="4db2d-246">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="4db2d-247">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="4db2d-247">Zero-indexed.</span></span> <span data-ttu-id="4db2d-248">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-248">Read-only.</span></span>

      <span data-ttu-id="4db2d-249">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-249">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.select
    summary: |-
      <span data-ttu-id="4db2d-250">Wählt den angegebenen Bereich in der Excel-Benutzeroberfläche aus.</span><span class="sxs-lookup"><span data-stu-id="4db2d-250">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="4db2d-251">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-251">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-252">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-252">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.set
    summary: '<span data-ttu-id="4db2d-253">Legt mehrere Eigenschaften eines Objekts gleichzeitig fest.</span><span class="sxs-lookup"><span data-stu-id="4db2d-253">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="4db2d-254">Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.</span><span class="sxs-lookup"><span data-stu-id="4db2d-254">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="4db2d-255">Diese Methode hat die folgende zusätzliche Signatur:</span><span class="sxs-lookup"><span data-stu-id="4db2d-255">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="4db2d-256">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-256">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="4db2d-257">Ein JavaScript-Objekt mit Eigenschaften, die isomorphically für die Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="4db2d-257">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - Interfaces.RangeUpdateData
        - id: options
          description: '<span data-ttu-id="4db2d-258">Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.</span><span class="sxs-lookup"><span data-stu-id="4db2d-258">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Range.set_1
    summary: '<span data-ttu-id="4db2d-259">Legt mehrere Eigenschaften für das Objekt gleichzeitig basierend auf einem vorhandenen geladenen Objekt fest.</span><span class="sxs-lookup"><span data-stu-id="4db2d-259">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Range
  - uid: excel.Excel.Range.text
    summary: |-
      <span data-ttu-id="4db2d-260">Textwerte des angegebenen Bereichs.</span><span class="sxs-lookup"><span data-stu-id="4db2d-260">Text values of the specified range.</span></span> <span data-ttu-id="4db2d-261">Der Textwert hängt nicht von der Zellenbreite ab.</span><span class="sxs-lookup"><span data-stu-id="4db2d-261">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="4db2d-262">Die \# Zeichenersetzung, die in der Excel-Benutzeroberfläche geschieht, wirkt sich nicht auf den von der API zurückgegebenen Textwert aus.</span><span class="sxs-lookup"><span data-stu-id="4db2d-262">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="4db2d-263">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-263">Read-only.</span></span>

      <span data-ttu-id="4db2d-264">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-264">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: excel.Excel.Range.toJSON
    summary: '<span data-ttu-id="4db2d-265">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="4db2d-265">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="4db2d-266">.</span><span class="sxs-lookup"><span data-stu-id="4db2d-266"></span></span> <span data-ttu-id="4db2d-267">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="4db2d-267"></span></span><!-- --><span data-ttu-id="4db2d-268">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Excel. Range-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="4db2d-268">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="4db2d-269">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="4db2d-269">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - excel.Excel.Interfaces.RangeData
        description: ''
  - uid: excel.Excel.Range.track
    summary: '<span data-ttu-id="4db2d-270">Nachverfolgung des Objekts zwecks automatischer Anpassung auf der Grundlage der umgebenden Änderungen im Dokument.</span><span class="sxs-lookup"><span data-stu-id="4db2d-270">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="4db2d-271">Dieser Aufruf ist eine Kurzschreibweise für context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="4db2d-271">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="4db2d-272">Wenn Sie dieses Objekt übergreifend für ".sync"-Aufrufe und außerhalb der sequenziellen Ausführung eines ".run"-Stapels verwenden und beim Festlegen einer Eigenschaft oder Aufrufen einer Methode für das Objekt ein "InvalidObjectPath"-Fehler zurückgegeben wird, hätte das Objekt der nachverfolgten Objektsammlung hinzugefügt werden müssen, in der das Objekt ursprünglich erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="4db2d-272">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.Range.untrack
    summary: '<span data-ttu-id="4db2d-273">Gibt den diesem Objekt zugewiesenen Arbeitsspeicher frei, wenn das Objekt zuvor nachverfolgt wurde.</span><span class="sxs-lookup"><span data-stu-id="4db2d-273">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="4db2d-274">Dieser Aufruf stellt eine Kurzschreibweise für context.trackedObjects.remove(thisObject) dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-274">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="4db2d-275">Viele nachverfolgte Objekte verlangsamen die Ausführung der Hostanwendung, also achten Sie darauf, alle hinzugefügten Objekte nach abgeschlossener Verwendung freizugeben.</span><span class="sxs-lookup"><span data-stu-id="4db2d-275">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="4db2d-276">Sie müssen "context.sync()" aufrufen, damit die Freigabe des Arbeitsspeichers wirksam wird.</span><span class="sxs-lookup"><span data-stu-id="4db2d-276">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4db2d-277">Beispiele</span><span class="sxs-lookup"><span data-stu-id="4db2d-277">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: excel.Excel.Range.values
    summary: |-
      <span data-ttu-id="4db2d-278">Stellt die Rohwerte des angegebenen Bereichs dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-278">Represents the raw values of the specified range.</span></span> <span data-ttu-id="4db2d-279">Die zurückgegebenen Daten können vom Typ Zeichenfolge, Zahl oder ein boolescher Wert sein.</span><span class="sxs-lookup"><span data-stu-id="4db2d-279">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="4db2d-280">Zellen, die einen Fehler enthalten, geben die Fehlerzeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="4db2d-280">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="4db2d-281">Beim Festlegen von Werten auf einen Bereich kann das value-Argument entweder ein einzelner Wert (String, Number oder Boolean) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="4db2d-281">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="4db2d-282">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="4db2d-282">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="4db2d-283">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-283">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.valueTypes
    summary: |-
      <span data-ttu-id="4db2d-284">Stellt den Datentyp in jeder Zelle dar.</span><span class="sxs-lookup"><span data-stu-id="4db2d-284">Represents the type of data of each cell.</span></span> <span data-ttu-id="4db2d-285">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-285">Read-only.</span></span>

      <span data-ttu-id="4db2d-286">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-286">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'Excel.RangeValueType[][]'
  - uid: excel.Excel.Range.worksheet
    summary: |-
      <span data-ttu-id="4db2d-287">Das Arbeitsblatt, das den aktuellen Bereich enthält.</span><span class="sxs-lookup"><span data-stu-id="4db2d-287">The worksheet containing the current range.</span></span> <span data-ttu-id="4db2d-288">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="4db2d-288">Read-only.</span></span>

      <span data-ttu-id="4db2d-289">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4db2d-289">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet