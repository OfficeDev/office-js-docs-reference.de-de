### YamlMime:UniversalReference
items:
  - uid: outlook.Office.AttachmentContent
    summary: |-
      Stellt den Inhalt einer Anlage für eine Nachricht oder ein Terminelement dar.

      \[[API-Gruppe: Post fach Vorschau](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen
    isPreview: true
    name: Office.AttachmentContent
    fullName: Office.AttachmentContent
    langs:
      - typeScript
    type: interface
    package: outlook
    children:
      - outlook.Office.AttachmentContent.content
      - outlook.Office.AttachmentContent.format
  - uid: outlook.Office.AttachmentContent.content
    summary: Der Inhalt einer Anlage als Zeichenfolge.
    isPreview: true
    name: content
    fullName: content
    langs:
      - typeScript
    type: property
    syntax:
      content: 'content: string;'
      return:
        type:
          - string
  - uid: outlook.Office.AttachmentContent.format
    summary: |-
      Das Zeichenfolgenformat, das für den Inhalt einer Anlage verwendet werden soll.

      Bei Dateianlagen handelt es sich bei der Formatierung um eine Base64-codierte Zeichenfolge.

      Bei Element Anlagen, die Nachrichten darstellen, ist die Formatierung eine Zeichenfolge, die eine EML-formatierte Datei darstellt.

      Bei Element Anlagen, die Kalenderelemente darstellen, ist die Formatierung eine Zeichenfolge, die eine iCalendar-Datei darstellt.

      Bei Cloud-Anlagen ist die Formatierung eine URL-Zeichenfolge.
    isPreview: true
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'format: MailboxEnums.AttachmentContentFormat | string;'
      return:
        type:
          - MailboxEnums.AttachmentContentFormat | string
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          var item = Office.context.mailbox.item;
          var listOfAttachments = [];
          var options = {asyncContext: {currentItem: item}};
          item.getAttachmentsAsync(options, callback);

          function callback(result) {
              if (result.value.length > 0) {
                  for (i = 0 ; i < result.value.length ; i++) {
                      result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
                  }
              }
          }

          function handleAttachmentsCallback(result) {
              // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
              switch (result.value.format) {
                  case Office.MailboxEnums.AttachmentContentFormat.Base64:
                      // Handle file attachment.
                      break;
                  case Office.MailboxEnums.AttachmentContentFormat.Eml:
                      // Handle email item attachment.
                      break;
                  case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                      // Handle .icalender attachment.
                      break;
                  case Office.MailboxEnums.AttachmentContentFormat.Url:
                      // Handle cloud attachment.
                      break;
                  default:
                      // Handle attachment formats that are not supported.
              }
          }
          ```