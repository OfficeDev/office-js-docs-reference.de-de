### YamlMime:UniversalReference
items:
  - uid: outlook.Office.Mailbox
    summary: |-
      Ermöglicht den Zugriff auf das Outlook-Add-In-Objektmodell für Microsoft Outlook und Microsoft Outlook im Web.

      Namespaces

      - diagnostics: Stellt einem Outlook-Add-In Diagnoseinformationen bereit.

      - item: Stellt Methoden und Eigenschaften für den Zugriff auf eine Nachricht oder einen Termins in einem Outlook-Add-In bereit.

      - userProfile: Stellt Informationen zum Benutzer in einem Outlook-Add-In bereit.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: eingeschränkt

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen
    name: Office.Mailbox
    fullName: Office.Mailbox
    langs:
      - typeScript
    type: interface
    package: outlook
    children:
      - outlook.Office.Mailbox.addHandlerAsync
      - outlook.Office.Mailbox.addHandlerAsync_1
      - outlook.Office.Mailbox.convertToEwsId
      - outlook.Office.Mailbox.convertToLocalClientTime
      - outlook.Office.Mailbox.convertToRestId
      - outlook.Office.Mailbox.convertToUtcClientTime
      - outlook.Office.Mailbox.displayAppointmentForm
      - outlook.Office.Mailbox.displayMessageForm
      - outlook.Office.Mailbox.displayNewAppointmentForm
      - outlook.Office.Mailbox.displayNewMessageForm
      - outlook.Office.Mailbox.getCallbackTokenAsync
      - outlook.Office.Mailbox.getCallbackTokenAsync_1
      - outlook.Office.Mailbox.getUserIdentityTokenAsync
      - outlook.Office.Mailbox.makeEwsRequestAsync
      - outlook.Office.Mailbox.removeHandlerAsync
      - outlook.Office.Mailbox.removeHandlerAsync_1
      - outlook.Office.Mailbox.diagnostics
      - outlook.Office.Mailbox.ewsUrl
      - outlook.Office.Mailbox.item
      - outlook.Office.Mailbox.masterCategories
      - outlook.Office.Mailbox.restUrl
      - outlook.Office.Mailbox.userProfile
  - uid: outlook.Office.Mailbox.addHandlerAsync
    summary: |-
      Fügt einen Ereignishandler für ein unterstütztes Ereignis hinzu. **Hinweis**: Ereignisse sind nur mit dem Aufgabenbereich verfügbar.

      Derzeit wird der einzige unterstützte Ereignistyp`Office.EventType.ItemChanged`<!-- -->. In der Vorschau `Office.EventType.OfficeThemeChanged` wird ebenfalls unterstützt.

      \[[API-Gruppe: Mailbox 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Das Ereignis, das den Handler aufrufen soll'
          type:
            - Office.EventType | string
        - id: handler
          description: 'Die Funktion, die das Ereignis behandeln soll. Die Funktion muss einen einzigen Parameter akzeptieren (ein Objektliteral). Die Type-Eigenschaft des Parameters stimmt mit dem eventType-Parameter überein, der an addHandlerAsync übergeben wird.'
          type:
            - '(type: Office.EventType) => void'
        - id: options
          description: 'Optional. Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzigen Parameter vom Typ Office. AsyncResult aufgerufen.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Mailbox.addHandlerAsync_1
    summary: |-
      Fügt einen Ereignishandler für ein unterstütztes Ereignis hinzu. **Hinweis**: Ereignisse sind nur mit dem Aufgabenbereich verfügbar.

      Derzeit wird der einzige unterstützte Ereignistyp`Office.EventType.ItemChanged`<!-- -->. In der Vorschau `Office.EventType.OfficeThemeChanged` wird ebenfalls unterstützt.

      \[[API-Gruppe: Mailbox 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      #### <a name="examples"></a>Beispiele

      ```javascript
      Office.initialize = function (reason) {
          $(document).ready(function () {
              Office.context.mailbox.addHandlerAsync(Office.EventType.ItemChanged, loadNewItem, function (result) {
              if (result.status === Office.AsyncResultStatus.Failed) {
                      // Handle error.
                  }
              });
          });
      };

      function loadNewItem(eventArgs) {
          // Load the properties of the newly selected item.
          loadProps(Office.context.mailbox.item);
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Das Ereignis, das den Handler aufrufen soll'
          type:
            - Office.EventType | string
        - id: handler
          description: 'Die Funktion, die das Ereignis behandeln soll. Die Funktion muss einen einzigen Parameter akzeptieren (ein Objektliteral). Die Type-Eigenschaft des Parameters stimmt mit dem eventType-Parameter überein, der an addHandlerAsync übergeben wird.'
          type:
            - '(type: Office.EventType) => void'
        - id: callback
          description: 'Optional. Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzigen Parameter vom Typ Office. AsyncResult aufgerufen.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Mailbox.convertToEwsId
    summary: |-
      Wandelt eine REST-formatierte Element-ID ins EWS-Format um.

      Element-IDs, die über eine Rest-API (wie die Outlook-Mail-API oder das Microsoft Graph) abgerufen werden, verwenden ein anderes Format als das Format, das von Exchange Webdienste (EWS) verwendet wird. Die converttoewsid hinzugefügt-Methode konvertiert eine Rest-formatierte ID in das richtige Format für EWS.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.

      \[[API-Gruppe: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: eingeschränkt

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      #### <a name="examples"></a>Beispiele

      ```javascript
      // Get an item's ID from a REST API.
      var restId = 'AAMkAGVlOTZjNTM3LW...';

      // Treat restId as coming from the v2.0 version of the Outlook Mail API.
      var ewsId = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      ```
    name: 'convertToEwsId(itemId, restVersion)'
    fullName: 'convertToEwsId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToEwsId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: 'Eine Element-ID, die für die Outlook-Rest-APIs formatiert ist.'
          type:
            - string
        - id: restVersion
          description: 'Ein Wert, der die Version der Outlook-REST-API angibt, die zum Abrufen der Element-ID verwendet wurde.'
          type:
            - MailboxEnums.RestVersion | string
  - uid: outlook.Office.Mailbox.convertToLocalClientTime
    summary: |-
      Ruft ein Wörterbuch mit Uhrzeitinformationen basierend auf der Zeiteinstellung des lokalen Clients ab.

      Die Daten und Uhrzeiten, die von einer Mail-App für Outlook im Internet oder Desktop Clients verwendet werden, können unterschiedliche Zeitzonen verwenden. Outlook verwendet die Zeitzone des Clientcomputers; Outlook im Internet verwendet die im Exchange Admin Center (EAC) festgelegte Zeitzone. Sie sollten Datums- und Uhrzeitwerte bearbeiten, damit die auf der Benutzeroberfläche angezeigten Werte immer den von Benutzer erwarteten Zeitzonen entsprechen.

      Wenn die Mail-app in Outlook auf Desktop Clients läuft, gibt die convertToLocalClientTime-Methode ein Dictionary-Objekt zurück, dessen Werte auf die Zeitzone des Clientcomputers festgelegt sind. Wenn die Mail-app in Outlook im Internet läuft, gibt die convertToLocalClientTime-Methode ein Dictionary-Objekt zurück, dessen Werte auf die in der Exchange-Verwaltungskonsole angegebene Zeitzone festgelegt sind.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen
    name: convertToLocalClientTime(timeValue)
    fullName: convertToLocalClientTime(timeValue)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
      return:
        type:
          - outlook.Office.LocalClientTime
        description: ''
      parameters:
        - id: timeValue
          description: Ein Date-Objekt.
          type:
            - Date
  - uid: outlook.Office.Mailbox.convertToRestId
    summary: |-
      Wandelt eine EWS-formatierte Element-ID ins REST-Format um.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.

      \[[API-Gruppe: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: eingeschränkt

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      Element-IDs, die über EWS oder über die ItemId-Eigenschaft abgerufen werden, verwenden ein anderes Format als das von Rest-APIs verwendete Format (wie die [Outlook-Mail-API](https://docs.microsoft.com/previous-versions/office/office-365-api/api/version-2.0/mail-rest-operations) oder [Microsoft Graph](https://graph.microsoft.io/)<!-- -->. Die convertToRestId-Methode konvertiert eine EWS-formatierte ID in das richtige Format für Rest.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // Get the currently selected item's ID.
      var ewsId = Office.context.mailbox.item.itemId;

      // Convert to a REST ID for the v2.0 version of the Outlook Mail API.
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      ```
    name: 'convertToRestId(itemId, restVersion)'
    fullName: 'convertToRestId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToRestId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: Eine für Exchange-Webdienste (EWS) formatierte Element-ID
          type:
            - string
        - id: restVersion
          description: 'Ein Wert, der die Version der Outlook-REST-API angibt, mit der die konvertierte ID verwendet wird.'
          type:
            - MailboxEnums.RestVersion | string
  - uid: outlook.Office.Mailbox.convertToUtcClientTime
    summary: |-
      Ruft ein Date-Objekt aus einem Wörterbuch mit Uhrzeitinformationen ab.

      Mit der convertToUtcClientTime-Methode wird ein Wörterbuch mit lokalem Datum und lokaler Uhrzeit in ein Date-Objekt mit den richtigen Werten für das lokale Datum und die lokale Uhrzeit konvertiert.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen
    name: convertToUtcClientTime(input)
    fullName: convertToUtcClientTime(input)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
      return:
        type:
          - Date
        description: Ein Date-Objekt der Uhrzeit in UTC.
      parameters:
        - id: input
          description: Der zu konvertierende Wert für die lokale Uhrzeit.
          type:
            - outlook.Office.LocalClientTime
  - uid: outlook.Office.Mailbox.displayAppointmentForm
    summary: |-
      Zeigt einen bestehenden Kalendertermin an.

      Mit der displayAppointmentForm-Methode wird ein vorhandener Kalendertermin auf dem Desktop in einem neuen Fenster oder auf Mobilgeräten in einem Dialogfeld geöffnet.

      In Outlook auf Mac können Sie diese Methode verwenden, um einen einzelnen Termin anzuzeigen, der nicht Teil einer Terminserie ist, oder den Mastertermin einer Serie, aber Sie können keine Instanz der Datenreihe anzeigen. Dies liegt daran, dass Sie in Outlook auf dem Mac nicht auf die Eigenschaften (einschließlich der Element-ID) von Instanzen einer wiederkehrenden Datenreihe zugreifen können.

      In Outlook im Internet öffnet diese Methode das angegebene Formular nur, wenn der Textkörper des Formulars kleiner als oder gleich 32 KB beschränkt Anzahl von Zeichen ist.

      Wenn der angegebene Elementbezeichner keinen vorhandenen Termin identifiziert, wird auf dem Clientcomputer oder Gerät ein leerer Bereich geöffnet, und es wird keine Fehlermeldung zurückgegeben.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      #### <a name="examples"></a>Beispiele

      ```javascript
      Office.context.mailbox.displayAppointmentForm(appointmentId);
      ```
    name: displayAppointmentForm(itemId)
    fullName: displayAppointmentForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayAppointmentForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: 'Der EWS-Bezeichner (Exchange Web Services, Exchange-Webdienste) für einen vorhandenen Kalendertermin.'
          type:
            - string
  - uid: outlook.Office.Mailbox.displayMessageForm
    summary: |-
      Zeigt eine vorhandene Nachricht an.

      Die Methode displayMessageForm öffnet eine vorhandene Nachricht in einem neuen Fenster auf dem Desktop bzw. in einem Dialogfeld auf Mobilgeräten.

      In Outlook im Internet öffnet diese Methode das angegebene Formular nur, wenn der Textkörper des Formulars kleiner als oder gleich 32 KB Anzahl von Zeichen ist.

      Wenn der angegebene Elementbezeichner keine vorhandenen Nachrichten erkennt, wird auf dem Client-Computer keine Nachricht angezeigt, und es werden keine Fehlermeldungen zurückgegeben.

      Verwenden Sie die displayMessageForm-Methode nicht mit einer itemId-Eigenschaft, die einen Termin darstellt. Verwenden Sie die displayAppointmentForm-Methode, um einen vorhandenen Termin anzuzeigen, und displayNewAppointmentForm, um ein Formular anzuzeigen, um einen neuen Termin zu erstellen.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      #### <a name="examples"></a>Beispiele

      ```javascript
      Office.context.mailbox.displayMessageForm(messageId);
      ```
    name: displayMessageForm(itemId)
    fullName: displayMessageForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayMessageForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: Der Exchange-Webdienste (EWS) für eine vorhandene Nachricht.
          type:
            - string
  - uid: outlook.Office.Mailbox.displayNewAppointmentForm
    summary: |-
      Zeigt ein Formular zum Erstellen eines neuen Kalendertermins an.

      Mit der displayNewAppointmentForm-Methode wird ein Formular geöffnet, mit dem der Benutzer einen neuen Termin oder ein Meeting erstellen kann. Wenn Parameter angegeben wurden, werden die Felder im Terminformular automatisch mit dem Inhalt der Parameter ausgefüllt.

      In Outlook im Internet zeigt diese Methode immer ein Formular mit einem Teilnehmerfeld an. Wenn Sie keine Teilnehmer als Eingabeargumente angeben, zeigt die Methode ein Formular mit einer Schaltfläche Speichern an. Wenn Sie Teilnehmer angegeben haben, enthält das Formular die Teilnehmer und eine Schaltfläche Senden.

      Wenn Sie im Outlook-Rich-Client und Outlook RT im Parameter requiredAttendees, optionalAttendees oder Resources Teilnehmer oder Ressourcen angeben, zeigt diese Methode ein Besprechungsformular mit der Schaltfläche Senden an. Wenn Sie keine Empfänger angeben, zeigt diese Methode ein Terminformular mit der Schaltfläche &amp; Save Close an.

      Wenn einer der Parameter die angegebenen Größenbeschränkungen überschreitet oder wenn ein unbekannter Parametername angegeben wird, wird eine Ausnahme ausgelöst.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      Zutreffender ** [Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Lesen

      #### <a name="examples"></a>Beispiele

      ```javascript
      var start = new Date();
      var end = new Date();
      end.setHours(start.getHours() + 1);

      Office.context.mailbox.displayNewAppointmentForm(
      {
          requiredAttendees: ['bob@contoso.com'],
          optionalAttendees: ['sam@contoso.com'],
          start: start,
          end: end,
          location: 'Home',
          resources: ['projector@contoso.com'],
          subject: 'meeting',
          body: 'Hello World!'
      });
      ```
    name: displayNewAppointmentForm(parameters)
    fullName: displayNewAppointmentForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: 'Eine AppointmentForm, die den neuen Termin beschreibt. Alle Eigenschaften sind optional.'
          type:
            - outlook.Office.AppointmentForm
  - uid: outlook.Office.Mailbox.displayNewMessageForm
    summary: |-
      Zeigt ein Formular zum Erstellen einer neuen Nachricht an.

      Mit der displayNewMessageForm-Methode wird ein Formular geöffnet, mit dem der Benutzer eine neue Nachricht erstellen kann. Wenn Parameter angegeben werden, werden die Nachrichtenformular Felder automatisch mit dem Inhalt der Parameter aufgefüllt.

      Wenn einer der Parameter die angegebenen Größenbeschränkungen überschreitet oder wenn ein unbekannter Parametername angegeben wird, wird eine Ausnahme ausgelöst.

      \[[API-Gruppe: Mailbox 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      Zutreffender ** [Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Lesen

      #### <a name="examples"></a>Beispiele

      ```javascript
      Office.context.mailbox.displayNewMessageForm(
      {
          // Copy the To line from current item.
          toRecipients: Office.context.mailbox.item.to,
          ccRecipients: ['sam@contoso.com'],
          subject: 'Outlook add-ins are cool!',
          htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
          attachments: [
          {
              type: 'file',
              name: 'image.png',
              url: 'http://contoso.com/image.png',
              isInline: true
          }
          ]
      });
      ```
    name: displayNewMessageForm(parameters)
    fullName: displayNewMessageForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewMessageForm(parameters: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: |-
            Ein Wörterbuch, das alle Werte enthält, die für den Benutzer im neuen Formular auszufüllen sind. Alle Parameter sind optional.

            torecipients: ein Array von Zeichenfolgen, die die e-Mail-Adressen oder ein Array mit einem [Office. EmailAddressDetails](xref:outlook.Office.EmailAddressDetails) -Objekt für jeden der Empfänger in der an-Adresse enthalten. Das Array darf maximal 100 Einträge enthalten.

            ccRecipients: ein Array von Zeichenfolgen mit den e-Mail-Adressen oder einem Array, das ein [Office. EmailAddressDetails](xref:outlook.Office.EmailAddressDetails) -Objekt für jeden Empfänger in der CC-Zeile enthält. Das Array darf maximal 100 Einträge enthalten.

            bccRecipients: ein Array von Zeichenfolgen mit den e-Mail-Adressen oder einem Array, das ein [Office. EmailAddressDetails](xref:outlook.Office.EmailAddressDetails) -Objekt für jeden Empfänger in der Bcc-Zeile enthält. Das Array darf maximal 100 Einträge enthalten.

            Subject: eine Zeichenfolge mit dem Betreff der Nachricht. Die Zeichenfolge ist auf maximal 255 Zeichen beschränkt.

            HTMLBody: der HTML-Text der Nachricht. Der Textkörper ist auf eine maximale Größe von 32 KB beschränkt.

            Attachments: ein Array von JSON-Objekten, die entweder Datei-oder Element Anlagen sind.

            Attachments. Type: gibt den Typ der Anlage an. Muss eine Datei für eine Dateianlage oder ein Element für eine Elementanlage sein.

            Attachments.Name: eine Zeichenfolge, die den Namen der Anlage enthält, bis zu 255 Zeichen lang.

            Attachments. URL: wird nur verwendet, wenn Type auf File festgelegt ist. Der URI des Speicherorts für die Datei.

            Attachments. IsInline: wird nur verwendet, wenn Type auf File festgelegt ist. Wenn true, gibt an, dass die Anlage Inline im Nachrichtentext angezeigt wird und nicht in der Anlagenliste angezeigt werden soll.

            Attachments. ItemId: wird nur verwendet, wenn Type auf Item festgelegt ist. Die EWS-Element-ID der vorhandenen e-Mail, die Sie an die neue Nachricht anfügen möchten. Diese Zeichenfolge kann bis zu 100 Zeichen lang sein.
          type:
            - any
  - uid: outlook.Office.Mailbox.getCallbackTokenAsync
    summary: |-
      Ruft eine Zeichenfolge mit einem Token ab, das zum Aufrufen von REST-APIs oder Exchange-Webdiensten verwendet wird.

      Die getCallbackTokenAsync-Methode führt einen asynchronen Aufruf aus, um ein undurchsichtiges Token aus dem Exchange Server abzurufen, das das Postfach des Benutzers hostet. Die Gültigkeitsdauer des Rückruftokens beträgt 5 Minuten.

      Das Token wird als Zeichenfolge in der `asyncResult.value` -Eigenschaft zurückgegeben.

      *REST-Token*

      Wenn ein Rest-Token angefordert wird (Options. isrest = true), kann das resultierende Token nicht zum Authentifizieren von Exchange Webdienste-aufrufen verwendet werden. Das Token wird auf den schreibgeschützten Zugriff auf das aktuelle Element und seine Anlagen beschränkt, es sei denn, das Add-in hat die ReadWriteMailbox-Berechtigung in seinem Manifest angegeben. Wenn die ReadWriteMailbox-Berechtigung angegeben ist, erteilt das resultierende Token Lese-/Schreibzugriff auf e-Mail, Kalender und Kontakte, einschließlich der Möglichkeit zum Senden von e-Mails.

      Das Add-in sollte die resturl hinzugefügt-Eigenschaft verwenden, um die richtige URL zu ermitteln, die beim Erstellen von Rest-API-Aufrufen verwendet werden soll.

      *EWS-Tokens*

      Wenn ein EWS-Token angefordert wird (Options. isrest = false), kann das resultierende Token nicht zum Authentifizieren von Rest-API-Aufrufen verwendet werden. Der Bereich des Tokens ist auf den Zugriff auf das aktuelle Element beschränkt.

      Das Add-in sollte die ewsUrl-Eigenschaft verwenden, um die richtige URL zu ermitteln, die beim Ausführen von EWS-Aufrufen verwendet werden soll.

      **Hinweis**: Es wird empfohlen, dass Add-Ins die Rest-APIs anstelle von Exchange Webdienste verwenden, wenn möglich.

      \[[API-Gruppe: Mailbox 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      **Fehler**:

      - HTTPRequestFailure: Fehler bei der Anforderung. Sehen Sie sich das Diagnose Objekt für den HTTP-Fehlercode an.

      - InternalServerError: der Exchange-Server hat einen Fehler zurückgegeben. Weitere Informationen finden Sie im Diagnostics-Objekt.

      - NetworkError: der Benutzer ist nicht mehr mit dem Netzwerk verbunden. Überprüfen Sie die Netzwerkverbindung, und versuchen Sie es erneut.

      #### <a name="examples"></a>Beispiele

      ```javascript
      function getCallbackToken() {
          var options = {
              isRest: true,
              asyncContext: { message: 'Hello World!' }
          };

          Office.context.mailbox.getCallbackTokenAsync(options, cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getCallbackTokenAsync(options, callback)'
    fullName: 'getCallbackTokenAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(options: Office.AsyncContextOptions & { isRest?: boolean }, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. isrest: bestimmt, ob das bereitgestellte Token für die Outlook-Rest-APIs oder Exchange Webdienste verwendet wird. Standardwert ist "false". AsyncContext: alle Zustandsdaten, die an die asynchrone Methode übergeben werden.'
          type:
            - 'Office.AsyncContextOptions & { isRest?: boolean }'
        - id: callback
          description: 'Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzigen Parameter vom Typ Office. AsyncResult aufgerufen. Das Token wird als Zeichenfolge in der `asyncResult.value` -Eigenschaft zurückgegeben. Wenn ein Fehler aufgetreten ist, `asyncResult.error` bieten `asyncResult.diagnostics` die Eigenschaften und möglicherweise zusätzliche Informationen.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: outlook.Office.Mailbox.getCallbackTokenAsync_1
    summary: |-
      Ruft eine Zeichenfolge ab, die einen Token enthält, der verwendet wird, um eine Anlage oder ein Element von einem Exchange Server abzurufen.

      Die getCallbackTokenAsync-Methode führt einen asynchronen Aufruf aus, um ein undurchsichtiges Token aus dem Exchange Server abzurufen, das das Postfach des Benutzers hostet. Die Gültigkeitsdauer des Rückruftokens beträgt 5 Minuten.

      Das Token wird als Zeichenfolge in der `asyncResult.value` -Eigenschaft zurückgegeben.

      Sie können das Token und eine Anlagen- oder Element-ID an ein Drittanbietersystem weitergeben. Das Drittanbietersystem verwendet das Token als Trägerautorisierungstoken, um den Exchange Web Services-Vorgang (EWS) GetAttachment oder GetItem aufzurufen und eine Anlage oder ein Element zurückzugeben. Sie können beispielsweise einen Remotedienst zum Abrufen von Anlagen aus dem ausgewählten Element erstellen.

      Ihre APP muss über die im Manifest angegebene ReadItem-Berechtigung verfügen, um die getCallbackTokenAsync-Methode im Lesemodus aufzurufen.

      Im Verfassenmodus müssen Sie die saveAsync-Methode aufrufen, um einen Elementbezeichner abzurufen, der an die getCallbackTokenAsync-Methode übergeben wird. Ihre APP muss über ReadWriteItem-Berechtigungen verfügen, um die saveAsync-Methode aufzurufen.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **Fehler**:

      - HTTPRequestFailure: Fehler bei der Anforderung. Sehen Sie sich das Diagnose Objekt für den HTTP-Fehlercode an.

      - InternalServerError: der Exchange-Server hat einen Fehler zurückgegeben. Weitere Informationen finden Sie im Diagnostics-Objekt.

      - NetworkError: der Benutzer ist nicht mehr mit dem Netzwerk verbunden. Überprüfen Sie die Netzwerkverbindung, und versuchen Sie es erneut.

      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      #### <a name="examples"></a>Beispiele

      ```javascript
      function getCallbackToken() {
          Office.context.mailbox.getCallbackTokenAsync(cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getCallbackTokenAsync(callback, userContext)'
    fullName: 'getCallbackTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzigen Parameter vom Typ Office. AsyncResult aufgerufen. Das Token wird als Zeichenfolge in der `asyncResult.value` -Eigenschaft zurückgegeben. Wenn ein Fehler aufgetreten ist, `asyncResult.error` bieten `asyncResult.diagnostics` die Eigenschaften und möglicherweise zusätzliche Informationen.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
        - id: userContext
          description: 'Optional. Jegliche Zustandsdaten, die an die asynchrone Methode übergeben werden.'
          type:
            - any
  - uid: outlook.Office.Mailbox.getUserIdentityTokenAsync
    summary: |-
      Ruft ein Token ab, das den Benutzer und das Office-Add-In identifiziert.

      Das Token wird als Zeichenfolge in der `asyncResult.value` -Eigenschaft zurückgegeben.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      Die getUserIdentityTokenAsync-Methode gibt ein Token zurück, das Sie verwenden können, um [das Add-in und den Benutzer mit einem Drittanbietersystem](https://docs.microsoft.com/outlook/add-ins/authentication) zu identifizieren und zu authentifizieren.<!-- -->.

      **Fehler**:

      - HTTPRequestFailure: Fehler bei der Anforderung. Sehen Sie sich das Diagnose Objekt für den HTTP-Fehlercode an.

      - InternalServerError: der Exchange-Server hat einen Fehler zurückgegeben. Weitere Informationen finden Sie im Diagnostics-Objekt.

      - NetworkError: der Benutzer ist nicht mehr mit dem Netzwerk verbunden. Überprüfen Sie die Netzwerkverbindung, und versuchen Sie es erneut.

      #### <a name="examples"></a>Beispiele

      ```javascript
      function getIdentityToken() {
          Office.context.mailbox.getUserIdentityTokenAsync(cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getUserIdentityTokenAsync(callback, userContext)'
    fullName: 'getUserIdentityTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzigen Parameter vom Typ Office. AsyncResult aufgerufen. Das Token wird als Zeichenfolge in der `asyncResult.value` -Eigenschaft zurückgegeben. Wenn ein Fehler aufgetreten ist, `asyncResult.error` bieten `asyncResult.diagnostics` die Eigenschaften und möglicherweise zusätzliche Informationen.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
        - id: userContext
          description: 'Optional. Jegliche Zustandsdaten, die an die asynchrone Methode übergeben werden.'
          type:
            - any
  - uid: outlook.Office.Mailbox.makeEwsRequestAsync
    summary: |-
      Sendet eine asynchrone Anforderung an einen EWS-Dienst (Exchange Webdienste) auf dem Exchange-Server, der das Postfach des Benutzers hostet.

      In diesen Fällen sollten Add-Ins REST APIs verwenden, um auf das Postfach des Benutzers zuzugreifen.

      Die makeEwsRequestAsync-Methode sendet eine EWS-Anforderung im Namen des Add-Ins an Exchange.

      Sie können keine Elemente, die Ordnern zugeordnet sind, mit der makeEwsRequestAsync-Methode anfordern.

      Die XML-Anfrage muss UTF-8-Codierung angeben. &lt;<!-- -->? XML Version = "1.0" Encoding = "UTF-8"?<!-- -->&gt;

      Das Add-in muss über die ReadWriteMailbox-Berechtigung verfügen, um die makeEwsRequestAsync-Methode verwenden zu können. Informationen zur Verwendung der ReadWriteMailbox-Berechtigung und der EWS-Vorgänge, die Sie mit der makeEwsRequestAsync-Methode aufrufen können, finden Sie unter [Angeben von Berechtigungen für Mail-Add-in-Zugriff auf das Postfach des Benutzers](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions) .<!-- -->.

      Das XML-Ergebnis des EWS-Aufrufs wird als Zeichenfolge in der AsyncResult. Value-Eigenschaft bereitgestellt. Wenn das Ergebnis größer als 1 MB ist, wird stattdessen eine Fehlermeldung zurückgegeben.

      **Hinweis**: Diese Methode wird in den folgenden Szenarien nicht unterstützt:

      - In Outlook unter IOS oder Android.

      - Wenn das Add-in in ein Gmail-Postfach geladen wird.

      **Hinweis**: der Server Administrator muss im EWS-Verzeichnis des Client Zugriffsservers OAuthAuthentication auf "true" festlegen, damit die makeEwsRequestAsync-Methode EWS-Anforderungen ausführen kann.

      *Versionsunterschiede*

      Wenn Sie die makeEwsRequestAsync-Methode in Mail-Apps verwenden, die in älteren Outlook-Versionen als Version 15.0.4535.1004 ausgeführt werden, sollten Sie den Codierungswert auf ISO-8859-1 festlegen.

      `<?xml version="1.0" encoding="iso-8859-1"?>`

      Sie müssen den Codierungswert nicht festlegen, wenn Ihre Mail-App in Outlook im Web ausgeführt wird. Sie können mithilfe der mailbox.diagnostics.hostName-Eigenschaft ermitteln, ob Ihre Mail-App in Outlook oder Outlook im Web ausgeführt wird. Sie können mithilfe der mailbox.diagnostics.hostVersion-Eigenschaft ermitteln, welche Version von Outlook ausgeführt wird.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadWriteMailbox

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      #### <a name="examples"></a>Beispiele

      ```javascript
      function getSubjectRequest(id) {
          // Return a GetItem operation request for the subject of the specified item.
          var request =
              '<?xml version="1.0" encoding="utf-8"?>' +
              '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
              '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
              '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
              '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
              '  <soap:Header>' +
              '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
              '  </soap:Header>' +
              '  <soap:Body>' +
              '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
              '      <ItemShape>' +
              '        <t:BaseShape>IdOnly</t:BaseShape>' +
              '        <t:AdditionalProperties>' +
              '            <t:FieldURI FieldURI="item:Subject"/>' +
              '        </t:AdditionalProperties>' +
              '      </ItemShape>' +
              '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
              '    </GetItem>' +
              '  </soap:Body>' +
              '</soap:Envelope>';

          return request;
      }

      function sendRequest() {
          // Create a local variable that contains the mailbox.
          Office.context.mailbox.makeEwsRequestAsync(
              getSubjectRequest(mailbox.item.itemId), callback);
      }

      function callback(asyncResult)  {
          var result = asyncResult.value;
          var context = asyncResult.asyncContext;

          // Process the returned response here.
      }
      ```
    name: 'makeEwsRequestAsync(data, callback, userContext)'
    fullName: 'makeEwsRequestAsync(data, callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: Die EWS-Anforderung.
          type:
            - any
        - id: callback
          description: 'Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzigen Parameter vom Typ Office. AsyncResult aufgerufen. Die `value` Eigenschaft des Ergebnisses ist der XML-Code der EWS-Anforderung, die als Zeichenfolge bereitgestellt wird. Wenn das Ergebnis größer als 1 MB ist, wird stattdessen eine Fehlermeldung zurückgegeben.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
        - id: userContext
          description: 'Optional. Jegliche Zustandsdaten, die an die asynchrone Methode übergeben werden.'
          type:
            - any
  - uid: outlook.Office.Mailbox.removeHandlerAsync
    summary: |-
      Entfernt die Ereignishandler für einen unterstützten Ereignistyp. **Hinweis**: Ereignisse sind nur mit dem Aufgabenbereich verfügbar.

      Derzeit wird der einzige unterstützte Ereignistyp`Office.EventType.ItemChanged`<!-- -->. In der Vorschau `Office.EventType.OfficeThemeChanged` wird ebenfalls unterstützt.

      \[[API-Gruppe: Mailbox 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Das Ereignis, das den Handler widerrufen soll.'
          type:
            - Office.EventType | string
        - id: options
          description: 'Optional. Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzigen Parameter vom Typ Office. AsyncResult aufgerufen.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Mailbox.removeHandlerAsync_1
    summary: |-
      Entfernt die Ereignishandler für einen unterstützten Ereignistyp. **Hinweis**: Ereignisse sind nur mit dem Aufgabenbereich verfügbar.

      Derzeit wird der einzige unterstützte Ereignistyp`Office.EventType.ItemChanged`<!-- -->. In der Vorschau `Office.EventType.OfficeThemeChanged` wird ebenfalls unterstützt.

      \[[API-Gruppe: Mailbox 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Das Ereignis, das den Handler widerrufen soll.'
          type:
            - Office.EventType | string
        - id: callback
          description: 'Optional. Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzigen Parameter vom Typ Office. AsyncResult aufgerufen.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: outlook.Office.Mailbox.diagnostics
    summary: |-
      Stellt einem Outlook-Add-In Diagnoseinformationen bereit.

      Enthält die folgenden Member:

      - Hostname (String): eine Zeichenfolge, die den Namen der Hostanwendung darstellt. Es sollte einer der folgenden Werte sein: "Outlook", "OutlookWebApp", "OutlookIOS" oder "OutlookAndroid". **Hinweis**: der Wert "Outlook" wird für Outlook auf Desktop Clients (also Windows und Mac) zurückgegeben.

      - Host (String): eine Zeichenfolge, die die Version der Hostanwendung oder der Exchange Server darstellt (beispielsweise "15.0.468.0"). Wenn das e-Mail-Add-in in Outlook auf Desktop-oder mobilen Clients läuft, gibt die Host-Eigenschaft die Version der Hostanwendung, Outlook, zurück. In Outlook im Internet gibt die Eigenschaft die Version der Exchange Server zurück.

      - OWAView (MailboxEnums. OWAView oder String): eine Enum (oder ein Zeichenfolgenliteral), die die aktuelle Ansicht von Outlook im Internet darstellt. Wenn es sich bei der Hostanwendung nicht um Outlook im Internet handelt, führt der Zugriff auf diese Eigenschaft zu undefined. Outlook im Internet verfügt über drei Ansichten ("OneColumn" – wird angezeigt, wenn der Bildschirm schmal ist, "TwoColumns" – wird angezeigt, wenn der Bildschirm breiter ist, und "ThreeColumns" – wird angezeigt, wenn der Bildschirm breit ist), die der Breite des Bildschirms und des Fensters entsprechen, und der Anzahl der Spalten, die angezeigt werden können.

      Weitere Informationen finden Sie unter [Office. Diagnostics](xref:outlook.Office.Diagnostics)<!-- -->.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen
    name: diagnostics
    fullName: diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: Diagnostics;'
      return:
        type:
          - outlook.Office.Diagnostics
  - uid: outlook.Office.Mailbox.ewsUrl
    summary: |-
      Ruft die URL des EWS-Endpunkts (Exchange Web Services) für dieses E-Mail-Konto ab. Nur Lesemodus.

      Ihre APP muss über die im Manifest angegebene ReadItem-Berechtigung verfügen, um das ewsUrl-Element im Lesemodus aufzurufen.

      Im Verfassenmodus müssen Sie die saveAsync-Methode aufrufen, bevor Sie das ewsUrl-Element verwenden können. Ihre APP muss über ReadWriteItem-Berechtigungen verfügen, um die saveAsync-Methode aufzurufen.

      \[[API-Gruppe: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      Der Wert ewsUrl kann von einem Remotedienst verwendet werden, um EWS-Aufrufe an das Postfach des Benutzers vorzunehmen. Sie können beispielsweise einen Remotedienst zum [Abrufen von Anlagen aus dem ausgewählten Element](https://docs.microsoft.com/outlook/add-ins/get-attachments-of-an-outlook-item) erstellen.<!-- -->.

      **Hinweis**: dieses Element wird in Outlook auf IOS oder Android nicht unterstützt.
    name: ewsUrl
    fullName: ewsUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ewsUrl: string;'
      return:
        type:
          - string
  - uid: outlook.Office.Mailbox.item
    summary: 'Das Postfachelement. Je nachdem, in welchem Kontext das Add-in geöffnet wurde, kann es sich bei dem Element um eine beliebige Anzahl von Typen handeln. Wenn Sie IntelliSense nur für einen bestimmten Typ anzeigen möchten, sollten Sie dieses Element in eines der folgenden Elemente umwandeln:`ItemCompose`<!-- -->, `ItemRead`<!-- -->, `MessageCompose`<!-- -->, `MessageRead`<!-- -->, `AppointmentCompose`<!-- -->, `AppointmentRead`'
    name: item
    fullName: item
    langs:
      - typeScript
    type: property
    syntax:
      content: 'item: Item & ItemCompose & ItemRead & MessageRead & MessageCompose & AppointmentRead & AppointmentCompose;'
      return:
        type:
          - Item & ItemCompose & ItemRead & MessageRead & MessageCompose & AppointmentRead & AppointmentCompose
  - uid: outlook.Office.Mailbox.masterCategories
    summary: |-
      Ruft ein Objekt ab, das Methoden zum Verwalten der Kategorien-Masterliste enthält, die einem Postfach zugeordnet ist.

      \[[API-Gruppe: Post fach Vorschau](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadWriteMailbox

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      #### <a name="examples"></a>Beispiele

      ```javascript
      Office.context.mailbox.masterCategories.getAsync(function (asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.log("Action failed with error: " + asyncResult.error.message);
          } else {
              var masterCategories = asyncResult.value;
              console.log("Master categories:");
              masterCategories.forEach(function (item) {
                  console.log("-- " + JSON.stringify(item));
              });
          }
      });
      ```
    isPreview: true
    name: masterCategories
    fullName: masterCategories
    langs:
      - typeScript
    type: property
    syntax:
      content: 'masterCategories: MasterCategories;'
      return:
        type:
          - outlook.Office.MasterCategories
  - uid: outlook.Office.Mailbox.restUrl
    summary: |-
      Ruft die URL des REST-Endpunkts für das betreffende E-Mail-Konto ab.

      Ihre APP muss über die im Manifest angegebene ReadItem-Berechtigung verfügen, um das resturl hinzugefügt-Element im Lesemodus aufzurufen.

      Im Verfassenmodus müssen Sie die saveAsync-Methode aufrufen, bevor Sie das resturl hinzugefügt-Element verwenden können. Ihre APP muss über ReadWriteItem-Berechtigungen verfügen, um die saveAsync-Methode aufzurufen.

      \[[API-Gruppe: Mailbox 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: ReadItem

      ** [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      Der resturl hinzugefügt-Wert kann verwendet werden, um [Rest-API-](https://docs.microsoft.com/outlook/rest/) Aufrufe an das Postfach des Benutzers zu erstellen.
    name: restUrl
    fullName: restUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'restUrl: string;'
      return:
        type:
          - string
  - uid: outlook.Office.Mailbox.userProfile
    summary: |-
      Informationen zu dem Benutzer, der dem Postfach zugeordnet ist. Dazu gehören der Kontotyp, der Anzeigename, die e-Mail-Adresse und die Zeitzone.

      Weitere Informationen finden Sie unter [Office. User Profile.](xref:outlook.Office.UserProfile)
    name: userProfile
    fullName: userProfile
    langs:
      - typeScript
    type: property
    syntax:
      content: 'userProfile: UserProfile;'
      return:
        type:
          - outlook.Office.UserProfile