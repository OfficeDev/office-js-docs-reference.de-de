### YamlMime:TSType
name: Office.Body
uid: outlook!Office.Body:interface
package: outlook!
fullName: Office.Body
summary: >-
  Das body-Objekt stellt Methoden zum Hinzufügen und Aktualisieren des Inhalts der Nachricht oder des Termins zur Verfügung. Es wird in der body-Eigenschaft des ausgewählten Elements zurückgegeben.


  \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
remarks: >-
  **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


  **[Anwendbarer Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
isPreview: false
isDeprecated: false
type: interface
methods:
- name: appendOnSendAsync(data, options, callback)
  uid: outlook!Office.Body#appendOnSendAsync:member(1)
  package: outlook!
  fullName: appendOnSendAsync(data, options, callback)
  summary: >-
    Fügt den angegebenen Inhalt nach jeder Signatur an das Ende des Elementtexts an.


    Wenn der Benutzer Add-Ins ausgeführt, die das [On-Send-Feature mithilfe von \` ItemSend \` im Manifest implementieren](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-on-send-addins?tabs=windows)<!-- -->wird append-on-send vor der On-Send-Funktion ausgeführt.


    **Wichtig:** Wenn Ihr Add-In das On-Send-Feature und Aufrufe im Handler implementiert, gibt der Aufruf einen Fehler zurück, da dieses Szenario `appendOnSendAsync` `ItemSend` nicht unterstützt `appendOnSendAsync` wird.


    **Wichtig**: Zu verwenden `appendOnSendAsync`<!-- -->muss `ExtendedPermissions` der Manifestknoten die erweiterte `AppendOnSend` Berechtigung enthalten.


    **Hinweis:** Zum Löschen von Daten aus einem vorherigen Aufruf können Sie ihn erneut `appendOnSendAsync` aufrufen, wenn `data` der Parameter auf festgelegt ist. `null`<!-- -->.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der `data` Parameter ist länger als 5.000 Zeichen.


    - `InvalidFormatError`<!-- -->: Der `options.coercionType` Parameter ist auf `Office.CoercionType.Html` festgelegt, aber der Nachrichtentext ist im Nur-Text-Text.


    #### <a name="examples"></a>Beispiele


    ```javascript

    Office.context.mailbox.item.body.appendOnSendAsync(
        "P.S. This text was appended on send.",
        {coercionType: Office.CoercionType.Html},
        function (asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                console.log("Action failed with error: " + asyncResult.error.message);
            }
        }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendOnSendAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die am Ende des Textkörpers hinzugefügt werden soll. Die Zeichenfolge ist auf 5.000 Zeichen beschränkt.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten. `coercionType`<!-- -->: Das gewünschte Format für die daten, die angefügt werden sollen. Der Zeichenfolge im `data`-Parameter wird in dieses Format konvertiert.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Alle aufgetretenen Fehler werden in der `asyncResult.error`-Eigenschaft bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: appendOnSendAsync(data, callback)
  uid: outlook!Office.Body#appendOnSendAsync:member(2)
  package: outlook!
  fullName: appendOnSendAsync(data, callback)
  summary: >-
    Fügt den angegebenen Inhalt nach jeder Signatur an das Ende des Elementtexts an.


    Wenn der Benutzer Add-Ins ausgeführt, die das [On-Send-Feature mithilfe von \` ItemSend \` im Manifest implementieren](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-on-send-addins?tabs=windows)<!-- -->wird append-on-send vor der On-Send-Funktion ausgeführt.


    **Wichtig:** Wenn Ihr Add-In das On-Send-Feature und Aufrufe im Handler implementiert, gibt der Aufruf einen Fehler zurück, da dieses Szenario `appendOnSendAsync` `ItemSend` nicht unterstützt `appendOnSendAsync` wird.


    **Wichtig**: Zu verwenden `appendOnSendAsync`<!-- -->muss `ExtendedPermissions` der Manifestknoten die erweiterte `AppendOnSend` Berechtigung enthalten.


    **Hinweis:** Zum Löschen von Daten aus einem vorherigen Aufruf können Sie ihn erneut `appendOnSendAsync` aufrufen, wenn `data` der Parameter auf festgelegt ist. `null`<!-- -->.


    \[[API-Satz: Postfach 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der `data` Parameter ist länger als 5.000 Zeichen.


    - `InvalidFormatError`<!-- -->: Der `options.coercionType` Parameter ist auf `Office.CoercionType.Html` festgelegt, aber der Nachrichtentext ist im Nur-Text-Text.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendOnSendAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die am Ende des Textkörpers hinzugefügt werden soll. Die Zeichenfolge ist auf 5.000 Zeichen beschränkt.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Alle aufgetretenen Fehler werden in der `asyncResult.error`-Eigenschaft bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAsync(coercionType, options, callback)
  uid: outlook!Office.Body#getAsync:member(1)
  package: outlook!
  fullName: getAsync(coercionType, options, callback)
  summary: >-
    Gibt den aktuellen Text in einem bestimmten Format zurück.


    Diese Methode gibt den gesamten aktuellen Textkörper im angegebenen Format zurück. `coercionType`<!-- -->.


    Bei der Arbeit mit HTML-formatierten Textkörpern ist es wichtig zu beachten, dass die `Body.getAsync` und-Methoden `Body.setAsync` nicht idempotent sind. Der von der Methode zurückgegebene Wert ist nicht unbedingt identisch mit dem Wert, der `getAsync` zuvor in der Methode übergeben `setAsync` wurde. Der Client kann den übergebenen Wert ändern, damit er mit seinem Renderingmodul effizient `setAsync` gerendert wird.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: coercionType
      description: Das Format für den zurückgegebenen Text.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: options
      description: 'Ein Objektliteral, das eine oder mehrere der folgenden Eigenschaften enthält: `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen Parameter vom Typ `callback` Office. AsyncResult. Der Textkörper wird im angeforderten Format in der Eigenschaft `asyncResult.value` bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAsync(coercionType, callback)
  uid: outlook!Office.Body#getAsync:member(2)
  package: outlook!
  fullName: getAsync(coercionType, callback)
  summary: >-
    Gibt den aktuellen Text in einem bestimmten Format zurück.


    Diese Methode gibt den gesamten aktuellen Textkörper im angegebenen Format zurück. `coercionType`<!-- -->.


    Bei der Arbeit mit HTML-formatierten Textkörpern ist es wichtig zu beachten, dass die `Body.getAsync` und-Methoden `Body.setAsync` nicht idempotent sind. Der von der Methode zurückgegebene Wert ist nicht unbedingt identisch mit dem Wert, der `getAsync` zuvor in der Methode übergeben `setAsync` wurde. Der Client kann den übergebenen Wert ändern, damit er mit seinem Renderingmodul effizient `setAsync` gerendert wird.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(coercionType: Office.CoercionType | string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: coercionType
      description: Das Format für den zurückgegebenen Text.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen Parameter vom Typ `callback` Office. AsyncResult. Der Textkörper wird im angeforderten Format in der Eigenschaft `asyncResult.value` bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTypeAsync(options, callback)
  uid: outlook!Office.Body#getTypeAsync:member(1)
  package: outlook!
  fullName: getTypeAsync(options, callback)
  summary: >-
    Ruft einen Wert ab, der angibt, ob der Inhalt HTML- oder Textformat aufweist.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    #### <a name="examples"></a>Beispiele


    ```javascript

    Office.context.mailbox.item.body.getTypeAsync(function (asyncResult) {
        if (asyncResult.status === "failed") {
            console.log("Action failed with error: " + asyncResult.error.message);
        } else {
            console.log("Body type: " + asyncResult.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTypeAsync(options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<Office.CoercionType>) => void): void;'
    parameters:
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Der Inhaltstyp wird als einer der `CoercionType` Werte in der Eigenschaft `asyncResult.value` zurückgegeben.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.CoercionType:enum" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTypeAsync(callback)
  uid: outlook!Office.Body#getTypeAsync:member(2)
  package: outlook!
  fullName: getTypeAsync(callback)
  summary: >-
    Ruft einen Wert ab, der angibt, ob der Inhalt HTML- oder Textformat aufweist.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTypeAsync(callback?: (asyncResult: Office.AsyncResult<Office.CoercionType>) => void): void;'
    parameters:
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Der Inhaltstyp wird als einer der `CoercionType` Werte in der Eigenschaft `asyncResult.value` zurückgegeben.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.CoercionType:enum" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: prependAsync(data, options, callback)
  uid: outlook!Office.Body#prependAsync:member(1)
  package: outlook!
  fullName: prependAsync(data, options, callback)
  summary: >-
    Fügt den angegebenen Inhalt am Anfang des Elementkörpers hinzu.


    Die `prependAsync`-Methode fügt die angegebene Zeichenfolge am Beginn des Elementtexts ein. Nach dem Einfügen wird der Cursor relativ zum eingefügten Inhalt an seine ursprüngliche Stelle zurückgegeben.


    Bei der Arbeit mit HTML-formatierten Textkörpern ist es wichtig zu beachten, dass der Client den übergebenen Wert ändern kann, damit er mit seinem Renderingmodul effizient `prependAsync` gerendert wird. Dies bedeutet, dass der von einem nachfolgenden Aufruf der Methode zurückgegebene Wert nicht unbedingt genau den Wert enthält, der `Body.getAsync` zuvor in der Methode übergeben `prependAsync` wurde.


    Wenn Sie Links in DAS HTML-Markup einbinden, können Sie die Onlinelinkvorschau deaktivieren, indem Sie `id` das Attribut im Anker festlegen (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) zu "LPNoLP" (ein Beispiel finden **Sie** im Abschnitt Beispiele).


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der Datenparameter ist länger als 1.000.000 Zeichen.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // When including links in HTML markup, you can disable online link preview

    // by setting the id attribute on the anchor (<a>) to "LPNoLP".

    Office.context.mailbox.item.body.prependAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'prependAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die am Anfang des Texts eingefügt werden soll. Die Zeichenfolge ist auf 1.000.000 Zeichen beschränkt.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten. `coercionType`<!-- -->: Das gewünschte Format für den Textkörper. Der Zeichenfolge im `data`-Parameter wird in dieses Format konvertiert.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Alle aufgetretenen Fehler werden in der `asyncResult.error`-Eigenschaft bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: prependAsync(data, callback)
  uid: outlook!Office.Body#prependAsync:member(2)
  package: outlook!
  fullName: prependAsync(data, callback)
  summary: >-
    Fügt den angegebenen Inhalt am Anfang des Elementkörpers hinzu.


    Die `prependAsync`-Methode fügt die angegebene Zeichenfolge am Beginn des Elementtexts ein. Nach dem Einfügen wird der Cursor relativ zum eingefügten Inhalt an seine ursprüngliche Stelle zurückgegeben.


    Bei der Arbeit mit HTML-formatierten Textkörpern ist es wichtig zu beachten, dass der Client den übergebenen Wert ändern kann, damit er mit seinem Renderingmodul effizient `prependAsync` gerendert wird. Dies bedeutet, dass der von einem nachfolgenden Aufruf der Methode zurückgegebene Wert nicht unbedingt genau den Wert enthält, der `Body.getAsync` zuvor in der Methode übergeben `prependAsync` wurde.


    Wenn Sie Links in DAS HTML-Markup einbinden, können Sie die Onlinelinkvorschau deaktivieren, indem Sie `id` das Attribut im Anker festlegen (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) zu "LPNoLP" (ein Beispiel finden **Sie** im Abschnitt Beispiele).


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der Datenparameter ist länger als 1.000.000 Zeichen.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'prependAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die am Anfang des Texts eingefügt werden soll. Die Zeichenfolge ist auf 1.000.000 Zeichen beschränkt.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Alle aufgetretenen Fehler werden in der `asyncResult.error`-Eigenschaft bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setAsync(data, options, callback)
  uid: outlook!Office.Body#setAsync:member(1)
  package: outlook!
  fullName: setAsync(data, options, callback)
  summary: >-
    Ersetzt den gesamten Textkörper mit dem angegebenen Text.


    Bei der Arbeit mit HTML-formatierten Textkörpern ist es wichtig zu beachten, dass die `Body.getAsync` und-Methoden `Body.setAsync` nicht idempotent sind. Der von der Methode zurückgegebene Wert ist nicht unbedingt identisch mit dem Wert, der `getAsync` zuvor in der Methode übergeben `setAsync` wurde. Der Client kann den übergebenen Wert ändern, damit er mit seinem Renderingmodul effizient `setAsync` gerendert wird.


    Wenn Sie Links in DAS HTML-Markup einbinden, können Sie die Onlinelinkvorschau deaktivieren, indem Sie `id` das Attribut im Anker festlegen (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) zu "LPNoLP" (ein Beispiel finden **Sie** im Abschnitt Beispiele).


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der Datenparameter ist länger als 1.000.000 Zeichen.


    - `InvalidFormatError`<!-- -->: Der `options.coercionType` Parameter ist auf `Office.CoercionType.Html` festgelegt, und der Nachrichtentext ist im Nur-Text-Text.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // When including links in HTML markup, you can disable online link preview

    // by setting the id attribute on the anchor (<a>) to "LPNoLP".

    Office.context.mailbox.item.body.setAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
    Office.context.mailbox.item.body.setAsync(
        "<b>(replaces all body, including threads you are replying to that may be on the bottom)</b>",
        { coercionType: "html", asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Process the result.
    });


    // The following is an example of the result parameter passed to the callback function.

    {
        "value":null,
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die den vorhandenen Text ersetzen soll. Die Zeichenfolge ist auf 1.000.000 Zeichen beschränkt.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten. `coercionType`<!-- -->: Das gewünschte Format für den Textkörper. Der Zeichenfolge im `data`-Parameter wird in dieses Format konvertiert.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen Parameter vom Typ `callback` Office. AsyncResult. Alle aufgetretenen Fehler werden in der `asyncResult.error`-Eigenschaft bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setAsync(data, callback)
  uid: outlook!Office.Body#setAsync:member(2)
  package: outlook!
  fullName: setAsync(data, callback)
  summary: >-
    Ersetzt den gesamten Textkörper mit dem angegebenen Text.


    Bei der Arbeit mit HTML-formatierten Textkörpern ist es wichtig zu beachten, dass die `Body.getAsync` und-Methoden `Body.setAsync` nicht idempotent sind. Der von der Methode zurückgegebene Wert ist nicht unbedingt identisch mit dem Wert, der `getAsync` zuvor in der Methode übergeben `setAsync` wurde. Der Client kann den übergebenen Wert ändern, damit er mit seinem Renderingmodul effizient `setAsync` gerendert wird.


    Wenn Sie Links in DAS HTML-Markup einbinden, können Sie die Onlinelinkvorschau deaktivieren, indem Sie `id` das Attribut im Anker festlegen (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) zu "LPNoLP" (ein Beispiel finden **Sie** im Abschnitt Beispiele).


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der Datenparameter ist länger als 1.000.000 Zeichen.


    - `InvalidFormatError`<!-- -->: Der `options.coercionType` Parameter ist auf `Office.CoercionType.Html` festgelegt, und der Nachrichtentext ist im Nur-Text-Text.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die den vorhandenen Text ersetzen soll. Die Zeichenfolge ist auf 1.000.000 Zeichen beschränkt.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen Parameter vom Typ `callback` Office. AsyncResult. Alle aufgetretenen Fehler werden in der `asyncResult.error`-Eigenschaft bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, options, callback)
  uid: outlook!Office.Body#setSelectedDataAsync:member(1)
  package: outlook!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: >-
    Ersetzt die Auswahl im Textkörper mit dem angegebenen Text.


    Die Methode fügt die angegebene Zeichenfolge an der Cursorposition im Textkörper des Elements ein, oder wenn Text im Editor ausgewählt ist, ersetzt sie den `setSelectedDataAsync` markierten Text. Wenn sich der Cursor nie im Textkörper des Elements befindet oder der Textkörper des Elements den Fokus in der Benutzeroberfläche verloren hat, wird die Zeichenfolge oben im Textkörperinhalt eingefügt. Nach dem Einfügen wird der Cursor am Ende des eingefügten Inhalts platziert.


    Wenn Sie Links in DAS HTML-Markup einbinden, können Sie die Onlinelinkvorschau deaktivieren, indem Sie das id-Attribut im Anker festlegen (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) zu "LPNoLP" (ein Beispiel finden **Sie** im Abschnitt Beispiele).


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der `data` Parameter ist länger als 1.000.000 Zeichen.


    - `InvalidFormatError`<!-- -->: Der `options.coercionType` Parameter ist auf `Office.CoercionType.Html` festgelegt, und der Nachrichtentext ist im Nur-Text-Text.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // When including links in HTML markup, you can disable online link preview

    // by setting the id attribute on the anchor (<a>) to "LPNoLP".

    Office.context.mailbox.item.body.setSelectedDataAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die den vorhandenen Text ersetzen soll. Die Zeichenfolge ist auf 1.000.000 Zeichen beschränkt.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten. `coercionType`<!-- -->: Das gewünschte Format für den Textkörper. Der Zeichenfolge im `data`-Parameter wird in dieses Format konvertiert.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Alle aufgetretenen Fehler werden in der `asyncResult.error`-Eigenschaft bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, callback)
  uid: outlook!Office.Body#setSelectedDataAsync:member(2)
  package: outlook!
  fullName: setSelectedDataAsync(data, callback)
  summary: >-
    Ersetzt die Auswahl im Textkörper mit dem angegebenen Text.


    Die Methode fügt die angegebene Zeichenfolge an der Cursorposition im Textkörper des Elements ein, oder wenn Text im Editor ausgewählt ist, ersetzt sie den `setSelectedDataAsync` markierten Text. Wenn sich der Cursor nie im Textkörper des Elements befindet oder der Textkörper des Elements den Fokus in der Benutzeroberfläche verloren hat, wird die Zeichenfolge oben im Textkörperinhalt eingefügt. Nach dem Einfügen wird der Cursor am Ende des eingefügten Inhalts platziert.


    Wenn Sie Links in DAS HTML-Markup einbinden, können Sie die Onlinelinkvorschau deaktivieren, indem Sie das id-Attribut im Anker festlegen (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) zu "LPNoLP" (ein Beispiel finden **Sie** im Abschnitt Beispiele).


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der `data` Parameter ist länger als 1.000.000 Zeichen.


    - `InvalidFormatError`<!-- -->: Der `options.coercionType` Parameter ist auf `Office.CoercionType.Html` festgelegt, und der Nachrichtentext ist im Nur-Text-Text.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die den vorhandenen Text ersetzen soll. Die Zeichenfolge ist auf 1.000.000 Zeichen beschränkt.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Alle aufgetretenen Fehler werden in der `asyncResult.error`-Eigenschaft bereitgestellt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSignatureAsync(data, options, callback)
  uid: outlook!Office.Body#setSignatureAsync:member(1)
  package: outlook!
  fullName: setSignatureAsync(data, options, callback)
  summary: >-
    Fügt die Signatur des Elementtexts hinzu oder ersetzt sie.


    **Wichtig:** In Outlook im Web funktioniert `setSignatureAsync` nur für Nachrichten.


    **Wichtig:** Wenn Ihr Add-In das ereignisbasierte Aktivierungsfeature mithilfe [von \` LaunchEvent \` im Manifest implementiert](https://docs.microsoft.com/office/dev/add-ins/outlook/autolaunch)<!-- -->und `setSignatureAsync` Aufrufe im Ereignishandler gilt das folgende Verhalten.


    - Wenn der Benutzer ein neues Element (einschließlich Antwort oder Weiterleitung) verfasst, wird die Signatur festgelegt, das Formular wird jedoch nicht geändert. Wenn der Benutzer das Formular schließt, ohne andere Bearbeitungen vorzunehmen, wird er nicht aufgefordert, Änderungen zu speichern.


    \[[API-Satz: Postfach 1.10](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der `data` Parameter ist länger als 30.000 Zeichen.


    - `InvalidFormatError`<!-- -->: Der `options.coercionType` Parameter ist auf `Office.CoercionType.Html` festgelegt, und der Nachrichtentext ist im Nur-Text-Text.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    var modIcon1Base64 = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/60-event-based-activation/work-with-client-signatures.yaml

    // Set the signature for the current item.

    var signature = $("#signature").val();

    console.log(`Setting signature to "${signature}".`);

    Office.context.mailbox.item.body.setSignatureAsync(signature, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("setSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSignatureAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die die signatur darstellt, die im Textkörper der E-Mail festgelegt werden soll. Diese Zeichenfolge ist auf 30.000 Zeichen beschränkt.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten. `coercionType`<!-- -->: Das Format, auf das die Signatur festgelegt werden soll. Wenn Text, legt die Methode die Signatur auf Nur-Text fest und entfernt alle vorhandenen HTML-Tags. Bei Html legt die Methode die Signatur auf HTML fest.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSignatureAsync(data, callback)
  uid: outlook!Office.Body#setSignatureAsync:member(2)
  package: outlook!
  fullName: setSignatureAsync(data, callback)
  summary: >-
    Fügt die Signatur des Elementtexts hinzu oder ersetzt sie.


    **Wichtig:** In Outlook im Web funktioniert `setSignatureAsync` nur für Nachrichten.


    **Wichtig:** Wenn Ihr Add-In das ereignisbasierte Aktivierungsfeature mithilfe [von \` LaunchEvent \` im Manifest implementiert](https://docs.microsoft.com/office/dev/add-ins/outlook/autolaunch)<!-- -->und `setSignatureAsync` Aufrufe im Ereignishandler gilt das folgende Verhalten.


    - Wenn der Benutzer ein neues Element (einschließlich Antwort oder Weiterleitung) verfasst, wird die Signatur festgelegt, das Formular wird jedoch nicht geändert. Wenn der Benutzer das Formular schließt, ohne andere Bearbeitungen vorzunehmen, wird er nicht aufgefordert, Änderungen zu speichern.


    \[[API-Satz: Postfach 1.10](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `DataExceedsMaximumSize`<!-- -->: Der `data` Parameter ist länger als 30.000 Zeichen.


    - `InvalidFormatError`<!-- -->: Der `options.coercionType` Parameter ist auf `Office.CoercionType.Html` festgelegt, und der Nachrichtentext ist im Nur-Text-Text.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSignatureAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Die Zeichenfolge, die die signatur darstellt, die im Textkörper der E-Mail festgelegt werden soll. Diese Zeichenfolge ist auf 30.000 Zeichen beschränkt.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 75b6d013e267d7e40beeb7bce6ba1c2d167bded0
  ms.sourcegitcommit: fc08f53e68f6acec0b6de81691ac5920f3974ed4
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/21/2021
  ms.locfileid: "52590237"
