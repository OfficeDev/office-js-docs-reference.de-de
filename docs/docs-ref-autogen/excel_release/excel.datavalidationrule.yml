### YamlMime:UniversalReference
ms.openlocfilehash: 3a4e8834a4b86710d05797ede1682e31dada2c14
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/20/2019
ms.locfileid: "30113385"
items:
- uid: excel_release.Excel.DataValidationRule
  summary: >-
    Die Daten Überprüfungsregel enthält verschiedene Arten der Datenüberprüfung. Sie können jeweils nur eine der beiden nach dem Excel. dataValidationtype verwenden.


    \[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.DataValidationRule
  fullName: Excel.DataValidationRule
  langs:
  - typeScript
  type: interface
  package: excel_release
  children:
  - excel_release.Excel.DataValidationRule.custom
  - excel_release.Excel.DataValidationRule.date
  - excel_release.Excel.DataValidationRule.decimal
  - excel_release.Excel.DataValidationRule.list
  - excel_release.Excel.DataValidationRule.textLength
  - excel_release.Excel.DataValidationRule.time
  - excel_release.Excel.DataValidationRule.wholeNumber
- uid: excel_release.Excel.DataValidationRule.custom
  summary: >-
    Kriterien für eine benutzerdefinierte Datenüberprüfung.


    \[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: custom
  fullName: custom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'custom?: Excel.CustomDataValidation;'
    return:
      type:
      - excel.Excel.CustomDataValidation
- uid: excel_release.Excel.DataValidationRule.date
  summary: >-
    Kriterien für die Datenüberprüfung.


    \[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: date
  fullName: date
  langs:
  - typeScript
  type: property
  syntax:
    content: 'date?: Excel.DateTimeDataValidation;'
    return:
      type:
      - excel.Excel.DateTimeDataValidation
- uid: excel_release.Excel.DataValidationRule.decimal
  summary: >-
    Kriterien für die dezimale Datenüberprüfung.


    \[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: decimal
  fullName: decimal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'decimal?: Excel.BasicDataValidation;'
    return:
      type:
      - excel.Excel.BasicDataValidation
- uid: excel_release.Excel.DataValidationRule.list
  summary: >-
    Führt die Kriterien für die Datenüberprüfung auf.


    \[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: list
  fullName: list
  langs:
  - typeScript
  type: property
  syntax:
    content: 'list?: Excel.ListDataValidation;'
    return:
      type:
      - excel.Excel.ListDataValidation
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Decision\");\n    const nameRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Baby Name\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    nameRange.dataValidation.clear();\n\n    const nameSourceRange = context.workbook.worksheets.getItem(\"Names\").getRange(\"A1:A3\");\n\n    let approvedListRule = {\n        list: {\n            inCellDropDown: true,\n            source: '=Names!$A$1:$A$3'\n        }\n    };\n    nameRange.dataValidation.rule = approvedListRule;\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.DataValidationRule.textLength
  summary: >-
    Kriterien für die TextLength-Datenüberprüfung


    \[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: textLength
  fullName: textLength
  langs:
  - typeScript
  type: property
  syntax:
    content: 'textLength?: Excel.BasicDataValidation;'
    return:
      type:
      - excel.Excel.BasicDataValidation
- uid: excel_release.Excel.DataValidationRule.time
  summary: >-
    Kriterien für die Zeitdatenüberprüfung.


    \[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: time
  fullName: time
  langs:
  - typeScript
  type: property
  syntax:
    content: 'time?: Excel.DateTimeDataValidation;'
    return:
      type:
      - excel.Excel.DateTimeDataValidation
- uid: excel_release.Excel.DataValidationRule.wholeNumber
  summary: >-
    Kriterien für die WholeNumber-Datenüberprüfung


    \[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: wholeNumber
  fullName: wholeNumber
  langs:
  - typeScript
  type: property
  syntax:
    content: 'wholeNumber?: Excel.BasicDataValidation;'
    return:
      type:
      - excel.Excel.BasicDataValidation
      description: "\n#### <a name=\"examples\"></a>Examples\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Decision\");\n    const rankingRange = sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Ranking\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    rankingRange.dataValidation.clear();\n\n    let greaterThanZeroRule = {\n        wholeNumber: {\n            formula1: 0,\n            operator: Excel.DataValidationOperator.greaterThan\n        }\n    };\n    rankingRange.dataValidation.rule = greaterThanZeroRule;\n\n    rankingRange.dataValidation.prompt = {\n        message: \"Please enter a positive number.\",\n        showPrompt: true,\n        title: \"Positive numbers only.\"\n    };\n\n    rankingRange.dataValidation.errorAlert = {\n        message: \"Sorry, only positive numbers are allowed\",\n        showAlert: true,\n        style: \"Stop\",\n        title: \"Negative Number Entered\"\n    };\n\n    await context.sync();\n});\n```"
