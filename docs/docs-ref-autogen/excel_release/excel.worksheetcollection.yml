### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.WorksheetCollection
    summary: |-
      <span data-ttu-id="3f487-101">Stellt eine Auflistung der Arbeitsblattobjekte dar, die Teil der Arbeitsmappe sind.</span><span class="sxs-lookup"><span data-stu-id="3f487-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>

      <span data-ttu-id="3f487-102">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.WorksheetCollection
    fullName: Excel.WorksheetCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.WorksheetCollection.add
      - excel_release.Excel.WorksheetCollection.context
      - excel_release.Excel.WorksheetCollection.getActiveWorksheet
      - excel_release.Excel.WorksheetCollection.getCount
      - excel_release.Excel.WorksheetCollection.getFirst
      - excel_release.Excel.WorksheetCollection.getItem
      - excel_release.Excel.WorksheetCollection.getItemOrNullObject
      - excel_release.Excel.WorksheetCollection.getLast
      - excel_release.Excel.WorksheetCollection.items
      - excel_release.Excel.WorksheetCollection.load
      - excel_release.Excel.WorksheetCollection.load_1
      - excel_release.Excel.WorksheetCollection.load_2
      - excel_release.Excel.WorksheetCollection.onActivated
      - excel_release.Excel.WorksheetCollection.onAdded
      - excel_release.Excel.WorksheetCollection.onCalculated
      - excel_release.Excel.WorksheetCollection.onDeactivated
      - excel_release.Excel.WorksheetCollection.onDeleted
      - excel_release.Excel.WorksheetCollection.toJSON
  - uid: excel_release.Excel.WorksheetCollection.add
    summary: |-
      <span data-ttu-id="3f487-p101">Fügt der Arbeitsmappe ein neues Arbeitsblatt hinzu. Das Arbeitsblatt wird automatisch am Ende der vorhandenen Arbeitsblättern hinzugefügt. Wenn Sie das neu hinzugefügte Arbeitsblatt aktivieren möchten, rufen Sie „.activate()“ dazu auf.</span><span class="sxs-lookup"><span data-stu-id="3f487-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>

      <span data-ttu-id="3f487-106">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name?: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3f487-107">Beispiele</span><span class="sxs-lookup"><span data-stu-id="3f487-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sample Name';
              var worksheet = ctx.workbook.worksheets.add(wSheetName);
              worksheet.load('name');
              return ctx.sync().then(function() {
                  console.log(worksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: name
          description: '<span data-ttu-id="3f487-p102">Optional. Der Name des hinzuzufügenden Arbeitsblatts. Falls angegeben, sollte der Name eindeutig sein. Falls nicht angegeben, bestimmt Excel den Namen des neuen Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="3f487-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>'
          type:
            - string
  - uid: excel_release.Excel.WorksheetCollection.context
    summary: <span data-ttu-id="3f487-112">Der dem Objekt zugeordnete Anforderungskontext.</span><span class="sxs-lookup"><span data-stu-id="3f487-112">The request context associated with the object.</span></span> <span data-ttu-id="3f487-113">Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="3f487-113">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.WorksheetCollection.getActiveWorksheet
    summary: |-
      <span data-ttu-id="3f487-114">Ruft das derzeit aktive Arbeitsblatt in der Arbeitsmappe ab.</span><span class="sxs-lookup"><span data-stu-id="3f487-114">Gets the currently active worksheet in the workbook.</span></span>

      <span data-ttu-id="3f487-115">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getActiveWorksheet()
    fullName: getActiveWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveWorksheet(): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3f487-116">Beispiele</span><span class="sxs-lookup"><span data-stu-id="3f487-116">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {  
              var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();
              activeWorksheet.load('name');
              return ctx.sync().then(function() {
                      console.log(activeWorksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.WorksheetCollection.getCount
    summary: |-
      <span data-ttu-id="3f487-117">Ruft die Anzahl von Arbeitsblättern in der Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="3f487-117">Gets the number of worksheets in the collection.</span></span>

      <span data-ttu-id="3f487-118">\[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-118">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount(visibleOnly)
    fullName: getCount(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="3f487-119">Optional.</span><span class="sxs-lookup"><span data-stu-id="3f487-119">Optional.</span></span> <span data-ttu-id="3f487-120">Wenn true, berücksichtigt nur sichtbare Arbeitsblätter, überspringen ausgeblendet.</span><span class="sxs-lookup"><span data-stu-id="3f487-120">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.WorksheetCollection.getFirst
    summary: |-
      <span data-ttu-id="3f487-121">Ruft das erste Arbeitsblatt in der Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="3f487-121">Gets the first worksheet in the collection.</span></span>

      <span data-ttu-id="3f487-122">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getFirst(visibleOnly)
    fullName: getFirst(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3f487-123">Beispiele</span><span class="sxs-lookup"><span data-stu-id="3f487-123">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="3f487-124">Optional.</span><span class="sxs-lookup"><span data-stu-id="3f487-124">Optional.</span></span> <span data-ttu-id="3f487-125">Wenn true, berücksichtigt nur sichtbare Arbeitsblätter, überspringen ausgeblendet.</span><span class="sxs-lookup"><span data-stu-id="3f487-125">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.WorksheetCollection.getItem
    summary: |-
      <span data-ttu-id="3f487-126">Ruft das Arbeitsblattobjekt mithilfe des Namens oder der ID ab.</span><span class="sxs-lookup"><span data-stu-id="3f487-126">Gets a worksheet object using its Name or ID.</span></span>

      <span data-ttu-id="3f487-127">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-127">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="3f487-128">Der Name oder die ID des Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="3f487-128">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: excel_release.Excel.WorksheetCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="3f487-129">Ruft das Arbeitsblattobjekt mithilfe des Namens oder der ID ab.</span><span class="sxs-lookup"><span data-stu-id="3f487-129">Gets a worksheet object using its Name or ID.</span></span> <span data-ttu-id="3f487-130">Wenn das Arbeitsblatt nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="3f487-130">If the worksheet does not exist, will return a null object.</span></span>

      <span data-ttu-id="3f487-131">\[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-131">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="3f487-132">Der Name oder die ID des Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="3f487-132">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: excel_release.Excel.WorksheetCollection.getLast
    summary: |-
      <span data-ttu-id="3f487-133">Ruft das letzte Arbeitsblatt in der Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="3f487-133">Gets the last worksheet in the collection.</span></span>

      <span data-ttu-id="3f487-134">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-134">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLast(visibleOnly)
    fullName: getLast(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3f487-135">Beispiele</span><span class="sxs-lookup"><span data-stu-id="3f487-135">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="3f487-136">Optional.</span><span class="sxs-lookup"><span data-stu-id="3f487-136">Optional.</span></span> <span data-ttu-id="3f487-137">Wenn true, berücksichtigt nur sichtbare Arbeitsblätter, überspringen ausgeblendet.</span><span class="sxs-lookup"><span data-stu-id="3f487-137">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.WorksheetCollection.items
    summary: <span data-ttu-id="3f487-138">Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="3f487-138">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Worksheet[];'
      return:
        type:
          - 'Excel.Worksheet[]'
  - uid: excel_release.Excel.WorksheetCollection.load
    summary: <span data-ttu-id="3f487-139">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="3f487-139">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="3f487-140">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="3f487-140">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="3f487-141">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="3f487-141">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="3f487-142">`load(option?: string | string[]): Excel.WorksheetCollection`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="3f487-142">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="3f487-143">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="3f487-143">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="3f487-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="3f487-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="3f487-145">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="3f487-145">It is similar to the preceding signature.</span></span> <span data-ttu-id="3f487-146">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können.</span><span class="sxs-lookup"><span data-stu-id="3f487-146">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="3f487-147">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="3f487-147">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="3f487-148">Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.</span><span class="sxs-lookup"><span data-stu-id="3f487-148">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel_release.Excel.WorksheetCollection.load_1
    summary: <span data-ttu-id="3f487-149">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="3f487-149">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="3f487-150">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="3f487-150">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3f487-151">Beispiele</span><span class="sxs-lookup"><span data-stu-id="3f487-151">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var worksheets = ctx.workbook.worksheets;
              worksheets.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < worksheets.items.length; i++)
                  {
                      console.log(worksheets.items[i].name);
                      console.log(worksheets.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="3f487-152">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="3f487-152">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.WorksheetCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: excel_release.Excel.WorksheetCollection.onActivated
    summary: |-
      <span data-ttu-id="3f487-153">Tritt ein, wenn ein Arbeitsblatt in der Arbeitsmappe aktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="3f487-153">Occurs when any worksheet in the workbook is activated.</span></span>

      <span data-ttu-id="3f487-154">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-154">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3f487-155">Beispiele</span><span class="sxs-lookup"><span data-stu-id="3f487-155">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onActivated.add(onActivate);

              await context.sync();
              console.log("A handler has been registered for the OnActivate event.");
          });
          ```
  - uid: excel_release.Excel.WorksheetCollection.onAdded
    summary: |-
      <span data-ttu-id="3f487-156">Tritt ein, wenn der Arbeitsmappe ein neues Arbeitsblatt hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="3f487-156">Occurs when a new worksheet is added to the workbook.</span></span>

      <span data-ttu-id="3f487-157">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-157">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onAdded
    fullName: onAdded
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3f487-158">Beispiele</span><span class="sxs-lookup"><span data-stu-id="3f487-158">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets;
              sheet.onAdded.add(onWorksheetAdd);

              await context.sync();
              console.log("A handler has been registered for the OnAdded event.");
          });
          ```
  - uid: excel_release.Excel.WorksheetCollection.onCalculated
    summary: |-
      <span data-ttu-id="3f487-159">Tritt ein, wenn ein Arbeitsblatt in der Arbeitsmappe berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="3f487-159">Occurs when any worksheet in the workbook is calculated.</span></span>

      <span data-ttu-id="3f487-160">\[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-160">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
  - uid: excel_release.Excel.WorksheetCollection.onDeactivated
    summary: |-
      <span data-ttu-id="3f487-161">Tritt ein, wenn ein Arbeitsblatt in der Arbeitsmappe deaktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="3f487-161">Occurs when any worksheet in the workbook is deactivated.</span></span>

      <span data-ttu-id="3f487-162">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-162">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="3f487-163">Beispiele</span><span class="sxs-lookup"><span data-stu-id="3f487-163">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onDeactivated.add(onDeactivate);

              await context.sync();
              console.log("A handler has been registered for the OnDeactivate event.");
          });
          ```
  - uid: excel_release.Excel.WorksheetCollection.onDeleted
    summary: |-
      <span data-ttu-id="3f487-164">Tritt auf, wenn ein Arbeitsblatt aus der Arbeitsmappe gelöscht wird.</span><span class="sxs-lookup"><span data-stu-id="3f487-164">Occurs when a worksheet is deleted from the workbook.</span></span>

      <span data-ttu-id="3f487-165">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3f487-165">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeleted
    fullName: onDeleted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
  - uid: excel_release.Excel.WorksheetCollection.toJSON
    summary: '<span data-ttu-id="3f487-166">ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API-Objekt an`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="3f487-166">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="3f487-167">.</span><span class="sxs-lookup"><span data-stu-id="3f487-167"></span></span> <span data-ttu-id="3f487-168">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="3f487-168"></span></span><!-- --><span data-ttu-id="3f487-169">Ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche `Excel.WorksheetCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.WorksheetCollectionData`</span><span class="sxs-lookup"><span data-stu-id="3f487-169">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`</span></span><!-- --><span data-ttu-id="3f487-170">), die ein Array "Items" mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.</span><span class="sxs-lookup"><span data-stu-id="3f487-170">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetCollectionData
        description: ''