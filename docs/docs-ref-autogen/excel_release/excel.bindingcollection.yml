### YamlMime:UniversalReference
ms.openlocfilehash: be4f7e37d364ac1f5d502d88dd86bdc4bfdbe9f9
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/20/2019
ms.locfileid: "30115023"
items:
- uid: excel_release.Excel.BindingCollection
  summary: >-
    Eine Sammlung aller Binding-Objekte, die Teil der Arbeitsmappe sind.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.BindingCollection
  fullName: Excel.BindingCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.BindingCollection.add
  - excel_release.Excel.BindingCollection.add_1
  - excel_release.Excel.BindingCollection.addFromNamedItem
  - excel_release.Excel.BindingCollection.addFromNamedItem_1
  - excel_release.Excel.BindingCollection.addFromSelection
  - excel_release.Excel.BindingCollection.addFromSelection_1
  - excel_release.Excel.BindingCollection.context
  - excel_release.Excel.BindingCollection.count
  - excel_release.Excel.BindingCollection.getCount
  - excel_release.Excel.BindingCollection.getItem
  - excel_release.Excel.BindingCollection.getItemAt
  - excel_release.Excel.BindingCollection.getItemOrNullObject
  - excel_release.Excel.BindingCollection.items
  - excel_release.Excel.BindingCollection.load
  - excel_release.Excel.BindingCollection.load_1
  - excel_release.Excel.BindingCollection.load_2
  - excel_release.Excel.BindingCollection.toJSON
- uid: excel_release.Excel.BindingCollection.add
  summary: >-
    Fügt eine neue Bindung an einen bestimmten Bereich hinzu.


    \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(range, bindingType, id)
  fullName: add(range, bindingType, id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: range
      description: Bereich für die Bindung. Kann ein Excel-Range-Objekt oder eine Zeichenfolge sein. Eine Zeichenfolge muss die vollständige Adresse einschließlich des Blattnamens enthalten.
      type:
      - Range | string
    - id: bindingType
      description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
      type:
      - excel.Excel.BindingType
    - id: id
      description: Name der Bindung.
      type:
      - string
- uid: excel_release.Excel.BindingCollection.add_1
  summary: >-
    Fügt eine neue Bindung an einen bestimmten Bereich hinzu.


    \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(range, bindingTypeString, id)
  fullName: add(range, bindingTypeString, id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(range: Range | string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: range
      description: Bereich für die Bindung. Kann ein Excel-Range-Objekt oder eine Zeichenfolge sein. Eine Zeichenfolge muss die vollständige Adresse einschließlich des Blattnamens enthalten.
      type:
      - Range | string
    - id: bindingTypeString
      description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
      type:
      - "\"Range\" | \"Table\" | \"Text\""
    - id: id
      description: Name der Bindung.
      type:
      - string
- uid: excel_release.Excel.BindingCollection.addFromNamedItem
  summary: >-
    Fügt eine neue Bindung auf Grundlage eines benannten Elements in der Arbeitsmappe hinzu. Wenn das benannte Element auf mehrere Bereiche verweist, wird der Fehler "InvalidReference" zurückgegeben.


    \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: addFromNamedItem(name, bindingType, id)
  fullName: addFromNamedItem(name, bindingType, id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: name
      description: Name, aus dem die Bindung erstellt wird.
      type:
      - string
    - id: bindingType
      description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
      type:
      - excel.Excel.BindingType
    - id: id
      description: Name der Bindung.
      type:
      - string
- uid: excel_release.Excel.BindingCollection.addFromNamedItem_1
  summary: >-
    Fügt eine neue Bindung auf Grundlage eines benannten Elements in der Arbeitsmappe hinzu. Wenn das benannte Element auf mehrere Bereiche verweist, wird der Fehler "InvalidReference" zurückgegeben.


    \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: addFromNamedItem(name, bindingTypeString, id)
  fullName: addFromNamedItem(name, bindingTypeString, id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromNamedItem(name: string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: name
      description: Name, aus dem die Bindung erstellt wird.
      type:
      - string
    - id: bindingTypeString
      description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
      type:
      - "\"Range\" | \"Table\" | \"Text\""
    - id: id
      description: Name der Bindung.
      type:
      - string
- uid: excel_release.Excel.BindingCollection.addFromSelection
  summary: >-
    Fügt eine neue Bindung basierend auf der aktuellen Auswahl hinzu. Wenn die Auswahl mehrere Bereiche enthält, wird der Fehler "InvalidReference" zurückgegeben.


    \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: addFromSelection(bindingType, id)
  fullName: addFromSelection(bindingType, id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: bindingType
      description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
      type:
      - excel.Excel.BindingType
    - id: id
      description: Name der Bindung.
      type:
      - string
- uid: excel_release.Excel.BindingCollection.addFromSelection_1
  summary: >-
    Fügt eine neue Bindung basierend auf der aktuellen Auswahl hinzu. Wenn die Auswahl mehrere Bereiche enthält, wird der Fehler "InvalidReference" zurückgegeben.


    \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: addFromSelection(bindingTypeString, id)
  fullName: addFromSelection(bindingTypeString, id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromSelection(bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: bindingTypeString
      description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
      type:
      - "\"Range\" | \"Table\" | \"Text\""
    - id: id
      description: Name der Bindung.
      type:
      - string
- uid: excel_release.Excel.BindingCollection.context
  summary: Der dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.BindingCollection.count
  summary: >-
    Gibt die Anzahl der Bindungen in der Sammlung zurück. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.BindingCollection.getCount
  summary: >-
    Ruft die Anzahl der Bindungen in der Sammlung ab.


    \[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel_release.Excel.BindingCollection.getItem
  summary: >-
    Ruft ein Binding-Objekt anhand seiner ID ab.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(id)
  fullName: getItem(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Create a table binding to monitor data changes in the table. \n// When data is changed, the background color of the table will be changed to orange.\nfunction addEventHandler() {\n    // Create Table1\n    Excel.run(function (ctx) { \n        ctx.workbook.tables.add(\"Sheet1!A1:C4\", true);\n        return ctx.sync().then(function() {\n                console.log(\"My Diet Data Inserted!\");\n        })\n        .catch(function (error) {\n                console.log(JSON.stringify(error));\n        });\n    });\n    //Create a new table binding for Table1\n    Office.context.document.bindings.addFromNamedItemAsync(\n        \"Table1\", Office.CoercionType.Table, { id: \"myBinding\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            console.log(\"Action failed with error: \" + asyncResult.error.message);\n        }\n        else {\n            // If succeeded, then add event handler to the table binding.\n            Office.select(\"bindings#myBinding\").addHandlerAsync(\n                Office.EventType.BindingDataChanged, onBindingDataChanged);\n        }\n    });\n}\n    \n// when data in the table is changed, this event will be triggered.\nfunction onBindingDataChanged(eventArgs) {\n    Excel.run(function (ctx) { \n        // highlight the table in orange to indicate data has been changed.\n        ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = \"Orange\";\n        return ctx.sync().then(function() {\n                console.log(\"The value in this table got changed!\");\n        })\n        .catch(function (error) {\n                console.log(JSON.stringify(error));\n        });\n    });\n}\n```"
    parameters:
    - id: id
      description: ID des abzurufenden Binding-Objekts.
      type:
      - string
- uid: excel_release.Excel.BindingCollection.getItemAt
  summary: >-
    Ruft ein Binding-Objekt anhand seiner Position im Elementarray ab.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemAt(index)
  fullName: getItemAt(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.bindings.count - 1;\n    var binding = ctx.workbook.bindings.getItemAt(lastPosition);\n    binding.load('type')\n    return ctx.sync().then(function() {\n            console.log(binding.type); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: Index-Wert des abzurufenden Objekts. Nullindiziert.
      type:
      - number
- uid: excel_release.Excel.BindingCollection.getItemOrNullObject
  summary: >-
    Ruft ein Binding-Objekt anhand seiner ID ab. Wenn das Binding-Objekt nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.


    \[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemOrNullObject(id)
  fullName: getItemOrNullObject(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: id
      description: ID des abzurufenden Binding-Objekts.
      type:
      - string
- uid: excel_release.Excel.BindingCollection.items
  summary: Ruft die geladenen untergeordneten Elemente in dieser Auflistung ab.
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Binding[];'
    return:
      type:
      - Excel.Binding[]
- uid: excel_release.Excel.BindingCollection.load
  summary: Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen "context. Sync ()" aufrufen, bevor Sie die Eigenschaften lesen.
  remarks: >-
    Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:


    `load(option?: string | string[]): Excel.BindingCollection`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.


    `load(option?: { select?: string; expand?: string; }): Excel.BindingCollection`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.BindingCollection`-Nur verfügbar für Sammlungstypen. Sie ähnelt der vorherigen Signatur. Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können. Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind. Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.BindingCollection;'
    return:
      type:
      - excel.Excel.BindingCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel_release.Excel.BindingCollection.load_1
  summary: Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.BindingCollection;'
    return:
      type:
      - excel.Excel.BindingCollection
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < bindings.items.length; i++)\n        {\n            console.log(bindings.items[i].id);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of bindings\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"Bindings: Count= \" + bindings.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type:
      - string | string[]
- uid: excel_release.Excel.BindingCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.BindingCollection;'
    return:
      type:
      - excel.Excel.BindingCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel_release.Excel.BindingCollection.toJSON
  summary: ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API `JSON.stringify()` <!-- -->-Objekt an übergeben wird. (`JSON.stringify`<!-- -->ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche `Excel.BindingCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt ( `Excel.Interfaces.BindingCollectionData` <!-- -->typisiert als) zurück, das ein "Items"-Array mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.BindingCollectionData
      description: ''
