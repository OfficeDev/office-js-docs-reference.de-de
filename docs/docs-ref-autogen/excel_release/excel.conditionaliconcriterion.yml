### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.ConditionalIconCriterion
    summary: |-
      <span data-ttu-id="21537-101">Stellt ein Symbol Kriterium dar, das einen Typ, einen Wert, einen Operator und ein optionales benutzerdefiniertes Symbol enthält, wenn kein Iconset verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="21537-101">Represents an Icon Criterion which contains a type, value, an Operator, and an optional custom icon, if not using an iconset.</span></span>

      <span data-ttu-id="21537-102">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="21537-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.ConditionalIconCriterion
    fullName: Excel.ConditionalIconCriterion
    langs:
      - typeScript
    type: interface
    package: excel_release
    children:
      - excel_release.Excel.ConditionalIconCriterion.customIcon
      - excel_release.Excel.ConditionalIconCriterion.formula
      - excel_release.Excel.ConditionalIconCriterion.operator
      - excel_release.Excel.ConditionalIconCriterion.type
  - uid: excel_release.Excel.ConditionalIconCriterion.customIcon
    summary: |-
      <span data-ttu-id="21537-103">Das benutzerdefinierte Symbol für das aktuelle Kriterium, sofern verschieden vom Standard-IconSet; andernfalls wird NULL zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="21537-103">The custom icon for the current criterion if different from the default IconSet, else null will be returned.</span></span>

      <span data-ttu-id="21537-104">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="21537-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: customIcon
    fullName: customIcon
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customIcon?: Excel.Icon;'
      return:
        type:
          - excel.Excel.Icon
  - uid: excel_release.Excel.ConditionalIconCriterion.formula
    summary: |-
      <span data-ttu-id="21537-105">Eine Zahl oder eine Formel, je nach Typ.</span><span class="sxs-lookup"><span data-stu-id="21537-105">A number or a formula depending on the type.</span></span>

      <span data-ttu-id="21537-106">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="21537-106">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formula
    fullName: formula
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formula: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="21537-107">Beispiele</span><span class="sxs-lookup"><span data-stu-id="21537-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ConditionalIconCriterion.operator
    summary: |-
      <span data-ttu-id="21537-108">GreaterThan oder GreaterThanOrEqual für jeden Regeltyp für das bedingte Formatsymbol.</span><span class="sxs-lookup"><span data-stu-id="21537-108">GreaterThan or GreaterThanOrEqual for each of the rule type for the Icon conditional format.</span></span>

      <span data-ttu-id="21537-109">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="21537-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: operator
    fullName: operator
    langs:
      - typeScript
    type: property
    syntax:
      content: 'operator: Excel.ConditionalIconCriterionOperator | "Invalid" | "GreaterThan" | "GreaterThanOrEqual";'
      return:
        type:
          - Excel.ConditionalIconCriterionOperator | "Invalid" | "GreaterThan" | "GreaterThanOrEqual"
        description: |-


          #### <a name="examples"></a><span data-ttu-id="21537-110">Beispiele</span><span class="sxs-lookup"><span data-stu-id="21537-110">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.ConditionalIconCriterion.type
    summary: |-
      <span data-ttu-id="21537-111">Die Basis für die bedingte Symbolformel.</span><span class="sxs-lookup"><span data-stu-id="21537-111">What the icon conditional formula should be based on.</span></span>

      <span data-ttu-id="21537-112">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="21537-112">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'type: Excel.ConditionalFormatIconRuleType | "Invalid" | "Number" | "Percent" | "Formula" | "Percentile";'
      return:
        type:
          - Excel.ConditionalFormatIconRuleType | "Invalid" | "Number" | "Percent" | "Formula" | "Percentile"
        description: |-


          #### <a name="examples"></a><span data-ttu-id="21537-113">Beispiele</span><span class="sxs-lookup"><span data-stu-id="21537-113">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```