### YamlMime:UniversalReference
ms.openlocfilehash: 43af779cbf26d7aac43160844244c34b0a91eff8
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/20/2019
ms.locfileid: "30111250"
items:
- uid: excel_release.Excel.Range
  summary: >-
    Ein Bereich stellt einen Satz einer oder mehrerer zusammenhängender Zellen wie z. B. eine Zelle, eine Zeile oder eine Spalte, ein Block von Zellen usw. dar.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.Range
  fullName: Excel.Range
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.Range.address
  - excel_release.Excel.Range.addressLocal
  - excel_release.Excel.Range.calculate
  - excel_release.Excel.Range.cellCount
  - excel_release.Excel.Range.clear
  - excel_release.Excel.Range.clear_1
  - excel_release.Excel.Range.columnCount
  - excel_release.Excel.Range.columnHidden
  - excel_release.Excel.Range.columnIndex
  - excel_release.Excel.Range.conditionalFormats
  - excel_release.Excel.Range.context
  - excel_release.Excel.Range.dataValidation
  - excel_release.Excel.Range.delete
  - excel_release.Excel.Range.delete_1
  - excel_release.Excel.Range.format
  - excel_release.Excel.Range.formulas
  - excel_release.Excel.Range.formulasLocal
  - excel_release.Excel.Range.formulasR1C1
  - excel_release.Excel.Range.getAbsoluteResizedRange
  - excel_release.Excel.Range.getBoundingRect
  - excel_release.Excel.Range.getCell
  - excel_release.Excel.Range.getColumn
  - excel_release.Excel.Range.getColumnsAfter
  - excel_release.Excel.Range.getColumnsBefore
  - excel_release.Excel.Range.getEntireColumn
  - excel_release.Excel.Range.getEntireRow
  - excel_release.Excel.Range.getImage
  - excel_release.Excel.Range.getIntersection
  - excel_release.Excel.Range.getIntersectionOrNullObject
  - excel_release.Excel.Range.getLastCell
  - excel_release.Excel.Range.getLastColumn
  - excel_release.Excel.Range.getLastRow
  - excel_release.Excel.Range.getOffsetRange
  - excel_release.Excel.Range.getResizedRange
  - excel_release.Excel.Range.getRow
  - excel_release.Excel.Range.getRowsAbove
  - excel_release.Excel.Range.getRowsBelow
  - excel_release.Excel.Range.getSurroundingRegion
  - excel_release.Excel.Range.getUsedRange
  - excel_release.Excel.Range.getUsedRangeOrNullObject
  - excel_release.Excel.Range.getVisibleView
  - excel_release.Excel.Range.hidden
  - excel_release.Excel.Range.hyperlink
  - excel_release.Excel.Range.insert
  - excel_release.Excel.Range.insert_1
  - excel_release.Excel.Range.isEntireColumn
  - excel_release.Excel.Range.isEntireRow
  - excel_release.Excel.Range.load
  - excel_release.Excel.Range.load_1
  - excel_release.Excel.Range.load_2
  - excel_release.Excel.Range.merge
  - excel_release.Excel.Range.numberFormat
  - excel_release.Excel.Range.numberFormatLocal
  - excel_release.Excel.Range.rowCount
  - excel_release.Excel.Range.rowHidden
  - excel_release.Excel.Range.rowIndex
  - excel_release.Excel.Range.select
  - excel_release.Excel.Range.set
  - excel_release.Excel.Range.set_1
  - excel_release.Excel.Range.showCard
  - excel_release.Excel.Range.sort
  - excel_release.Excel.Range.style
  - excel_release.Excel.Range.text
  - excel_release.Excel.Range.toJSON
  - excel_release.Excel.Range.track
  - excel_release.Excel.Range.unmerge
  - excel_release.Excel.Range.untrack
  - excel_release.Excel.Range.values
  - excel_release.Excel.Range.valueTypes
  - excel_release.Excel.Range.worksheet
- uid: excel_release.Excel.Range.address
  summary: >-
    Stellt den Range-Verweis im a1-Format dar. Der Adresswert enthält den Blatt Verweis (beispielsweise "Sheet1! A1: B4 "). Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: address
  fullName: address
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly address: string;'
    return:
      type:
      - string
- uid: excel_release.Excel.Range.addressLocal
  summary: >-
    Stellt den Bereichsbezug für den angegebenen Bereich in der Sprache des Benutzers dar. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: addressLocal
  fullName: addressLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly addressLocal: string;'
    return:
      type:
      - string
- uid: excel_release.Excel.Range.calculate
  summary: >-
    Berechnet einen Zellbereich auf einem Arbeitsblatt.


    \[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: calculate()
  fullName: calculate()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel_release.Excel.Range.cellCount
  summary: >-
    Anzahl der Zellen im Bereich. Diese API gibt -1 zurück, wenn die Zellenanzahl 2^31-1 (2.147.483.647) überschreitet. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: cellCount
  fullName: cellCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellCount: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.Range.clear
  summary: >-
    Löschen von Bereichswerten, Format, Füllung, Rahmen usw.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: clear(applyTo)
  fullName: clear(applyTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Below example clears format and contents of the range. \nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.clear();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: applyTo
      description: Optional. Bestimmt den Typ der Clear-Aktion. Weitere Informationen finden Sie unter Excel. ClearApplyTo.
      type:
      - excel.Excel.ClearApplyTo
- uid: excel_release.Excel.Range.clear_1
  summary: >-
    Löschen von Bereichswerten, Format, Füllung, Rahmen usw.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: clear(applyToString)
  fullName: clear(applyToString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: applyToString
      description: Optional. Bestimmt den Typ der Clear-Aktion. Weitere Informationen finden Sie unter Excel. ClearApplyTo.
      type:
      - "\"All\" | \"Formats\" | \"Contents\" | \"Hyperlinks\" | \"RemoveHyperlinks\""
- uid: excel_release.Excel.Range.columnCount
  summary: >-
    Stellt die Gesamtanzahl der Spalten im Bereich dar. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: columnCount
  fullName: columnCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnCount: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.Range.columnHidden
  summary: >-
    Stellt dar, ob alle Spalten des aktuellen Bereichs ausgeblendet sind.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: columnHidden
  fullName: columnHidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'columnHidden: boolean;'
    return:
      type:
      - boolean
- uid: excel_release.Excel.Range.columnIndex
  summary: >-
    Stellt die Spaltenanzahl der ersten Zelle im Bereich dar. Nullindiziert. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: columnIndex
  fullName: columnIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnIndex: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.Range.conditionalFormats
  summary: >-
    Sammlung von ConditionalFormats, die den Bereich überschneiden. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: conditionalFormats
  fullName: conditionalFormats
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
- uid: excel_release.Excel.Range.context
  summary: Der dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.Range.dataValidation
  summary: >-
    Gibt ein Datenüberprüfungsobjekt zurück.


    \[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: dataValidation
  fullName: dataValidation
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataValidation: Excel.DataValidation;'
    return:
      type:
      - excel.Excel.DataValidation
- uid: excel_release.Excel.Range.delete
  summary: >-
    Löscht die einem Bereich zugeordneten Zellen.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: delete(shift)
  fullName: delete(shift)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(shift: Excel.DeleteShiftDirection): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: shift
      description: Gibt an, auf welche Weise die Zellen verschoben werden sollen. Weitere Informationen finden Sie unter Excel. DeleteShiftDirection.
      type:
      - excel.Excel.DeleteShiftDirection
- uid: excel_release.Excel.Range.delete_1
  summary: >-
    Löscht die einem Bereich zugeordneten Zellen.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: delete(shiftString)
  fullName: delete(shiftString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(shiftString: "Up" | "Left"): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.delete(\"Left\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: shiftString
      description: Gibt an, auf welche Weise die Zellen verschoben werden sollen. Weitere Informationen finden Sie unter Excel. DeleteShiftDirection.
      type:
      - "\"Up\" | \"Left\""
- uid: excel_release.Excel.Range.format
  summary: >-
    Gibt ein Formatobjekt zurück, das die Schriftart des Bereichs, Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften verschachtelt. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: format
  fullName: format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.RangeFormat;'
    return:
      type:
      - excel.Excel.RangeFormat
- uid: excel_release.Excel.Range.formulas
  summary: >-
    Stellt die Formel in der A1-Schreibweise dar. Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein. Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: formulas
  fullName: formulas
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulas: any[][];'
    return:
      type:
      - any[][]
- uid: excel_release.Excel.Range.formulasLocal
  summary: >-
    Stellt die Formel in der a1-Notation im Sprach-und Zahlen Formatierungs Gebietsschema des Benutzers dar. Beispielsweise würde die englische "= SUM (a1, 1,5)"-Formel zu "= Summe (a1; 1,5) "in Deutsch. Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein. Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: formulasLocal
  fullName: formulasLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulasLocal: any[][];'
    return:
      type:
      - any[][]
- uid: excel_release.Excel.Range.formulasR1C1
  summary: >-
    Stellt die Formel in der R1C1-Schreibweise dar. Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein. Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: formulasR1C1
  fullName: formulasR1C1
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulasR1C1: any[][];'
    return:
      type:
      - any[][]
- uid: excel_release.Excel.Range.getAbsoluteResizedRange
  summary: >-
    Ruft ein Bereichsobjekt ab, das die gleiche Zelle oben links aufweist wie das aktuelle Bereichsobjekt, jedoch über eine angegebene Anzahl von Reihen uns Spalten verfügt.


    \[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getAbsoluteResizedRange(numRows, numColumns)
  fullName: getAbsoluteResizedRange(numRows, numColumns)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: numRows
      description: Die Anzahl der Zeilen der neuen Größenklasse.
      type:
      - number
    - id: numColumns
      description: Die Anzahl der Spalten der neuen Größenklasse.
      type:
      - number
- uid: excel_release.Excel.Range.getBoundingRect
  summary: >-
    Ruft das kleinste Bereichsobjekt ab, das die angegebenen Bereiche umfasst. Beispielsweise das GetBoundingRect von "B2:C5" und "D10:E15" lautet "B2:E15".


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getBoundingRect(anotherRange)
  fullName: getBoundingRect(anotherRange)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:G6\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var range = range.getBoundingRect(\"G4:H8\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // Prints Sheet1!D4:H8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: anotherRange
      description: Das Bereichsobjekt oder die Adresse oder der Bereichsname.
      type:
      - Range | string
- uid: excel_release.Excel.Range.getCell
  summary: >-
    Ruft das Range-Objekt ab, das die einzelne Zelle basierend auf Zeilen-und Spaltennummern enthält. Die Zelle kann außerhalb der Grenzen des übergeordneten Bereichs liegen, solange Sie sich innerhalb des Arbeitsblatt Rasters befindet. Die zurückgegebene Zelle befindet sich relativ zur oberen linken Zelle des Bereiches.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getCell(row, column)
  fullName: getCell(row, column)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var cell = range.cell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: Zeilenanzahl der abzurufenden Zelle. Nullindiziert.
      type:
      - number
    - id: column
      description: Spaltenanzahl der abzurufenden Zelle. Nullindiziert.
      type:
      - number
- uid: excel_release.Excel.Range.getColumn
  summary: >-
    Ruft eine Spalte ab, die im Bereich enthalten ist.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getColumn(column)
  fullName: getColumn(column)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumn(column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet19\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!B1:B8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: column
      description: Spaltenanzahl des abzurufenden Bereichs. Nullindiziert.
      type:
      - number
- uid: excel_release.Excel.Range.getColumnsAfter
  summary: >-
    Ruft eine bestimmte Anzahl von Spalten rechts vom aktuellen Bereichsobjekt ab.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getColumnsAfter(count)
  fullName: getColumnsAfter(count)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumnsAfter(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type:
      - number
- uid: excel_release.Excel.Range.getColumnsBefore
  summary: >-
    Ruft eine bestimmte Anzahl von Spalten links vom aktuellen Bereichsobjekt ab.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getColumnsBefore(count)
  fullName: getColumnsBefore(count)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumnsBefore(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type:
      - number
- uid: excel_release.Excel.Range.getEntireColumn
  summary: >-
    Ruft ein Objekt ab, das die gesamte Spalte des Bereiches darstellt (Wenn beispielsweise der aktuelle Bereich die Zellen "B4: e11" darstellt `getEntireColumn` , ist its ein Bereich, der die Spalten "B:E" darstellt).


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getEntireColumn()
  fullName: getEntireColumn()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntireColumn(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Note: the grid properties of the Range (values, numberFormat, formulas) \n// contains null since the Range in question is unbounded.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeEC = range.getEntireColumn();\n    rangeEC.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeEC.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel_release.Excel.Range.getEntireRow
  summary: >-
    Ruft ein Objekt ab, das die gesamte Zeile des Bereiches darstellt (Wenn beispielsweise der aktuelle Bereich die Zellen "B4: e11" darstellt `GetEntireRow` , ist its ein Bereich, der die zeilen "4:11" darstellt).


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getEntireRow()
  fullName: getEntireRow()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntireRow(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Gets an object that represents the entire row of the range \n// (for example, if the current range represents cells \"B4:E11\", \n// its GetEntireRow is a range that represents rows \"4:11\").\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeER = range.getEntireRow();\n    rangeER.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeER.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel_release.Excel.Range.getImage
  summary: >-
    Rendert den Range als Base64-codiertes PNG-Bild.


    \[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getImage()
  fullName: getImage()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getImage(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: ''
- uid: excel_release.Excel.Range.getIntersection
  summary: >-
    Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getIntersection(anotherRange)
  fullName: getIntersection(anotherRange)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection(\"D4:G6\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!D4:F6\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: anotherRange
      description: Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.
      type:
      - Range | string
- uid: excel_release.Excel.Range.getIntersectionOrNullObject
  summary: >-
    Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt. Wenn keine Schnittmenge gefunden wird, wird ein null-Objekt zurückgegeben.


    \[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getIntersectionOrNullObject(anotherRange)
  fullName: getIntersectionOrNullObject(anotherRange)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: anotherRange
      description: Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.
      type:
      - Range | string
- uid: excel_release.Excel.Range.getLastCell
  summary: >-
    Ruft die letzte Zelle im Bereich ab. Beispielsweise lautet die letzte Zelle des Bereichs „B2: D5“ „D5“.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getLastCell()
  fullName: getLastCell()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastCell(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel_release.Excel.Range.getLastColumn
  summary: >-
    Ruft die letzte Spalte im Bereich ab. Beispielsweise lautet die letzte Spalte von „B2:D5“ „D2:D5“.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getLastColumn()
  fullName: getLastColumn()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastColumn(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F1:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel_release.Excel.Range.getLastRow
  summary: >-
    Ruft die letzte Zeile im Bereich ab. Beispielsweise lautet die letzte Zelle des Bereichs "B2: D5" "B5:D5".


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getLastRow()
  fullName: getLastRow()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastRow(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A8:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel_release.Excel.Range.getOffsetRange
  summary: >-
    Ruft ein Objekt ab, das einen Bereich darstellt, der aus dem angegebenen Bereich versetzt ist. Die Dimension des zurückgegebenen Bereichs entspricht diesem Bereich. Wenn der resultierende Bereich außerhalb des Arbeitsblatt-Rasters erzwungen wird, wird ein Fehler ausgelöst.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getOffsetRange(rowOffset, columnOffset)
  fullName: getOffsetRange(rowOffset, columnOffset)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:F6\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!H3:K5\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: rowOffset
      description: Die Anzahl an Zeilen (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.
      type:
      - number
    - id: columnOffset
      description: Die Anzahl an Spalten (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.
      type:
      - number
- uid: excel_release.Excel.Range.getResizedRange
  summary: >-
    Ruft ein Range-Objekt ähnlich dem aktuellen Range-Objekt ab, dessen untere rechte Ecke jedoch um eine bestimmte Anzahl von Zeilen und Spalten erweitert (oder verkleinert) ist.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getResizedRange(deltaRows, deltaColumns)
  fullName: getResizedRange(deltaRows, deltaColumns)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: deltaRows
      description: Die Anzahl von Zeilen, um die die untere rechte Ecke relativ zum aktuellen Bereich zu erweitern ist. Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verkleinern.
      type:
      - number
    - id: deltaColumns
      description: Die Anzahl der Spalten, nach denen die untere rechte Ecke relativ zum aktuellen Bereich erweitert werden soll. Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verringern.
      type:
      - number
- uid: excel_release.Excel.Range.getRow
  summary: >-
    Ruft eine Zelle ab, die im Bereich enthalten ist.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getRow(row)
  fullName: getRow(row)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRow(row: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A2:F2\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: Zeilenanzahl des abzurufenden Bereichs. Nullindiziert.
      type:
      - number
- uid: excel_release.Excel.Range.getRowsAbove
  summary: >-
    Ruft eine bestimmte Anzahl von Zeilen oberhalb vom aktuellen Bereichsobjekt ab.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getRowsAbove(count)
  fullName: getRowsAbove(count)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRowsAbove(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type:
      - number
- uid: excel_release.Excel.Range.getRowsBelow
  summary: >-
    Ruft eine bestimmte Anzahl von Zeilen unterhalb vom aktuellen Bereichsobjekt ab.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getRowsBelow(count)
  fullName: getRowsBelow(count)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRowsBelow(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type:
      - number
- uid: excel_release.Excel.Range.getSurroundingRegion
  summary: >-
    Gibt ein Bereichsobjekt zurück, das die umgebenden Region für die Zelle oben links in diesem Bereich darstellt. Eine umgebende Region ist ein Bereich, der von einer Kombination von leeren Zeilen und leeren Spalten relativ zu diesem Bereich begrenzt wird.


    \[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getSurroundingRegion()
  fullName: getSurroundingRegion()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSurroundingRegion(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel_release.Excel.Range.getUsedRange
  summary: >-
    Gibt den verwendeten Bereich des angegebenen Bereichsobjekts zurück. Wenn keine verwendeten Zellen innerhalb des Bereichs vorhanden sind, löst diese Funktion einen „ItemNotFound“-Fehler aus.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getUsedRange(valuesOnly)
  fullName: getUsedRange(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeUR = range.getUsedRange();\n    rangeUR.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeUR.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: valuesOnly
      description: 'Betrachtet nur Zellen mit Werten als verwendet. \[API-Satz: ExcelApi 1,2\]'
      type:
      - boolean
- uid: excel_release.Excel.Range.getUsedRangeOrNullObject
  summary: >-
    Gibt den verwendeten Bereich des angegebenen Bereichsobjekts zurück. Wenn keine verwendeten Zellen innerhalb des Bereichs vorhanden sind, gibt diese Funktion ein NULL-Objekt zurück.


    \[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: getUsedRangeOrNullObject(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(\n        true /* valuesOnly */\n    );\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n        console.log(\"Need Data to Make Chart\");\n        console.log(\"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\");\n    } else {\n        const chart = sheet.charts.add(\n            Excel.ChartType.columnClustered,\n            dataRange,\n            \"Columns\"\n        );\n        chart.setPosition(\"A15\", \"F30\");\n        chart.title.text = \"Quarterly sales chart\";\n        chart.legend.position = \"Right\";\n        chart.legend.format.fill.setSolidColor(\"white\");\n        chart.dataLabels.format.font.size = 15;\n        chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: valuesOnly
      description: Betrachtet nur Zellen mit Werten als verwendet.
      type:
      - boolean
- uid: excel_release.Excel.Range.getVisibleView
  summary: >-
    Stellt die sichtbaren Zeilen des aktuellen Bereichs dar.


    \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getVisibleView()
  fullName: getVisibleView()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getVisibleView(): Excel.RangeView;'
    return:
      type:
      - excel.Excel.RangeView
      description: ''
- uid: excel_release.Excel.Range.hidden
  summary: >-
    Stellt dar, ob alle Zellen des aktuellen Bereichs ausgeblendet sind. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: hidden
  fullName: hidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly hidden: boolean;'
    return:
      type:
      - boolean
- uid: excel_release.Excel.Range.hyperlink
  summary: >-
    Stellt den Hyperlink für den aktuellen Zeitraum dar.


    \[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: hyperlink
  fullName: hyperlink
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hyperlink: Excel.RangeHyperlink;'
    return:
      type:
      - excel.Excel.RangeHyperlink
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.Range.insert
  summary: >-
    Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues Bereichsobjekt in dem nun leeren Bereich zurück.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: insert(shift)
  fullName: insert(shift)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.insert();\n    return ctx.sync(); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: shift
      description: Gibt an, auf welche Weise die Zellen verschoben werden sollen. Weitere Informationen finden Sie unter Excel. InsertShiftDirection.
      type:
      - excel.Excel.InsertShiftDirection
- uid: excel_release.Excel.Range.insert_1
  summary: >-
    Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues Bereichsobjekt in dem nun leeren Bereich zurück.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: insert(shiftString)
  fullName: insert(shiftString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: shiftString
      description: Gibt an, auf welche Weise die Zellen verschoben werden sollen. Weitere Informationen finden Sie unter Excel. InsertShiftDirection.
      type:
      - "\"Down\" | \"Right\""
- uid: excel_release.Excel.Range.isEntireColumn
  summary: >-
    Gibt an, ob der angegebene Bereich eine ganze Spalte ist. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: isEntireColumn
  fullName: isEntireColumn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEntireColumn: boolean;'
    return:
      type:
      - boolean
- uid: excel_release.Excel.Range.isEntireRow
  summary: >-
    Gibt an, ob der angegebene Bereich eine ganze Zeile ist. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: isEntireRow
  fullName: isEntireRow
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEntireRow: boolean;'
    return:
      type:
      - boolean
- uid: excel_release.Excel.Range.load
  summary: Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen "context. Sync ()" aufrufen, bevor Sie die Eigenschaften lesen.
  remarks: >-
    Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:


    `load(option?: string | string[]): Excel.Range`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.


    `load(option?: { select?: string; expand?: string; }): Excel.Range`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`-Nur verfügbar für Sammlungstypen. Sie ähnelt der vorherigen Signatur. Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können. Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind. Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.RangeLoadOptions
- uid: excel_release.Excel.Range.load_1
  summary: Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\"; \n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var rangeName = 'MyRange';\n    var range = ctx.workbook.names.getItem(rangeName).range;\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// The example below sets number-format, values and formulas on a grid that contains 2x3 grid.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:G7\";\n    var numberFormat = [[null, \"d-mmm\"], [null, \"d-mmm\"], [null, null]]\n    var values = [[\"Today\", 42147], [\"Tomorrow\", \"5/24\"], [\"Difference in days\", null]];\n    var formulas = [[null,null], [null,null], [null,\"=G6-G5\"]];\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.numberFormat = numberFormat;\n    range.values = values;\n    range.formulas= formulas;\n    range.load('text');\n    return ctx.sync().then(function() {\n        console.log(range.text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type:
      - string | string[]
- uid: excel_release.Excel.Range.load_2
  summary: Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: Wobei propertyNamesAndPaths. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Navigationseigenschaften angibt.
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel_release.Excel.Range.merge
  summary: >-
    Führt die Zellen des Bereichs in einen Bereich im Arbeitsblatt zusammen.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: merge(across)
  fullName: merge(across)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'merge(across?: boolean): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.merge(true);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: across
      description: Optional. Mit „true“ werden Zellen in allen Zeilen des angegebenen Bereichs als einzelne zusammengeführte Zellen zusammengeführt. Der Standardwert lautet „false“.
      type:
      - boolean
- uid: excel_release.Excel.Range.numberFormat
  summary: >-
    Stellt den Zahlenformatcode von Excel für den angegebenen Range dar. Beim Festlegen des Zahlenformats auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein. Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: numberFormat
  fullName: numberFormat
  langs:
  - typeScript
  type: property
  syntax:
    content: 'numberFormat: any[][];'
    return:
      type:
      - any[][]
- uid: excel_release.Excel.Range.numberFormatLocal
  summary: >-
    Stellt den Zahlenformatcode in Excel für einen bestimmten Bereich als Zeichenfolge in der Sprache des Benutzers dar. Beim Festlegen des Zahlenformats lokal auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein. Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.


    \[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: numberFormatLocal
  fullName: numberFormatLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'numberFormatLocal: any[][];'
    return:
      type:
      - any[][]
- uid: excel_release.Excel.Range.rowCount
  summary: >-
    Gibt die Anzahl der Zeilen im Bereich zurück. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: rowCount
  fullName: rowCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowCount: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.Range.rowHidden
  summary: >-
    Stellt dar, ob alle Zeilen des aktuellen Bereichs ausgeblendet sind.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: rowHidden
  fullName: rowHidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rowHidden: boolean;'
    return:
      type:
      - boolean
- uid: excel_release.Excel.Range.rowIndex
  summary: >-
    Gibt die Spaltenanzahl der ersten Zelle im Bereich zurück. Nullindiziert. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: rowIndex
  fullName: rowIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.Range.select
  summary: >-
    Wählt den angegebenen Bereich in der Excel-Benutzeroberfläche aus.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: select()
  fullName: select()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.select();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel_release.Excel.Range.set
  summary: Legt mehrere Eigenschaften eines Objekts gleichzeitig fest. Sie können entweder ein plain-Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs weitergeben.
  remarks: "Diese Methode hat die folgende zusätzliche Signatur:\n\n`set(properties: Excel.Range): void`\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const range = sheet.getRange(\"B2:E2\");\n    range.set({\n        format: {\n            fill: {\n                color: \"#4472C4\"\n            },\n            font: {\n                name: \"Verdana\",\n                color: \"white\"\n            }\n        }\n    })\n    range.format.autofitColumns();\n    await context.sync();\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const sourceRange = sheet.getRange(\"B2:E2\");\n    sourceRange.load(\"format/fill/color, format/font/name, format/font/color\");\n    await context.sync();\n\n    // Set properties based on the loaded and synced \n    // source range.\n    const targetRange = sheet.getRange(\"B7:E7\");\n    targetRange.set(sourceRange); \n    targetRange.format.autofitColumns();\n    await context.sync();\n});\n```"
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: Ein JavaScript-Objekt mit Eigenschaften, die isomorphically strukturiert sind, um die Eigenschaften des Objekts, für das die Methode aufgerufen wird.
      type:
      - Interfaces.RangeUpdateData
    - id: options
      description: Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel_release.Excel.Range.set_1
  summary: Legt mehrere Eigenschaften für das Objekt auf der Grundlage eines vorhandenen geladenen Objekts zur gleichen Zeit fest.
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.Range): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.Range
- uid: excel_release.Excel.Range.showCard
  summary: >-
    Zeigt die Karte für eine aktive Zelle an, wenn sie einen hohen Wertinhalt hat.


    \[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: showCard()
  fullName: showCard()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'showCard(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel_release.Excel.Range.sort
  summary: >-
    Stellt die Bereichssortierung des aktuellen Bereichs dar. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: sort
  fullName: sort
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly sort: Excel.RangeSort;'
    return:
      type:
      - excel.Excel.RangeSort
- uid: excel_release.Excel.Range.style
  summary: >-
    Stellt die Formatvorlage des aktuellen Bereichs dar. Wenn die Formatvorlagen der Zellen inkonsistent sind, wird NULL zurückgegeben. Für benutzerdefinierte Formatvorlagen wird der Formatvorlagenname zurückgegeben. Bei integrierten Formatvorlagen wird eine Zeichenfolge zurückgegeben, die einen Wert in der Builtstyle-Enumeration darstellt.


    \[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: style
  fullName: style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Excel.run(async (context) => {\n    let worksheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = worksheet.getRange(\"A1:E1\");\n\n    // Apply built-in style. \n    // Styles are in the Home tab ribbon.\n    range.style = Excel.BuiltInStyle.neutral;\n    range.format.horizontalAlignment = \"Right\";\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.Range.text
  summary: >-
    Textwerte des angegebenen Zeitraums. Der Textwert ist nicht von der Zellenbreite abhängig. Die \# in der Excel-Benutzeroberfläche auftretende Zeichenersetzung wirkt sich nicht auf den von der API zurückgegebenen Textwert aus. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: text
  fullName: text
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly text: string[][];'
    return:
      type:
      - string[][]
- uid: excel_release.Excel.Range.toJSON
  summary: ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API `JSON.stringify()` <!-- -->-Objekt an übergeben wird. (`JSON.stringify`<!-- -->ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche Excel. Range-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt `Excel.Interfaces.RangeData` <!-- -->(typisiert als) zurück, das flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeData;'
    return:
      type:
      - excel.Excel.Interfaces.RangeData
      description: ''
- uid: excel_release.Excel.Range.track
  summary: Verfolgen Sie das Objekt für die automatische Anpassung basierend auf den umgebenden Änderungen im Dokument. Dieser Aufruf ist eine Kurzform für Context. trackedObjects. Add (ThisObject). Wenn Sie dieses Objekt in ". Sync"-aufrufen und außerhalb der sequenziellen Ausführung eines Batches ". Run" verwenden und beim Festlegen einer Eigenschaft oder beim Aufrufen einer Methode für das Objekt einen "InvalidObjectPath"-Fehler erhalten, muss das Objekt dem nachverfolgten Objekt hinzugefügt worden sein. -Auflistung beim ersten Erstellen des Objekts.
  name: track()
  fullName: track()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel_release.Excel.Range.unmerge
  summary: >-
    Hebt den Zellverbund des Bereichs in einzelne Zellen auf.


    \[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: unmerge()
  fullName: unmerge()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'unmerge(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel_release.Excel.Range.untrack
  summary: Freigeben des Speichers, der diesem Objekt zugeordnet ist, sofern es zuvor nachverfolgt wurde. Dieser Aufruf ist eine Kurzform für Context. trackedObjects. Remove (ThisObject). Wenn viele nachverfolgte Objekte die Hostanwendung verlangsamen, denken Sie daran, alle von Ihnen hinzugefügten Objekte freizugeben, nachdem Sie Sie fertig verwendet haben. Sie müssen "context. Sync ()" aufrufen, bevor die Speicherfreigabe wirksam wird.
  name: untrack()
  fullName: untrack()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nExcel.run(async (context) => {\n    const largeRange = context.workbook.getSelectedRange();\n    largeRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n\n    for (let i = 0; i < largeRange.rowCount; i++) {\n        for (let j = 0; j < largeRange.columnCount; j++) {\n            let cell = largeRange.getCell(i, j);\n            cell.values = [[i *j]];\n\n            // call untrack() to release the range from memory\n            cell.untrack();\n        }\n    }\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.Range.values
  summary: >-
    Stellt die unformatierten Werte des angegebenen Zeitraums dar. Die zurückgegebenen Daten können vom Typ String, Number oder Boolean sein. Zellen, die einen Fehler enthalten, geben die Fehlerzeichenfolge zurück. Beim Festlegen von Werten für einen Bereich kann das value-Argument entweder ein einzelner Wert (String, Number oder Boolean) oder ein zweidimensionales Array sein. Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: values
  fullName: values
  langs:
  - typeScript
  type: property
  syntax:
    content: 'values: any[][];'
    return:
      type:
      - any[][]
- uid: excel_release.Excel.Range.valueTypes
  summary: >-
    Stellt den Datentyp der einzelnen Zellen dar. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: valueTypes
  fullName: valueTypes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly valueTypes: Excel.RangeValueType[][];'
    return:
      type:
      - Excel.RangeValueType[][]
- uid: excel_release.Excel.Range.worksheet
  summary: >-
    Das Arbeitsblatt, das den aktuellen Bereich enthält. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: worksheet
  fullName: worksheet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
