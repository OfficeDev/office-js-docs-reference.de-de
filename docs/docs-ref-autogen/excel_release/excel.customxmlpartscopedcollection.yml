### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.CustomXmlPartScopedCollection
    summary: |-
      <span data-ttu-id="e2681-101">Eine bereichsbezogene Auflistung von benutzerdefinierten XML-Komponenten.</span><span class="sxs-lookup"><span data-stu-id="e2681-101">A scoped collection of custom XML parts.</span></span> <span data-ttu-id="e2681-102">Eine bereichsbezogene Auflistung ist das Ergebnis eines Vorgangs, z. b. Filtern nach Namespaces.</span><span class="sxs-lookup"><span data-stu-id="e2681-102">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id="e2681-103">Eine bereichsbezogene Auflistung kann nicht weiter bereichsbezogen werden.</span><span class="sxs-lookup"><span data-stu-id="e2681-103">A scoped collection cannot be scoped any further.</span></span>

      <span data-ttu-id="e2681-104">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e2681-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPartScopedCollection
    fullName: Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.CustomXmlPartScopedCollection.context
      - excel_release.Excel.CustomXmlPartScopedCollection.getCount
      - excel_release.Excel.CustomXmlPartScopedCollection.getItem
      - excel_release.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
      - excel_release.Excel.CustomXmlPartScopedCollection.getOnlyItem
      - excel_release.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
      - excel_release.Excel.CustomXmlPartScopedCollection.items
      - excel_release.Excel.CustomXmlPartScopedCollection.load
      - excel_release.Excel.CustomXmlPartScopedCollection.load_1
      - excel_release.Excel.CustomXmlPartScopedCollection.load_2
      - excel_release.Excel.CustomXmlPartScopedCollection.toJSON
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.context
    summary: <span data-ttu-id="e2681-105">Der dem Objekt zugeordnete Anforderungskontext.</span><span class="sxs-lookup"><span data-stu-id="e2681-105">The request context associated with the object.</span></span> <span data-ttu-id="e2681-106">Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="e2681-106">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.getCount
    summary: |-
      <span data-ttu-id="e2681-107">Ruft die Anzahl von CustomXml-Komponenten in dieser Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="e2681-107">Gets the number of CustomXML parts in this collection.</span></span>

      <span data-ttu-id="e2681-108">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e2681-108">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e2681-109">Beispiele</span><span class="sxs-lookup"><span data-stu-id="e2681-109">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.getItem
    summary: |-
      <span data-ttu-id="e2681-110">Ruft eine benutzerdefinierte XML-Komponente basierend auf ihrer ID ab.</span><span class="sxs-lookup"><span data-stu-id="e2681-110">Gets a custom XML part based on its ID.</span></span>

      <span data-ttu-id="e2681-111">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e2681-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="e2681-112">ID des abzurufenden Objekts.</span><span class="sxs-lookup"><span data-stu-id="e2681-112">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="e2681-113">Ruft eine benutzerdefinierte XML-Komponente basierend auf ihrer ID ab.</span><span class="sxs-lookup"><span data-stu-id="e2681-113">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="e2681-114">Wenn das CustomXmlPart-Objekt nicht vorhanden ist, ist die isNull-Eigenschaft des Return-Objekts true.</span><span class="sxs-lookup"><span data-stu-id="e2681-114">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>

      <span data-ttu-id="e2681-115">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e2681-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e2681-116">Beispiele</span><span class="sxs-lookup"><span data-stu-id="e2681-116">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="e2681-117">ID des abzurufenden Objekts.</span><span class="sxs-lookup"><span data-stu-id="e2681-117">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.getOnlyItem
    summary: |-
      <span data-ttu-id="e2681-118">Wenn die Sammlung genau ein Element enthält, gibt diese Methode es zurück.</span><span class="sxs-lookup"><span data-stu-id="e2681-118">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="e2681-119">Andernfalls erzeugt diese Methode einen Fehler.</span><span class="sxs-lookup"><span data-stu-id="e2681-119">Otherwise, this method produces an error.</span></span>

      <span data-ttu-id="e2681-120">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e2681-120">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItem()
    fullName: getOnlyItem()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e2681-121">Beispiele</span><span class="sxs-lookup"><span data-stu-id="e2681-121">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
    summary: |-
      <span data-ttu-id="e2681-122">Wenn die Sammlung genau ein Element enthält, gibt diese Methode es zurück.</span><span class="sxs-lookup"><span data-stu-id="e2681-122">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="e2681-123">Andernfalls gibt diese Methode NULL zurück.</span><span class="sxs-lookup"><span data-stu-id="e2681-123">Otherwise, this method returns Null.</span></span>

      <span data-ttu-id="e2681-124">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e2681-124">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getOnlyItemOrNullObject()
    fullName: getOnlyItemOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.items
    summary: <span data-ttu-id="e2681-125">Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="e2681-125">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.load
    summary: <span data-ttu-id="e2681-126">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="e2681-126">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e2681-127">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="e2681-127">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="e2681-128">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="e2681-128">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="e2681-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="e2681-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="e2681-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="e2681-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="e2681-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection`-Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="e2681-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types.</span></span> <span data-ttu-id="e2681-132">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="e2681-132">It is similar to the preceding signature.</span></span> <span data-ttu-id="e2681-133">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können.</span><span class="sxs-lookup"><span data-stu-id="e2681-133">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="e2681-134">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="e2681-134">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="e2681-135">Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.</span><span class="sxs-lookup"><span data-stu-id="e2681-135">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.load_1
    summary: <span data-ttu-id="e2681-136">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="e2681-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e2681-137">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="e2681-137">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="e2681-138">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="e2681-138">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: excel_release.Excel.CustomXmlPartScopedCollection.toJSON
    summary: '<span data-ttu-id="e2681-139">ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API-Objekt an`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="e2681-139">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="e2681-140">.</span><span class="sxs-lookup"><span data-stu-id="e2681-140"></span></span> <span data-ttu-id="e2681-141">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="e2681-141"></span></span><!-- --><span data-ttu-id="e2681-142">Ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche `Excel.CustomXmlPartScopedCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.CustomXmlPartScopedCollectionData`</span><span class="sxs-lookup"><span data-stu-id="e2681-142">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`</span></span><!-- --><span data-ttu-id="e2681-143">), die ein Array "Items" mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.</span><span class="sxs-lookup"><span data-stu-id="e2681-143">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartScopedCollectionData
        description: ''