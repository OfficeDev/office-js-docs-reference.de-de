### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Time:interface'
    summary: |-
      Das `Time` Objekt wird als Start-oder End-Eigenschaft eines Termins im erstellmodus zurückgegeben.

      \[[API-Gruppe: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: Verfassen
    name: Office.Time
    fullName: Office.Time
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Time#getAsync:member(1)'
      - 'outlook!Office.Time#getAsync:member(2)'
      - 'outlook!Office.Time#setAsync:member(1)'
      - 'outlook!Office.Time#setAsync:member(2)'
  - uid: 'outlook!Office.Time#getAsync:member(1)'
    summary: |-
      Ruft die Start- oder Endzeit eines Termins ab.

      Das Datum und die Uhrzeit werden als `Date` Objekt in der `asyncResult.value` -Eigenschaft bereitgestellt. Der Wert wird in UTC (Coordinated Universal Time) angegeben. Sie können die UTC-Zeit mithilfe der-Methode in die lokale Clientzeit konvertieren `convertToLocalClientTime` .

      \[[API-Gruppe: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: Verfassen
    name: 'getAsync(options, callback)'
    fullName: 'getAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können ein beliebiges Objekt bereitstellen, auf das Sie in der Rückrufmethode zugreifen möchten.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Wenn die Methode abgeschlossen ist, wird die Funktion, die im- `callback` Parameter übergeben wird, mit einem einzelnen Parameter vom Typ aufgerufen.`Office.AsyncResult`<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein `Date` Objekt.'
          type:
            - 'outlook!Office.Time#getAsync~0:complex'
  - uid: 'outlook!Office.Time#getAsync:member(2)'
    summary: |-
      Ruft die Start- oder Endzeit eines Termins ab.

      Das Datum und die Uhrzeit werden als `Date` Objekt in der `asyncResult.value` -Eigenschaft bereitgestellt. Der Wert wird in UTC (Coordinated Universal Time) angegeben. Sie können die UTC-Zeit mithilfe der-Methode in die lokale Clientzeit konvertieren `convertToLocalClientTime` .

      \[[API-Gruppe: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: Verfassen

      #### <a name="examples"></a>Beispiele

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml
      Office.context.mailbox.item.start.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment starts: ${result.value}`);
      });
      ```
    name: getAsync(callback)
    fullName: getAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzelnen Parameter vom Typ aufgerufen.`Office.AsyncResult`<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein `Date` Objekt.'
          type:
            - 'outlook!Office.Time#getAsync~1:complex'
  - uid: 'outlook!Office.Time#setAsync:member(1)'
    summary: |-
      Legt die Start- oder Endzeit eines Termins fest.

      Wenn die `setAsync` Methode für die Start-Eigenschaft aufgerufen wird, `end` wird die Eigenschaft angepasst, um die Dauer des Termins beizubehalten, wie zuvor festgelegt. Wenn die `setAsync`-Methode für die `end`-Eigenschaft aufgerufen wird, wird die Dauer des Termins bis zur neuen Endzeit verlängert.

      Die Uhrzeit muss UTC-Format aufweisen; Sie können mithilfe der `convertToUtcClientTime`-Methode die korrekte UTC-Uhrzeit abrufen.

      \[[API-Gruppe: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadWriteItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: Verfassen

      **Fehler**:

      - `InvalidEndTime`<!-- -->: Die Endzeit des Termins liegt vor der Startzeit des Termins.

      #### <a name="examples"></a>Beispiele

      ```javascript
      var startTime = new Date("3/14/2015");
      var options = {
          // Pass information that can be used in the callback.
          asyncContext: {verb: "Set"}
      };
      Office.context.mailbox.item.start.setAsync(startTime, options, function(result) {
          if (result.error) {
              console.debug(result.error);
          } else {
              // Access the asyncContext that was passed to the setAsync function.
              console.debug("Start Time " + result.asyncContext.verb);
          }
      });
      ```
    name: 'setAsync(dateTime, options, callback)'
    fullName: 'setAsync(dateTime, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(dateTime: Date, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: dateTime
          description: Ein Datum/Uhrzeitobjekt in koordinierter Weltzeit (UTC).
          type:
            - '!Date:interface'
        - id: options
          description: 'Optional. Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können ein beliebiges Objekt bereitstellen, auf das Sie in der Rückrufmethode zugreifen möchten.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Optional. Wenn die Methode abgeschlossen ist, wird die Funktion, die im- `callback` Parameter übergeben wird, mit einem einzelnen Parameter vom Typ aufgerufen.`Office.AsyncResult`<!-- -->. Wenn das Festlegen von Datum und Uhrzeit fehlschlägt, enthält die `asyncResult.error`-Eigenschaft einen Fehlercode.'
          type:
            - 'outlook!Office.Time#setAsync~0:complex'
  - uid: 'outlook!Office.Time#setAsync:member(2)'
    summary: |-
      Legt die Start- oder Endzeit eines Termins fest.

      Wenn die `setAsync` Methode für die Start-Eigenschaft aufgerufen wird, `end` wird die Eigenschaft angepasst, um die Dauer des Termins beizubehalten, wie zuvor festgelegt. Wenn die `setAsync`-Methode für die `end`-Eigenschaft aufgerufen wird, wird die Dauer des Termins bis zur neuen Endzeit verlängert.

      Die Uhrzeit muss UTC-Format aufweisen; Sie können mithilfe der `convertToUtcClientTime`-Methode die korrekte UTC-Uhrzeit abrufen.

      \[[API-Gruppe: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- --> **:`ReadWriteItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- --> **: Verfassen

      **Fehler**:

      - `InvalidEndTime`<!-- -->: Die Endzeit des Termins liegt vor der Startzeit des Termins.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml
      var start = new Date(); // Represents current date and time.
      start.setDate(start.getDate() + 2); // Add 2 days to current date.
      Office.context.mailbox.item.start.setAsync(start, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set start date and time to ${start}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml
      Office.context.mailbox.item.start.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Get start date failed with message ${result.error.message}`);
          return;
        }

        var end = result.value; // Set end to current start date and time.
        end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
        Office.context.mailbox.item.end.setAsync(end, (result) => {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Set end date failed with message ${result.error.message}`);
            return;
          }
          console.log(`Successfully set end date and time to ${end}`);
        });
      });
      ```
    name: 'setAsync(dateTime, callback)'
    fullName: 'setAsync(dateTime, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(dateTime: Date, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: dateTime
          description: Ein Datum/Uhrzeitobjekt in koordinierter Weltzeit (UTC).
          type:
            - '!Date:interface'
        - id: callback
          description: 'Optional. Wenn die Methode abgeschlossen ist, wird die Funktion, die im- `callback` Parameter übergeben wird, mit einem einzelnen Parameter vom Typ aufgerufen.`Office.AsyncResult`<!-- -->. Wenn das Festlegen von Datum und Uhrzeit fehlschlägt, enthält die `asyncResult.error`-Eigenschaft einen Fehlercode.'
          type:
            - 'outlook!Office.Time#setAsync~1:complex'
references:
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Time#getAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<Date>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Date>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Time#getAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<Date>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Date>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: '>) => void'
        fullName: '>) => void'
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.Time#setAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Time#setAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void