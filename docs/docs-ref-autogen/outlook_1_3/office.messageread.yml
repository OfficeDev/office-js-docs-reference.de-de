### YamlMime:UniversalReference
ms.openlocfilehash: 673a9fe24e6bf2abc9f8e777c6e8f4695a42a0f1
ms.sourcegitcommit: 6c48441b8be51d3a9d7dc836e386230a155feceb
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/22/2019
ms.locfileid: "30198578"
items:
- uid: Outlook_1_3.Office.MessageRead
  summary: >-
    Der Nachrichten Lese Modus von [Office. Context. Mailbox. Item](xref:Outlook_1_3.Office.Item)<!-- -->.


    **Wichtig**: Hierbei handelt es sich um ein internes Outlook-Objekt, das nicht direkt über vorhandene Schnittstellen verfügbar gemacht wird. Sie sollten dies als Modus von Office. Context. Mailbox. Item behandeln. Weitere Informationen finden Sie auf der Seite [Objektmodell](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.3/office.context.mailbox.item) .
  name: Office.MessageRead
  fullName: Office.MessageRead
  langs:
  - typeScript
  type: interface
  extends:
  - Message
  - 'ItemRead '
  package: Outlook_1_3
  children:
  - Outlook_1_3.Office.MessageRead.displayReplyAllForm
  - Outlook_1_3.Office.MessageRead.displayReplyForm
  - Outlook_1_3.Office.MessageRead.getEntities
  - Outlook_1_3.Office.MessageRead.getEntitiesByType
  - Outlook_1_3.Office.MessageRead.getFilteredEntitiesByName
  - Outlook_1_3.Office.MessageRead.getRegExMatches
  - Outlook_1_3.Office.MessageRead.getRegExMatchesByName
  - Outlook_1_3.Office.MessageRead.loadCustomPropertiesAsync
  - Outlook_1_3.Office.MessageRead.attachments
  - Outlook_1_3.Office.MessageRead.body
  - Outlook_1_3.Office.MessageRead.cc
  - Outlook_1_3.Office.MessageRead.conversationId
  - Outlook_1_3.Office.MessageRead.dateTimeCreated
  - Outlook_1_3.Office.MessageRead.dateTimeModified
  - Outlook_1_3.Office.MessageRead.from
  - Outlook_1_3.Office.MessageRead.internetMessageId
  - Outlook_1_3.Office.MessageRead.itemClass
  - Outlook_1_3.Office.MessageRead.itemId
  - Outlook_1_3.Office.MessageRead.itemType
  - Outlook_1_3.Office.MessageRead.normalizedSubject
  - Outlook_1_3.Office.MessageRead.notificationMessages
  - Outlook_1_3.Office.MessageRead.sender
  - Outlook_1_3.Office.MessageRead.subject
  - Outlook_1_3.Office.MessageRead.to
- uid: Outlook_1_3.Office.MessageRead.displayReplyAllForm
  summary: >-
    Zeigt ein Antwortformular an, das den Absender und alle Empfänger der ausgewählten Nachricht oder des Organisators und alle Teilnehmer des ausgewählten Termins enthält.


    In Outlook Web App wird das Antwortformular als Popupformular in der Dreispaltenansicht und als Popupformular in der Zwei- oder Einspaltenansicht angezeigt.


    Wenn einer der Zeichenfolgenparameter seinen Grenzwert überschreitet, löst displayReplyAllForm eine Ausnahme aus.


    Wenn Anlagen im formData.attachments-Parameter angegeben werden, versuchen Outlook und Outlook Web App, alle Anlagen herunterzuladen und sie an das Antwortformular anzuhängen. Wenn Anlagen nicht hinzugefügt werden können, wird in der Formularbenutzeroberfläche ein Fehler angezeigt. Wenn dies nicht möglich ist, wird keine Fehlermeldung ausgegeben.


    **Hinweis**: Diese Methode wird in Outlook für IOS oder Outlook für Android nicht unterstützt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    // The following code passes a string to the `displayReplyAllForm` function.

    Office.context.mailbox.item.displayReplyAllForm('hello there');

    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyAllForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyAllForm(

    {

    'htmlBody' : 'hi'

    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```
  name: displayReplyAllForm(formData, callback)
  fullName: displayReplyAllForm(formData, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'displayReplyAllForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: formData
      description: Eine Zeichenfolge, die Text- und HTML-Code enthält, die den Hauptteil des Antwortformulars darstellen. Die Zeichenfolge ist auf 32 KB oder ein [Office. ReplyFormData](xref:Outlook_1_3.Office.ReplyFormData) -Objekt beschränkt, das Textkörper-oder Anlagendaten und eine Rückruffunktion enthält.
      type:
      - string | ReplyFormData
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzelnen Parameter, asyncResult, aufgerufen, bei dem es sich um ein Office. AsyncResult-Objekt handelt.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_3.Office.MessageRead.displayReplyForm
  summary: >-
    Zeigt ein Antwortformular an, das nur den Absender der ausgewählten Nachricht oder den Organisator des ausgewählten Termins enthält.


    In Outlook Web App wird das Antwortformular als Popupformular in der Dreispaltenansicht und als Popupformular in der Zwei- oder Einspaltenansicht angezeigt.


    Wenn einer der Zeichenfolgenparameter seinen Grenzwert überschreitet, löst displayReplyForm eine Ausnahme aus.


    Wenn Anlagen im formData.attachments-Parameter angegeben werden, versuchen Outlook und Outlook Web App, alle Anlagen herunterzuladen und sie an das Antwortformular anzuhängen. Wenn Anlagen nicht hinzugefügt werden können, wird in der Formularbenutzeroberfläche ein Fehler angezeigt. Wenn dies nicht möglich ist, wird keine Fehlermeldung ausgegeben.


    **Hinweis**: Diese Methode wird in Outlook für IOS oder Outlook für Android nicht unterstützt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    // The following code passes a string to the `displayReplyForm` function.

    Office.context.mailbox.item.displayReplyForm('hello there');

    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi'
    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```
  name: displayReplyForm(formData, callback)
  fullName: displayReplyForm(formData, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'displayReplyForm(formData: string | ReplyFormData, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: formData
      description: Eine Zeichenfolge, die Text- und HTML-Code enthält, die den Hauptteil des Antwortformulars darstellen. Die Zeichenfolge ist auf 32 KB oder ein [Office. ReplyFormData](xref:Outlook_1_3.Office.ReplyFormData) -Objekt beschränkt, das Textkörper-oder Anlagendaten und eine Rückruffunktion enthält.
      type:
      - string | ReplyFormData
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzelnen Parameter, asyncResult, aufgerufen, bei dem es sich um ein Office. AsyncResult-Objekt handelt.
      type:
      - '(asyncResult: Office.AsyncResult<void>) => void'
- uid: Outlook_1_3.Office.MessageRead.getEntities
  summary: >-
    Ruft die Entitäten im Text des ausgewählten Elements ab.


    **Hinweis**: Diese Methode wird in Outlook für IOS oder Outlook für Android nicht unterstützt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    // The following example accesses the contacts entities in the current item's body.


    var contacts = Office.context.mailbox.item.getEntities().contacts;

    ```
  name: getEntities()
  fullName: getEntities()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntities(): Entities;'
    return:
      type:
      - Entities
      description: ''
- uid: Outlook_1_3.Office.MessageRead.getEntitiesByType
  summary: >-
    Ruft ein Array aller Entitäten des angegebenen Typs ab, die im Texts des ausgewählten Elements enthalten sind.


    **Hinweis**: Diese Methode wird in Outlook für IOS oder Outlook für Android nicht unterstützt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Eingeschränkt</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>


    Während Sie die minimale Berechtigungsstufe für diese Methode Restricted ist, erfordern einige Entitätstypen ReadItem für den Zugriff, wie in der folgenden Tabelle angegeben wird.


    <table> <tr> <th>Wert von entityType</th> <th>Typ der Objekte im zurückgegebenen Array</th> <th>Erforderliche Berechtigungsstufe</th> </tr> <tr> <td>Adresse</td> <td>Zeichenfolge</td> <td>Eingeschränkt</td> </tr> <tr> <td>Kontakt</td> <td>Kontakt</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>Zeichenfolge</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Eingeschränkt</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>Zeichenfolge</td> <td>Eingeschränkt</td> </tr> </table>

    #### Beispiele


    ```javascript

    // The following example shows how to access an array of strings that represent postal addresses

    // in the current item's body.


    // The initialize function is required for all apps.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            // Get an array of strings that represent postal addresses in the current item's body.
            var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
            // Continue processing the array of addresses.
        });
    };

    ```
  name: getEntitiesByType(entityType)
  fullName: getEntitiesByType(entityType)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntitiesByType(entityType: MailboxEnums.EntityType): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    return:
      type:
      - (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]
      description: Wenn der in entityType übergebene Wert kein gültiges Element der EntityType-Enumeration ist, gibt die Methode NULL zurück. Wenn keine Entitäten des angegebenen Typs im Text des Elements vorhanden sind, gibt die Methode ein leeres Array zurück. Andernfalls hängt der Typ der Objekte im zurückgegebenen Array vom Typ der Entität ab, die im entityType-Parameter angefordert wird.
    parameters:
    - id: entityType
      description: Einer der Werte der EntityType-Enumeration.
      type:
      - MailboxEnums.EntityType
- uid: Outlook_1_3.Office.MessageRead.getFilteredEntitiesByName
  summary: >-
    Gibt bekannte Entitäten im ausgewählten Element zurück, die den in der XML-Manifestdatei definierten benannten Filter übergeben.


    Die getFilteredEntitiesByName-Methode gibt die Entitäten zurück, die dem im ItemHasKnownEntity-Regelelement der XML-Manifestdatei definierten regulären Ausdruck mit dem angegebenen FilterName-Elementwert entsprechen.


    **Hinweis**: Diese Methode wird in Outlook für IOS oder Outlook für Android nicht unterstützt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>
  name: getFilteredEntitiesByName(name)
  fullName: getFilteredEntitiesByName(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    return:
      type:
      - (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]
      description: Befindet sich kein ItemHasKnownEntity-Element im Manifest mit einem FilterName-Elementwert, der dem name-Parameter entspricht, gibt die Methode null zurück. Wenn der name-Parameter einem ItemHasKnownEntity-Element im Manifest nicht entspricht, es aber keine entsprechenden Entitäten im aktuellen Element gibt, gibt die Methode ein leeres Array zurück.
    parameters:
    - id: name
      description: Der Name des ItemHasKnownEntity-Regelelements, das den entsprechenden Filter definiert.
      type:
      - string
- uid: Outlook_1_3.Office.MessageRead.getRegExMatches
  summary: >-
    Gibt Zeichenfolgenwerte im ausgewählten Element zurück, die den in der XML-Manifestdatei definierten regulären Ausdrücken entsprechen.


    Die getRegExMatches-Methode gibt die Zeichenfolgen zurück, die dem in den einzelnen ItemHasRegularExpressionMatch-Regelelementen oder ItemHasKnownEntity-Regelelementen in der XML-Manifestdatei definierten regulären Ausdruck entsprechen. Bei einer ItemHasRegularExpressionMatch-Regel muss eine entsprechende Zeichenfolge in der Eigenschaft des Elements vorhanden sein, das von dieser Regel angegeben wird. Der einfache PropertyName-Typ definiert die unterstützten Eigenschaften.


    Wenn Sie eine ItemHasRegularExpressionMatch-Regel für die Textkörpereigenschaft eines Elements festlegen, sollte der reguläre Ausdruck den Textkörper weiter filtern und nicht versuchen, den gesamten Textkörper des Elements zurückzugeben. Wenn der gesamte Textkörper eines Elements mit einem regulären Ausdruck wie .* abgerufen wird, werden nicht immer die gewünschten Ergebnisse erzielt. Verwenden Sie stattdessen die Body.getAsync-Methode, um den gesamten Textkörper abzurufen.


    **Hinweis**: Diese Methode wird in Outlook für IOS oder Outlook für Android nicht unterstützt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    var allMatches = Office.context.mailbox.item.getRegExMatches();

    var fruits = allMatches.fruits;

    var veggies = allMatches.veggies;

    ```
  name: getRegExMatches()
  fullName: getRegExMatches()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRegExMatches(): any;'
    return:
      type:
      - any
      description: Ein Objekt mit Arrays aus Zeichenfolgen, die den in der XML-Manifestdatei definierten regulären Ausdrücken entsprechen. Der Name der einzelnen Arrays ist gleich dem entsprechenden Wert des RegExName-Attributs der entsprechenden ItemHasRegularExpressionMatch-Regel oder des FilterName-Attributs der entsprechenden ItemHasKnownEntity-Regel.
- uid: Outlook_1_3.Office.MessageRead.getRegExMatchesByName
  summary: >-
    Gibt Zeichenfolgenwerte im ausgewählten Element zurück, die dem in der XML-Manifestdatei definierten benannten regulären Ausdruck entsprechen.


    Die getRegExMatchesByName-Methode gibt die Zeichenfolgen zurück, die dem im ItemHasRegularExpressionMatch-Regelelement der XML-Manifestdatei definierten regulären Ausdruck mit dem angegebenen RegExName-Elementwert entsprechen.


    Wenn Sie eine ItemHasRegularExpressionMatch-Regel für die Textkörpereigenschaft eines Elements festlegen, sollte der reguläre Ausdruck den Textkörper weiter filtern und nicht versuchen, den gesamten Textkörper des Elements zurückzugeben. Wenn der gesamte Textkörper eines Elements mit einem regulären Ausdruck wie .* abgerufen wird, werden nicht immer die gewünschten Ergebnisse erzielt.


    **Hinweis**: Diese Methode wird in Outlook für IOS oder Outlook für Android nicht unterstützt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

    ```
  name: getRegExMatchesByName(name)
  fullName: getRegExMatchesByName(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRegExMatchesByName(name: string): string[];'
    return:
      type:
      - string[]
      description: Ein Array mit den Zeichenfolgen, die dem in der XML-Manifestdatei definierten regulären Ausdruck entsprechen.
    parameters:
    - id: name
      description: Der Name des ItemHasRegularExpressionMatch-Regelelements, das den entsprechenden Filter definiert.
      type:
      - string
- uid: Outlook_1_3.Office.MessageRead.loadCustomPropertiesAsync
  summary: >-
    Lädt asynchron benutzerdefinierte Eigenschaften für dieses Add-In für das ausgewählte Element.


    Benutzerdefinierte Eigenschaften werden als Schlüssel-/Wert-Paare pro App und pro Element gespeichert. Diese Methode gibt ein CustomProperties-Objekt im Callback zurück, das Methoden für den Zugriff auf die benutzerdefinierten Eigenschaften für das aktuelle Element und das aktuelle Add-In bietet. Benutzerdefinierte Eigenschaften sind für das Element nicht verschlüsselt und sollten darum nicht als sicherer Speicher verwendet werden.


    Die benutzerdefinierten Eigenschaften werden als CustomProperties-Objekt in der asyncResult.value-Eigenschaft bereitgestellt. Dieses Objekt kann verwendet werden, um benutzerdefinierte Eigenschaften aus dem Element abzurufen, festzulegen und zu entfernen und um Änderungen am benutzerdefinierten Eigenschaftssatz wieder auf dem Server zu speichern.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>
  name: loadCustomPropertiesAsync(callback, userContext)
  fullName: loadCustomPropertiesAsync(callback, userContext)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die Funktion, die im callback-Parameter übergeben wird, mit einem einzelnen Parameter vom Typ Office. AsyncResult aufgerufen.
      type:
      - '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    - id: userContext
      description: Optional. Entwickler können ein beliebiges Objekt bereitstellen, auf das sie in der Callbackfunktion zugreifen möchten. Auf dieses Objekt kann über die asyncResult. AsyncContext-Eigenschaft in der Rückruffunktion zugegriffen werden.
      type:
      - any
- uid: Outlook_1_3.Office.MessageRead.attachments
  summary: >-
    Ruft die Anlagen des Elements in Form eines Arrays ab.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>


    **Hinweis**: bestimmte Dateitypen werden aufgrund potenzieller Sicherheitsprobleme von Outlook blockiert und daher nicht zurückgegeben. Weitere Informationen finden Sie unter [Blockierte Anlagen in Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code builds an HTML string with details of all attachments on the current item.

    var item = Office.context.mailbox.item;

    var outputString = "";


    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);

    ```
  name: attachments
  fullName: attachments
  langs:
  - typeScript
  type: property
  syntax:
    content: 'attachments: AttachmentDetails[];'
    return:
      type:
      - AttachmentDetails[]
- uid: Outlook_1_3.Office.MessageRead.body
  summary: >-
    Ruft ein Objekt ab, das Methoden zum Bearbeiten des Textkörpers eines Elements bereitstellt.


    \[[API-Satz: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    // This example gets the body of the message in plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  name: body
  fullName: body
  langs:
  - typeScript
  type: property
  syntax:
    content: 'body: Body;'
    return:
      type:
      - Body
- uid: Outlook_1_3.Office.MessageRead.cc
  summary: >-
    Bietet Zugriff auf die Kopienempfänger (Cc) einer Nachricht. Der Typ des Objekts und die Zugriffsebene hängen vom Modus des aktuellen Elements ab.


    Die cc-Eigenschaft gibt ein Array mit einem EmailAddressDetails-Objekt für jeden Empfänger in der Cc-Zeile der Nachricht zurück. Die Auflistung ist auf höchstens 100 Elemente beschränkt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    console.log(JSON.stringify(Office.context.mailbox.item.cc));

    ```
  name: cc
  fullName: cc
  langs:
  - typeScript
  type: property
  syntax:
    content: 'cc: EmailAddressDetails[];'
    return:
      type:
      - EmailAddressDetails[]
- uid: Outlook_1_3.Office.MessageRead.conversationId
  summary: >-
    Ruft einen Bezeichner für die E-Mail-Unterhaltung ab, in der eine bestimmte Nachricht enthalten ist.


    Sie können für diese Eigenschaft eine ganze Zahl abrufen, wenn Ihre Mail-App in Formularen zum Lesen oder Antworten in Formularen zum Verfassen aktiviert wird. Wenn der Benutzer den Betreff der Antwortnachricht ändert, ändert sich beim Versenden die Konversations-ID für die entsprechende Nachricht, und der Wert, den Sie vorher bezogen haben, trifft nicht länger zu.


    Sie erhalten in einem Formular zum Verfassen für diese Eigenschaft für ein neues Element null. Wenn der Benutzer einen Betreff festlegt und das Element speichert, gibt die conversationId-Eigenschaft einen Wert zurück.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    var conversationId = Office.context.mailbox.item.conversationId;

    console.log("conversationId: " + conversationId);

    ```
  name: conversationId
  fullName: conversationId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'conversationId: string;'
    return:
      type:
      - string
- uid: Outlook_1_3.Office.MessageRead.dateTimeCreated
  summary: >-
    Ruft das Datum und die Uhrzeit der Erstellung eines Elements ab.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;

    console.log("Date and time created: " + dateTimeCreated);

    ```
  name: dateTimeCreated
  fullName: dateTimeCreated
  langs:
  - typeScript
  type: property
  syntax:
    content: 'dateTimeCreated: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_3.Office.MessageRead.dateTimeModified
  summary: >-
    Ruft das Datum und die Uhrzeit der letzten Änderung eines Elements ab.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>


    **Hinweis**: dieses Element wird in Outlook für IOS oder Outlook für Android nicht unterstützt.

    #### <a name="examples"></a>Beispiele


    ```javascript

    var dateTimeModified = Office.context.mailbox.item.dateTimeModified;

    console.log("Date and time modified: " + dateTimeModified);

    ```
  name: dateTimeModified
  fullName: dateTimeModified
  langs:
  - typeScript
  type: property
  syntax:
    content: 'dateTimeModified: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_3.Office.MessageRead.from
  summary: >-
    Ruft die E-Mail-Adresse des Absenders einer Nachricht ab.


    Die Eigenschaften from und sender geben ein EmailAddressDetails-Objekt zurück, das dieselbe Person darstellt, außer die Nachricht wurde von einem Delegaten gesendet. In diesem Fall stellt die from-Eigenschaft die Stellvertretung dar, und die „sender“-Eigenschaft stellt den Delegaten dar.


    **Hinweis**: die RecipientType-Eigenschaft des EmailAddressDetails-Objekts in der From-Eigenschaft ist nicht definiert.


    Die From-Eigenschaft gibt ein EmailAddressDetails-Objekt zurück.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    var from = Office.context.mailbox.item.from;

    console.log("From " + from);

    ```
  name: from
  fullName: from
  langs:
  - typeScript
  type: property
  syntax:
    content: 'from: EmailAddressDetails;'
    return:
      type:
      - EmailAddressDetails
- uid: Outlook_1_3.Office.MessageRead.internetMessageId
  summary: >-
    Ruft die Internetnachricht-ID einer E-Mail-Nachricht ab.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    var internetMessageId = Office.context.mailbox.item.internetMessageId;

    console.log("internetMessageId: " + internetMessageId);

    ```
  name: internetMessageId
  fullName: internetMessageId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'internetMessageId: string;'
    return:
      type:
      - string
- uid: Outlook_1_3.Office.MessageRead.itemClass
  summary: >-
    Ruft die Exchange-Webdienste-Elementklasse des ausgewählten Elements ab.


    Sie können benutzerdefinierte Nachrichtenklassen zum Erweitern einer Standardnachrichtenklasse erstellen, z. B. eine benutzerdefinierte Terminnachrichtenklasse wie "IPM.Appointment.Contoso".


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>


    Die itemClass-Eigenschaft gibt die Nachrichtenklasse des ausgewählten Elements an. Folgende Standardnachrichtenklassen für das Nachrichten- oder Terminelement sind vorhanden:


    <table> <tr> <th>Typ</th> <th>Beschreibung</th> <th>Elementklasse</th> </tr> <tr> <td>Terminelemente</td> <td>Dies sind Kalenderelemente der Elementklasse IPM. Termin oder IPM. Termin. vorkommen.</td> <td>IPM. Termin, IPM. Termin. vorkommen</td> </tr> <tr> <td>Nachrichtenelemente</td> <td>Diese Elemente umfassen E-Mail-Nachrichten der Standardnachrichtenklasse "IPM.Note" sowie Besprechungsanfragen, -antworten und -absagen, die "IPM.Schedule.Meeting" als Basisnachrichtenklasse verwenden.</td> <td>IPM. Hinweis, IPM. Schedule. Meeting. Request, IPM. Schedule. Meeting. Reverse, IPM. Schedule. Meeting. POS, IPM. Schedule. Meeting. Tent, IPM. Schedule. Meeting. Canceled</td> </tr> </table>

    #### Beispiele


    ```javascript

    var itemClass = Office.context.mailbox.item.itemClass;

    console.log("Item class: " + itemClass);

    ```
  name: itemClass
  fullName: itemClass
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemClass: string;'
    return:
      type:
      - string
- uid: Outlook_1_3.Office.MessageRead.itemId
  summary: >-
    Ruft den Exchange-Webdienste-Elementbezeichner für das aktuelle Element ab.


    Die itemId-Eigenschaft ist im Verfassenmodus nicht verfügbar. Wenn ein Elementbezeichner erforderlich ist, kann die saveAsync-Methode zum Speichern des Elements im Speicher verwendet werden, wodurch der Elementbezeichner im asyncResult. value-Parameter in der Rückruffunktion zurückgegeben wird.


    **Hinweis**: der von der ItemId-Eigenschaft zurückgegebene Bezeichner ist derselbe wie der Exchange-Webdienste-Elementbezeichner. Die itemId-Eigenschaft ist nicht identisch mit der Outlook-Eintrags-ID oder der ID, die von der Outlook-REST-API verwendet wird. Bevor Sie REST-API-Aufrufe mit diesem Wert ausführen, sollte dieser mithilfe von Office.context.mailbox.convertToRestId konvertiert werden. Weitere Informationen finden Sie unter [Verwenden der Outlook-Rest-APIs aus einem Outlook-Add-in](https://docs.microsoft.com/outlook/add-ins/use-rest-api#get-the-item-id)<!-- -->.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    // The following code checks for the presence of an item

    // identifier. If the `itemId` property returns `null` or

    // `undefined`, it saves the item to the store and gets the

    // item identifier from the asynchronous result.

    var itemId = Office.context.mailbox.item.itemId;

    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }

    ```
  name: itemId
  fullName: itemId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemId: string;'
    return:
      type:
      - string
- uid: Outlook_1_3.Office.MessageRead.itemType
  summary: >-
    Ruft den Typ des Elements ab, das eine Instanz darstellt.


    Die itemType-Eigenschaft gibt einen der Werte der ItemType-Enumeration zurück, der angibt, ob es sich bei der item-Objektinstanz um eine Nachricht oder einen Termin handelt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Message) {
        // Do something.
    } else {
        // Do something else.
    }

    ```
  name: itemType
  fullName: itemType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemType: MailboxEnums.ItemType;'
    return:
      type:
      - MailboxEnums.ItemType
- uid: Outlook_1_3.Office.MessageRead.normalizedSubject
  summary: >-
    Ruft den Betreff eines Elements ab, wobei alle Präfixe entfernt wurden (einschließlich RE: und FWD:).


    Die normalizedSubject-Eigenschaft ruft den Betreff des Elements mit allen Standardpräfixen (z. B. RE: und FW:) ab, die von E-Mail-Programmen hinzugefügt werden. Wenn der Betreff des Elements mit vollständigen Präfixen abgerufen werden soll, verwenden Sie die subject-Eigenschaft.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    var normalizedSubject = Office.context.mailbox.item.normalizedSubject;

    console.log("Normalized subject: " + normalizedSubject);

    ```
  name: normalizedSubject
  fullName: normalizedSubject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'normalizedSubject: string;'
    return:
      type:
      - string
- uid: Outlook_1_3.Office.MessageRead.notificationMessages
  summary: >-
    Ruft die Benachrichtigungen für ein Element ab.


    \[[API-Satz: Mailbox 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    // Get all notifications.

    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );

    ```
  name: notificationMessages
  fullName: notificationMessages
  langs:
  - typeScript
  type: property
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type:
      - NotificationMessages
- uid: Outlook_1_3.Office.MessageRead.sender
  summary: >-
    Ruft die E-Mail-Adresse für den Absender einer E-Mail-Nachricht ab.


    Die Eigenschaften from und sender geben ein EmailAddressDetails-Objekt zurück, das dieselbe Person darstellt, außer die Nachricht wurde von einem Delegaten gesendet. In diesem Fall stellt die from-Eigenschaft die Stellvertretung dar, und die „sender“-Eigenschaft stellt den Delegaten dar.


    **Hinweis**: die RecipientType-Eigenschaft des EmailAddressDetails-Objekts in der Sender-Eigenschaft ist nicht definiert.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    var senderName = Office.context.mailbox.item.sender.displayName;

    var senderAddress = Office.context.mailbox.item.sender.emailAddress;

    console.log("Sender: " + senderName + " (" + senderAddress + ")");

    ```
  name: sender
  fullName: sender
  langs:
  - typeScript
  type: property
  syntax:
    content: 'sender: EmailAddressDetails;'
    return:
      type:
      - EmailAddressDetails
- uid: Outlook_1_3.Office.MessageRead.subject
  summary: >-
    Ruft die Beschreibung ab, die im Feld Betreff eines Elements angezeigt wird.


    Die subject-Eigenschaft ruft den gesamten Betreff des Elements ab oder legt ihn fest – so, wie er vom E-Mail-Server gesendet wird.


    Die subject-Eigenschaft gibt eine Zeichenfolge zurück. Verwenden Sie die ormalizedSubject-Eigenschaft, um den Betreff ohne führende Präfixe wie RE: und FW: abzurufen.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    // The following JavaScript code example shows how to access the

    // `subject` property of the current item in Outlook.


    // The initialize function is required for all apps.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            var subject = item.subject;
            // Continue with processing the subject of the current item,
            // which can be a message or appointment.
        });
    };

    ```
  name: subject
  fullName: subject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'subject: string;'
    return:
      type:
      - string
- uid: Outlook_1_3.Office.MessageRead.to
  summary: >-
    Bietet Zugriff auf die Empfänger in der Zeile An einer Nachricht. Der Typ des Objekts und die Zugriffsebene hängen vom Modus des aktuellen Elements ab.


    Die to-Eigenschaft gibt ein Array mit einem EmailAddressDetails-Objekt für jeden Empfänger in der An-Zeile der Nachricht zurück. Die Auflistung ist auf höchstens 100 Elemente beschränkt.


    \[[API-Satz: Mailbox 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Nachricht lesen</td></tr> </table>

    ####Beispiele


    ```javascript

    console.log(JSON.stringify(Office.context.mailbox.item.to));

    ```
  name: to
  fullName: to
  langs:
  - typeScript
  type: property
  syntax:
    content: 'to: EmailAddressDetails[];'
    return:
      type:
      - EmailAddressDetails[]
