### YamlMime:TSType
name: Office.Time
uid: outlook!Office.Time:interface
package: outlook!
fullName: Office.Time
summary: >-
  Das Objekt wird als Start- oder Endeigenschaft `Time` eines Termins im Verfassenmodus zurückgegeben.


  \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
remarks: >-
  **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


  **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen
isPreview: false
isDeprecated: false
type: interface
methods:
- name: getAsync(options, callback)
  uid: outlook!Office.Time#getAsync:member(1)
  package: outlook!
  fullName: getAsync(options, callback)
  summary: >-
    Ruft die Start- oder Endzeit eines Termins ab.


    Datum und Uhrzeit werden als Objekt `Date` in der Eigenschaft `asyncResult.value` bereitgestellt. Der Wert wird in UTC (Coordinated Universal Time) angegeben. Sie können die UTC-Zeit mithilfe der Methode in die lokale Clientzeit `convertToLocalClientTime` konvertieren.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
    parameters:
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein `Date` Objekt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;Date&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAsync(callback)
  uid: outlook!Office.Time#getAsync:member(2)
  package: outlook!
  fullName: getAsync(callback)
  summary: >-
    Ruft die Start- oder Endzeit eines Termins ab.


    Datum und Uhrzeit werden als Objekt `Date` in der Eigenschaft `asyncResult.value` bereitgestellt. Der Wert wird in UTC (Coordinated Universal Time) angegeben. Sie können die UTC-Zeit mithilfe der Methode in die lokale Clientzeit `convertToLocalClientTime` konvertieren.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
    parameters:
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Rückrufparameter übergebene Funktion mit einem einzelnen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein `Date` Objekt.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;Date&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setAsync(dateTime, options, callback)
  uid: outlook!Office.Time#setAsync:member(1)
  package: outlook!
  fullName: setAsync(dateTime, options, callback)
  summary: >-
    Legt die Start- oder Endzeit eines Termins fest.


    Wenn die Methode für die start-Eigenschaft aufgerufen wird, wird die Eigenschaft angepasst, um die Dauer des Termins wie `setAsync` `end` zuvor festgelegt zu erhalten. Wenn die `setAsync`-Methode für die `end`-Eigenschaft aufgerufen wird, wird die Dauer des Termins bis zur neuen Endzeit verlängert.


    Die Uhrzeit muss UTC-Format aufweisen; Sie können mithilfe der `convertToUtcClientTime`-Methode die korrekte UTC-Uhrzeit abrufen.


    **Wichtig:** Im Windows-Client können Sie diese Funktion nicht verwenden, um den Anfang oder das Ende einer Serie zu aktualisieren.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `InvalidEndTime`<!-- -->: Die Terminendzeit liegt vor der Terminanfangszeit.


    #### <a name="examples"></a>Beispiele


    ```javascript

    var startTime = new Date("3/14/2015");

    var options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };

    Office.context.mailbox.item.start.setAsync(startTime, options, function(result) {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync function.
            console.debug("Start Time " + result.asyncContext.verb);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    var start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      var end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAsync(dateTime: Date, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: dateTime
      description: Ein Datum/Uhrzeitobjekt in koordinierter Weltzeit (UTC).
      type: Date
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Wenn das Festlegen von Datum und Uhrzeit fehlschlägt, enthält die `asyncResult.error`-Eigenschaft einen Fehlercode.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setAsync(dateTime, callback)
  uid: outlook!Office.Time#setAsync:member(2)
  package: outlook!
  fullName: setAsync(dateTime, callback)
  summary: >-
    Legt die Start- oder Endzeit eines Termins fest.


    Wenn die Methode für die start-Eigenschaft aufgerufen wird, wird die Eigenschaft angepasst, um die Dauer des Termins wie `setAsync` `end` zuvor festgelegt zu erhalten. Wenn die `setAsync`-Methode für die `end`-Eigenschaft aufgerufen wird, wird die Dauer des Termins bis zur neuen Endzeit verlängert.


    Die Uhrzeit muss UTC-Format aufweisen; Sie können mithilfe der `convertToUtcClientTime`-Methode die korrekte UTC-Uhrzeit abrufen.


    **Wichtig:** Im Windows-Client können Sie diese Funktion nicht verwenden, um den Anfang oder das Ende einer Serie zu aktualisieren.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Anwendbarer Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Verfassen


    **Fehler**:


    - `InvalidEndTime`<!-- -->: Die Terminendzeit liegt vor der Terminanfangszeit.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAsync(dateTime: Date, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: dateTime
      description: Ein Datum/Uhrzeitobjekt in koordinierter Weltzeit (UTC).
      type: Date
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Wenn das Festlegen von Datum und Uhrzeit fehlschlägt, enthält die `asyncResult.error`-Eigenschaft einen Fehlercode.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 5e283e8dabe220dacaeebb63e68fe9ecc627f27a
  ms.sourcegitcommit: d0f7e3d564e90cdff464157440c36ad19fa526f0
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 04/09/2021
  ms.locfileid: "51659297"
