### YamlMime:TSType
name: Office.NotificationMessages
uid: outlook!Office.NotificationMessages:interface
package: outlook!
fullName: Office.NotificationMessages
summary: >-
  Das `NotificationMessages`-Objekt wird als `notificationMessages`-Eigenschaft eines Elements zurückgegeben.


  \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
remarks: >-
  **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


  **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
isPreview: false
isDeprecated: false
type: interface
methods:
- name: addAsync(key, JSONmessage, options, callback)
  uid: outlook!Office.NotificationMessages#addAsync:member(1)
  package: outlook!
  fullName: addAsync(key, JSONmessage, options, callback)
  summary: >-
    Fügt eine Benachrichtigung zu einem Element hinzu.


    Es werden maximal 5 Benachrichtigungen pro Nachricht. Eine höhere Einstellung gibt einen `NumberOfNotificationMessagesExceeded`-Fehler zurück.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "progressIndicator",
        message: "Progress indicator with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Non-persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: false
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "informationalMessage",
        message: "Persistent informational notification message with id = " + id,
        icon: "icon1",
        persistent: true
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    var details =
      {
        type: "errorMessage",
        message: "Error notification message with id = " + id
      };
    Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addAsync(key: string, JSONmessage: NotificationMessageDetails, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: key
      description: Ein vom Entwickler spezifizierter Schlüssel für einen Verweis auf diese Benachrichtigung. Entwickler können diese Zeichenfolge verwenden, um später die Nachricht zu ändern. Sie darf nicht länger als 32 Zeichen sein.
      type: string
    - id: JSONmessage
      description: Ein JSON-Objekt, das enthält die Benachrichtigung enthält, die dem Element hinzugefügt werden soll. Es enthält ein `NotificationMessageDetails` Objekt.
      type: <xref uid="outlook!Office.NotificationMessageDetails:interface" />
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addAsync(key, JSONmessage, callback)
  uid: outlook!Office.NotificationMessages#addAsync:member(2)
  package: outlook!
  fullName: addAsync(key, JSONmessage, callback)
  summary: >-
    Fügt eine Benachrichtigung zu einem Element hinzu.


    Es werden maximal 5 Benachrichtigungen pro Nachricht. Eine höhere Einstellung gibt einen `NumberOfNotificationMessagesExceeded`-Fehler zurück.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addAsync(key: string, JSONmessage: NotificationMessageDetails, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: key
      description: Ein vom Entwickler spezifizierter Schlüssel für einen Verweis auf diese Benachrichtigung. Entwickler können diese Zeichenfolge verwenden, um später die Nachricht zu ändern. Sie darf nicht länger als 32 Zeichen sein.
      type: string
    - id: JSONmessage
      description: Ein JSON-Objekt, das enthält die Benachrichtigung enthält, die dem Element hinzugefügt werden soll. Es enthält ein `NotificationMessageDetails` Objekt.
      type: <xref uid="outlook!Office.NotificationMessageDetails:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAllAsync(options, callback)
  uid: outlook!Office.NotificationMessages#getAllAsync:member(1)
  package: outlook!
  fullName: getAllAsync(options, callback)
  summary: >-
    Gibt alle Schlüssel und Nachrichten für ein Element zurück.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`\n\n**[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Get all notifications.\nOffice.context.mailbox.item.notificationMessages.getAllAsync(function (asyncResult) {\n    if (asyncResult.status != \"failed\") {\n        Office.context.mailbox.item.notificationMessages.replaceAsync( \"notifications\", {\n            type: \"informationalMessage\",\n            message : \"Found \" + asyncResult.value.length + \" notifications.\",\n            icon : \"iconid\",\n            persistent: false\n        });\n    }\n});\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nOffice.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          \n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAllAsync(options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<NotificationMessageDetails[]>) => void): void;'
    parameters:
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein Array von `NotificationMessageDetails` Objekten.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.NotificationMessageDetails:interface" />[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAllAsync(callback)
  uid: outlook!Office.NotificationMessages#getAllAsync:member(2)
  package: outlook!
  fullName: getAllAsync(callback)
  summary: >-
    Gibt alle Schlüssel und Nachrichten für ein Element zurück.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAllAsync(callback?: (asyncResult: Office.AsyncResult<NotificationMessageDetails[]>) => void): void;'
    parameters:
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein Array von `NotificationMessageDetails` Objekten.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.NotificationMessageDetails:interface" />[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeAsync(key, options, callback)
  uid: outlook!Office.NotificationMessages#removeAsync:member(1)
  package: outlook!
  fullName: removeAsync(key, options, callback)
  summary: >-
    Entfernt eine Benachrichtigung für ein Element.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeAsync(key: string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: key
      description: Der für die Benachrichtigung zu entfernende Schlüssel.
      type: string
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeAsync(key, callback)
  uid: outlook!Office.NotificationMessages#removeAsync:member(2)
  package: outlook!
  fullName: removeAsync(key, callback)
  summary: >-
    Entfernt eine Benachrichtigung für ein Element.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeAsync(key: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: key
      description: Der für die Benachrichtigung zu entfernende Schlüssel.
      type: string
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: replaceAsync(key, JSONmessage, options, callback)
  uid: outlook!Office.NotificationMessages#replaceAsync:member(1)
  package: outlook!
  fullName: replaceAsync(key, JSONmessage, options, callback)
  summary: >-
    Ersetzt eine Benachrichtigung, die über einen bestimmten Schlüssel mit einer anderen Nachricht verfügt.


    Wenn keine Benachrichtigung mit dem angegebenen Schlüssel vorhanden ist, fügt `replaceAsync` die Benachrichtigung hinzu.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Replace a notification with an informational notification.

    Office.context.mailbox.item.notificationMessages.replaceAsync("progress", {
        type: "informationalMessage",
        message : "The message was processed successfully.",
        icon : "iconid",
        persistent: false
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml

    var id = $("#notificationId").val();

    Office.context.mailbox.item.notificationMessages.replaceAsync(
      id,
      {
        type: "informationalMessage",
        message: "Notification message with id = " + id + " has been replaced with an informational message.",
        icon: "icon2",
        persistent: false
      },
      handleResult);
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'replaceAsync(key: string, JSONmessage: NotificationMessageDetails, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: key
      description: Der für die Benachrichtigung zu ersetzende Schlüssel. Er darf höchstens 32 Zeichen lang sein.
      type: string
    - id: JSONmessage
      description: Ein JSON-Objekt, das die neue Benachrichtigung zum Ersetzen der vorhandenen Benachrichtigung enthält. Es enthält ein `NotificationMessageDetails` Objekt.
      type: <xref uid="outlook!Office.NotificationMessageDetails:interface" />
    - id: options
      description: 'Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. `asyncContext`<!-- -->: Entwickler können jedes Objekt bereitstellen, auf das sie in der Rückrufmethode zugreifen möchten.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: replaceAsync(key, JSONmessage, callback)
  uid: outlook!Office.NotificationMessages#replaceAsync:member(2)
  package: outlook!
  fullName: replaceAsync(key, JSONmessage, callback)
  summary: >-
    Ersetzt eine Benachrichtigung, die über einen bestimmten Schlüssel mit einer anderen Nachricht verfügt.


    Wenn keine Benachrichtigung mit dem angegebenen Schlüssel vorhanden ist, fügt `replaceAsync` die Benachrichtigung hinzu.


    \[[API-Satz: Postfach 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'replaceAsync(key: string, JSONmessage: NotificationMessageDetails, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: key
      description: Der für die Benachrichtigung zu ersetzende Schlüssel. Er darf höchstens 32 Zeichen lang sein.
      type: string
    - id: JSONmessage
      description: Ein JSON-Objekt, das die neue Benachrichtigung zum Ersetzen der vorhandenen Benachrichtigung enthält. Es enthält ein `NotificationMessageDetails` Objekt.
      type: <xref uid="outlook!Office.NotificationMessageDetails:interface" />
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: c12c163cae44e1c1b569bbfa1b7834ac4a3684d4
  ms.sourcegitcommit: d0f7e3d564e90cdff464157440c36ad19fa526f0
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 04/09/2021
  ms.locfileid: "51658531"
