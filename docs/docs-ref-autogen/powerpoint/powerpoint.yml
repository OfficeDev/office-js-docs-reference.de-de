### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
interfaces:
- powerpoint!PowerPoint.AddSlideOptions:interface
- powerpoint!PowerPoint.InsertSlideOptions:interface
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.ShapeCollectionData:interface
- powerpoint!PowerPoint.Interfaces.ShapeCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.ShapeCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.ShapeData:interface
- powerpoint!PowerPoint.Interfaces.ShapeLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideData:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutData:interface
- powerpoint!PowerPoint.Interfaces.SlideLayoutLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterData:interface
- powerpoint!PowerPoint.Interfaces.SlideMasterLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.TagCollectionData:interface
- powerpoint!PowerPoint.Interfaces.TagCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.TagCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.TagData:interface
- powerpoint!PowerPoint.Interfaces.TagLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.TagUpdateData:interface
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
- powerpoint!PowerPoint.Shape:class
- powerpoint!PowerPoint.ShapeCollection:class
- powerpoint!PowerPoint.Slide:class
- powerpoint!PowerPoint.SlideCollection:class
- powerpoint!PowerPoint.SlideLayout:class
- powerpoint!PowerPoint.SlideLayoutCollection:class
- powerpoint!PowerPoint.SlideMaster:class
- powerpoint!PowerPoint.SlideMasterCollection:class
- powerpoint!PowerPoint.Tag:class
- powerpoint!PowerPoint.TagCollection:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
- powerpoint!PowerPoint.InsertSlideFormatting:enum
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    Erstellt und öffnet eine neue Präsentation. Optional kann die Präsentation mit einer base64-codierten .pptx-Datei vorgefüllt werden.


    \[[API-Satz: PowerPointApi 1.1](/office/dev/add-ins/reference/requirement-sets/powerpoint-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: Optional. Die base64-codierte .pptx-Datei. Der Standardwert ist null.
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: Führt ein Batchskript aus, das Aktionen für das PowerPoint-Objektmodell mit einem neuen RequestContext ausführt. Wenn die Zusage aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: batch
      description: Eine Funktion, die einen RequestContext einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Der Parameter context erleichtert Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-In und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist requestContext erforderlich, um zugriff auf das PowerPoint-Objektmodell aus dem Add-In zu erhalten.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: Führt ein Batchskript aus, das Aktionen für das PowerPoint-Objektmodell mit dem RequestContext eines zuvor erstellten API-Objekts ausführt. Wenn die Zusage aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: object
      description: Ein zuvor erstelltes API-Objekt. Der Batch verwendet denselben RequestContext wie das übergebene Objekt, was bedeutet, dass alle auf das Objekt angewendeten Änderungen von "context.sync()" übernommen werden.
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Eine Funktion, die einen RequestContext einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Der Parameter context erleichtert Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-In und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist requestContext erforderlich, um zugriff auf das PowerPoint-Objektmodell aus dem Add-In zu erhalten.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: Führt ein Batchskript aus, das Aktionen für das PowerPoint-Objektmodell mit dem RequestContext von zuvor erstellten API-Objekten ausführt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: objects
      description: Ein Array von zuvor erstellten API-Objekten. Das Array wird überprüft, um sicherzustellen, dass alle Objekte denselben Kontext haben. Der Batch verwendet diesen freigegebenen RequestContext, was bedeutet, dass alle änderungen, die auf diese Objekte angewendet werden, von "context.sync()" übernommen werden.
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Eine Funktion, die einen RequestContext einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Der Parameter context erleichtert Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-In und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist requestContext erforderlich, um zugriff auf das PowerPoint-Objektmodell aus dem Add-In zu erhalten.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: cf6addd9d6a30ac10746ef3da8213532905cc74a
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51291232"
