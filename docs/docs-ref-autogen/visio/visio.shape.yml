### YamlMime:UniversalReference
items:
  - uid: visio.Visio.Shape
    summary: |-
      Stellt die Shape-Klasse dar.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: Visio.Shape
    fullName: Visio.Shape
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: visio
    children:
      - visio.Visio.Shape.comments
      - visio.Visio.Shape.context
      - visio.Visio.Shape.getBounds
      - visio.Visio.Shape.hyperlinks
      - visio.Visio.Shape.id
      - visio.Visio.Shape.load
      - visio.Visio.Shape.load_1
      - visio.Visio.Shape.load_2
      - visio.Visio.Shape.name
      - visio.Visio.Shape.select
      - visio.Visio.Shape.set
      - visio.Visio.Shape.set_1
      - visio.Visio.Shape.shapeDataItems
      - visio.Visio.Shape.subShapes
      - visio.Visio.Shape.text
      - visio.Visio.Shape.toJSON
      - visio.Visio.Shape.view
  - uid: visio.Visio.Shape.comments
    summary: |-
      Gibt die Kommentarauflistung zurück. Schreibgeschützt.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: Visio.CommentCollection;'
      return:
        type:
          - Visio.CommentCollection
  - uid: visio.Visio.Shape.context
    summary: 'Der Anforderungskontext, der mit dem Objekt verknüpft ist. Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: visio.Visio.Shape.getBounds
    summary: |-
      Gibt das BoundingBox-Objekt zurück, das das umgebende Feld des Shapes angibt.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: getBounds()
    fullName: getBounds()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBounds(): OfficeExtension.ClientResult<Visio.BoundingBox>;'
      return:
        type:
          - OfficeExtension.ClientResult<Visio.BoundingBox>
        description: ''
  - uid: visio.Visio.Shape.hyperlinks
    summary: |-
      Gibt die Hyperlinks-Auflistung für ein Shape-Objekt zurück. Schreibgeschützt.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: hyperlinks
    fullName: hyperlinks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hyperlinks: Visio.HyperlinkCollection;'
      return:
        type:
          - visio.Visio.HyperlinkCollection
  - uid: visio.Visio.Shape.id
    summary: |-
      Bezeichner des Shapes. Schreibgeschützt.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: number;'
      return:
        type:
          - number
  - uid: visio.Visio.Shape.load
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.
    remarks: |-
      Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:

      `load(option?: string | string[]): Visio.Shape`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.

      `load(option?: { select?: string; expand?: string; }): Visio.Shape`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Visio.Shape`Nur verfügbar für Sammlungstypen. Sie ähnelt der vorherigen Signatur. Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können. Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind. Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Visio.Interfaces.ShapeLoadOptions): Visio.Shape;'
      return:
        type:
          - Visio.Shape
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Visio.Interfaces.ShapeLoadOptions
  - uid: visio.Visio.Shape.load_1
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Visio.Shape;'
      return:
        type:
          - Visio.Shape
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Visio.run(session, function (ctx) {
              var activePage = ctx.document.getActivePage();
              var shapeName = "Sample Name";
              var shape = activePage.shapes.getItem(shapeName);
              shape.load(["name", "id", "text", "select"]);
              return ctx.sync().then(function () {
                  console.log(shape.name);
                  console.log(shape.id);
                  console.log(shape.text);
                  console.log(shape.select);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Visio.run(session, function (ctx) {
              var activePage = ctx.document.getActivePage();
              var shape = activePage.shapes.getItem(0);
              shape.view.highlight = { color: "#E7E7E7", width: 100 };
              return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: visio.Visio.Shape.load_2
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Visio.Shape;'
      return:
        type:
          - Visio.Shape
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: 'Dabei ist propertyNamesAndPaths. Select eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: visio.Visio.Shape.name
    summary: |-
      Der Name des Shapes. Schreibgeschützt.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: visio.Visio.Shape.select
    summary: |-
      Gibt „True“ zurück, wenn das Shape ausgewählt ist. Der Benutzer kann „true“ festlegen, um das Shape explizit auszuwählen.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: select
    fullName: select
    langs:
      - typeScript
    type: property
    syntax:
      content: 'select: boolean;'
      return:
        type:
          - boolean
  - uid: visio.Visio.Shape.set
    summary: Legt mehrere Eigenschaften eines Objekts gleichzeitig fest. Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.
    remarks: |-
      Diese Methode hat die folgende zusätzliche Signatur:

      `set(properties: Visio.Shape): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ShapeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: 'Ein JavaScript-Objekt mit Eigenschaften, die isomorphically für die Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.'
          type:
            - Interfaces.ShapeUpdateData
        - id: options
          description: 'Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.'
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: visio.Visio.Shape.set_1
    summary: Legt mehrere Eigenschaften für das Objekt gleichzeitig basierend auf einem vorhandenen geladenen Objekt fest.
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Visio.Shape): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Visio.Shape
  - uid: visio.Visio.Shape.shapeDataItems
    summary: |-
      Gibt den Datenabschnitt des Shapes zurück. Schreibgeschützt.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: shapeDataItems
    fullName: shapeDataItems
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapeDataItems: Visio.ShapeDataItemCollection;'
      return:
        type:
          - visio.Visio.ShapeDataItemCollection
  - uid: visio.Visio.Shape.subShapes
    summary: |-
      Ruft die SubShape-Auflistung ab. Schreibgeschützt.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: subShapes
    fullName: subShapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly subShapes: Visio.ShapeCollection;'
      return:
        type:
          - Visio.ShapeCollection
  - uid: visio.Visio.Shape.text
    summary: |-
      Der Text der Form. Schreibgeschützt.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
  - uid: visio.Visio.Shape.toJSON
    summary: 'Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Visio. Shape-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Visio.Interfaces.ShapeData`<!-- -->), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Visio.Interfaces.ShapeData;'
      return:
        type:
          - Visio.Interfaces.ShapeData
        description: ''
  - uid: visio.Visio.Shape.view
    summary: |-
      Gibt die Ansicht des Shapes zurück. Schreibgeschützt.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: view
    fullName: view
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly view: Visio.ShapeView;'
      return:
        type:
          - visio.Visio.ShapeView