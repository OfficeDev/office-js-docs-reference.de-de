### YamlMime:UniversalReference
ms.openlocfilehash: 42466a5288cabb1db2887aad482991dab6115b1d
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/20/2019
ms.locfileid: "30097949"
items:
- uid: visio.Visio.CommentCollection
  summary: >-
    Stellt die CommentCollection für ein bestimmtes Shape dar.


    \[[API-Satz: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  name: Visio.CommentCollection
  fullName: Visio.CommentCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: visio
  children:
  - visio.Visio.CommentCollection.getCount
  - visio.Visio.CommentCollection.getItem
  - visio.Visio.CommentCollection.items
  - visio.Visio.CommentCollection.load
  - visio.Visio.CommentCollection.load_1
  - visio.Visio.CommentCollection.load_2
  - visio.Visio.CommentCollection.toJSON
- uid: visio.Visio.CommentCollection.getCount
  summary: >-
    Ruft die Anzahl von Kommentaren ab.


    \[[API-Satz: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: visio.Visio.CommentCollection.getItem
  summary: >-
    Ruft den Kommentar über seinen Namen ab.


    \[[API-Satz: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  name: getItem(key)
  fullName: getItem(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Visio.Comment;'
    return:
      type:
      - Visio.Comment
      description: ''
    parameters:
    - id: key
      description: Der Schlüssel ist der Name des Kommentars, der abgerufen werden soll.
      type:
      - string
- uid: visio.Visio.CommentCollection.items
  summary: Ruft die geladenen untergeordneten Elemente in dieser Auflistung ab.
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Visio.Comment[];'
    return:
      type:
      - Visio.Comment[]
- uid: visio.Visio.CommentCollection.load
  summary: Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen "context. Sync ()" aufrufen, bevor Sie die Eigenschaften lesen.
  remarks: >-
    Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:


    `load(option?: string | string[]): Visio.CommentCollection`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.


    `load(option?: { select?: string; expand?: string; }): Visio.CommentCollection`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Visio.CommentCollection`-Nur verfügbar für Sammlungstypen. Sie ähnelt der vorherigen Signatur. Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können. Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind. Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.

    #### <a name="examples"></a>Beispiele


    ```javascript

    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shapeName = "Position Belt.41";
        var shape = activePage.shapes.getItem(shapeName);
        var shapecomments= shape.comments;
        shapecomments.load();
        return ctx.sync().then(function () {
            for(var i=0; i<shapecomments.items.length;i++)
            {
                var comment= shapecomments.items[i];
                console.log("comment Author: " + comment.author);
                console.log("Comment Text: " + comment.text);
                console.log("Date " + comment.date);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Visio.Interfaces.CommentCollectionLoadOptions & Visio.Interfaces.CollectionLoadOptions): Visio.CommentCollection;'
    return:
      type:
      - Visio.CommentCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Visio.Interfaces.CommentCollectionLoadOptions & Visio.Interfaces.CollectionLoadOptions
- uid: visio.Visio.CommentCollection.load_1
  summary: Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Visio.CommentCollection;'
    return:
      type:
      - Visio.CommentCollection
      description: ''
    parameters:
    - id: propertyNames
      description: Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type:
      - string | string[]
- uid: visio.Visio.CommentCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Visio.CommentCollection;'
    return:
      type:
      - Visio.CommentCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: visio.Visio.CommentCollection.toJSON
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Visio.Interfaces.CommentCollectionData;'
    return:
      type:
      - Visio.Interfaces.CommentCollectionData
      description: ''
