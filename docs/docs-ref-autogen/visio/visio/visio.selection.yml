### YamlMime:UniversalReference
items:
  - uid: 'visio!Visio.Selection:class'
    summary: |-
      <span data-ttu-id="1dab1-101">Stellt die Auswahl auf der Seite dar.</span><span class="sxs-lookup"><span data-stu-id="1dab1-101">Represents the Selection in the page.</span></span>

      <span data-ttu-id="1dab1-102">\[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]</span><span class="sxs-lookup"><span data-stu-id="1dab1-102">\[ [API set: 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview) \]</span></span>
    name: Visio.Selection
    fullName: Visio.Selection
    langs:
      - typeScript
    type: class
    extends:
      - 'visio!OfficeExtension.ClientObject:class'
    package: visio!
    children:
      - 'visio!Visio.Selection#context:member'
      - 'visio!Visio.Selection#load:member(1)'
      - 'visio!Visio.Selection#load:member(2)'
      - 'visio!Visio.Selection#shapes:member'
      - 'visio!Visio.Selection#toJSON:member(1)'
  - uid: 'visio!Visio.Selection#context:member'
    summary: '<span data-ttu-id="1dab1-103">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="1dab1-103">The request context associated with the object.</span></span> <span data-ttu-id="1dab1-104">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="1dab1-104">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'visio!Visio.RequestContext:class'
  - uid: 'visio!Visio.Selection#load:member(1)'
    summary: <span data-ttu-id="1dab1-105">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="1dab1-105">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1dab1-106">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="1dab1-106">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Visio.Selection;'
      return:
        type:
          - 'visio!Visio.Selection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="1dab1-107">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="1dab1-107">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'visio!Visio.Selection#load:member(2)'
    summary: <span data-ttu-id="1dab1-108">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="1dab1-108">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1dab1-109">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="1dab1-109">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Visio.Selection;'
      return:
        type:
          - 'visio!Visio.Selection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="1dab1-110">Dabei ist propertyNamesAndPaths. Select eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="1dab1-110">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'visio!Visio.Selection#shapes:member'
    summary: |-
      <span data-ttu-id="1dab1-111">Ruft die Formen der Auswahl ab.</span><span class="sxs-lookup"><span data-stu-id="1dab1-111">Gets the Shapes of the Selection.</span></span> <span data-ttu-id="1dab1-112">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="1dab1-112">Read-only.</span></span>

      <span data-ttu-id="1dab1-113">\[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]</span><span class="sxs-lookup"><span data-stu-id="1dab1-113">\[ [API set: 1.1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview) \]</span></span>
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: Visio.ShapeCollection;'
      return:
        type:
          - 'visio!Visio.ShapeCollection:class'
  - uid: 'visio!Visio.Selection#toJSON:member(1)'
    summary: '<span data-ttu-id="1dab1-114">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="1dab1-114">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="1dab1-115">.</span><span class="sxs-lookup"><span data-stu-id="1dab1-115"></span></span> <span data-ttu-id="1dab1-116">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="1dab1-116"></span></span><!-- --><span data-ttu-id="1dab1-117">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Visio. Selection-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Visio.Interfaces.SelectionData`</span><span class="sxs-lookup"><span data-stu-id="1dab1-117">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Visio.Selection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Visio.Interfaces.SelectionData`</span></span><!-- --><span data-ttu-id="1dab1-118">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="1dab1-118">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Visio.Interfaces.SelectionData;'
      return:
        type:
          - 'visio!Visio.Interfaces.SelectionData:interface'
        description: ''
references:
  - uid: 'visio!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'visio!Visio.RequestContext:class'
    name: RequestContext
  - uid: 'visio!Visio.Selection:class'
    name: Visio.Selection
  - uid: 'visio!Visio.ShapeCollection:class'
    name: Visio.ShapeCollection
  - uid: 'visio!Visio.Interfaces.SelectionData:interface'
    name: Visio.Interfaces.SelectionData