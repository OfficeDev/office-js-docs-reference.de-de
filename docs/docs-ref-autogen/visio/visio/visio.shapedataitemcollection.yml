### YamlMime:UniversalReference
items:
  - uid: 'visio!Visio.ShapeDataItemCollection:class'
    summary: |-
      Stellt die ShapeDataItemCollection für ein bestimmtes Shape dar.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: Visio.ShapeDataItemCollection
    fullName: Visio.ShapeDataItemCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: visio!
    children:
      - 'visio!Visio.ShapeDataItemCollection#context:member'
      - 'visio!Visio.ShapeDataItemCollection#getCount:member(1)'
      - 'visio!Visio.ShapeDataItemCollection#getItem:member(1)'
      - 'visio!Visio.ShapeDataItemCollection#items:member'
      - 'visio!Visio.ShapeDataItemCollection#load:member(1)'
      - 'visio!Visio.ShapeDataItemCollection#load:member(2)'
      - 'visio!Visio.ShapeDataItemCollection#load:member(3)'
      - 'visio!Visio.ShapeDataItemCollection#toJSON:member(1)'
  - uid: 'visio!Visio.ShapeDataItemCollection#context:member'
    summary: 'Der Anforderungskontext, der mit dem Objekt verknüpft ist. Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'visio!Visio.RequestContext:class'
  - uid: 'visio!Visio.ShapeDataItemCollection#getCount:member(1)'
    summary: |-
      Ruft die Anzahl von Shape-Datenelementen ab.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'visio!Visio.ShapeDataItemCollection#getCount~0:complex'
        description: ''
  - uid: 'visio!Visio.ShapeDataItemCollection#getItem:member(1)'
    summary: |-
      Ruft das ShapeDataItem unter Verwendung seines Namens ab.

      \[[API-Menge: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Visio.ShapeDataItem;'
      return:
        type:
          - 'visio!Visio.ShapeDataItem:class'
        description: ''
      parameters:
        - id: key
          description: 'Der Schlüssel ist der Name des ShapeDataItem, das abgerufen werden soll.'
          type:
            - string
  - uid: 'visio!Visio.ShapeDataItemCollection#items:member'
    summary: Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Visio.ShapeDataItem[];'
      return:
        type:
          - 'visio!Visio.ShapeDataItemCollection#items~0:complex'
  - uid: 'visio!Visio.ShapeDataItemCollection#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.
    remarks: |-
      Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:

      `load(option?: string | string[]): Visio.ShapeDataItemCollection`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.

      `load(option?: { select?: string; expand?: string; }): Visio.ShapeDataItemCollection`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Visio.ShapeDataItemCollection`Nur verfügbar für Sammlungstypen. Sie ähnelt der vorherigen Signatur. Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können. Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind. Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.

      #### <a name="examples"></a>Beispiele

      ```javascript
      Visio.run(session, function (ctx) {
          var activePage = ctx.document.getActivePage();
          var shape = activePage.shapes.getItem(0);
          var shapeDataItems = shape.shapeDataItems;
          shapeDataItems.load(["label", "value"]);
          return ctx.sync().then(function() {
              for (var i = 0; i < shapeDataItems.items.length; i++) {
                  console.log(shapeDataItems.items[i].label);
                  console.log(shapeDataItems.items[i].value);
              }
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Visio.Interfaces.ShapeDataItemCollectionLoadOptions & Visio.Interfaces.CollectionLoadOptions): Visio.ShapeDataItemCollection;'
      return:
        type:
          - 'visio!Visio.ShapeDataItemCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'visio!Visio.ShapeDataItemCollection#load~0:complex'
  - uid: 'visio!Visio.ShapeDataItemCollection#load:member(2)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Visio.ShapeDataItemCollection;'
      return:
        type:
          - 'visio!Visio.ShapeDataItemCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: 'visio!Visio.ShapeDataItemCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Visio.ShapeDataItemCollection;'
      return:
        type:
          - 'visio!Visio.ShapeDataItemCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'visio!Visio.ShapeDataItemCollection#toJSON:member(1)'
    summary: 'Überschreibt die JavaScript `toJSON()` -Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche `Visio.ShapeDataItemCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Visio.Interfaces.ShapeDataItemCollectionData`<!-- -->), die ein "Items"-Array mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Visio.Interfaces.ShapeDataItemCollectionData;'
      return:
        type:
          - 'visio!Visio.Interfaces.ShapeDataItemCollectionData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'visio!Visio.RequestContext:class'
    name: RequestContext
  - uid: 'visio!Visio.ShapeDataItemCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'visio!Visio.ShapeDataItem:class'
    name: Visio.ShapeDataItem
  - uid: 'visio!Visio.ShapeDataItemCollection#items~0:complex'
    name: 'Visio.ShapeDataItem[]'
    fullName: 'Visio.ShapeDataItem[]'
    spec.typeScript:
      - uid: 'visio!Visio.ShapeDataItem:class'
        name: Visio.ShapeDataItem
        fullName: Visio.ShapeDataItem
      - name: '[]'
        fullName: '[]'
  - uid: 'visio!Visio.ShapeDataItemCollection:class'
    name: Visio.ShapeDataItemCollection
  - uid: 'visio!Visio.ShapeDataItemCollection#load~0:complex'
    name: Visio.Interfaces.ShapeDataItemCollectionLoadOptions & Visio.Interfaces.CollectionLoadOptions
    fullName: Visio.Interfaces.ShapeDataItemCollectionLoadOptions & Visio.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'visio!Visio.Interfaces.ShapeDataItemCollectionLoadOptions:interface'
        name: Visio.Interfaces.ShapeDataItemCollectionLoadOptions
        fullName: Visio.Interfaces.ShapeDataItemCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'visio!Visio.Interfaces.CollectionLoadOptions:interface'
        name: Visio.Interfaces.CollectionLoadOptions
        fullName: Visio.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'visio!Visio.Interfaces.ShapeDataItemCollectionData:interface'
    name: Visio.Interfaces.ShapeDataItemCollectionData