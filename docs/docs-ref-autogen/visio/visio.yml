### YamlMime:TSPackage
uid: visio!
name: visio
type: package
summary: ''
classes:
- visio!Visio.Application:class
- visio!Visio.Comment:class
- visio!Visio.CommentCollection:class
- visio!Visio.Document:class
- visio!Visio.DocumentView:class
- visio!Visio.Hyperlink:class
- visio!Visio.HyperlinkCollection:class
- visio!Visio.Page:class
- visio!Visio.PageCollection:class
- visio!Visio.PageView:class
- visio!Visio.RequestContext:class
- visio!Visio.Selection:class
- visio!Visio.Shape:class
- visio!Visio.ShapeCollection:class
- visio!Visio.ShapeDataItem:class
- visio!Visio.ShapeDataItemCollection:class
- visio!Visio.ShapeView:class
interfaces:
- visio!Visio.BoundingBox:interface
- visio!Visio.DataRefreshCompleteEventArgs:interface
- visio!Visio.DocumentLoadCompleteEventArgs:interface
- visio!Visio.Highlight:interface
- visio!Visio.Interfaces.ApplicationData:interface
- visio!Visio.Interfaces.ApplicationLoadOptions:interface
- visio!Visio.Interfaces.ApplicationUpdateData:interface
- visio!Visio.Interfaces.CollectionLoadOptions:interface
- visio!Visio.Interfaces.CommentCollectionData:interface
- visio!Visio.Interfaces.CommentCollectionLoadOptions:interface
- visio!Visio.Interfaces.CommentCollectionUpdateData:interface
- visio!Visio.Interfaces.CommentData:interface
- visio!Visio.Interfaces.CommentLoadOptions:interface
- visio!Visio.Interfaces.CommentUpdateData:interface
- visio!Visio.Interfaces.DocumentData:interface
- visio!Visio.Interfaces.DocumentLoadOptions:interface
- visio!Visio.Interfaces.DocumentUpdateData:interface
- visio!Visio.Interfaces.DocumentViewData:interface
- visio!Visio.Interfaces.DocumentViewLoadOptions:interface
- visio!Visio.Interfaces.DocumentViewUpdateData:interface
- visio!Visio.Interfaces.HyperlinkCollectionData:interface
- visio!Visio.Interfaces.HyperlinkCollectionLoadOptions:interface
- visio!Visio.Interfaces.HyperlinkCollectionUpdateData:interface
- visio!Visio.Interfaces.HyperlinkData:interface
- visio!Visio.Interfaces.HyperlinkLoadOptions:interface
- visio!Visio.Interfaces.PageCollectionData:interface
- visio!Visio.Interfaces.PageCollectionLoadOptions:interface
- visio!Visio.Interfaces.PageCollectionUpdateData:interface
- visio!Visio.Interfaces.PageData:interface
- visio!Visio.Interfaces.PageLoadOptions:interface
- visio!Visio.Interfaces.PageUpdateData:interface
- visio!Visio.Interfaces.PageViewData:interface
- visio!Visio.Interfaces.PageViewLoadOptions:interface
- visio!Visio.Interfaces.PageViewUpdateData:interface
- visio!Visio.Interfaces.SelectionData:interface
- visio!Visio.Interfaces.ShapeCollectionData:interface
- visio!Visio.Interfaces.ShapeCollectionLoadOptions:interface
- visio!Visio.Interfaces.ShapeCollectionUpdateData:interface
- visio!Visio.Interfaces.ShapeData:interface
- visio!Visio.Interfaces.ShapeDataItemCollectionData:interface
- visio!Visio.Interfaces.ShapeDataItemCollectionLoadOptions:interface
- visio!Visio.Interfaces.ShapeDataItemCollectionUpdateData:interface
- visio!Visio.Interfaces.ShapeDataItemData:interface
- visio!Visio.Interfaces.ShapeDataItemLoadOptions:interface
- visio!Visio.Interfaces.ShapeLoadOptions:interface
- visio!Visio.Interfaces.ShapeUpdateData:interface
- visio!Visio.Interfaces.ShapeViewData:interface
- visio!Visio.Interfaces.ShapeViewLoadOptions:interface
- visio!Visio.Interfaces.ShapeViewUpdateData:interface
- visio!Visio.PageLoadCompleteEventArgs:interface
- visio!Visio.PageRenderCompleteEventArgs:interface
- visio!Visio.Position:interface
- visio!Visio.SelectionChangedEventArgs:interface
- visio!Visio.ShapeMouseEnterEventArgs:interface
- visio!Visio.ShapeMouseLeaveEventArgs:interface
enums:
- visio!Visio.ErrorCodes:enum
- visio!Visio.OverlayHorizontalAlignment:enum
- visio!Visio.OverlayType:enum
- visio!Visio.OverlayVerticalAlignment:enum
- visio!Visio.ToolBarType:enum
functions:
- name: Visio.run(batch)
  uid: visio!Visio.run:function(1)
  package: visio!
  summary: Führt ein Batchskript aus, das Aktionen für das Visio-Objektmodell unter Verwendung eines neuen Anforderungskontexts ausführt. Wenn die Zusage aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: batch
      description: Eine Funktion, die einen Visio.RequestContext einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Der Kontextparameter erleichtert Anforderungen an die Visio-Anwendung. Da das Office-Add-In und die Visio-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist der Anforderungskontext erforderlich, um über das Add-In Zugriff auf das Visio-Objektmodell zu erhalten.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Visio.run(object, batch)
  uid: visio!Visio.run:function(2)
  package: visio!
  summary: Führt ein Batchskript aus, das Aktionen für das Visio-Objektmodell mithilfe des Anforderungskontexts eines zuvor erstellten API-Objekts ausführt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject | OfficeExtension.EmbeddedSession, batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: object
      description: Ein zuvor erstelltes API-Objekt. Der Batch verwendet denselben Anforderungskontext wie das übergebene Objekt, was bedeutet, dass alle auf das Objekt angewendeten Änderungen von "context.sync()" übernommen werden.
      type: <xref uid="office!OfficeExtension.ClientObject:class" /> | <xref uid="office!OfficeExtension.EmbeddedSession:class" />
    - id: batch
      description: Eine Funktion, die einen Visio.RequestContext einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Wenn die Zusage aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Visio.run(objects, batch)
  uid: visio!Visio.run:function(3)
  package: visio!
  summary: Führt ein Batchskript aus, das Aktionen für das Visio-Objektmodell mithilfe des Anforderungskontexts zuvor erstellter API-Objekte ausführt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: objects
      description: Ein Array von zuvor erstellten API-Objekten. Das Array wird überprüft, um sicherzustellen, dass alle Objekte denselben Kontext haben. Der Batch verwendet diesen freigegebenen Anforderungskontext, was bedeutet, dass alle änderungen, die auf diese Objekte angewendet werden, von "context.sync()" übernommen werden.
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Eine Funktion, die einen Visio.RequestContext einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Wenn die Zusage aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Visio.run(contextObject, batch)
  uid: visio!Visio.run:function(4)
  package: visio!
  summary: Führt ein Batchskript aus, das Aktionen für das Visio-Objektmodell mit dem RequestContext eines zuvor erstellten Objekts ausführt. Wenn die Zusage aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
  remarks: >-
    Zusätzlich zu dieser Signatur verfügt die Methode auch über die folgenden Signaturen:


    `run<T>(batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;`


    `run<T>(object: OfficeExtension.ClientObject | OfficeExtension.EmbeddedSession, batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;`


    `run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(contextObject: OfficeExtension.ClientRequestContext, batch: (context: Visio.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: contextObject
      description: Ein zuvor erstelltes Visio.RequestContext-Objekt. Dieser Kontext wird von der Batchfunktion erneut verwendet (anstatt einen neuen Kontext erstellt zu haben). Dies bedeutet, dass der Batch Änderungen an vorhandenen API-Objekten abrufen kann, wenn diese Objekte aus demselben Kontext abgeleitet wurden.
      type: <xref uid="office!OfficeExtension.ClientRequestContext:class" />
    - id: batch
      description: Eine Funktion, die einen RequestContext einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Der Kontextparameter erleichtert Anforderungen an die Visio-Anwendung. Da das Office-Add-In und die Visio-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist RequestContext erforderlich, um zugriff auf das Visio-Objektmodell über das Add-In zu erhalten.
      type: '(context: <xref uid="visio!Visio.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 160a87f9afd1fc59da3c920487e71135a46c79a0
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51277365"
