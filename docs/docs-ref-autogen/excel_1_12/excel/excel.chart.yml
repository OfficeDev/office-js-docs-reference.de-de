### YamlMime:TSType
name: Excel.Chart
uid: excel!Excel.Chart:class
package: excel!
fullName: Excel.Chart
summary: >-
  Steht für ein Diagrammobjekt in einer Arbeitsmappe. Weitere Informationen zum Diagrammobjektmodell finden Sie unter [Arbeiten mit Diagrammen mithilfe der Excel JavaScript-API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-charts)<!-- -->.


  \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: axes
  uid: excel!Excel.Chart#axes:member
  package: excel!
  fullName: axes
  summary: >-
    Die Achsen des Diagramms.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly axes: Excel.ChartAxes;'
    return:
      type: <xref uid="excel!Excel.ChartAxes:class" />
- name: categoryLabelLevel
  uid: excel!Excel.Chart#categoryLabelLevel:member
  package: excel!
  fullName: categoryLabelLevel
  summary: >-
    Gibt eine Enumerationskonstante auf Diagrammkategoriebeschriftungsebene an, die auf die Ebene der Quellkategoriebeschriftungen verweist.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'categoryLabelLevel: number;'
    return:
      type: number
- name: chartType
  uid: excel!Excel.Chart#chartType:member
  package: excel!
  fullName: chartType
  summary: >-
    Gibt den Typ des Diagramms an. Weitere Informationen finden Sie `Excel.ChartType` unter.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'chartType: Excel.ChartType | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel";'
    return:
      type: <xref uid="excel!Excel.ChartType:enum" /> | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel"
- name: context
  uid: excel!Excel.Chart#context:member
  package: excel!
  fullName: context
  summary: Der dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office Hostanwendung verbunden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: dataLabels
  uid: excel!Excel.Chart#dataLabels:member
  package: excel!
  fullName: dataLabels
  summary: >-
    Stellt die Datenbeschriftungen im Diagramm dar.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataLabels: Excel.ChartDataLabels;'
    return:
      type: <xref uid="excel!Excel.ChartDataLabels:class" />
- name: displayBlanksAs
  uid: excel!Excel.Chart#displayBlanksAs:member
  package: excel!
  fullName: displayBlanksAs
  summary: >-
    Gibt an, wie leere Zellen in einem Diagramm gezeichnet werden.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayBlanksAs: Excel.ChartDisplayBlanksAs | "NotPlotted" | "Zero" | "Interplotted";'
    return:
      type: <xref uid="excel!Excel.ChartDisplayBlanksAs:enum" /> | "NotPlotted" | "Zero" | "Interplotted"
- name: format
  uid: excel!Excel.Chart#format:member
  package: excel!
  fullName: format
  summary: >-
    Kapselt die Formateigenschaften für den Diagrammbereich.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly format: Excel.ChartAreaFormat;'
    return:
      type: <xref uid="excel!Excel.ChartAreaFormat:class" />
- name: height
  uid: excel!Excel.Chart#height:member
  package: excel!
  fullName: height
  summary: >-
    Gibt die Höhe des Diagrammobjekts in Punkt an.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'height: number;'
    return:
      type: number
- name: id
  uid: excel!Excel.Chart#id:member
  package: excel!
  fullName: id
  summary: >-
    Die eindeutige ID des Diagramms.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: left
  uid: excel!Excel.Chart#left:member
  package: excel!
  fullName: left
  summary: >-
    Der Abstand von der linken Seite des Diagramms zu dem Ursprung des Arbeitsblatts (in Punkten).


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'left: number;'
    return:
      type: number
- name: legend
  uid: excel!Excel.Chart#legend:member
  package: excel!
  fullName: legend
  summary: >-
    Die Legende für das Diagramm.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly legend: Excel.ChartLegend;'
    return:
      type: <xref uid="excel!Excel.ChartLegend:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Set to show legend of Chart1 and make it on top of the chart.\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    chart.legend.visible = true;\n    chart.legend.position = \"top\"; \n    chart.legend.overlay = false; \n    return ctx.sync().then(function() {\n            console.log(\"Legend Shown \");\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: name
  uid: excel!Excel.Chart#name:member
  package: excel!
  fullName: name
  summary: >-
    Gibt den Namen eines Diagrammobjekts an.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Rename the chart to new name, resize the chart to 200 points in both height and weight. \n// Move Chart1 to 100 points to the top and left. \nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    chart.name = \"New Name\";\n    chart.top = 100;\n    chart.left = 100;\n    chart.height = 200;\n    chart.width = 200;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: pivotOptions
  uid: excel!Excel.Chart#pivotOptions:member
  package: excel!
  fullName: pivotOptions
  summary: >-
    Verkapselt die Optionen für ein PivotChart.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotOptions: Excel.ChartPivotOptions;'
    return:
      type: <xref uid="excel!Excel.ChartPivotOptions:class" />
- name: plotArea
  uid: excel!Excel.Chart#plotArea:member
  package: excel!
  fullName: plotArea
  summary: >-
    Stellt die Zeichnungsfläche für das Diagramm dar.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly plotArea: Excel.ChartPlotArea;'
    return:
      type: <xref uid="excel!Excel.ChartPlotArea:class" />
- name: plotBy
  uid: excel!Excel.Chart#plotBy:member
  package: excel!
  fullName: plotBy
  summary: >-
    Gibt an, wie Spalten oder Zeilen als Datenreihen im Diagramm verwendet werden.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'plotBy: Excel.ChartPlotBy | "Rows" | "Columns";'
    return:
      type: <xref uid="excel!Excel.ChartPlotBy:enum" /> | "Rows" | "Columns"
- name: plotVisibleOnly
  uid: excel!Excel.Chart#plotVisibleOnly:member
  package: excel!
  fullName: plotVisibleOnly
  summary: >-
    „True“, wenn nur sichtbare Zellen dargestellt werden. „False“, wenn sowohl sichtbare als auch ausgeblendete Zellen dargestellt werden.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'plotVisibleOnly: boolean;'
    return:
      type: boolean
- name: series
  uid: excel!Excel.Chart#series:member
  package: excel!
  fullName: series
  summary: >-
    Eine einzelne Datenreihe oder eine Sammlung von Datenreihen im Diagramm.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly series: Excel.ChartSeriesCollection;'
    return:
      type: <xref uid="excel!Excel.ChartSeriesCollection:class" />
- name: seriesNameLevel
  uid: excel!Excel.Chart#seriesNameLevel:member
  package: excel!
  fullName: seriesNameLevel
  summary: >-
    Gibt eine Enumerationskonstante auf Der Namensebene der Diagrammreihe an, die auf die Ebene der Quelldatenreihennamen verweist.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'seriesNameLevel: number;'
    return:
      type: number
- name: showAllFieldButtons
  uid: excel!Excel.Chart#showAllFieldButtons:member
  package: excel!
  fullName: showAllFieldButtons
  summary: >-
    Gibt an, ob alle Feldschaltflächen in einem PivotChart angezeigt werden sollen.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showAllFieldButtons: boolean;'
    return:
      type: boolean
- name: showDataLabelsOverMaximum
  uid: excel!Excel.Chart#showDataLabelsOverMaximum:member
  package: excel!
  fullName: showDataLabelsOverMaximum
  summary: >-
    Gibt an, ob die Datenbeschriftungen angezeigt werden sollen, wenn der Wert größer als der Maximalwert auf der Größenachse ist. Wenn die Größenachse kleiner als die Größe der Datenpunkte wird, können Sie mit dieser Eigenschaft festlegen, ob die Datenbeschriftungen angezeigt werden sollen. Diese Eigenschaft kann nur auf 2D-Diagramme angewendet werden.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showDataLabelsOverMaximum: boolean;'
    return:
      type: boolean
- name: style
  uid: excel!Excel.Chart#style:member
  package: excel!
  fullName: style
  summary: >-
    Gibt die Diagrammformatvorlage für das Diagramm an.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: number;'
    return:
      type: number
- name: title
  uid: excel!Excel.Chart#title:member
  package: excel!
  fullName: title
  summary: >-
    Der Titel des angegebenen Diagramms, einschließlich Text, Sichtbarkeit, Position und Formatierung des Titels.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly title: Excel.ChartTitle;'
    return:
      type: <xref uid="excel!Excel.ChartTitle:class" />
- name: top
  uid: excel!Excel.Chart#top:member
  package: excel!
  fullName: top
  summary: >-
    Gibt den Abstand zwischen dem oberen Rand des Objekts und dem oberen Rand der Zeile 1 (auf einem Arbeitsblatt) oder dem oberen Rand des Diagrammbereichs (in einem Diagramm) in Punkt an.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'top: number;'
    return:
      type: number
- name: width
  uid: excel!Excel.Chart#width:member
  package: excel!
  fullName: width
  summary: >-
    Gibt die Breite des Diagrammobjekts in Punkt an.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'width: number;'
    return:
      type: number
- name: worksheet
  uid: excel!Excel.Chart#worksheet:member
  package: excel!
  fullName: worksheet
  summary: >-
    Das Arbeitsblatt, das das aktuelle Diagramm enthält.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
methods:
- name: activate()
  uid: excel!Excel.Chart#activate:member(1)
  package: excel!
  fullName: activate()
  summary: >-
    Aktiviert das Diagramm auf der Excel-Benutzeroberfläche.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'activate(): void;'
    return:
      type: void
      description: ''
- name: delete()
  uid: excel!Excel.Chart#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    Löscht das Diagrammobjekt.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    chart.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getImage(width, height, fittingMode)
  uid: excel!Excel.Chart#getImage:member(1)
  package: excel!
  fullName: getImage(width, height, fittingMode)
  summary: >-
    Rendert das Diagramm als base64-codiertes Bild durch Skalierung, um es an die angegebenen Maße anzupassen. Das Seitenverhältnis wird als Teil der Größenänderung beibehalten.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(width?: number, height?: number, fittingMode?: Excel.ImageFittingMode): OfficeExtension.ClientResult<string>;'
    parameters:
    - id: width
      description: Optional. Die gewünschte Breite des resultierenden Bilds.
      type: number
    - id: height
      description: Optional. Die gewünschte Höhe des resultierenden Bilds.
      type: number
    - id: fittingMode
      description: Optional. Die Methode, mit der das Diagramm auf die angegebenen Dimensionen skaliert wird (wenn Höhe und Breite festgelegt sind).
      type: <xref uid="excel!Excel.ImageFittingMode:enum" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    var image = chart.getImage();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getImage(width, height, fittingModeString)
  uid: excel!Excel.Chart#getImage:member(2)
  package: excel!
  fullName: getImage(width, height, fittingModeString)
  summary: >-
    Rendert das Diagramm als base64-codiertes Bild durch Skalierung, um es an die angegebenen Maße anzupassen. Das Seitenverhältnis wird als Teil der Größenänderung beibehalten.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(width?: number, height?: number, fittingModeString?: "Fit" | "FitAndCenter" | "Fill"): OfficeExtension.ClientResult<string>;'
    parameters:
    - id: width
      description: Optional. Die gewünschte Breite des resultierenden Bilds.
      type: number
    - id: height
      description: Optional. Die gewünschte Höhe des resultierenden Bilds.
      type: number
    - id: fittingModeString
      description: Optional. Die Methode, mit der das Diagramm auf die angegebenen Dimensionen skaliert wird (wenn Höhe und Breite festgelegt sind).
      type: "\"Fit\" | \"FitAndCenter\" | \"Fill\""
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: ''
- name: load(options)
  uid: excel!Excel.Chart#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ChartLoadOptions): Excel.Chart;'
    parameters:
    - id: options
      description: Stellt Optionen bereit, für welche Eigenschaften des Objekts geladen werden soll.
      type: <xref uid="excel!Excel.Interfaces.ChartLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Chart#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Chart;'
    parameters:
    - id: propertyNames
      description: Eine durch Trennzeichen getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Get a chart named \"Chart1\"\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    chart.load('name');\n    return ctx.sync().then(function() {\n            console.log(chart.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Chart#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Chart;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` ist eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und `propertyNamesAndPaths.expand` eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.Chart#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Legt mehrere Eigenschaften eines Objekts gleichzeitig fest. Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.
  remarks: >-
    Diese Methode hat die folgende zusätzliche Signatur:


    `set(properties: Excel.Chart): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ChartUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Ein JavaScript-Objekt mit Eigenschaften, die isomorph zu den Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.
      type: <xref uid="excel!Excel.Interfaces.ChartUpdateData:interface" />
    - id: options
      description: Bietet eine Option zum Unterdrücken von Fehlern, wenn das Eigenschaftenobjekt versucht, schreibgeschützte Eigenschaften festzulegen.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Chart#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Legt mehrere Eigenschaften für das Objekt gleichzeitig fest, basierend auf einem vorhandenen geladenen Objekt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Chart): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Chart:class" />
    return:
      type: void
      description: ''
- name: setData(sourceData, seriesBy)
  uid: excel!Excel.Chart#setData:member(1)
  package: excel!
  fullName: setData(sourceData, seriesBy)
  summary: >-
    Setzt die Quelldaten für das Diagramm zurück.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setData(sourceData: Range, seriesBy?: Excel.ChartSeriesBy): void;'
    parameters:
    - id: sourceData
      description: Das Bereichsobjekt, das den Quelldaten entspricht.
      type: <xref uid="excel!Excel.Range:class" />
    - id: seriesBy
      description: 'Gibt an, wie Spalten oder Zeilen als Datenreihen im Diagramm verwendet werden. Dies kann eine der folgenden Optionen sein: Auto (Standard), Zeilen und Spalten. Weitere Informationen finden Sie `Excel.ChartSeriesBy` unter.'
      type: <xref uid="excel!Excel.ChartSeriesBy:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Set the sourceData to be \"A1:B4\" and seriesBy to be \"Columns\"\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    var sourceData = \"A1:B4\";\n    chart.setData(sourceData, \"Columns\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: setData(sourceData, seriesByString)
  uid: excel!Excel.Chart#setData:member(2)
  package: excel!
  fullName: setData(sourceData, seriesByString)
  summary: >-
    Setzt die Quelldaten für das Diagramm zurück.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setData(sourceData: Range, seriesByString?: "Auto" | "Columns" | "Rows"): void;'
    parameters:
    - id: sourceData
      description: Das Bereichsobjekt, das den Quelldaten entspricht.
      type: <xref uid="excel!Excel.Range:class" />
    - id: seriesByString
      description: 'Gibt an, wie Spalten oder Zeilen als Datenreihen im Diagramm verwendet werden. Dies kann eine der folgenden Optionen sein: Auto (Standard), Zeilen und Spalten. Weitere Informationen finden Sie `Excel.ChartSeriesBy` unter.'
      type: "\"Auto\" | \"Columns\" | \"Rows\""
    return:
      type: void
      description: ''
- name: setPosition(startCell, endCell)
  uid: excel!Excel.Chart#setPosition:member(1)
  package: excel!
  fullName: setPosition(startCell, endCell)
  summary: >-
    Positioniert das Diagramm im Verhältnis zu den Zellen im Arbeitsblatt.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPosition(startCell: Range | string, endCell?: Range | string): void;'
    parameters:
    - id: startCell
      description: Die Startzelle. An diese Position wird das Diagramm verschoben. Die Startzelle ist die obere linke oder die obere rechte Zelle, abhängig davon, ob die eingestellte Textrichtung des Benutzers von links nach rechts oder von rechts nach links ist.
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: endCell
      description: Optional. Die Endzelle. Wenn angegeben, werden Breite und Höhe des Diagramms so eingestellt, dass diese Zelle/dieser Bereich vollständig bedeckt ist.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Charts\";\n    var rangeSelection = \"A1:B4\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeSelection);\n    var sourceData = sheetName + \"!\" + \"A1:B4\";\n    var chart = ctx.workbook.worksheets.getItem(sheetName).charts.add(\"pie\", range, \"auto\");\n    chart.width = 500;\n    chart.height = 300;\n    chart.setPosition(\"C2\", null);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: toJSON()
  uid: excel!Excel.Chart#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Überschreibt die `toJSON()` JavaScript-Methode, um eine hilfreichere Ausgabe bereitzustellen, wenn ein API-Objekt an `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->ruft wiederum die Methode des Objekts auf, `toJSON` das an das Objekt übergeben wird.) Während die ursprüngliche Excel. Chart-Objekt ist ein API-Objekt, die `toJSON` Methode gibt ein einfaches JavaScript-Objekt zurück (typisiert als`Excel.Interfaces.ChartData`<!-- -->), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ChartData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ChartData:interface" />
      description: ''
events:
- name: onActivated
  uid: excel!Excel.Chart#onActivated:member
  package: excel!
  fullName: onActivated
  summary: >-
    Tritt auf, wenn das Diagramm aktiviert wird.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.ChartActivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartActivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (context){\n    var pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem(\"Pie\");\n    pieChart.onActivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The pie chart is the active chart. ID: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml\nawait Excel.run(async (context) => {\n\n    const pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem(\"Pie\");\n\n    // Register the onActivated and onDeactivated event handlers.\n    pieChart.onActivated.add(chartActivated);\n    pieChart.onDeactivated.add(chartDeactivated);\n\n    await context.sync();\n\n    console.log(\"Added handlers for Chart onActivated and onDeactivated events.\");\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml\nasync function chartActivated(event) {\n    await Excel.run(async (context) => {\n        // Retrieve the worksheet.\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n        // Retrieve the activated chart by ID and load the name of the chart. \n        const activatedChart = sheet.charts.getItem(event.chartId);\n        activatedChart.load([\"name\"]);\n        await context.sync();\n\n        // Print out the activated chart's data.\n        console.log(`A chart was activated. ID: ${event.chartId}. Chart name: ${activatedChart.name}.`);\n    });\n}\n```"
- name: onDeactivated
  uid: excel!Excel.Chart#onDeactivated:member
  package: excel!
  fullName: onDeactivated
  summary: >-
    Tritt auf, wenn das Diagramm deaktiviert wird.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.ChartDeactivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartDeactivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (context){\n    var pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem(\"Pie\");\n    pieChart.onDeactivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The pie chart is NOT active.\");\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: fd7cf613a449a46daba340f7a678f754c3eeb588
  ms.sourcegitcommit: 319b8cca7d91e51669407633dacc02ea6e4f4338
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 06/18/2021
  ms.locfileid: "53009848"
