### YamlMime:TSType
name: Excel.ConditionalFormat
uid: excel!Excel.ConditionalFormat:class
package: excel!
fullName: Excel.ConditionalFormat
summary: >-
  Ein Objekt, das den Bereich, das Format, die Regel und andere Eigenschaften eines bedingten Formats kapselt. Weitere Informationen zum Objektmodell für die bedingte Formatierung finden Sie unter [Anwenden bedingter Formatierung auf Excel-Bereiche.](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)<!-- -->.


  \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: cellValue
  uid: excel!Excel.ConditionalFormat#cellValue:member
  package: excel!
  fullName: cellValue
  summary: >-
    Gibt die Eigenschaften des bedingten Zellenwerts zurück, wenn das aktuelle bedingte Format ein CellValue-Typ ist. Beispielsweise zum Formatieren aller Zellen zwischen 5 und 10.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.CellValueConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- name: cellValueOrNullObject
  uid: excel!Excel.ConditionalFormat#cellValueOrNullObject:member
  package: excel!
  fullName: cellValueOrNullObject
  summary: >-
    Gibt die Eigenschaften des bedingten Zellenwerts zurück, wenn das aktuelle bedingte Format ein CellValue-Typ ist. Beispielsweise zum Formatieren aller Zellen zwischen 5 und 10.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.CellValueConditionalFormat:class" />
- name: colorScale
  uid: excel!Excel.ConditionalFormat#colorScale:member
  package: excel!
  fullName: colorScale
  summary: >-
    Gibt die Eigenschaften des bedingten Formats ColorScale zurück, wenn das aktuelle bedingte Format ein ColorScale-Typ ist.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.ColorScaleConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
- name: colorScaleOrNullObject
  uid: excel!Excel.ConditionalFormat#colorScaleOrNullObject:member
  package: excel!
  fullName: colorScaleOrNullObject
  summary: >-
    Gibt die Eigenschaften des bedingten Formats ColorScale zurück, wenn das aktuelle bedingte Format ein ColorScale-Typ ist.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.ColorScaleConditionalFormat:class" />
- name: context
  uid: excel!Excel.ConditionalFormat#context:member
  package: excel!
  fullName: context
  summary: Der dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: custom
  uid: excel!Excel.ConditionalFormat#custom:member
  package: excel!
  fullName: custom
  summary: >-
    Gibt die benutzerdefinierten Bedingten Formateigenschaften zurück, wenn das aktuelle bedingte Format ein benutzerdefinierter Typ ist.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly custom: Excel.CustomConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.CustomConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n\n    await context.sync();\n});\n```"
- name: customOrNullObject
  uid: excel!Excel.ConditionalFormat#customOrNullObject:member
  package: excel!
  fullName: customOrNullObject
  summary: >-
    Gibt die benutzerdefinierten Bedingten Formateigenschaften zurück, wenn das aktuelle bedingte Format ein benutzerdefinierter Typ ist.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.CustomConditionalFormat:class" />
- name: dataBar
  uid: excel!Excel.ConditionalFormat#dataBar:member
  package: excel!
  fullName: dataBar
  summary: >-
    Gibt die Datenbalkeneigenschaften zurück, wenn das aktuelle bedingte Format ein Datenbalken ist.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.DataBarConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.dataBar);\n    conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;\n\n    await context.sync();\n});\n```"
- name: dataBarOrNullObject
  uid: excel!Excel.ConditionalFormat#dataBarOrNullObject:member
  package: excel!
  fullName: dataBarOrNullObject
  summary: >-
    Gibt die Datenbalkeneigenschaften zurück, wenn das aktuelle bedingte Format ein Datenbalken ist.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.DataBarConditionalFormat:class" />
- name: iconSet
  uid: excel!Excel.ConditionalFormat#iconSet:member
  package: excel!
  fullName: iconSet
  summary: >-
    Gibt die Eigenschaften des bedingten Formats IconSet zurück, wenn das aktuelle bedingte Format ein IconSet-Typ ist.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.IconSetConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.iconSet);\n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n\n    /*\n        The iconSetCF.criteria array is automatically prepopulated with\n        criterion elements whose properties have been given default settings.\n        You can't write to each property of a criterion directly. Instead,\n        replace the whole criteria object.\n\n        With a \"three*\" icon set style, such as \"threeTriangles\", the third\n        element in the criteria array (criteria[2]) defines the \"top\" icon;\n        e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n        icon, The first (criteria[0]) defines the \"low\" icon, but it\n        can often be left empty as this method does below, because every\n        cell that does not match the other two criteria always gets the low\n        icon.            \n    */\n    iconSetCF.criteria = [\n        {} as any,\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=700\"\n        },\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=1000\",\n        }\n    ];\n\n    await context.sync();\n});\n```"
- name: iconSetOrNullObject
  uid: excel!Excel.ConditionalFormat#iconSetOrNullObject:member
  package: excel!
  fullName: iconSetOrNullObject
  summary: >-
    Gibt die Eigenschaften des bedingten Formats IconSet zurück, wenn das aktuelle bedingte Format ein IconSet-Typ ist.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.IconSetConditionalFormat:class" />
- name: id
  uid: excel!Excel.ConditionalFormat#id:member
  package: excel!
  fullName: id
  summary: >-
    Die Priorität des bedingten Formats in der aktuellen ConditionalFormatCollection.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: preset
  uid: excel!Excel.ConditionalFormat#preset:member
  package: excel!
  fullName: preset
  summary: >-
    Gibt das voreingestellte bedingte Format für Kriterien zurück. Weitere Informationen finden Sie unter Excel.PresetCriteriaConditionalFormat.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.PresetCriteriaConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.presetCriteria);\n    conditionalFormat.preset.format.font.color = \"white\";\n    conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };\n\n    await context.sync();\n});\n```"
- name: presetOrNullObject
  uid: excel!Excel.ConditionalFormat#presetOrNullObject:member
  package: excel!
  fullName: presetOrNullObject
  summary: >-
    Gibt das voreingestellte bedingte Format für Kriterien zurück. Weitere Informationen finden Sie unter Excel.PresetCriteriaConditionalFormat.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.PresetCriteriaConditionalFormat:class" />
- name: priority
  uid: excel!Excel.ConditionalFormat#priority:member
  package: excel!
  fullName: priority
  summary: >-
    Die Priorität (oder der Index) innerhalb der Bedingten Formatsammlung, in der dieses bedingte Format derzeit vorhanden ist. Wenn Sie dies ändern, werden auch die Prioritäten anderer bedingter Formate geändert, um eine zusammenhängende Prioritätsreihenfolge zu ermöglichen. Verwenden Sie eine negative Priorität, um von hinten zu beginnen. Prioritäten, die größer als die Grenzen sind, erhalten die maximale (oder minimale, wenn negative) Priorität und werden auf diese festgelegt. Beachten Sie außerdem, dass Sie beim Ändern der Priorität eine neue Kopie des Objekts an dieser neuen Prioritätsposition erneut abrufen müssen, wenn Sie weitere Änderungen daran vornehmen möchten.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'priority: number;'
    return:
      type: number
- name: stopIfTrue
  uid: excel!Excel.ConditionalFormat#stopIfTrue:member
  package: excel!
  fullName: stopIfTrue
  summary: >-
    Wenn die Bedingungen dieses bedingten Formats erfüllt sind, werden keine Formate niedrigerer Priorität für diese Zelle wirksam. Null auf Datenbalken, Symbolsätzen und Farbskalen, da es kein Konzept von StopIfTrue für diese gibt


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'stopIfTrue: boolean;'
    return:
      type: boolean
- name: textComparison
  uid: excel!Excel.ConditionalFormat#textComparison:member
  package: excel!
  fullName: textComparison
  summary: >-
    Gibt die spezifischen Eigenschaften des bedingten Textformats zurück, wenn das aktuelle bedingte Format ein Texttyp ist. Beispielsweise zum Formatieren von Zellen, die mit dem Wort "Text" übereinstimmen.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly textComparison: Excel.TextConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.TextConditionalFormat:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- name: textComparisonOrNullObject
  uid: excel!Excel.ConditionalFormat#textComparisonOrNullObject:member
  package: excel!
  fullName: textComparisonOrNullObject
  summary: >-
    Gibt die spezifischen Eigenschaften des bedingten Textformats zurück, wenn das aktuelle bedingte Format ein Texttyp ist. Beispielsweise zum Formatieren von Zellen, die mit dem Wort "Text" übereinstimmen.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.TextConditionalFormat:class" />
- name: topBottom
  uid: excel!Excel.ConditionalFormat#topBottom:member
  package: excel!
  fullName: topBottom
  summary: >-
    Gibt die Top/Bottom-Eigenschaften des bedingten Formats zurück, wenn das aktuelle bedingte Format ein TopBottom-Typ ist. Beispielsweise zum Formatieren der obersten 10 % oder unteren 10 Elemente.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.TopBottomConditionalFormat:class" />
- name: topBottomOrNullObject
  uid: excel!Excel.ConditionalFormat#topBottomOrNullObject:member
  package: excel!
  fullName: topBottomOrNullObject
  summary: >-
    Gibt die Top/Bottom-Eigenschaften des bedingten Formats zurück, wenn das aktuelle bedingte Format ein TopBottom-Typ ist. Beispielsweise zum Formatieren der obersten 10 % oder unteren 10 Elemente.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
    return:
      type: <xref uid="excel!Excel.TopBottomConditionalFormat:class" />
- name: type
  uid: excel!Excel.ConditionalFormat#type:member
  package: excel!
  fullName: type
  summary: >-
    Eine Art bedingtes Format. Es kann immer nur eine festgelegt werden.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
    return:
      type: <xref uid="excel!Excel.ConditionalFormatType:enum" /> | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
methods:
- name: delete()
  uid: excel!Excel.ConditionalFormat#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    Löscht dieses bedingte Format.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: ''
- name: getRange()
  uid: excel!Excel.ConditionalFormat#getRange:member(1)
  package: excel!
  fullName: getRange()
  summary: >-
    Gibt den Bereich zurück, auf den das bedingte Format angewendet wird. Gibt einen Fehler zurück, wenn das bedingte Format auf mehrere Bereiche angewendet wird.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
- name: getRangeOrNullObject()
  uid: excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)
  package: excel!
  fullName: getRangeOrNullObject()
  summary: >-
    Gibt den Bereich zurück, auf den das konditonale Format angewendet wird, oder ein Nullobjekt, wenn das bedingte Format auf mehrere Bereiche angewendet wird.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRangeOrNullObject(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRanges()
  uid: excel!Excel.ConditionalFormat#getRanges:member(1)
  package: excel!
  fullName: getRanges()
  summary: >-
    Gibt die RangeAreas zurück, die einen oder mehrere rechteckige Bereiche umfassen und auf die das bedingte Format angewendet werden soll.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRanges(): Excel.RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.ConditionalFormat#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
    parameters:
    - id: options
      description: Stellt Optionen für die Eigenschaften des zu ladenden Objekts zur Verfügung.
      type: <xref uid="excel!Excel.Interfaces.ConditionalFormatLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.ConditionalFormat#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
    parameters:
    - id: propertyNames
      description: Eine durch Trennzeichen getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.ConditionalFormat#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.ConditionalFormat;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` ist eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden `propertyNamesAndPaths.expand` Navigationseigenschaften angibt.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.ConditionalFormat#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Legt mehrere Eigenschaften eines Objekts gleichzeitig fest. Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.
  remarks: >-
    Diese Methode verfügt über die folgende zusätzliche Signatur:


    `set(properties: Excel.ConditionalFormat): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Ein JavaScript-Objekt mit Eigenschaften, die isomorph zu den Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.
      type: <xref uid="excel!Excel.Interfaces.ConditionalFormatUpdateData:interface" />
    - id: options
      description: Bietet eine Option zum Unterdrücken von Fehlern, wenn das Eigenschaftenobjekt versucht, schreibgeschützte Eigenschaften zu setzen.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.ConditionalFormat#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Legt mehrere Eigenschaften für das Objekt gleichzeitig fest, basierend auf einem vorhandenen geladenen Objekt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.ConditionalFormat): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.ConditionalFormat:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.ConditionalFormat#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: 'Überschreibt die JavaScript-Methode, um eine nützlichere Ausgabe zu ermöglichen, wenn `toJSON()` ein API-Objekt an `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->ruft wiederum die Methode `toJSON` des Objekts auf, das an das Objekt übergeben wird.) Während das ursprüngliche Excel.ConditionalFormat-Objekt ein API-Objekt ist, gibt die Methode ein einfaches `toJSON` JavaScript -Objekt zurück (Typ: `Excel.Interfaces.ConditionalFormatData`<!-- -->), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ConditionalFormatData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: e1e93385a6378d14e4e7c40b6529977a3c9faa86
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49859859"
