### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
interfaces:
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    Erstellt eine neue Präsentation und öffnet sie. Optional kann die Präsentation vorab mit einer Base64-codierten pptx-Datei aufgefüllt werden.


    \[[API-Gruppe: PowerPointApi 1,1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: Optional. Die Base64-codierte pptx-Datei. Der Standardwert ist null.
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: Führt ein Batchskript aus, das Aktionen für das PowerPoint-Objektmodell mithilfe eines neuen RequestContext ausführt. Wenn das Promise-Objekt aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: batch
      description: Eine Funktion, die ein RequestContext-Element einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context. Sync ()"). Der context-Parameter vereinfacht Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-in und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist das RequestContext erforderlich, um Zugriff auf das PowerPoint-Objektmodell aus dem Add-in zu erhalten.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: Führt ein Batchskript aus, das Aktionen für das PowerPoint-Objektmodell ausführt, wobei das RequestContext-Objekt eines zuvor erstellten API-Objekts verwendet wird. Wenn das Promise-Objekt aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: object
      description: Ein zuvor erstelltes API-Objekt. Der Batch verwendet dasselbe RequestContext wie das übergebene Objekt, was bedeutet, dass alle Änderungen, die auf das Objekt angewendet werden, von "context. Sync ()" übernommen werden.
      type: <xref uid="powerpoint!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Eine Funktion, die ein RequestContext-Element einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context. Sync ()"). Der context-Parameter vereinfacht Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-in und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist das RequestContext erforderlich, um Zugriff auf das PowerPoint-Objektmodell aus dem Add-in zu erhalten.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: Führt ein Batchskript aus, das Aktionen für das PowerPoint-Objektmodell mithilfe des RequestContext-Objekts der zuvor erstellten API-Objekte ausführt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: objects
      description: Ein Array von zuvor erstellten API-Objekten. Das Array wird überprüft, um sicherzustellen, dass alle Objekte denselben Kontext aufweisen. Der Batch verwendet dieses freigegebene RequestContext, was bedeutet, dass alle Änderungen, die auf diese Objekte angewendet werden, von "context. Sync ()" übernommen werden.
      type: <xref uid="powerpoint!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Eine Funktion, die ein RequestContext-Element einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context. Sync ()"). Der context-Parameter vereinfacht Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-in und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist das RequestContext erforderlich, um Zugriff auf das PowerPoint-Objektmodell aus dem Add-in zu erhalten.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 3e5b024651dd5d1d211168d7cd1339dd58b6d7bd
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49263645"
