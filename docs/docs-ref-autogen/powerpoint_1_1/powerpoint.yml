### YamlMime:UniversalReference
items:
  - uid: powerpoint!
    name: powerpoint
    fullName: powerpoint
    langs:
      - typeScript
    type: package
    children:
      - 'powerpoint!PowerPoint.Application:class'
      - 'powerpoint!PowerPoint.createPresentation:function(1)'
      - 'powerpoint!PowerPoint.ErrorCodes:enum'
      - 'powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface'
      - 'powerpoint!PowerPoint.Interfaces.PresentationData:interface'
      - 'powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface'
      - 'powerpoint!PowerPoint.Presentation:class'
      - 'powerpoint!PowerPoint.RequestContext:class'
      - 'powerpoint!PowerPoint.run:function(1)'
      - 'powerpoint!PowerPoint.run:function(2)'
      - 'powerpoint!PowerPoint.run:function(3)'
  - uid: 'powerpoint!PowerPoint.createPresentation:function(1)'
    summary: |-
      Erstellt eine neue Präsentation und öffnet sie. Optional kann die Präsentation vorab mit einer Base64-codierten pptx-Datei aufgefüllt werden.

      \[[API-Gruppe: PowerPointApi 1,1](/office/dev/add-ins/reference/javascript-api-for-office)\]
    name: PowerPoint.createPresentation(base64File)
    fullName: PowerPoint.createPresentation(base64File)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function createPresentation(base64File?: string): Promise<void>;'
      return:
        type:
          - 'powerpoint!PowerPoint.createPresentation~0:complex'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          var myFile = document.getElementById("file");
          var reader = new FileReader();

          reader.onload = function (event) {
              // strip off the metadata before the base64-encoded string
              var startIndex = event.target.result.indexOf("base64,");
              var copyBase64 = event.target.result.substr(startIndex + 7);

              PowerPoint.createPresentation(copyBase64);        
          };

          // read in the file as a data URL so we can parse the base64-encoded string
          reader.readAsDataURL(myFile.files[0]);
          ```
      parameters:
        - id: base64File
          description: Optional. Die Base64-codierte pptx-Datei. Der Standardwert ist null.
          type:
            - string
  - uid: 'powerpoint!PowerPoint.run:function(1)'
    summary: 'Führt ein Batchskript aus, das Aktionen für das PowerPoint-Objektmodell mithilfe eines neuen RequestContext ausführt. Wenn das Promise-Objekt aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.'
    name: PowerPoint.run(batch)
    fullName: PowerPoint.run(batch)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
      return:
        type:
          - 'powerpoint!PowerPoint.run~0:complex'
        description: ''
      parameters:
        - id: batch
          description: 'Eine Funktion, die ein RequestContext-Element einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context. Sync ()"). Der context-Parameter vereinfacht Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-in und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist das RequestContext erforderlich, um Zugriff auf das PowerPoint-Objektmodell aus dem Add-in zu erhalten.'
          type:
            - 'powerpoint!PowerPoint.run~1:complex'
      typeParameters:
        - id: T
  - uid: 'powerpoint!PowerPoint.run:function(2)'
    summary: 'Führt ein Batchskript aus, das Aktionen für das PowerPoint-Objektmodell ausführt, wobei das RequestContext-Objekt eines zuvor erstellten API-Objekts verwendet wird. Wenn das Promise-Objekt aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.'
    name: 'PowerPoint.run(object, batch)'
    fullName: 'PowerPoint.run(object, batch)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
      return:
        type:
          - 'powerpoint!PowerPoint.run~2:complex'
        description: ''
      parameters:
        - id: object
          description: 'Ein zuvor erstelltes API-Objekt. Der Batch verwendet dasselbe RequestContext wie das übergebene Objekt, was bedeutet, dass alle Änderungen, die auf das Objekt angewendet werden, von "context. Sync ()" übernommen werden.'
          type:
            - 'powerpoint!OfficeExtension.ClientObject:class'
        - id: batch
          description: 'Eine Funktion, die ein RequestContext-Element einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context. Sync ()"). Der context-Parameter vereinfacht Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-in und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist das RequestContext erforderlich, um Zugriff auf das PowerPoint-Objektmodell aus dem Add-in zu erhalten.'
          type:
            - 'powerpoint!PowerPoint.run~3:complex'
      typeParameters:
        - id: T
  - uid: 'powerpoint!PowerPoint.run:function(3)'
    summary: 'Führt ein Batchskript aus, das Aktionen für das PowerPoint-Objektmodell mithilfe des RequestContext-Objekts der zuvor erstellten API-Objekte ausführt.'
    name: 'PowerPoint.run(objects, batch)'
    fullName: 'PowerPoint.run(objects, batch)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
      return:
        type:
          - 'powerpoint!PowerPoint.run~4:complex'
        description: ''
      parameters:
        - id: objects
          description: 'Ein Array von zuvor erstellten API-Objekten. Das Array wird überprüft, um sicherzustellen, dass alle Objekte denselben Kontext aufweisen. Der Batch verwendet dieses freigegebene RequestContext, was bedeutet, dass alle Änderungen, die auf diese Objekte angewendet werden, von "context. Sync ()" übernommen werden.'
          type:
            - 'powerpoint!PowerPoint.run~5:complex'
        - id: batch
          description: 'Eine Funktion, die ein RequestContext-Element einnimmt und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context. Sync ()"). Der context-Parameter vereinfacht Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-in und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist das RequestContext erforderlich, um Zugriff auf das PowerPoint-Objektmodell aus dem Add-in zu erhalten.'
          type:
            - 'powerpoint!PowerPoint.run~6:complex'
      typeParameters:
        - id: T
references:
  - uid: 'powerpoint!PowerPoint.Application:class'
    name: PowerPoint.Application
  - uid: 'powerpoint!PowerPoint.createPresentation~0:complex'
    name: Promise<void>
    fullName: Promise<void>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <void>
        fullName: <void>
  - uid: 'powerpoint!PowerPoint.ErrorCodes:enum'
    name: PowerPoint.ErrorCodes
  - uid: 'powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface'
    name: PowerPoint.Interfaces.CollectionLoadOptions
  - uid: 'powerpoint!PowerPoint.Interfaces.PresentationData:interface'
    name: PowerPoint.Interfaces.PresentationData
  - uid: 'powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface'
    name: PowerPoint.Interfaces.PresentationLoadOptions
  - uid: 'powerpoint!PowerPoint.Presentation:class'
    name: PowerPoint.Presentation
  - uid: 'powerpoint!PowerPoint.RequestContext:class'
    name: PowerPoint.RequestContext
  - uid: 'powerpoint!PowerPoint.run~0:complex'
    name: OfficeExtension.IPromise<T>
    fullName: OfficeExtension.IPromise<T>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~1:complex'
    name: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    fullName: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    spec.typeScript:
      - name: '(context: '
        fullName: '(context: '
      - uid: 'powerpoint!PowerPoint.RequestContext:class'
        name: PowerPoint.RequestContext
        fullName: PowerPoint.RequestContext
      - name: ') => '
        fullName: ') => '
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~2:complex'
    name: OfficeExtension.IPromise<T>
    fullName: OfficeExtension.IPromise<T>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'powerpoint!PowerPoint.run~3:complex'
    name: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    fullName: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    spec.typeScript:
      - name: '(context: '
        fullName: '(context: '
      - uid: 'powerpoint!PowerPoint.RequestContext:class'
        name: PowerPoint.RequestContext
        fullName: PowerPoint.RequestContext
      - name: ') => '
        fullName: ') => '
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~4:complex'
    name: OfficeExtension.IPromise<T>
    fullName: OfficeExtension.IPromise<T>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~5:complex'
    name: 'OfficeExtension.ClientObject[]'
    fullName: 'OfficeExtension.ClientObject[]'
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.ClientObject:class'
        name: OfficeExtension.ClientObject
        fullName: OfficeExtension.ClientObject
      - name: '[]'
        fullName: '[]'
  - uid: 'powerpoint!PowerPoint.run~6:complex'
    name: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    fullName: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    spec.typeScript:
      - name: '(context: '
        fullName: '(context: '
      - uid: 'powerpoint!PowerPoint.RequestContext:class'
        name: PowerPoint.RequestContext
        fullName: PowerPoint.RequestContext
      - name: ') => '
        fullName: ') => '
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>