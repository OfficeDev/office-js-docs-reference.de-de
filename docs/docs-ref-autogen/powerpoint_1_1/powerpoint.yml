### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
interfaces:
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideData:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    Erstellt und öffnet eine neue Präsentation. Optional kann die Präsentation vorab mit einer base64-codierten .pptx-Datei aufgefüllt werden.


    \[[API-Satz: PowerPointApi 1.1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: Optional. Die base64-codierte PPTX-Datei. Der Standardwert ist null.
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: Führt mithilfe eines neuen RequestContext ein Batchskript aus, das Aktionen im PowerPoint-Objektmodell ausführt. Wenn die Zusage aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: batch
      description: Eine Funktion, die einen RequestContext verwendet und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Der Kontextparameter erleichtert Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-In und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist der RequestContext erforderlich, um zugriff auf das PowerPoint-Objektmodell aus dem Add-In zu erhalten.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: Führt ein Batchskript aus, das Aktionen im PowerPoint-Objektmodell mithilfe des RequestContext eines zuvor erstellten API-Objekts ausführt. Wenn die Zusage aufgelöst wird, werden alle nachverfolgten Objekte freigegeben, die während der Ausführung automatisch zugewiesen wurden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: object
      description: Ein zuvor erstelltes API-Objekt. Der Batch verwendet denselben RequestContext wie das übergebene Objekt, was bedeutet, dass alle änderungen, die auf das Objekt angewendet werden, von "context.sync()" übernommen werden.
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Eine Funktion, die einen RequestContext verwendet und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Der Kontextparameter erleichtert Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-In und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist der RequestContext erforderlich, um zugriff auf das PowerPoint-Objektmodell aus dem Add-In zu erhalten.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: Führt ein Batchskript aus, das Aktionen im PowerPoint-Objektmodell mithilfe des RequestContext von zuvor erstellten API-Objekten ausführt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: objects
      description: Ein Array von zuvor erstellten API-Objekten. Das Array wird überprüft, um sicherzustellen, dass alle Objekte denselben Kontext verwenden. Der Batch verwendet diesen freigegebenen RequestContext, was bedeutet, dass alle Änderungen, die auf diese Objekte angewendet werden, von "context.sync()" übernommen werden.
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Eine Funktion, die einen RequestContext verwendet und eine Zusage zurückgibt (in der Regel nur das Ergebnis von "context.sync()"). Der Kontextparameter erleichtert Anforderungen an die PowerPoint-Anwendung. Da das Office-Add-In und die PowerPoint-Anwendung in zwei verschiedenen Prozessen ausgeführt werden, ist der RequestContext erforderlich, um zugriff auf das PowerPoint-Objektmodell aus dem Add-In zu erhalten.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="office!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: c6b8470ca774ffdb8d14fae40e03d6469b5de9fe
  ms.sourcegitcommit: f229afdd4c2bc820ac799394a77b637fc66e87b4
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 01/27/2021
  ms.locfileid: "49992231"
