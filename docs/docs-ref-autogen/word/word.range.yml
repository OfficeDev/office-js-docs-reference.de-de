### YamlMime:UniversalReference
ms.openlocfilehash: d93d2caad6ef748a1c069f87ae62c7a35ccf30ef
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/13/2019
ms.locfileid: "29980737"
items:
- uid: word.Word.Range
  summary: >-
    Stellt einen zusammenhängenden Bereich in einem Dokument dar.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: Word.Range
  fullName: Word.Range
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.Range.clear
  - word.Word.Range.compareLocationWith
  - word.Word.Range.contentControls
  - word.Word.Range.context
  - word.Word.Range.delete
  - word.Word.Range.expandTo
  - word.Word.Range.expandToOrNullObject
  - word.Word.Range.font
  - word.Word.Range.getHtml
  - word.Word.Range.getHyperlinkRanges
  - word.Word.Range.getNextTextRange
  - word.Word.Range.getNextTextRangeOrNullObject
  - word.Word.Range.getOoxml
  - word.Word.Range.getRange
  - word.Word.Range.getRange_1
  - word.Word.Range.getTextRanges
  - word.Word.Range.hyperlink
  - word.Word.Range.inlinePictures
  - word.Word.Range.insertBreak
  - word.Word.Range.insertBreak_1
  - word.Word.Range.insertContentControl
  - word.Word.Range.insertFileFromBase64
  - word.Word.Range.insertFileFromBase64_1
  - word.Word.Range.insertHtml
  - word.Word.Range.insertHtml_1
  - word.Word.Range.insertInlinePictureFromBase64
  - word.Word.Range.insertInlinePictureFromBase64_1
  - word.Word.Range.insertOoxml
  - word.Word.Range.insertOoxml_1
  - word.Word.Range.insertParagraph
  - word.Word.Range.insertParagraph_1
  - word.Word.Range.insertTable
  - word.Word.Range.insertTable_1
  - word.Word.Range.insertText
  - word.Word.Range.insertText_1
  - word.Word.Range.intersectWith
  - word.Word.Range.intersectWithOrNullObject
  - word.Word.Range.isEmpty
  - word.Word.Range.lists
  - word.Word.Range.load
  - word.Word.Range.load_1
  - word.Word.Range.load_2
  - word.Word.Range.paragraphs
  - word.Word.Range.parentBody
  - word.Word.Range.parentContentControl
  - word.Word.Range.parentContentControlOrNullObject
  - word.Word.Range.parentTable
  - word.Word.Range.parentTableCell
  - word.Word.Range.parentTableCellOrNullObject
  - word.Word.Range.parentTableOrNullObject
  - word.Word.Range.search
  - word.Word.Range.select
  - word.Word.Range.select_1
  - word.Word.Range.set
  - word.Word.Range.set_1
  - word.Word.Range.split
  - word.Word.Range.style
  - word.Word.Range.styleBuiltIn
  - word.Word.Range.tables
  - word.Word.Range.text
  - word.Word.Range.toJSON
  - word.Word.Range.track
  - word.Word.Range.untrack
- uid: word.Word.Range.clear
  summary: >-
    Löscht den Inhalt des Bereichsobjekts. Der Benutzer kann den Rückgängig-Vorgang auf den gelöschten Inhalt durchführen.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: clear()
  fullName: clear()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to clear the contents of the proxy range object.\n    range.clear();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Cleared the selection (range object)');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Range.compareLocationWith
  summary: >-
    Vergleicht die Position dieses Bereichs mit der eines anderen Bereichs.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: compareLocationWith(range)
  fullName: compareLocationWith(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'compareLocationWith(range: Word.Range): OfficeExtension.ClientResult<Word.LocationRelation>;'
    return:
      type:
      - OfficeExtension.ClientResult<Word.LocationRelation>
      description: ''
    parameters:
    - id: range
      description: Erforderlich. Der Bereich, der mit diesem Bereich verglichen werden soll.
      type:
      - Word.Range
- uid: word.Word.Range.contentControls
  summary: >-
    Ruft die Sammlung von Inhaltssteuerelement-Objekten im Bereich ab. Schreibgeschützt.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: contentControls
  fullName: contentControls
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly contentControls: Word.ContentControlCollection;'
    return:
      type:
      - word.Word.ContentControlCollection
- uid: word.Word.Range.context
  summary: Der Anforderungskontext-zugeordnet. Dadurch wird das Add-in Prozess mit der Office-hostanwendung Prozess verbunden.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: word.Word.Range.delete
  summary: >-
    Löscht den Bereich und seinen Inhalt aus dem Dokument.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to delete the range object.\n    range.delete();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Deleted the selection (range object)');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Range.expandTo
  summary: >-
    Gibt einen neuen Bereich zurück, der diesen Bereich in beide Richtungen erweitert, um einen anderen Bereich zu überdecken. Dieser Bereich wird nicht geändert. Wird ausgelöst, wenn die beiden Bereiche keine Vereinigung haben.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: expandTo(range)
  fullName: expandTo(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'expandTo(range: Word.Range): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: range
      description: Erforderlich. Ein anderer Bereich.
      type:
      - Word.Range
- uid: word.Word.Range.expandToOrNullObject
  summary: >-
    Gibt einen neuen Bereich zurück, der diesen Bereich in beide Richtungen erweitert, um einen anderen Bereich zu überdecken. Dieser Bereich wird nicht geändert. Gibt ein NULL-Objekt zurück, wenn die beiden Bereiche keine Vereinigung haben.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: expandToOrNullObject(range)
  fullName: expandToOrNullObject(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'expandToOrNullObject(range: Word.Range): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: range
      description: Erforderlich. Ein anderer Bereich.
      type:
      - Word.Range
- uid: word.Word.Range.font
  summary: >-
    Ruft das Textformat des Bereichs ab. Verwenden Sie diese Option zum Abrufen und Festlegen des Schriftartnamens, der Größe, Farbe und anderer Eigenschaften. Schreibgeschützt.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: font
  fullName: font
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly font: Word.Font;'
    return:
      type:
      - word.Word.Font
- uid: word.Word.Range.getHtml
  summary: >-
    Ruft eine HTML-Darstellung des Range-Objekts ab. Wenn in einer Webseite oder HTML-Viewer gerendert wird, wird die Formatierung einer schließen, aber nicht genau, die Formatierung des Dokuments entsprechen. Diese Methode gibt den genauen gleichen HTML-Code für dasselbe Dokument nicht auf verschiedenen Plattformen (Windows, Mac, Word Online usw.) zurück. Wenn Sie Fidelity oder Konsistenz plattformübergreifend exakte müssen, verwenden Sie `Range.getOoxml()` und konvertieren Sie das zurückgegebene XML in HTML.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getHtml()
  fullName: getHtml()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getHtml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to get the HTML of the current selection.\n    var html = range.getHtml();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('The HTML read from the document was: ' + html.value);\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Range.getHyperlinkRanges
  summary: >-
    Ruft untergeordnete Linkbereiche innerhalb des Bereichs ab.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getHyperlinkRanges()
  fullName: getHyperlinkRanges()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getHyperlinkRanges(): Word.RangeCollection;'
    return:
      type:
      - word.Word.RangeCollection
      description: ''
- uid: word.Word.Range.getNextTextRange
  summary: >-
    Der nächste Textbereich mithilfe von Interpunktionszeichen und/oder anderen ruft markiert endet. Löst, wenn die letzte dieser Textbereich ist.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getNextTextRange(endingMarks, trimSpacing)
  fullName: getNextTextRange(endingMarks, trimSpacing)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextTextRange(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: endingMarks
      description: Erforderlich. Die Satzzeichen und/oder andere Endemarken als Array aus Zeichenfolgen.
      type:
      - string[]
    - id: trimSpacing
      description: Optional. Gibt an, ob trim gesperrte Zeichen (Leerzeichen, Registerkarten, Spalten- und Absatzmarken End) am Anfang und Ende des zurückgegebenen Bereichs. Standard ist false, was bedeutet, dass gesperrte Zeichen am Anfang und Ende des Bereichs enthalten sind.
      type:
      - boolean
- uid: word.Word.Range.getNextTextRangeOrNullObject
  summary: >-
    Der nächste Textbereich mithilfe von Interpunktionszeichen und/oder anderen ruft markiert endet. Gibt ein null-Objekt zurück, wenn die letzte dieser Textbereich ist.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getNextTextRangeOrNullObject(endingMarks, trimSpacing)
  fullName: getNextTextRangeOrNullObject(endingMarks, trimSpacing)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextTextRangeOrNullObject(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: endingMarks
      description: Erforderlich. Die Satzzeichen und/oder andere Endemarken als Array aus Zeichenfolgen.
      type:
      - string[]
    - id: trimSpacing
      description: Optional. Gibt an, ob trim gesperrte Zeichen (Leerzeichen, Registerkarten, Spalten- und Absatzmarken End) am Anfang und Ende des zurückgegebenen Bereichs. Standard ist false, was bedeutet, dass gesperrte Zeichen am Anfang und Ende des Bereichs enthalten sind.
      type:
      - boolean
- uid: word.Word.Range.getOoxml
  summary: >-
    Ruft die OOXML-Darstellung des Bereichsobjekts ab.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getOoxml()
  fullName: getOoxml()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to get the OOXML of the current selection.\n    var ooxml = range.getOoxml();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('The OOXML read from the document was:  ' + ooxml.value);\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: word.Word.Range.getRange
  summary: >-
    Klont den Bereich oder ruft den Anfangs- bzw. Endpunkt des Bereichs als neuen Bereich ab.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getRange(rangeLocation)
  fullName: getRange(rangeLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: rangeLocation
      description: Optional. Die Position des Bereichs kann 'ganze","Start","End"'Nach' oder 'Content' sein.
      type:
      - word.Word.RangeLocation
- uid: word.Word.Range.getRange_1
  summary: >-
    Klont den Bereich oder ruft den Anfangs- bzw. Endpunkt des Bereichs als neuen Bereich ab.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getRange(rangeLocationString)
  fullName: getRange(rangeLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(rangeLocationString?: "Whole" | "Start" | "End" | "Before" | "After" | "Content"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: rangeLocationString
      description: Optional. Die Position des Bereichs kann 'ganze","Start","End"'Nach' oder 'Content' sein.
      type:
      - "\"Whole\" | \"Start\" | \"End\" | \"Before\" | \"After\" | \"Content\""
- uid: word.Word.Range.getTextRanges
  summary: >-
    Ruft den Text untergeordneten Bereiche im Bereich mithilfe von Interpunktionszeichen und/oder anderen Enddatum markiert.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: getTextRanges(endingMarks, trimSpacing)
  fullName: getTextRanges(endingMarks, trimSpacing)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - word.Word.RangeCollection
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Word.run(async (context) => {\n    // Gets the complete sentence (as range) associated with the insertion point.\n    let sentences = context.document.getSelection().getTextRanges(\n        [\".\"] /* Using the \".\" as delimiter */,\n        false /*means without trimming spaces*/);\n    sentences.load(\"$none\");\n    await context.sync();\n\n    // Expands the range to the end of the paragraph to get all the complete sentences.\n    let sentencesToTheEndOfParagraph = sentences.items[0].getRange().expandTo(\n        context.document.getSelection().paragraphs.getFirst().getRange(\"End\")).getTextRanges(\n            [\".\"],\n             false /* Don't trim spaces*/);\n    sentencesToTheEndOfParagraph.load(\"text\");\n    await context.sync();\n    \n    for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {\n        console.log(sentencesToTheEndOfParagraph.items[i].text);\n    }\n});\n```"
    parameters:
    - id: endingMarks
      description: Erforderlich. Die Satzzeichen und/oder andere Endemarken als Array aus Zeichenfolgen.
      type:
      - string[]
    - id: trimSpacing
      description: Optional. Gibt an, ob trim gesperrte Zeichen (Leerzeichen, Registerkarten, Spalten- und Absatzmarken End) am Anfang und Ende der Bereiche in der Range-Auflistung zurückgegeben. Standard ist false gibt an, dass gesperrte Zeichen am Anfang und Ende der Bereiche in der Range-Auflistung enthalten sind.
      type:
      - boolean
- uid: word.Word.Range.hyperlink
  summary: >-
    Ruft den ersten Hyperlink im Bereich oder einen Hyperlink für den Bereich festlegt. Wenn Sie einen neuen Hyperlink für den Bereich festlegen, werden alle Hyperlinks im Bereich gelöscht. Verwenden einer "\#", den Adressteil aus dem optionalen Speicherort Teil zu trennen.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: hyperlink
  fullName: hyperlink
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hyperlink: string;'
    return:
      type:
      - string
- uid: word.Word.Range.inlinePictures
  summary: >-
    Ruft die Sammlung von Inlinebildobjekten im Bereich ab. Schreibgeschützt.


    \[[API-Satz: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: inlinePictures
  fullName: inlinePictures
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly inlinePictures: Word.InlinePictureCollection;'
    return:
      type:
      - word.Word.InlinePictureCollection
- uid: word.Word.Range.insertBreak
  summary: >-
    Fügt an der angegebenen Position im Hauptdokument einen Umbruch ein. Der insertLocation-Wert kann "Before" oder "After" lauten.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertBreak(breakType, insertLocation)
  fullName: insertBreak(breakType, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: breakType
      description: Erforderlich. Der Typ des Seitenumbruchs hinzufügen.
      type:
      - word.Word.BreakType
    - id: insertLocation
      description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertBreak_1
  summary: >-
    Fügt an der angegebenen Position im Hauptdokument einen Umbruch ein. Der insertLocation-Wert kann "Before" oder "After" lauten.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertBreak(breakTypeString, insertLocation)
  fullName: insertBreak(breakTypeString, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert a page break after the selected text.\n    range.insertBreak('page', 'After');\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Inserted a page break after the selected text.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: breakTypeString
      description: Erforderlich. Der Typ des Seitenumbruchs hinzufügen.
      type:
      - "\"Page\" | \"Next\" | \"SectionNext\" | \"SectionContinuous\" | \"SectionEven\" | \"SectionOdd\" | \"Line\""
    - id: insertLocation
      description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertContentControl
  summary: >-
    Umschließt das Bereichsobjekt mit einem Rich-Text-Inhaltssteuerelement.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertContentControl()
  fullName: insertContentControl()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertContentControl(): Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert a content control around the selected text,\n    // and create a proxy content control object. We'll update the properties\n    // on the content control.\n    var myContentControl = range.insertContentControl();\n    myContentControl.tag = \"Customer-Address\";\n    myContentControl.title = \"Enter Customer Address Here:\";\n    myContentControl.style = \"Normal\";\n    myContentControl.insertText(\"One Microsoft Way, Redmond, WA 98052\", 'replace');\n    myContentControl.cannotEdit = true;\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Wrapped a content control around the selected text.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Word.run(async (context) => {\n    let results = context.document.body.search(\"Contractor\");\n    results.load(\"font/bold\");\n\n    // check to make sure we haven't added these content controls yet\n    let customerContentControls = context.document.contentControls.getByTag(\"customer\");\n    customerContentControls.load(\"text\");\n    await context.sync();\n\n  if (customerContentControls.items.length === 0) {\n    for (var i = 0; i < results.items.length; i++) { \n        results.items[i].font.bold = true;\n        var cc = results.items[i].insertContentControl();\n        cc.tag = \"customer\";  // This value is used in the next step of this sample.\n        cc.title = \"Customer Name \" + i;\n    }\n  }\n    await context.sync();\n});\n```"
- uid: word.Word.Range.insertFileFromBase64
  summary: >-
    Fügt ein Dokument an der angegebenen Position ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertFileFromBase64(base64File, insertLocation)
  fullName: insertFileFromBase64(base64File, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert base64 encoded .docx at the beginning of the range.\n    // You'll need to implement getBase64() to make this work.\n    range.insertFileFromBase64(getBase64(), Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Added base64 encoded text to the beginning of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: base64File
      description: Erforderlich. Der base64-codierte Inhalt einer DOCX-Datei.
      type:
      - string
    - id: insertLocation
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertFileFromBase64_1
  summary: >-
    Fügt ein Dokument an der angegebenen Position ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertFileFromBase64(base64File, insertLocationString)
  fullName: insertFileFromBase64(base64File, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: base64File
      description: Erforderlich. Der base64-codierte Inhalt einer DOCX-Datei.
      type:
      - string
    - id: insertLocationString
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertHtml
  summary: >-
    Fügt HTML an der angegebenen Position ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertHtml(html, insertLocation)
  fullName: insertHtml(html, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert HTML in to the beginning of the range.\n    range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('HTML added to the beginning of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: html
      description: Erforderlich. Der einzufügende HTML-Code.
      type:
      - string
    - id: insertLocation
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertHtml_1
  summary: >-
    Fügt HTML an der angegebenen Position ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertHtml(html, insertLocationString)
  fullName: insertHtml(html, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: html
      description: Erforderlich. Der einzufügende HTML-Code.
      type:
      - string
    - id: insertLocationString
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertInlinePictureFromBase64
  summary: >-
    Fügt ein Bild an der angegebenen Position ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  fullName: insertInlinePictureFromBase64(base64EncodedImage, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
    return:
      type:
      - word.Word.InlinePicture
      description: ''
    parameters:
    - id: base64EncodedImage
      description: Erforderlich. Das base64-codierte Bild, das eingefügt werden soll.
      type:
      - string
    - id: insertLocation
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertInlinePictureFromBase64_1
  summary: >-
    Fügt ein Bild an der angegebenen Position ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)
  fullName: insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
    return:
      type:
      - word.Word.InlinePicture
      description: ''
    parameters:
    - id: base64EncodedImage
      description: Erforderlich. Das base64-codierte Bild, das eingefügt werden soll.
      type:
      - string
    - id: insertLocationString
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertOoxml
  summary: >-
    Fügt an der angegebenen Position OOXML-Code ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertOoxml(ooxml, insertLocation)
  fullName: insertOoxml(ooxml, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert OOXML in to the beginning of the range.\n    range.insertOoxml(\"<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>\", Word.InsertLocation.start);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('OOXML added to the beginning of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n\n// Read \"Create better add-ins for Word with Office Open XML\" for guidance on working with OOXML.\n// https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml\n```"
    parameters:
    - id: ooxml
      description: Erforderlich. Der einzufügende OOXML-Code.
      type:
      - string
    - id: insertLocation
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertOoxml_1
  summary: >-
    Fügt an der angegebenen Position OOXML-Code ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertOoxml(ooxml, insertLocationString)
  fullName: insertOoxml(ooxml, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: ooxml
      description: Erforderlich. Der einzufügende OOXML-Code.
      type:
      - string
    - id: insertLocationString
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertParagraph
  summary: >-
    Fügt an der angegebenen Position einen Absatz ein. Der insertLocation-Wert kann 'Before' oder 'After' lauten.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertParagraph(paragraphText, insertLocation)
  fullName: insertParagraph(paragraphText, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert the paragraph after the range.\n    range.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Paragraph added to the end of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: paragraphText
      description: Erforderlich. Der einzufügende Absatztext.
      type:
      - string
    - id: insertLocation
      description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertParagraph_1
  summary: >-
    Fügt an der angegebenen Position einen Absatz ein. Der insertLocation-Wert kann 'Before' oder 'After' lauten.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertParagraph(paragraphText, insertLocationString)
  fullName: insertParagraph(paragraphText, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
    return:
      type:
      - Word.Paragraph
      description: ''
    parameters:
    - id: paragraphText
      description: Erforderlich. Der einzufügende Absatztext.
      type:
      - string
    - id: insertLocationString
      description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.insertTable
  summary: >-
    Fügt eine Tabelle mit der angegebenen Anzahl von Zeilen und Spalten ein. Der insertLocation-Wert kann "Before" oder "After" lauten.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertTable(rowCount, columnCount, insertLocation, values)
  fullName: insertTable(rowCount, columnCount, insertLocation, values)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
    return:
      type:
      - Word.Table
      description: ''
    parameters:
    - id: rowCount
      description: Erforderlich. Die Anzahl der Zeilen in der Tabelle.
      type:
      - number
    - id: columnCount
      description: Erforderlich. Die Anzahl der Spalten in der Tabelle.
      type:
      - number
    - id: insertLocation
      description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
      type:
      - Word.InsertLocation
    - id: values
      description: Optionales 2D-Array. Wenn die entsprechenden Zeichenfolgen im Array angegeben sind, werden die Zellen gefüllt.
      type:
      - string[][]
- uid: word.Word.Range.insertTable_1
  summary: >-
    Fügt eine Tabelle mit der angegebenen Anzahl von Zeilen und Spalten ein. Der insertLocation-Wert kann "Before" oder "After" lauten.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertTable(rowCount, columnCount, insertLocationString, values)
  fullName: insertTable(rowCount, columnCount, insertLocationString, values)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertTable(rowCount: number, columnCount: number, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace", values?: string[][]): Word.Table;'
    return:
      type:
      - Word.Table
      description: ''
    parameters:
    - id: rowCount
      description: Erforderlich. Die Anzahl der Zeilen in der Tabelle.
      type:
      - number
    - id: columnCount
      description: Erforderlich. Die Anzahl der Spalten in der Tabelle.
      type:
      - number
    - id: insertLocationString
      description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
    - id: values
      description: Optionales 2D-Array. Wenn die entsprechenden Zeichenfolgen im Array angegeben sind, werden die Zellen gefüllt.
      type:
      - string[][]
- uid: word.Word.Range.insertText
  summary: >-
    Fügt Text an der angegebenen Position ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertText(text, insertLocation)
  fullName: insertText(text, insertLocation)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
    return:
      type:
      - Word.Range
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert the paragraph at the end of the range.\n    range.insertText('New text inserted into the range.', Word.InsertLocation.end);\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Text added to the end of the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: text
      description: Erforderlich. Der einzufügende Text.
      type:
      - string
    - id: insertLocation
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - Word.InsertLocation
- uid: word.Word.Range.insertText_1
  summary: >-
    Fügt Text an der angegebenen Position ein. Der Wert InsertLocation kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: insertText(text, insertLocationString)
  fullName: insertText(text, insertLocationString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: text
      description: Erforderlich. Der einzufügende Text.
      type:
      - string
    - id: insertLocationString
      description: Erforderlich. Der Wert kann "Ersetzen", "Start", "End", "Vor" oder "Nach" sein.
      type:
      - "\"Before\" | \"After\" | \"Start\" | \"End\" | \"Replace\""
- uid: word.Word.Range.intersectWith
  summary: >-
    Gibt einen neuen Bereich als Schnittmenge dieses Bereichs mit einem anderen Bereich zurück. Dieser Bereich wird nicht geändert. Wird ausgelöst, wenn die beiden Bereiche sich nicht überlappen oder nicht angrenzend sind.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: intersectWith(range)
  fullName: intersectWith(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'intersectWith(range: Word.Range): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: range
      description: Erforderlich. Ein anderer Bereich.
      type:
      - Word.Range
- uid: word.Word.Range.intersectWithOrNullObject
  summary: >-
    Gibt einen neuen Bereich als Schnittmenge dieses Bereichs mit einem anderen Bereich zurück. Dieser Bereich wird nicht geändert. Gibt ein NULL-Objekt zurück, wenn die beiden Bereiche sich nicht überlappen oder nicht angrenzend sind.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: intersectWithOrNullObject(range)
  fullName: intersectWithOrNullObject(range)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'intersectWithOrNullObject(range: Word.Range): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: range
      description: Erforderlich. Ein anderer Bereich.
      type:
      - Word.Range
- uid: word.Word.Range.isEmpty
  summary: >-
    Überprüft, ob die Länge des Bereichs 0 ist. Schreibgeschützt.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: isEmpty
  fullName: isEmpty
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEmpty: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.Range.lists
  summary: >-
    Ruft die Sammlung von Listenobjekten im Bereich ab. Schreibgeschützt.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: lists
  fullName: lists
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly lists: Word.ListCollection;'
    return:
      type:
      - word.Word.ListCollection
- uid: word.Word.Range.load
  summary: Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.
  remarks: >-
    Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:


    `load(option?: string | string[]): Word.Range`-Wo Option ist eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.


    `load(option?: { select?: string; expand?: string; }): Word.Range`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Range`-Nur auf Auflistungstypen verfügbar. Es ist ähnlich wie die jeweils vorhergehende Signatur. Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können. Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen. Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Word.Interfaces.RangeLoadOptions): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Word.Interfaces.RangeLoadOptions
- uid: word.Word.Range.load_1
  summary: Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen Aufrufen `context.sync()` vor dem Lesen der Eigenschaften.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: propertyNames
      description: Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.
      type:
      - string | string[]
- uid: word.Word.Range.load_2
  summary: Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen Aufrufen `context.sync()` vor dem Lesen der Eigenschaften.
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: Wobei propertyNamesAndPaths.select ist eine durch Kommas getrennte Zeichenfolge, die angibt, die Eigenschaften zum Laden und propertyNamesAndPaths.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.
      type:
      - '{ select?: string; expand?: string; }'
- uid: word.Word.Range.paragraphs
  summary: >-
    Ruft die Sammlung von Paragraph-Objekten im Bereich ab. Schreibgeschützt.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: paragraphs
  fullName: paragraphs
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly paragraphs: Word.ParagraphCollection;'
    return:
      type:
      - Word.ParagraphCollection
- uid: word.Word.Range.parentBody
  summary: >-
    Ruft den übergeordneten Text des Bereichs ab. Schreibgeschützt.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentBody
  fullName: parentBody
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentBody: Word.Body;'
    return:
      type:
      - Word.Body
- uid: word.Word.Range.parentContentControl
  summary: >-
    Ruft das Inhaltssteuerelement ab, das den Bereich enthält. Wird ausgelöst, wenn kein übergeordnetes Inhaltssteuerelement vorhanden ist. Schreibgeschützt.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentContentControl
  fullName: parentContentControl
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControl: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.Range.parentContentControlOrNullObject
  summary: >-
    Ruft das Inhaltssteuerelement ab, das den Bereich enthält. Gibt ein NULL-Objekt zurück, wenn kein übergeordnetes Inhaltssteuerelement vorhanden ist. Schreibgeschützt.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentContentControlOrNullObject
  fullName: parentContentControlOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
    return:
      type:
      - word.Word.ContentControl
- uid: word.Word.Range.parentTable
  summary: >-
    Ruft die Tabelle ab, die den Bereich enthält. Wird ausgelöst, wenn das Objekt nicht in einer Tabelle enthalten ist. Schreibgeschützt.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTable
  fullName: parentTable
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTable: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.Range.parentTableCell
  summary: >-
    Ruft die Tabellenzelle ab, die den Bereich enthält. Wird ausgelöst, wenn das Objekt nicht in einer Tabellenzelle enthalten ist. Schreibgeschützt.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTableCell
  fullName: parentTableCell
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCell: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.Range.parentTableCellOrNullObject
  summary: >-
    Ruft die Tabellenzelle ab, die den Bereich enthält. Gibt ein NULL-Objekt zurück, wenn es nicht in einer Tabellenzelle enthalten ist. Schreibgeschützt.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTableCellOrNullObject
  fullName: parentTableCellOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
    return:
      type:
      - Word.TableCell
- uid: word.Word.Range.parentTableOrNullObject
  summary: >-
    Ruft die Tabelle ab, die den Bereich enthält. Gibt ein NULL-Objekt zurück, wenn das Objekt nicht in einer Tabelle enthalten ist. Schreibgeschützt.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: parentTableOrNullObject
  fullName: parentTableOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableOrNullObject: Word.Table;'
    return:
      type:
      - Word.Table
- uid: word.Word.Range.search
  summary: >-
    Führt eine Suche mit den angegebenen SearchOptions auf den Bereich des Range-Objekts. Die Suchergebnisse sind eine Auflistung von Range-Objekten.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: search(searchText, searchOptions)
  fullName: search(searchText, searchOptions)
  langs:
  - typeScript
  type: method
  syntax:
    content: >-
      search(searchText: string, searchOptions?: Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }): Word.RangeCollection;
    return:
      type:
      - word.Word.RangeCollection
      description: ''
    parameters:
    - id: searchText
      description: Erforderlich. Der Suchtext.
      type:
      - string
    - id: searchOptions
      description: Optional. Optionen für die Suche.
      type:
      - >-
        Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }
- uid: word.Word.Range.select
  summary: >-
    Wählt den Bereich aus und navigiert die Word-Benutzeroberfläche an diese Position.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: select(selectionMode)
  fullName: select(selectionMode)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(selectionMode?: Word.SelectionMode): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to get the current selection and then\n    // create a proxy range object with the results.\n    var range = context.document.getSelection();\n\n    // Queue a commmand to insert HTML in to the beginning of the range.\n    range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);\n\n    // Queue a command to select the HTML that was inserted.\n    range.select();\n\n    // Synchronize the document state by executing the queued commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Selected the range.');\n    });\n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: selectionMode
      description: Optional. Der Auswahlmodus kann „Select“, „Start“ oder „End“ sein. „Select“ ist die Standardeinstellung.
      type:
      - Word.SelectionMode
- uid: word.Word.Range.select_1
  summary: >-
    Wählt den Bereich aus und navigiert die Word-Benutzeroberfläche an diese Position.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: select(selectionModeString)
  fullName: select(selectionModeString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: selectionModeString
      description: Optional. Der Auswahlmodus kann „Select“, „Start“ oder „End“ sein. „Select“ ist die Standardeinstellung.
      type:
      - "\"Select\" | \"Start\" | \"End\""
- uid: word.Word.Range.set
  summary: Legt mehrere Eigenschaften eines Objekts zur selben Zeit fest. Sie können entweder eine einfache-Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt des gleichen Typs übergeben.
  remarks: >-
    Diese Methode hat die folgenden zusätzliche Signatur:


    `set(properties: Word.Range): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: Ein JavaScript-Objekt mit Eigenschaften, die an die Eigenschaften des Objekts isomorphically strukturiert werden, auf denen die Methode aufgerufen wird.
      type:
      - Interfaces.RangeUpdateData
    - id: options
      description: Bietet eine Option, um Fehler zu unterdrücken, wenn schreibgeschützte Eigenschaften festgelegt werden, versucht das Properties-Objekt.
      type:
      - office.OfficeExtension.UpdateOptions
- uid: word.Word.Range.set_1
  summary: Mehrere Eigenschaften festgelegt auf das Objekt zur selben Zeit, basierend auf einem vorhandenen geladen-Objekt.
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Word.Range): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - Word.Range
- uid: word.Word.Range.split
  summary: >-
    Teilt den Bereich mithilfe von Trennzeichen in untergeordnete Bereiche.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)
  fullName: split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
    return:
      type:
      - word.Word.RangeCollection
      description: ''
    parameters:
    - id: delimiters
      description: Erforderlich. Die Trennzeichen als Array aus Zeichenfolgen.
      type:
      - string[]
    - id: multiParagraphs
      description: Optional. Gibt an, ob es sich bei den zurückgegebenen untergeordneten Bereich mehrere Absätze umfassen kann. Standard ist false gibt an, dass die Absatz Grenzen auch als Trennzeichen verwendet werden.
      type:
      - boolean
    - id: trimDelimiters
      description: Optional. Gibt an, ob trim Trennzeichen aus den Bereichen in der Range-Auflistung. Standard ist false gibt an, dass die Trennzeichen, in den Bereichen enthalten sind, die in der Range-Auflistung zurückgegeben.
      type:
      - boolean
    - id: trimSpacing
      description: Optional. Gibt an, ob trim gesperrte Zeichen (Leerzeichen, Registerkarten, Spalten- und Absatzmarken End) am Anfang und Ende der Bereiche in der Range-Auflistung zurückgegeben. Standard ist false gibt an, dass gesperrte Zeichen am Anfang und Ende der Bereiche in der Range-Auflistung enthalten sind.
      type:
      - boolean
- uid: word.Word.Range.style
  summary: >-
    Ruft den Namen der Formatvorlage für den Bereich ab oder legt ihn fest. Verwenden Sie diese Eigenschaft für benutzerdefinierte Formatvorlagen und lokalisierte Formatvorlagennamen. Informationen zur Verwendung der integrierten Formatvorlagen, die zwischen Gebietsschemas portabel sind, finden Sie unter der Eigenschaft „styleBuiltIn“.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: style
  fullName: style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
- uid: word.Word.Range.styleBuiltIn
  summary: >-
    Ruft den Namen der integrierten Formatvorlage für den Bereich ab oder legt ihn fest. Verwenden Sie diese Eigenschaft für integrierte Formatvorlagen, die zwischen Gebietsschemas portabel sind. Informationen zum Verwenden benutzerdefinierter Formatvorlagen oder lokalisierter Namen finden Sie unter der Eigenschaft "style".


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: styleBuiltIn
  fullName: styleBuiltIn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
    return:
      type:
      - Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
- uid: word.Word.Range.tables
  summary: >-
    Ruft die Sammlung von Tabellenobjekten im Bereich ab. Schreibgeschützt.


    \[[API-Satz: WordApi 1.3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: tables
  fullName: tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Word.TableCollection;'
    return:
      type:
      - Word.TableCollection
- uid: word.Word.Range.text
  summary: >-
    Ruft den Text des Bereichs ab. Schreibgeschützt.


    \[[API-Satz: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: text
  fullName: text
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly text: string;'
    return:
      type:
      - string
- uid: word.Word.Range.toJSON
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.RangeData;'
    return:
      type:
      - Word.Interfaces.RangeData
      description: ''
- uid: word.Word.Range.track
  summary: Nachverfolgen Sie das Objekt für die automatische Anpassung basierend auf Änderungen im Dokument umgebenden. Dieser Aufruf ist eine Abkürzung für context.trackedObjects.add(thisObject). Wenn Sie mithilfe dieses Objekts hinweg "Sync" Anrufe und außerhalb der sequenzielle Ausführung eines ".run" Batch und Get "InvalidObjectPath" Fehler beim Festlegen einer Eigenschaft oder Aufrufen einer Methode für das Objekt, mussten Sie das Objekt nachverfolgten Objekts hinzugefügt haben Auflistung, wenn das Objekt erstellt wurde.
  name: track()
  fullName: track()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
- uid: word.Word.Range.untrack
  summary: Lösen Sie den Speicher, die mit diesem Objekt verknüpft ist, wenn es zuvor erzeugt wurde. Dieses Anrufs ist die Abkürzung für context.trackedObjects.remove(thisObject). Viele nachverfolgte Objekte verlangsamt der Host-Anwendung, also denken Sie alle Objekte frei Sie hinzufügen, sobald Sie fertig sind deren Verwendung. Sie müssen "context.sync()" aufrufen, bevor die Speicher Version wirksam wird.
  name: untrack()
  fullName: untrack()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Word.Range;'
    return:
      type:
      - Word.Range
      description: ''
