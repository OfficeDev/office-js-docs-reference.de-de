### YamlMime:UniversalReference
items:
  - uid: word.Word.Range
    summary: |-
      Stellt einen zusammenhängenden Bereich in einem Dokument dar.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: Word.Range
    fullName: Word.Range
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: word
    children:
      - word.Word.Range.clear
      - word.Word.Range.compareLocationWith
      - word.Word.Range.contentControls
      - word.Word.Range.context
      - word.Word.Range.delete
      - word.Word.Range.expandTo
      - word.Word.Range.expandToOrNullObject
      - word.Word.Range.font
      - word.Word.Range.getHtml
      - word.Word.Range.getHyperlinkRanges
      - word.Word.Range.getNextTextRange
      - word.Word.Range.getNextTextRangeOrNullObject
      - word.Word.Range.getOoxml
      - word.Word.Range.getRange
      - word.Word.Range.getRange_1
      - word.Word.Range.getTextRanges
      - word.Word.Range.hyperlink
      - word.Word.Range.inlinePictures
      - word.Word.Range.insertBreak
      - word.Word.Range.insertBreak_1
      - word.Word.Range.insertContentControl
      - word.Word.Range.insertFileFromBase64
      - word.Word.Range.insertFileFromBase64_1
      - word.Word.Range.insertHtml
      - word.Word.Range.insertHtml_1
      - word.Word.Range.insertInlinePictureFromBase64
      - word.Word.Range.insertInlinePictureFromBase64_1
      - word.Word.Range.insertOoxml
      - word.Word.Range.insertOoxml_1
      - word.Word.Range.insertParagraph
      - word.Word.Range.insertParagraph_1
      - word.Word.Range.insertTable
      - word.Word.Range.insertTable_1
      - word.Word.Range.insertText
      - word.Word.Range.insertText_1
      - word.Word.Range.intersectWith
      - word.Word.Range.intersectWithOrNullObject
      - word.Word.Range.isEmpty
      - word.Word.Range.lists
      - word.Word.Range.load
      - word.Word.Range.load_1
      - word.Word.Range.load_2
      - word.Word.Range.paragraphs
      - word.Word.Range.parentBody
      - word.Word.Range.parentContentControl
      - word.Word.Range.parentContentControlOrNullObject
      - word.Word.Range.parentTable
      - word.Word.Range.parentTableCell
      - word.Word.Range.parentTableCellOrNullObject
      - word.Word.Range.parentTableOrNullObject
      - word.Word.Range.search
      - word.Word.Range.select
      - word.Word.Range.select_1
      - word.Word.Range.set
      - word.Word.Range.set_1
      - word.Word.Range.split
      - word.Word.Range.style
      - word.Word.Range.styleBuiltIn
      - word.Word.Range.tables
      - word.Word.Range.text
      - word.Word.Range.toJSON
      - word.Word.Range.track
      - word.Word.Range.untrack
  - uid: word.Word.Range.clear
    summary: |-
      Löscht den Inhalt des Bereichsobjekts. Der Benutzer kann den Rückgängig-Vorgang auf den gelöschten Inhalt durchführen.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to clear the contents of the proxy range object.
              range.clear();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Cleared the selection (range object)');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Range.compareLocationWith
    summary: |-
      Vergleicht die Position dieses Bereichs mit der eines anderen Bereichs.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: compareLocationWith(range)
    fullName: compareLocationWith(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'compareLocationWith(range: Word.Range): OfficeExtension.ClientResult<Word.LocationRelation>;'
      return:
        type:
          - OfficeExtension.ClientResult<Word.LocationRelation>
        description: ''
      parameters:
        - id: range
          description: Erforderlich. Der mit diesem Range zu vergleichende Range.
          type:
            - Word.Range
  - uid: word.Word.Range.contentControls
    summary: |-
      Ruft die Auflistung der Inhaltssteuerelemente im Range ab. Schreibgeschützt.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - word.Word.ContentControlCollection
  - uid: word.Word.Range.context
    summary: Der dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: word.Word.Range.delete
    summary: |-
      Löscht den Bereich und seinen Inhalt aus dem Dokument.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to delete the range object.
              range.delete();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Deleted the selection (range object)');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Range.expandTo
    summary: |-
      Gibt einen neuen Bereich zurück, der diesen Bereich in beide Richtungen erweitert, um einen anderen Bereich zu überdecken. Dieser Bereich wird nicht geändert. Throws, wenn die beiden Bereiche nicht über eine Union verfügen.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: expandTo(range)
    fullName: expandTo(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'expandTo(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Erforderlich. Ein weiterer Range.
          type:
            - Word.Range
  - uid: word.Word.Range.expandToOrNullObject
    summary: |-
      Gibt einen neuen Bereich zurück, der diesen Bereich in beide Richtungen erweitert, um einen anderen Bereich zu überdecken. Dieser Bereich wird nicht geändert. Gibt ein NULL-Objekt zurück, wenn die beiden Bereiche keine Union aufweisen.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: expandToOrNullObject(range)
    fullName: expandToOrNullObject(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'expandToOrNullObject(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Erforderlich. Ein weiterer Range.
          type:
            - Word.Range
  - uid: word.Word.Range.font
    summary: |-
      Ruft das Textformat des Bereichs ab. Verwenden Sie diese Option zum Abrufen und Festlegen des Schriftartnamens, der Größe, Farbe und anderer Eigenschaften. Schreibgeschützt.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - word.Word.Font
  - uid: word.Word.Range.getHtml
    summary: |-
      Ruft eine HTML-Darstellung des Range-Objekts ab. Wenn Sie in einer Webseite oder in einem HTML-Viewer gerendert werden, ist die Formatierung für die Formatierung des Dokuments eng, aber nicht genau. Bei dieser Methode wird nicht genau derselbe HTML-Code für dasselbe Dokument auf verschiedenen Plattformen (Windows, Mac, Word Online usw.) zurückgegeben. Wenn Sie exakte Genauigkeit oder Konsistenz über Plattformen hinweg benötigen, `Range.getOoxml()` verwenden Sie die zurückgegebene XML in HTML, und konvertieren Sie Sie.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to get the HTML of the current selection.
              var html = range.getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('The HTML read from the document was: ' + html.value);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Range.getHyperlinkRanges
    summary: |-
      Ruft untergeordnete Linkbereiche innerhalb des Bereichs ab.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getHyperlinkRanges()
    fullName: getHyperlinkRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHyperlinkRanges(): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
  - uid: word.Word.Range.getNextTextRange
    summary: |-
      Ruft den nächsten Textbereiche mithilfe von Satzzeichen und/oder anderen Endmarkierungen ab. Throws, wenn dieser Text-Range der letzte ist.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'getNextTextRange(endingMarks, trimSpacing)'
    fullName: 'getNextTextRange(endingMarks, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextTextRange(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: endingMarks
          description: Erforderlich. Die Satzzeichen und/oder andere Endmarkierungen als ein Array von Zeichenfolgen.
          type:
            - 'string[]'
        - id: trimSpacing
          description: 'Optional. Gibt an, ob Abstandszeichen (Räume, Tabstopps, Spaltenumbrüche und Absatz Endpunkte) vom Anfang und Ende des zurückgegebenen Bereiches abgeschnitten werden sollen. Der Standardwert ist false, was bedeutet, dass Leerzeichen am Anfang und Ende des Bereiches enthalten sind.'
          type:
            - boolean
  - uid: word.Word.Range.getNextTextRangeOrNullObject
    summary: |-
      Ruft den nächsten Textbereiche mithilfe von Satzzeichen und/oder anderen Endmarkierungen ab. Gibt ein NULL-Objekt zurück, wenn dieser Text-Range der letzte ist.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'getNextTextRangeOrNullObject(endingMarks, trimSpacing)'
    fullName: 'getNextTextRangeOrNullObject(endingMarks, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextTextRangeOrNullObject(endingMarks: string[], trimSpacing?: boolean): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: endingMarks
          description: Erforderlich. Die Satzzeichen und/oder andere Endmarkierungen als ein Array von Zeichenfolgen.
          type:
            - 'string[]'
        - id: trimSpacing
          description: 'Optional. Gibt an, ob Abstandszeichen (Räume, Tabstopps, Spaltenumbrüche und Absatz Endpunkte) vom Anfang und Ende des zurückgegebenen Bereiches abgeschnitten werden sollen. Der Standardwert ist false, was bedeutet, dass Leerzeichen am Anfang und Ende des Bereiches enthalten sind.'
          type:
            - boolean
  - uid: word.Word.Range.getOoxml
    summary: |-
      Ruft die OOXML-Darstellung des Bereichsobjekts ab.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to get the OOXML of the current selection.
              var ooxml = range.getOoxml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('The OOXML read from the document was:  ' + ooxml.value);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: word.Word.Range.getRange
    summary: |-
      Klont den Bereich oder ruft den Anfangs- bzw. Endpunkt des Bereichs als neuen Bereich ab.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getRange(rangeLocation)
    fullName: getRange(rangeLocation)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocation?: Word.RangeLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: rangeLocation
          description: 'Optional. Der Bereich kann "vollständig", "Start", "Ende", "nach" oder "Inhalt" sein.'
          type:
            - word.Word.RangeLocation
  - uid: word.Word.Range.getRange_1
    summary: |-
      Klont den Bereich oder ruft den Anfangs- bzw. Endpunkt des Bereichs als neuen Bereich ab.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getRange(rangeLocationString)
    fullName: getRange(rangeLocationString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(rangeLocationString?: "Whole" | "Start" | "End" | "Before" | "After" | "Content"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: rangeLocationString
          description: 'Optional. Der Bereich kann "vollständig", "Start", "Ende", "nach" oder "Inhalt" sein.'
          type:
            - '"Whole" | "Start" | "End" | "Before" | "After" | "Content"'
  - uid: word.Word.Range.getTextRanges
    summary: |-
      Ruft die untergeordneten Textbereiche im Bereich mithilfe von Satzzeichen und/oder anderen Endmarkierungen ab.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'getTextRanges(endingMarks, trimSpacing)'
    fullName: 'getTextRanges(endingMarks, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTextRanges(endingMarks: string[], trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: |-

          #### <a name="examples"></a>Beispiele

          ```typescript
          await Word.run(async (context) => {
            // Gets the complete sentence (as range) associated with the insertion point.
            let sentences = context.document
              .getSelection()
              .getTextRanges(["."] /* Using the "." as delimiter */, false /*means without trimming spaces*/);
            sentences.load("$none");
            await context.sync();

            // Expands the range to the end of the paragraph to get all the complete sentences.
            let sentencesToTheEndOfParagraph = sentences.items[0]
              .getRange()
              .expandTo(
                context.document
                  .getSelection()
                  .paragraphs.getFirst()
                  .getRange("End")
              )
              .getTextRanges(["."], false /* Don't trim spaces*/);
            sentencesToTheEndOfParagraph.load("text");
            await context.sync();

            for (let i = 0; i < sentencesToTheEndOfParagraph.items.length; i++) {
              console.log(sentencesToTheEndOfParagraph.items[i].text);
            }
          });
          ```
      parameters:
        - id: endingMarks
          description: Erforderlich. Die Satzzeichen und/oder andere Endmarkierungen als ein Array von Zeichenfolgen.
          type:
            - 'string[]'
        - id: trimSpacing
          description: 'Optional. Gibt an, ob Abstandszeichen (Räume, Tabstopps, Spaltenumbrüche und Absatz Endpunkte) vom Anfang und Ende der in der Range-Auflistung zurückgegebenen Bereiche abgeschnitten werden sollen. Der Standardwert ist false, was bedeutet, dass Leerzeichen am Anfang und Ende der Bereiche in der Bereichsauflistung enthalten sind.'
          type:
            - boolean
  - uid: word.Word.Range.hyperlink
    summary: |-
      Ruft den ersten Link in dem Bereich ab oder legt einen Link für den Bereich fest. Wenn Sie einen neuen Link für den Bereich festlegen, werden alle Links im Bereich gelöscht. Verwenden Sie ein\#' ', um den Adressteil vom optionalen Speicherort Teil zu trennen.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: string;'
      return:
        type:
          - string
  - uid: word.Word.Range.inlinePictures
    summary: |-
      Ruft die Sammlung von Inlinebildobjekten im Bereich ab. Schreibgeschützt.

      \[[API-Satz: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - word.Word.InlinePictureCollection
  - uid: word.Word.Range.insertBreak
    summary: |-
      Fügt an der angegebenen Position im Hauptdokument einen Umbruch ein. Der insertLocation-Wert kann "Before" oder "After" lauten.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakType
          description: Erforderlich. Der hinzuzufügende Unterbrechungs.
          type:
            - word.Word.BreakType
        - id: insertLocation
          description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
          type:
            - Word.InsertLocation
  - uid: word.Word.Range.insertBreak_1
    summary: |-
      Fügt an der angegebenen Position im Hauptdokument einen Umbruch ein. Der insertLocation-Wert kann "Before" oder "After" lauten.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert a page break after the selected text.
              range.insertBreak('page', 'After');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Inserted a page break after the selected text.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakTypeString
          description: Erforderlich. Der hinzuzufügende Unterbrechungs.
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Range.insertContentControl
    summary: |-
      Umschließt das Bereichsobjekt mit einem Rich-Text-Inhaltssteuerelement.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert a content control around the selected text,
              // and create a proxy content control object. We'll update the properties
              // on the content control.
              var myContentControl = range.insertContentControl();
              myContentControl.tag = "Customer-Address";
              myContentControl.title = "Enter Customer Address Here:";
              myContentControl.style = "Normal";
              myContentControl.insertText("One Microsoft Way, Redmond, WA 98052", 'replace');
              myContentControl.cannotEdit = true;

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Wrapped a content control around the selected text.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
              let results = context.document.body.search("Contractor");
              results.load("font/bold");

              // Check to make sure these content controls haven't been added yet.
              let customerContentControls = context.document.contentControls.getByTag("customer");
              customerContentControls.load("text");
              await context.sync();

            if (customerContentControls.items.length === 0) {
              for (var i = 0; i < results.items.length; i++) { 
                  results.items[i].font.bold = true;
                  var cc = results.items[i].insertContentControl();
                  cc.tag = "customer";  // This value is used in the next step of this sample.
                  cc.title = "Customer Name " + i;
              }
            }
              await context.sync();
          });
          ```
  - uid: word.Word.Range.insertFileFromBase64
    summary: |-
      Fügt an der angegebenen Position ein Dokument ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert base64 encoded .docx at the beginning of the range.
              // You'll need to implement getBase64() to make this work.
              range.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Added base64 encoded text to the beginning of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64File
          description: Erforderlich. Der Base64-codierte Inhalt einer DOCX-Datei.
          type:
            - string
        - id: insertLocation
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - Word.InsertLocation
  - uid: word.Word.Range.insertFileFromBase64_1
    summary: |-
      Fügt an der angegebenen Position ein Dokument ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: base64File
          description: Erforderlich. Der Base64-codierte Inhalt einer DOCX-Datei.
          type:
            - string
        - id: insertLocationString
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Range.insertHtml
    summary: |-
      Fügt an der angegebenen Position HTML-Code ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert HTML in to the beginning of the range.
              range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('HTML added to the beginning of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: Erforderlich. Der einzufügende HTML-Code.
          type:
            - string
        - id: insertLocation
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - Word.InsertLocation
  - uid: word.Word.Range.insertHtml_1
    summary: |-
      Fügt an der angegebenen Position HTML-Code ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: html
          description: Erforderlich. Der einzufügende HTML-Code.
          type:
            - string
        - id: insertLocationString
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Range.insertInlinePictureFromBase64
    summary: |-
      Fügt an der angegebenen Position ein Bild ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
      return:
        type:
          - word.Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: 'Erforderlich. Das Base64-codierte Bild, das eingefügt werden soll.'
          type:
            - string
        - id: insertLocation
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - Word.InsertLocation
  - uid: word.Word.Range.insertInlinePictureFromBase64_1
    summary: |-
      Fügt an der angegebenen Position ein Bild ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,2](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
      return:
        type:
          - word.Word.InlinePicture
        description: ''
      parameters:
        - id: base64EncodedImage
          description: 'Erforderlich. Das Base64-codierte Bild, das eingefügt werden soll.'
          type:
            - string
        - id: insertLocationString
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Range.insertOoxml
    summary: |-
      Fügt an der angegebenen Position OOXML-Code ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert OOXML in to the beginning of the range.
              range.insertOoxml("<pkg:package xmlns:pkg='http://schemas.microsoft.com/office/2006/xmlPackage'><pkg:part pkg:name='/_rels/.rels' pkg:contentType='application/vnd.openxmlformats-package.relationships+xml' pkg:padding='512'><pkg:xmlData><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument' Target='word/document.xml'/></Relationships></pkg:xmlData></pkg:part><pkg:part pkg:name='/word/document.xml' pkg:contentType='application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml'><pkg:xmlData><w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main' ><w:body><w:p><w:pPr><w:spacing w:before='360' w:after='0' w:line='480' w:lineRule='auto'/><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr></w:pPr><w:r><w:rPr><w:color w:val='70AD47' w:themeColor='accent6'/><w:sz w:val='28'/></w:rPr><w:t>This text has formatting directly applied to achieve its font size, color, line spacing, and paragraph spacing.</w:t></w:r></w:p></w:body></w:document></pkg:xmlData></pkg:part></pkg:package>", Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('OOXML added to the beginning of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // Read "Create better add-ins for Word with Office Open XML" for guidance on working with OOXML.
          // https://docs.microsoft.com/office/dev/add-ins/word/create-better-add-ins-for-word-with-office-open-xml
          ```
      parameters:
        - id: ooxml
          description: Erforderlich. Der einzufügende OOXML-Code.
          type:
            - string
        - id: insertLocation
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - Word.InsertLocation
  - uid: word.Word.Range.insertOoxml_1
    summary: |-
      Fügt an der angegebenen Position OOXML-Code ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: ooxml
          description: Erforderlich. Der einzufügende OOXML-Code.
          type:
            - string
        - id: insertLocationString
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Range.insertParagraph
    summary: |-
      Fügt an der angegebenen Position einen Absatz ein. Der insertLocation-Wert kann 'Before' oder 'After' lauten.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert the paragraph after the range.
              range.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph added to the end of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: paragraphText
          description: Erforderlich. Der einzufügende Absatztext.
          type:
            - string
        - id: insertLocation
          description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
          type:
            - Word.InsertLocation
  - uid: word.Word.Range.insertParagraph_1
    summary: |-
      Fügt an der angegebenen Position einen Absatz ein. Der insertLocation-Wert kann 'Before' oder 'After' lauten.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - Word.Paragraph
        description: ''
      parameters:
        - id: paragraphText
          description: Erforderlich. Der einzufügende Absatztext.
          type:
            - string
        - id: insertLocationString
          description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Range.insertTable
    summary: |-
      Fügt eine Tabelle mit der angegebenen Anzahl von Zeilen und Spalten ein. Der insertLocation-Wert kann 'Before' oder 'After' lauten.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertTable(rowCount, columnCount, insertLocation, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocation, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocation: Word.InsertLocation, values?: string[][]): Word.Table;'
      return:
        type:
          - Word.Table
        description: ''
      parameters:
        - id: rowCount
          description: Erforderlich. Die Anzahl der Zeilen in der Tabelle.
          type:
            - number
        - id: columnCount
          description: Erforderlich. Die Anzahl der Spalten in der Tabelle.
          type:
            - number
        - id: insertLocation
          description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
          type:
            - Word.InsertLocation
        - id: values
          description: 'Optionales 2D-Array. Wenn die entsprechenden Zeichenfolgen im Array angegeben sind, werden die Zellen gefüllt.'
          type:
            - 'string[][]'
  - uid: word.Word.Range.insertTable_1
    summary: |-
      Fügt eine Tabelle mit der angegebenen Anzahl von Zeilen und Spalten ein. Der insertLocation-Wert kann 'Before' oder 'After' lauten.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    fullName: 'insertTable(rowCount, columnCount, insertLocationString, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertTable(rowCount: number, columnCount: number, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace", values?: string[][]): Word.Table;'
      return:
        type:
          - Word.Table
        description: ''
      parameters:
        - id: rowCount
          description: Erforderlich. Die Anzahl der Zeilen in der Tabelle.
          type:
            - number
        - id: columnCount
          description: Erforderlich. Die Anzahl der Spalten in der Tabelle.
          type:
            - number
        - id: insertLocationString
          description: Erforderlich. Der Wert kann „Before“ oder „After“ lauten.
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
        - id: values
          description: 'Optionales 2D-Array. Wenn die entsprechenden Zeichenfolgen im Array angegeben sind, werden die Zellen gefüllt.'
          type:
            - 'string[][]'
  - uid: word.Word.Range.insertText
    summary: |-
      Fügt an der angegebenen Position Text ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - Word.Range
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert the paragraph at the end of the range.
              range.insertText('New text inserted into the range.', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Text added to the end of the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: text
          description: Erforderlich. Der einzufügende Text.
          type:
            - string
        - id: insertLocation
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - Word.InsertLocation
  - uid: word.Word.Range.insertText_1
    summary: |-
      Fügt an der angegebenen Position Text ein. Der insertLocation-Wert kann "Replace", "Start", "End", "Before" oder "After" sein.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: text
          description: Erforderlich. Der einzufügende Text.
          type:
            - string
        - id: insertLocationString
          description: 'Erforderlich. Der Wert kann "Replace", "Start", "End", "Before" oder "After" sein.'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: word.Word.Range.intersectWith
    summary: |-
      Gibt einen neuen Bereich als Schnittmenge dieses Bereichs mit einem anderen Bereich zurück. Dieser Bereich wird nicht geändert. Wird ausgelöst, wenn die beiden Bereiche nicht überlappend oder benachbart sind.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: intersectWith(range)
    fullName: intersectWith(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'intersectWith(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Erforderlich. Ein weiterer Range.
          type:
            - Word.Range
  - uid: word.Word.Range.intersectWithOrNullObject
    summary: |-
      Gibt einen neuen Bereich als Schnittmenge dieses Bereichs mit einem anderen Bereich zurück. Dieser Bereich wird nicht geändert. Gibt ein NULL-Objekt zurück, wenn die beiden Bereiche nicht überlappend oder benachbart sind.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: intersectWithOrNullObject(range)
    fullName: intersectWithOrNullObject(range)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'intersectWithOrNullObject(range: Word.Range): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: range
          description: Erforderlich. Ein weiterer Range.
          type:
            - Word.Range
  - uid: word.Word.Range.isEmpty
    summary: |-
      Überprüft, ob die Länge des Bereichs 0 ist. Schreibgeschützt.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: isEmpty
    fullName: isEmpty
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEmpty: boolean;'
      return:
        type:
          - boolean
  - uid: word.Word.Range.lists
    summary: |-
      Ruft die Sammlung von Listenobjekten im Bereich ab. Schreibgeschützt.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: lists
    fullName: lists
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly lists: Word.ListCollection;'
      return:
        type:
          - word.Word.ListCollection
  - uid: word.Word.Range.load
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.
    remarks: |-
      Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:

      `load(option?: string | string[]): Word.Range` -Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.

      `load(option?: { select?: string; expand?: string; }): Word.Range` -Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Range` -Nur verfügbar für Sammlungstypen. Sie ähnelt der vorherigen Signatur. Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können. Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind. Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.RangeLoadOptions): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Word.Interfaces.RangeLoadOptions
  - uid: word.Word.Range.load_1
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: propertyNames
          description: 'Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: word.Word.Range.load_2
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: 'Wobei propertyNamesAndPaths. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Navigationseigenschaften angibt.'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: word.Word.Range.paragraphs
    summary: |-
      Ruft die Auflistung von Paragraph-Objekten im Range ab. Schreibgeschützt.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type:
          - Word.ParagraphCollection
  - uid: word.Word.Range.parentBody
    summary: |-
      Ruft den übergeordneten Text des Bereichs ab. Schreibgeschützt.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentBody
    fullName: parentBody
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentBody: Word.Body;'
      return:
        type:
          - Word.Body
  - uid: word.Word.Range.parentContentControl
    summary: |-
      Ruft das Inhaltssteuerelement ab, das den Bereich enthält. Throws, wenn kein übergeordnetes Inhaltssteuerelement vorhanden ist. Schreibgeschützt.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word.Word.Range.parentContentControlOrNullObject
    summary: |-
      Ruft das Inhaltssteuerelement ab, das den Bereich enthält. Gibt ein NULL-Objekt zurück, wenn kein übergeordnetes Inhaltssteuerelement vorhanden ist. Schreibgeschützt.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentContentControlOrNullObject
    fullName: parentContentControlOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControlOrNullObject: Word.ContentControl;'
      return:
        type:
          - word.Word.ContentControl
  - uid: word.Word.Range.parentTable
    summary: |-
      Ruft die Tabelle ab, die den Bereich enthält. Throws, wenn es nicht in einer Tabelle enthalten ist. Schreibgeschützt.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTable
    fullName: parentTable
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTable: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word.Word.Range.parentTableCell
    summary: |-
      Ruft die Tabellenzelle ab, die den Bereich enthält. Throws, wenn es nicht in einer Tabellenzelle enthalten ist. Schreibgeschützt.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTableCell
    fullName: parentTableCell
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCell: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word.Word.Range.parentTableCellOrNullObject
    summary: |-
      Ruft die Tabellenzelle ab, die den Bereich enthält. Gibt ein NULL-Objekt zurück, wenn es nicht in einer Tabellenzelle enthalten ist. Schreibgeschützt.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTableCellOrNullObject
    fullName: parentTableCellOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableCellOrNullObject: Word.TableCell;'
      return:
        type:
          - Word.TableCell
  - uid: word.Word.Range.parentTableOrNullObject
    summary: |-
      Ruft die Tabelle ab, die den Bereich enthält. Gibt ein NULL-Objekt zurück, wenn es nicht in einer Tabelle enthalten ist. Schreibgeschützt.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: parentTableOrNullObject
    fullName: parentTableOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentTableOrNullObject: Word.Table;'
      return:
        type:
          - Word.Table
  - uid: word.Word.Range.search
    summary: |-
      Führt eine Suche mit den angegebenen SearchOptions für den Bereich des Range-Objekts durch. Die Suchergebnisse sind eine Sammlung von Bereichsobjekten.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: searchText
          description: Erforderlich. Der Suchtext.
          type:
            - string
        - id: searchOptions
          description: Optional. Optionen für die Suche.
          type:
            - |-
              Word.SearchOptions | {
                          ignorePunct?: boolean;
                          ignoreSpace?: boolean;
                          matchCase?: boolean;
                          matchPrefix?: boolean;
                          matchSuffix?: boolean;
                          matchWholeWord?: boolean;
                          matchWildcards?: boolean;
                      }
  - uid: word.Word.Range.select
    summary: |-
      Wählt und navigiert die Word-Benutzeroberfläche zu diesem Bereich.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Queue a command to get the current selection and then
              // create a proxy range object with the results.
              var range = context.document.getSelection();

              // Queue a commmand to insert HTML in to the beginning of the range.
              range.insertHtml('<strong>This is text inserted with range.insertHtml()</strong>', Word.InsertLocation.start);

              // Queue a command to select the HTML that was inserted.
              range.select();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Selected the range.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: selectionMode
          description: 'Optional. Der Auswahlmodus kann „Select“, „Start“ oder „End“ sein. „Select“ ist die Standardeinstellung.'
          type:
            - Word.SelectionMode
  - uid: word.Word.Range.select_1
    summary: |-
      Wählt und navigiert die Word-Benutzeroberfläche zu diesem Bereich.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: 'Optional. Der Auswahlmodus kann „Select“, „Start“ oder „End“ sein. „Select“ ist die Standardeinstellung.'
          type:
            - '"Select" | "Start" | "End"'
  - uid: word.Word.Range.set
    summary: Legt mehrere Eigenschaften eines Objekts gleichzeitig fest. Sie können entweder ein plain-Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs weitergeben.
    remarks: |-
      Diese Methode hat die folgende zusätzliche Signatur:

      `set(properties: Word.Range): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: 'Ein JavaScript-Objekt mit Eigenschaften, die isomorphically strukturiert sind, um die Eigenschaften des Objekts, für das die Methode aufgerufen wird.'
          type:
            - Interfaces.RangeUpdateData
        - id: options
          description: 'Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.'
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: word.Word.Range.set_1
    summary: Legt mehrere Eigenschaften für das Objekt auf der Grundlage eines vorhandenen geladenen Objekts zur gleichen Zeit fest.
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - Word.Range
  - uid: word.Word.Range.split
    summary: |-
      Teilt den Bereich mithilfe von Trennzeichen in untergeordnete Bereiche.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: 'split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)'
    fullName: 'split(delimiters, multiParagraphs, trimDelimiters, trimSpacing)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'split(delimiters: string[], multiParagraphs?: boolean, trimDelimiters?: boolean, trimSpacing?: boolean): Word.RangeCollection;'
      return:
        type:
          - Word.RangeCollection
        description: ''
      parameters:
        - id: delimiters
          description: Erforderlich. Die Trennzeichen als ein String-Array.
          type:
            - 'string[]'
        - id: multiParagraphs
          description: 'Optional. Gibt an, ob ein zurückgegebener untergeordneter Zeitraum mehrere Absätze abdecken kann. Der Standardwert ist false, was bedeutet, dass die Absatz Grenzen auch als Trennzeichen verwendet werden.'
          type:
            - boolean
        - id: trimDelimiters
          description: 'Optional. Gibt an, ob Trennzeichen aus den Bereichen in der Range-Auflistung zugeschnitten werden sollen. Der Standardwert ist false, was bedeutet, dass die Trennzeichen in den Bereichen enthalten sind, die in der Range-Auflistung zurückgegeben werden.'
          type:
            - boolean
        - id: trimSpacing
          description: 'Optional. Gibt an, ob Abstandszeichen (Räume, Tabstopps, Spaltenumbrüche und Absatz Endpunkte) vom Anfang und Ende der in der Range-Auflistung zurückgegebenen Bereiche abgeschnitten werden sollen. Der Standardwert ist false, was bedeutet, dass Leerzeichen am Anfang und Ende der Bereiche in der Bereichsauflistung enthalten sind.'
          type:
            - boolean
  - uid: word.Word.Range.style
    summary: |-
      Ruft den Formatvorlagennamen für den Range ab oder legt ihn fest. Verwenden Sie diese Eigenschaft für benutzerdefinierte Formatvorlagen und lokalisierte Formatvorlagennamen. Informationen zur Verwendung der integrierten Formatvorlagen, die zwischen Gebietsschemas portabel sind, finden Sie unter der Eigenschaft "styleBuiltIn".

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: word.Word.Range.styleBuiltIn
    summary: |-
      Ruft den Namen der integrierten Formatvorlage für den Bereich ab oder legt ihn fest. Verwenden Sie diese Eigenschaft für integrierte Formatvorlagen, die zwischen Gebietsschemas portabel sind. Informationen zum Verwenden benutzerdefinierter Formatvorlagen oder lokalisierter Namen finden Sie unter der Eigenschaft "style".

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: styleBuiltIn
    fullName: styleBuiltIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'styleBuiltIn: Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6";'
      return:
        type:
          - Word.Style | "Other" | "Normal" | "Heading1" | "Heading2" | "Heading3" | "Heading4" | "Heading5" | "Heading6" | "Heading7" | "Heading8" | "Heading9" | "Toc1" | "Toc2" | "Toc3" | "Toc4" | "Toc5" | "Toc6" | "Toc7" | "Toc8" | "Toc9" | "FootnoteText" | "Header" | "Footer" | "Caption" | "FootnoteReference" | "EndnoteReference" | "EndnoteText" | "Title" | "Subtitle" | "Hyperlink" | "Strong" | "Emphasis" | "NoSpacing" | "ListParagraph" | "Quote" | "IntenseQuote" | "SubtleEmphasis" | "IntenseEmphasis" | "SubtleReference" | "IntenseReference" | "BookTitle" | "Bibliography" | "TocHeading" | "TableGrid" | "PlainTable1" | "PlainTable2" | "PlainTable3" | "PlainTable4" | "PlainTable5" | "TableGridLight" | "GridTable1Light" | "GridTable1Light_Accent1" | "GridTable1Light_Accent2" | "GridTable1Light_Accent3" | "GridTable1Light_Accent4" | "GridTable1Light_Accent5" | "GridTable1Light_Accent6" | "GridTable2" | "GridTable2_Accent1" | "GridTable2_Accent2" | "GridTable2_Accent3" | "GridTable2_Accent4" | "GridTable2_Accent5" | "GridTable2_Accent6" | "GridTable3" | "GridTable3_Accent1" | "GridTable3_Accent2" | "GridTable3_Accent3" | "GridTable3_Accent4" | "GridTable3_Accent5" | "GridTable3_Accent6" | "GridTable4" | "GridTable4_Accent1" | "GridTable4_Accent2" | "GridTable4_Accent3" | "GridTable4_Accent4" | "GridTable4_Accent5" | "GridTable4_Accent6" | "GridTable5Dark" | "GridTable5Dark_Accent1" | "GridTable5Dark_Accent2" | "GridTable5Dark_Accent3" | "GridTable5Dark_Accent4" | "GridTable5Dark_Accent5" | "GridTable5Dark_Accent6" | "GridTable6Colorful" | "GridTable6Colorful_Accent1" | "GridTable6Colorful_Accent2" | "GridTable6Colorful_Accent3" | "GridTable6Colorful_Accent4" | "GridTable6Colorful_Accent5" | "GridTable6Colorful_Accent6" | "GridTable7Colorful" | "GridTable7Colorful_Accent1" | "GridTable7Colorful_Accent2" | "GridTable7Colorful_Accent3" | "GridTable7Colorful_Accent4" | "GridTable7Colorful_Accent5" | "GridTable7Colorful_Accent6" | "ListTable1Light" | "ListTable1Light_Accent1" | "ListTable1Light_Accent2" | "ListTable1Light_Accent3" | "ListTable1Light_Accent4" | "ListTable1Light_Accent5" | "ListTable1Light_Accent6" | "ListTable2" | "ListTable2_Accent1" | "ListTable2_Accent2" | "ListTable2_Accent3" | "ListTable2_Accent4" | "ListTable2_Accent5" | "ListTable2_Accent6" | "ListTable3" | "ListTable3_Accent1" | "ListTable3_Accent2" | "ListTable3_Accent3" | "ListTable3_Accent4" | "ListTable3_Accent5" | "ListTable3_Accent6" | "ListTable4" | "ListTable4_Accent1" | "ListTable4_Accent2" | "ListTable4_Accent3" | "ListTable4_Accent4" | "ListTable4_Accent5" | "ListTable4_Accent6" | "ListTable5Dark" | "ListTable5Dark_Accent1" | "ListTable5Dark_Accent2" | "ListTable5Dark_Accent3" | "ListTable5Dark_Accent4" | "ListTable5Dark_Accent5" | "ListTable5Dark_Accent6" | "ListTable6Colorful" | "ListTable6Colorful_Accent1" | "ListTable6Colorful_Accent2" | "ListTable6Colorful_Accent3" | "ListTable6Colorful_Accent4" | "ListTable6Colorful_Accent5" | "ListTable6Colorful_Accent6" | "ListTable7Colorful" | "ListTable7Colorful_Accent1" | "ListTable7Colorful_Accent2" | "ListTable7Colorful_Accent3" | "ListTable7Colorful_Accent4" | "ListTable7Colorful_Accent5" | "ListTable7Colorful_Accent6"
  - uid: word.Word.Range.tables
    summary: |-
      Ruft die Sammlung von Tabellenobjekten im Bereich ab. Schreibgeschützt.

      \[[API-Satz: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Word.TableCollection;'
      return:
        type:
          - Word.TableCollection
  - uid: word.Word.Range.text
    summary: |-
      Ruft den Text des Bereichs ab. Schreibgeschützt.

      \[[API-Satz: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
  - uid: word.Word.Range.toJSON
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.RangeData;'
      return:
        type:
          - Word.Interfaces.RangeData
        description: ''
  - uid: word.Word.Range.track
    summary: 'Nachverfolgung des Objekts zwecks automatischer Anpassung auf der Grundlage der umgebenden Änderungen im Dokument. Dieser Aufruf ist eine Kurzschreibweise für context.trackedObjects.add(thisObject). Wenn Sie dieses Objekt übergreifend für ".sync"-Aufrufe und außerhalb der sequenziellen Ausführung eines ".run"-Stapels verwenden und beim Festlegen einer Eigenschaft oder Aufrufen einer Methode für das Objekt ein "InvalidObjectPath"-Fehler zurückgegeben wird, hätte das Objekt der nachverfolgten Objektsammlung hinzugefügt werden müssen, in der das Objekt ursprünglich erstellt wurde.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''
  - uid: word.Word.Range.untrack
    summary: 'Gibt den diesem Objekt zugewiesenen Arbeitsspeicher frei, wenn das Objekt zuvor nachverfolgt wurde. Dieser Aufruf stellt eine Kurzschreibweise für context.trackedObjects.remove(thisObject) dar. Viele nachverfolgte Objekte verlangsamen die Ausführung der Hostanwendung, also achten Sie darauf, alle hinzugefügten Objekte nach abgeschlossener Verwendung freizugeben. Sie müssen "context.sync()" aufrufen, damit die Freigabe des Arbeitsspeichers wirksam wird.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Range;'
      return:
        type:
          - Word.Range
        description: ''