### YamlMime:TSType
name: Word.CustomXmlPart
uid: word!Word.CustomXmlPart:class
package: word!
fullName: Word.CustomXmlPart
summary: >-
  Stellt eine benutzerdefinierte XML-Komponente dar.


  \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
remarks: ''
isPreview: true
isDeprecated: false
type: class
properties:
- name: context
  uid: word!Word.CustomXmlPart#context:member
  package: word!
  fullName: context
  summary: Der dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office Hostanwendung verbunden.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="word!Word.RequestContext:class" />
- name: id
  uid: word!Word.CustomXmlPart#id:member
  package: word!
  fullName: id
  summary: >-
    Ruft die ID der benutzerdefinierten XML-Komponente ab. Schreibgeschützt.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: namespaceUri
  uid: word!Word.CustomXmlPart#namespaceUri:member
  package: word!
  fullName: namespaceUri
  summary: >-
    Ruft den Namespace-URI der benutzerdefinierten XML-Komponente ab. Schreibgeschützt.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'readonly namespaceUri: string;'
    return:
      type: string
methods:
- name: delete()
  uid: word!Word.CustomXmlPart#delete:member(1)
  package: word!
  fullName: delete()
  summary: >-
    Löscht die benutzerdefinierte XML-Komponente.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: ''
- name: deleteAttribute(xpath, namespaceMappings, name)
  uid: word!Word.CustomXmlPart#deleteAttribute:member(1)
  package: word!
  fullName: deleteAttribute(xpath, namespaceMappings, name)
  summary: >-
    Löscht ein Attribut mit dem angegebenen Namen aus dem von xpath identifizierten Element.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: >-
    Wenn ein Element in der Struktur über ein XMLNS-Attribut verfügt (dessen Wert in der Regel, aber nicht immer ein URI ist), muss ein Alias für diesen Attributwert dem Elementnamen im xpath-Parameter vorangestellt werden. Angenommen, die Struktur lautet wie folgt:


    ```xml

    <Day>
      <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
        <Week>something</Week>
      </Month>
    </Day>


    ```

    Der xpath muss `<Week>` /sein<!-- -->Tag<!-- -->/<!-- -->gregor:Month<!-- -->/<!-- -->Woche, in der "gregor" ein Alias ist, der "http:<!-- -->/<!-- -->/<!-- -->calendartypes.org<!-- -->/<!-- -->xsds<!-- -->/<!-- -->GregorianCalendar" im NamespaceMappings-Parameter.
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'deleteAttribute(xpath: string, namespaceMappings: any, name: string): void;'
    parameters:
    - id: xpath
      description: Erforderlich. Absoluter Pfad zum einzelnen Element in der XPath-Notation.
      type: string
    - id: namespaceMappings
      description: 'Erforderlich. Ein Objekt, dessen Eigenschaftswerte Namespacenamen sind und dessen Eigenschaftennamen Aliase für die entsprechenden Namespaces sind. Beispiel: `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`<!-- -->. Bei den Eigenschaftennamen (z. B. "gregor") kann es sich um eine beliebige Zeichenfolge handeln, die keine reservierten XPath-Zeichen verwendet, z. B. den Schrägstrich "/".'
      type: any
    - id: name
      description: Erforderlich. Name des Attributs.
      type: string
    return:
      type: void
      description: ''
- name: deleteElement(xpath, namespaceMappings)
  uid: word!Word.CustomXmlPart#deleteElement:member(1)
  package: word!
  fullName: deleteElement(xpath, namespaceMappings)
  summary: >-
    Löscht das von xpath identifizierte Element.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: >-
    Wenn ein Element in der Struktur über ein XMLNS-Attribut verfügt (dessen Wert in der Regel, aber nicht immer ein URI ist), muss ein Alias für diesen Attributwert dem Elementnamen im xpath-Parameter vorangestellt werden. Angenommen, die Struktur lautet wie folgt:


    ```xml

    <Day>
      <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
        <Week>something</Week>
      </Month>
    </Day>


    ```

    Der xpath muss `<Week>` /sein<!-- -->Tag<!-- -->/<!-- -->gregor:Month<!-- -->/<!-- -->Woche, in der "gregor" ein Alias ist, der "http:<!-- -->/<!-- -->/<!-- -->calendartypes.org<!-- -->/<!-- -->xsds<!-- -->/<!-- -->GregorianCalendar" im NamespaceMappings-Parameter.
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'deleteElement(xpath: string, namespaceMappings: any): void;'
    parameters:
    - id: xpath
      description: Erforderlich. Absoluter Pfad zum einzelnen Element in der XPath-Notation.
      type: string
    - id: namespaceMappings
      description: 'Erforderlich. Ein Objekt, dessen Eigenschaftswerte Namespacenamen sind und dessen Eigenschaftennamen Aliase für die entsprechenden Namespaces sind. Beispiel: `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`<!-- -->. Bei den Eigenschaftennamen (z. B. "gregor") kann es sich um eine beliebige Zeichenfolge handeln, die keine reservierten XPath-Zeichen verwendet, z. B. den Schrägstrich "/".'
      type: any
    return:
      type: void
      description: ''
- name: getXml()
  uid: word!Word.CustomXmlPart#getXml:member(1)
  package: word!
  fullName: getXml()
  summary: >-
    Ruft den vollständigen XML-Inhalt der benutzerdefinierten XML-Komponente ab.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'getXml(): OfficeExtension.ClientResult<string>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: ''
- name: insertAttribute(xpath, namespaceMappings, name, value)
  uid: word!Word.CustomXmlPart#insertAttribute:member(1)
  package: word!
  fullName: insertAttribute(xpath, namespaceMappings, name, value)
  summary: >-
    Fügt ein Attribut mit dem angegebenen Namen und Wert in das von xpath identifizierte Element ein.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: >-
    Wenn ein Element in der Struktur über ein XMLNS-Attribut verfügt (dessen Wert in der Regel, aber nicht immer ein URI ist), muss ein Alias für diesen Attributwert dem Elementnamen im xpath-Parameter vorangestellt werden. Angenommen, die Struktur lautet wie folgt:


    ```xml

    <Day>
      <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
        <Week>something</Week>
      </Month>
    </Day>


    ```

    Der xpath muss `<Week>` /sein<!-- -->Tag<!-- -->/<!-- -->gregor:Month<!-- -->/<!-- -->Woche, in der "gregor" ein Alias ist, der "http:<!-- -->/<!-- -->/<!-- -->calendartypes.org<!-- -->/<!-- -->xsds<!-- -->/<!-- -->GregorianCalendar" im NamespaceMappings-Parameter.
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'insertAttribute(xpath: string, namespaceMappings: any, name: string, value: string): void;'
    parameters:
    - id: xpath
      description: Erforderlich. Absoluter Pfad zum einzelnen Element in der XPath-Notation.
      type: string
    - id: namespaceMappings
      description: 'Erforderlich. Ein Objekt, dessen Eigenschaftswerte Namespacenamen sind und dessen Eigenschaftennamen Aliase für die entsprechenden Namespaces sind. Beispiel: `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`<!-- -->. Bei den Eigenschaftennamen (z. B. "gregor") kann es sich um eine beliebige Zeichenfolge handeln, die keine reservierten XPath-Zeichen verwendet, z. B. den Schrägstrich "/".'
      type: any
    - id: name
      description: Erforderlich. Name des Attributs.
      type: string
    - id: value
      description: Erforderlich. Wert des Attributs.
      type: string
    return:
      type: void
      description: ''
- name: insertElement(xpath, xml, namespaceMappings, index)
  uid: word!Word.CustomXmlPart#insertElement:member(1)
  package: word!
  fullName: insertElement(xpath, xml, namespaceMappings, index)
  summary: >-
    Fügt den angegebenen XML-Code unter dem übergeordneten Element ein, das von xpath am Index der untergeordneten Position identifiziert wird.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: >-
    Wenn ein Element in der Struktur über ein XMLNS-Attribut verfügt (dessen Wert in der Regel, aber nicht immer ein URI ist), muss ein Alias für diesen Attributwert dem Elementnamen im xpath-Parameter vorangestellt werden. Angenommen, die Struktur lautet wie folgt:


    ```xml

    <Day>
      <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
        <Week>something</Week>
      </Month>
    </Day>


    ```

    Der xpath muss `<Week>` /sein<!-- -->Tag<!-- -->/<!-- -->gregor:Month<!-- -->/<!-- -->Woche, in der "gregor" ein Alias ist, der "http:<!-- -->/<!-- -->/<!-- -->calendartypes.org<!-- -->/<!-- -->xsds<!-- -->/<!-- -->GregorianCalendar" im NamespaceMappings-Parameter.
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'insertElement(xpath: string, xml: string, namespaceMappings: any, index?: number): void;'
    parameters:
    - id: xpath
      description: Erforderlich. Absoluter Pfad zum einfachen übergeordneten Element in der XPath-Notation.
      type: string
    - id: xml
      description: Erforderlich. Einzufügende XML-Inhalt.
      type: string
    - id: namespaceMappings
      description: 'Erforderlich. Ein Objekt, dessen Eigenschaftswerte Namespacenamen sind und dessen Eigenschaftennamen Aliase für die entsprechenden Namespaces sind. Beispiel: `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`<!-- -->. Bei den Eigenschaftennamen (z. B. "gregor") kann es sich um eine beliebige Zeichenfolge handeln, die keine reservierten XPath-Zeichen verwendet, z. B. den Schrägstrich "/".'
      type: any
    - id: index
      description: Optional. Nullbasierte Position, an der der neue XML-Code eingefügt werden soll. Wenn dies nicht angegeben wird, wird der XML-Code als letztes untergeordnetes Element dieses übergeordneten Elements angefügt.
      type: number
    return:
      type: void
      description: ''
- name: load(options)
  uid: word!Word.CustomXmlPart#load:member(1)
  package: word!
  fullName: load(options)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'load(options?: Word.Interfaces.CustomXmlPartLoadOptions): Word.CustomXmlPart;'
    parameters:
    - id: options
      description: Stellt Optionen bereit, für welche Eigenschaften des Objekts geladen werden soll.
      type: <xref uid="word!Word.Interfaces.CustomXmlPartLoadOptions:interface" />
    return:
      type: <xref uid="word!Word.CustomXmlPart:class" />
      description: ''
- name: load(propertyNames)
  uid: word!Word.CustomXmlPart#load:member(2)
  package: word!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Word.CustomXmlPart;'
    parameters:
    - id: propertyNames
      description: Eine durch Trennzeichen getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: <xref uid="word!Word.CustomXmlPart:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: word!Word.CustomXmlPart#load:member(3)
  package: word!
  fullName: load(propertyNamesAndPaths)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Word.CustomXmlPart;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` ist eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und `propertyNamesAndPaths.expand` eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="word!Word.CustomXmlPart:class" />
      description: ''
- name: query(xpath, namespaceMappings)
  uid: word!Word.CustomXmlPart#query:member(1)
  package: word!
  fullName: query(xpath, namespaceMappings)
  summary: >-
    Fragt den XML-Inhalt der benutzerdefinierten XML-Komponente ab.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: >-
    Wenn ein Element in der Struktur über ein XMLNS-Attribut verfügt (dessen Wert in der Regel, aber nicht immer ein URI ist), muss ein Alias für diesen Attributwert dem Elementnamen im xpath-Parameter vorangestellt werden. Angenommen, die Struktur lautet wie folgt:


    ```xml

    <Day>
      <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
        <Week>something</Week>
      </Month>
    </Day>


    ```

    Der xpath muss `<Week>` /sein<!-- -->Tag<!-- -->/<!-- -->gregor:Month<!-- -->/<!-- -->Woche, in der "gregor" ein Alias ist, der "http:<!-- -->/<!-- -->/<!-- -->calendartypes.org<!-- -->/<!-- -->xsds<!-- -->/<!-- -->GregorianCalendar" im NamespaceMappings-Parameter.
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'query(xpath: string, namespaceMappings: any): OfficeExtension.ClientResult<string[]>;'
    parameters:
    - id: xpath
      description: Erforderlich. Eine XPath-Abfrage.
      type: string
    - id: namespaceMappings
      description: 'Erforderlich. Ein Objekt, dessen Eigenschaftswerte Namespacenamen sind und dessen Eigenschaftennamen Aliase für die entsprechenden Namespaces sind. Beispiel: `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`<!-- -->. Bei den Eigenschaftennamen (z. B. "gregor") kann es sich um eine beliebige Zeichenfolge handeln, die keine reservierten XPath-Zeichen verwendet, z. B. den Schrägstrich "/".'
      type: any
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string[]&gt;
      description: Ein Array, in dem jedes Element einen Eintrag darstellt, der mit der XPath-Abfrage übereinstimmt.
- name: setXml(xml)
  uid: word!Word.CustomXmlPart#setXml:member(1)
  package: word!
  fullName: setXml(xml)
  summary: >-
    Legt den vollständigen XML-Inhalt der benutzerdefinierten XML-Komponente fest.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'setXml(xml: string): void;'
    parameters:
    - id: xml
      description: Erforderlich. Festzulegende XML-Inhalte.
      type: string
    return:
      type: void
      description: ''
- name: toJSON()
  uid: word!Word.CustomXmlPart#toJSON:member(1)
  package: word!
  fullName: toJSON()
  summary: Überschreibt die `toJSON()` JavaScript-Methode, um eine hilfreichere Ausgabe bereitzustellen, wenn ein API-Objekt an `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->ruft wiederum die Methode des Objekts auf, `toJSON` das an das Objekt übergeben wird.) Während das ursprüngliche Word.CustomXmlPart-Objekt ein API-Objekt ist, gibt die `toJSON` Methode ein einfaches JavaScript-Objekt zurück (eingegeben als `Word.Interfaces.CustomXmlPartData`<!-- -->), die flache Kopien aller geladenen untergeordneten Eigenschaften des ursprünglichen Objekts enthält.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'toJSON(): Word.Interfaces.CustomXmlPartData;'
    return:
      type: <xref uid="word!Word.Interfaces.CustomXmlPartData:interface" />
      description: ''
- name: track()
  uid: word!Word.CustomXmlPart#track:member(1)
  package: word!
  fullName: track()
  summary: Nachverfolgung des Objekts zwecks automatischer Anpassung auf der Grundlage der umgebenden Änderungen im Dokument. Dieser Aufruf ist eine Abkürzung für `context.trackedObjects.add(thisObject)`<!-- -->. Wenn Sie dieses Objekt über `.sync` Aufrufe und außerhalb der sequenziellen Ausführung eines ".run"-Batches verwenden und beim Festlegen einer Eigenschaft oder Aufrufen einer Methode für das Objekt den Fehler "InvalidObjectPath" erhalten, mussten Sie das Objekt der Nachverfolgungsobjektauflistung hinzugefügt haben, als das Objekt zum ersten Mal erstellt wurde.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'track(): Word.CustomXmlPart;'
    return:
      type: <xref uid="word!Word.CustomXmlPart:class" />
      description: ''
- name: untrack()
  uid: word!Word.CustomXmlPart#untrack:member(1)
  package: word!
  fullName: untrack()
  summary: Gibt den diesem Objekt zugewiesenen Arbeitsspeicher frei, wenn das Objekt zuvor nachverfolgt wurde. Dieser Aufruf ist eine Abkürzung für `context.trackedObjects.remove(thisObject)`<!-- -->. Viele nachverfolgte Objekte verlangsamen die Ausführung der Hostanwendung, also achten Sie darauf, alle hinzugefügten Objekte nach abgeschlossener Verwendung freizugeben. Sie müssen aufrufen, `context.sync()` bevor die Speicherfreigabe wirksam wird.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'untrack(): Word.CustomXmlPart;'
    return:
      type: <xref uid="word!Word.CustomXmlPart:class" />
      description: ''
- name: updateAttribute(xpath, namespaceMappings, name, value)
  uid: word!Word.CustomXmlPart#updateAttribute:member(1)
  package: word!
  fullName: updateAttribute(xpath, namespaceMappings, name, value)
  summary: >-
    Aktualisiert den Wert eines Attributs mit dem Vornamen des durch xpath identifizierten Elements.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: >-
    Wenn ein Element in der Struktur über ein XMLNS-Attribut verfügt (dessen Wert in der Regel, aber nicht immer ein URI ist), muss ein Alias für diesen Attributwert dem Elementnamen im xpath-Parameter vorangestellt werden. Angenommen, die Struktur lautet wie folgt:


    ```xml

    <Day>
      <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
        <Week>something</Week>
      </Month>
    </Day>


    ```

    Der xpath muss `<Week>` /sein<!-- -->Tag<!-- -->/<!-- -->gregor:Month<!-- -->/<!-- -->Woche, in der "gregor" ein Alias ist, der "http:<!-- -->/<!-- -->/<!-- -->calendartypes.org<!-- -->/<!-- -->xsds<!-- -->/<!-- -->GregorianCalendar" im NamespaceMappings-Parameter.
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'updateAttribute(xpath: string, namespaceMappings: any, name: string, value: string): void;'
    parameters:
    - id: xpath
      description: Erforderlich. Absoluter Pfad zum einzelnen Element in der XPath-Notation.
      type: string
    - id: namespaceMappings
      description: 'Erforderlich. Ein Objekt, dessen Eigenschaftswerte Namespacenamen sind und dessen Eigenschaftennamen Aliase für die entsprechenden Namespaces sind. Beispiel: `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`<!-- -->. Bei den Eigenschaftennamen (z. B. "gregor") kann es sich um eine beliebige Zeichenfolge handeln, die keine reservierten XPath-Zeichen verwendet, z. B. den Schrägstrich "/".'
      type: any
    - id: name
      description: Erforderlich. Name des Attributs.
      type: string
    - id: value
      description: Erforderlich. Neuer Wert des Attributs.
      type: string
    return:
      type: void
      description: ''
- name: updateElement(xpath, xml, namespaceMappings)
  uid: word!Word.CustomXmlPart#updateElement:member(1)
  package: word!
  fullName: updateElement(xpath, xml, namespaceMappings)
  summary: >-
    Aktualisiert den XML-Code des durch xpath identifizierten Elements.


    \[[API-Satz: WordApi BETA (NUR VORSCHAU)](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  remarks: >-
    Wenn ein Element in der Struktur über ein XMLNS-Attribut verfügt (dessen Wert in der Regel, aber nicht immer ein URI ist), muss ein Alias für diesen Attributwert dem Elementnamen im xpath-Parameter vorangestellt werden. Angenommen, die Struktur lautet wie folgt:


    ```xml

    <Day>
      <Month xmlns="http://calendartypes.org/xsds/GregorianCalendar">
        <Week>something</Week>
      </Month>
    </Day>


    ```

    Der xpath muss `<Week>` /sein<!-- -->Tag<!-- -->/<!-- -->gregor:Month<!-- -->/<!-- -->Woche, in der "gregor" ein Alias ist, der "http:<!-- -->/<!-- -->/<!-- -->calendartypes.org<!-- -->/<!-- -->xsds<!-- -->/<!-- -->GregorianCalendar" im NamespaceMappings-Parameter.
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'updateElement(xpath: string, xml: string, namespaceMappings: any): void;'
    parameters:
    - id: xpath
      description: Erforderlich. Absoluter Pfad zum einzelnen Element in der XPath-Notation.
      type: string
    - id: xml
      description: Erforderlich. Neuer XML-Inhalt, der gespeichert werden soll.
      type: string
    - id: namespaceMappings
      description: 'Erforderlich. Ein Objekt, dessen Eigenschaftswerte Namespacenamen sind und dessen Eigenschaftennamen Aliase für die entsprechenden Namespaces sind. Beispiel: `{greg: "http://calendartypes.org/xsds/GregorianCalendar"}`<!-- -->. Bei den Eigenschaftennamen (z. B. "gregor") kann es sich um eine beliebige Zeichenfolge handeln, die keine reservierten XPath-Zeichen verwendet, z. B. den Schrägstrich "/".'
      type: any
    return:
      type: void
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 1b6e8d84b2aa2f272f8c31024397b14ea986af58
  ms.sourcegitcommit: 2b28ced217223685e68f6eeb4836964d9b6321ff
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 07/16/2021
  ms.locfileid: "53456243"
