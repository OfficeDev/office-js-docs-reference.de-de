### YamlMime:TSType
name: Office.MessageRead
uid: outlook!Office.MessageRead:interface
package: outlook!
fullName: Office.MessageRead
summary: >-
  Der Nachrichtenlesemodus von [Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


  **Wichtig:** Dies ist ein internes Outlook Objekt, das nicht direkt über vorhandene Schnittstellen verfügbar gemacht wird. Sie sollten dies als Einen Modus von `Office.context.mailbox.item`<!-- -->. Weitere Informationen finden Sie auf der Seite ["Objektmodell".](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.1/office.context.mailbox.item)


  Übergeordnete Schnittstellen:


  - [ItemRead](xref:outlook!Office.ItemRead:interface)


  - [Nachricht](xref:outlook!Office.Message:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: attachments
  uid: outlook!Office.MessageRead#attachments:member
  package: outlook!
  fullName: attachments
  summary: Ruft die Anlagen des Elements als Array ab.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    **Hinweis:** Bestimmte Dateitypen werden aufgrund potenzieller Sicherheitsprobleme durch Outlook blockiert und daher nicht zurückgegeben. Weitere Informationen finden Sie unter [Blockierte Anlagen in Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code builds an HTML string with details of all attachments on the current item.

    var item = Office.context.mailbox.item;

    var outputString = "";


    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachments-read.yaml

    var attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'attachments: AttachmentDetails[];'
    return:
      type: <xref uid="outlook!Office.AttachmentDetails:interface" />[]
- name: body
  uid: outlook!Office.MessageRead#body:member
  package: outlook!
  fullName: body
  summary: >-
    Ruft ein Objekt ab, das Methoden zum Bearbeiten des Textkörpers eines Elements bereitstellt.


    \[[API-Satz: Postfach 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'body: Body;'
    return:
      type: <xref uid="outlook!Office.Body:interface" />
- name: cc
  uid: outlook!Office.MessageRead#cc:member
  package: outlook!
  fullName: cc
  summary: >-
    Bietet Zugriff auf die Kopienempfänger (Cc) einer Nachricht. Der Typ des Objekts und die Zugriffsebene hängen vom Modus des aktuellen Elements ab.


    Die `cc` Eigenschaft gibt ein Array zurück, das ein [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger enthält, der in der **Cc-Zeile** der Nachricht aufgeführt ist. Grenzwerte für die Sammlungsgröße:


    - Windows: 500 Mitglieder


    - Mac: 100 Mitglieder


    - Webbrowser: 20 Mitglieder


    - Other: No limit
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-cc-message-read.yaml

    var msgCc = Office.context.mailbox.item.cc;

    console.log("Message copied to:");

    for (var i = 0; i < msgCc.length; i++) {
      console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'cc: EmailAddressDetails[];'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />[]
- name: conversationId
  uid: outlook!Office.MessageRead#conversationId:member
  package: outlook!
  fullName: conversationId
  summary: >-
    Ruft einen Bezeichner für die E-Mail-Unterhaltung ab, in der eine bestimmte Nachricht enthalten ist.


    Sie können für diese Eigenschaft eine ganze Zahl abrufen, wenn Ihre Mail-App in Formularen zum Lesen oder Antworten in Formularen zum Verfassen aktiviert wird. Wenn der Benutzer den Betreff der Antwortnachricht ändert, ändert sich beim Versenden die Konversations-ID für die entsprechende Nachricht, und der Wert, den Sie vorher bezogen haben, trifft nicht länger zu.


    Sie erhalten in einem Formular zum Verfassen für diese Eigenschaft für ein neues Element null. Wenn der Benutzer einen Betreff festlegt und das Element speichert, gibt die `conversationId`-Eigenschaft einen Wert zurück.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID: ${Office.context.mailbox.item.conversationId}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'conversationId: string;'
    return:
      type: string
- name: dateTimeCreated
  uid: outlook!Office.MessageRead#dateTimeCreated:member
  package: outlook!
  fullName: dateTimeCreated
  summary: Ruft das Datum und die Uhrzeit der Erstellung eines Elements ab.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time: ${Office.context.mailbox.item.dateTimeCreated}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'dateTimeCreated: Date;'
    return:
      type: Date
- name: dateTimeModified
  uid: outlook!Office.MessageRead#dateTimeModified:member
  package: outlook!
  fullName: dateTimeModified
  summary: >-
    Ruft das Datum und die Uhrzeit der letzten Änderung eines Elements ab.


    **Hinweis:** Dieses Mitglied wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified: ${Office.context.mailbox.item.dateTimeModified}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'dateTimeModified: Date;'
    return:
      type: Date
- name: end
  uid: outlook!Office.MessageRead#end:member
  package: outlook!
  fullName: end
  summary: >-
    Ruft das Datum und die Uhrzeit für das Ende des Termins ab.


    Die `end` Eigenschaft ist ein `Date` Objekt, das als UTC-Datums- und Uhrzeitwert (Coordinated Universal Time) ausgedrückt wird. Sie können die `convertToLocalClientTime` Methode verwenden, um den `end` Eigenschaftswert in das lokale Datum und die Uhrzeit des Clients zu konvertieren.


    Wenn Sie die `Time.setAsync`-Methode verwenden, um die Endzeit im Verfassenmodus festzulegen, sollten Sie die `convertToUtcClientTime`-Methode verwenden, um die Ortszeit auf dem Client für den Server in UTC umzuwandeln.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'end: Date;'
    return:
      type: Date
- name: from
  uid: outlook!Office.MessageRead#from:member
  package: outlook!
  fullName: from
  summary: >-
    Ruft die E-Mail-Adresse des Absenders einer Nachricht ab.


    Die `from`- und `sender`-Eigenschaften stellen dieselbe Person dar, außer die Nachricht wurde von einem Delegaten gesendet. In diesem Fall stellt die `from` Eigenschaft den Delegator und die `sender` Eigenschaft den Delegaten dar.


    **Hinweis:** Die `recipientType` Eigenschaft des Objekts in der Eigenschaft ist nicht `EmailAddressDetails` `from` definiert.


    Die `from` Eigenschaft gibt ein Objekt `EmailAddressDetails` zurück.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-from-message-read.yaml

    var msgFrom = Office.context.mailbox.item.from;

    console.log("Message received from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'from: EmailAddressDetails;'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />
- name: internetMessageId
  uid: outlook!Office.MessageRead#internetMessageId:member
  package: outlook!
  fullName: internetMessageId
  summary: >-
    Ruft den Internetnachrichtenbezeichner für eine E-Mail-Nachricht ab.


    **Wichtig:** Im Ordner **"Gesendete Elemente"** ist der Ordner `internetMessageId` für zuletzt gesendete Elemente möglicherweise noch nicht verfügbar. In diesem Fall sollten Sie [Exchange Webdienste](https://docs.microsoft.com/office/dev/add-ins/outlook/web-services) verwenden, um diese [Eigenschaft vom Server](https://docs.microsoft.com/exchange/client-developer/web-service-reference/internetmessageid) abzurufen.<!-- -->.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-internet-message-id-read.yaml

    console.log(`Internet message ID: ${Office.context.mailbox.item.internetMessageId}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'internetMessageId: string;'
    return:
      type: string
- name: itemClass
  uid: outlook!Office.MessageRead#itemClass:member
  package: outlook!
  fullName: itemClass
  summary: >-
    Ruft die Exchange-Webdienste-Elementklasse des ausgewählten Elements ab.


    Sie können benutzerdefinierte Nachrichtenklassen erstellen, die eine Standardnachrichtenklasse erweitern, z. B. eine benutzerdefinierte Terminnachrichtenklasse. `IPM.Appointment.Contoso`<!-- -->.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    Die `itemClass`-Eigenschaft gibt die Nachrichtenklasse des ausgewählten Elements an. Folgende Standardnachrichtenklassen für das Nachrichten- oder Terminelement sind vorhanden:


    <table> <tr> <th>Typ</th> <th>Beschreibung</th> <th>Item-Klasse</th> </tr> <tr> <td>Terminelemente</td> <td>Dies sind Kalenderelemente der Elementklasse IPM. Termin oder IPM. Appointment.Occurrence.</td> <td>Ipm. Appointment,IPM. Appointment.Occurrence</td> </tr> <tr> <td>Nachrichtenelemente</td> <td>Diese Elemente umfassen E-Mail-Nachrichten der Standardnachrichtenklasse "IPM.Note" sowie Besprechungsanfragen, -antworten und -absagen, die "IPM.Schedule.Meeting" als Basisnachrichtenklasse verwenden.</td> <td>Ipm. Hinweis: IPM. Schedule.Meeting.Request,IPM. Schedule.Meeting.Neg,IPM. Schedule.Meeting.Pos,IPM. Schedule.Meeting.Tent,IPM. Schedule.Meeting.Canceled</td> </tr> </table>


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemClass: string;'
    return:
      type: string
- name: itemId
  uid: outlook!Office.MessageRead#itemId:member
  package: outlook!
  fullName: itemId
  summary: >-
    Ruft den [Exchange Webdienste-Elementbezeichner](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange) für das aktuelle Element ab.


    Die Eigenschaft `itemId` ist im Modus „Verfassen“ nicht verfügbar. Wenn ein Elementbezeichner erforderlich ist, kann die `saveAsync`-Methode verwendet werden, um das Element zu speichern. Dadurch wird der Elementbezeichner im `asyncResult.value`-Parameter in der Rückruffunktion zurückgegeben.


    **Hinweis:** Der von der Eigenschaft zurückgegebene Bezeichner `itemId` entspricht dem [Exchange Webdienste-Elementbezeichner.](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)<!-- -->. Die `itemId`-Eigenschaft ist nicht identisch mit der Outlook-Eintrags-ID oder der ID, die von der Outlook-REST-API verwendet wird. Bevor REST-API-Aufrufe mit diesem Wert ausgeführt werden, sollte er mithilfe von `Office.context.mailbox.convertToRestId`<!-- -->. Weitere Informationen finden Sie unter [Verwenden der Outlook REST-APIs aus einem Outlook-Add-In](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api#get-the-item-id)<!-- -->.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code checks for the presence of an item

    // identifier. If the `itemId` property returns `null` or

    // `undefined`, it saves the item to the store and gets the

    // item identifier from the asynchronous result.

    // **Important**: `saveAsync` was introduced with requirement set 1.3

    // so you can't get the `itemId` in Compose mode in earlier sets.

    var itemId = Office.context.mailbox.item.itemId;

    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemId: string;'
    return:
      type: string
- name: itemType
  uid: outlook!Office.MessageRead#itemType:member
  package: outlook!
  fullName: itemType
  summary: >-
    Ruft den Typ des Elements ab, das eine Instanz darstellt.


    Die `itemType` Eigenschaft gibt einen der Enumerationswerte zurück, der `ItemType` angibt, ob die Elementobjektinstanz eine Nachricht oder ein Termin ist.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemType: MailboxEnums.ItemType | string;'
    return:
      type: <xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string
- name: location
  uid: outlook!Office.MessageRead#location:member
  package: outlook!
  fullName: location
  summary: >-
    Ruft den Ort einer Besprechungsanfrage ab.


    Die `location`-Eigenschaft gibt eine Zeichenfolge zurück, die den Ort des Termins enthält.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location: ${Office.context.mailbox.item.location}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'location: string;'
    return:
      type: string
- name: normalizedSubject
  uid: outlook!Office.MessageRead#normalizedSubject:member
  package: outlook!
  fullName: normalizedSubject
  summary: >-
    Ruft den Betreff eines Elements ab, wobei alle Präfixe entfernt werden (einschließlich RE: und FWD:).


    Die `normalizedSubject` Eigenschaft ruft den Betreff des Elements mit allen Standardpräfixen (z. B. RE: und FW:) ab. die von E-Mail-Programmen hinzugefügt werden. Verwenden Sie die Eigenschaft, um den Betreff des Elements mit intakten Präfixen `subject` abzurufen.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject: ${Office.context.mailbox.item.normalizedSubject}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'normalizedSubject: string;'
    return:
      type: string
- name: sender
  uid: outlook!Office.MessageRead#sender:member
  package: outlook!
  fullName: sender
  summary: >-
    Ruft die E-Mail-Adresse des Absenders einer E-Mail-Nachricht ab.


    Die `from`- und `sender`-Eigenschaften stellen dieselbe Person dar, außer die Nachricht wurde von einem Delegaten gesendet. In diesem Fall stellt die `from` Eigenschaft den Delegator und die `sender` Eigenschaft den Delegaten dar.


    **Hinweis:** Die `recipientType` Eigenschaft des Objekts in der Eigenschaft ist nicht `EmailAddressDetails` `sender` definiert.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-sender-message-read.yaml

    var msgSender = Office.context.mailbox.item.sender;

    console.log("Sender: " + msgSender.displayName + " (" + msgSender.emailAddress + ")");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'sender: EmailAddressDetails;'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />
- name: start
  uid: outlook!Office.MessageRead#start:member
  package: outlook!
  fullName: start
  summary: >-
    Ruft das Datum und die Uhrzeit für den Beginn des Termins ab.


    Die `start` Eigenschaft ist ein `Date` Objekt, das als UTC-Datums- und Uhrzeitwert (Coordinated Universal Time) ausgedrückt wird. Mit der Methode können Sie `convertToLocalClientTime` den Wert in das lokale Datum und die Uhrzeit des Clients konvertieren.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'start: Date;'
    return:
      type: Date
- name: subject
  uid: outlook!Office.MessageRead#subject:member
  package: outlook!
  fullName: subject
  summary: >-
    Ruft die Beschreibung ab, die im Betrefffeld eines Elements angezeigt wird.


    Die `subject`-Eigenschaft ruft den gesamten Betreff des Elements ab oder legt ihn fest – so, wie er vom E-Mail-Server gesendet wird.


    Die `subject`-Eigenschaft gibt eine Zeichenfolge zurück. Verwenden Sie die `normalizedSubject` Eigenschaft, um den Betreff ohne führende Präfixe wie RE: und FW: abzurufen.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subject: string;'
    return:
      type: string
- name: to
  uid: outlook!Office.MessageRead#to:member
  package: outlook!
  fullName: to
  summary: >-
    Bietet Zugriff auf die Empfänger in der Zeile **An** einer Nachricht. Der Typ des Objekts und die Zugriffsebene hängen vom Modus des aktuellen Elements ab.


    Die `to` Eigenschaft gibt ein Array zurück, das ein [EmailAddressDetails-Objekt](xref:outlook!Office.EmailAddressDetails:interface) für jeden Empfänger enthält, der in der **Zeile "An"** der Nachricht aufgeführt ist. Grenzwerte für die Sammlungsgröße:


    - Windows: 500 Mitglieder


    - Mac: 100 Mitglieder


    - Webbrowser: 20 Mitglieder


    - Other: No limit
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

    var msgTo = Office.context.mailbox.item.to;

    console.log("Message sent to:");

    for (var i = 0; i < msgTo.length; i++) {
      console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'to: EmailAddressDetails[];'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />[]
methods:
- name: displayReplyAllForm(formData)
  uid: outlook!Office.MessageRead#displayReplyAllForm:member(1)
  package: outlook!
  fullName: displayReplyAllForm(formData)
  summary: >-
    Zeigt ein Antwortformular an, das entweder den Absender und alle Empfänger der ausgewählten Nachricht oder den Organisator und alle Teilnehmer des ausgewählten Termins enthält.


    In Outlook im Web wird das Antwortformular als Popupformular in der dreispaltigen Ansicht und als Popupformular in der 2-Spalten- oder 1-Spalten-Ansicht angezeigt.


    Wenn einer der Zeichenfolgenparameter seinen Grenzwert überschreitet, löst `displayReplyAllForm` eine Ausnahme aus.


    Wenn Anlagen im Parameter angegeben `formData.attachments` sind, versucht Outlook, alle Anlagen herunterzuladen und an das Antwortformular anzufügen. Wenn Anlagen nicht hinzugefügt werden können, wird in der Formularbenutzeroberfläche ein Fehler angezeigt. Wenn dies nicht möglich ist, wird keine Fehlermeldung ausgegeben.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code passes a string to the `displayReplyAllForm` function.

    Office.context.mailbox.item.displayReplyAllForm('hello there');

    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyAllForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyAllForm(

    {

    'htmlBody' : 'hi'

    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with <b>some bold text</b>.");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
    parameters:
    - id: formData
      description: Eine Zeichenfolge, die Text- und HTML-Code enthält, die den Hauptteil des Antwortformulars darstellen. Die Zeichenfolge ist auf 32 KB ODER ein [ReplyFormData-Objekt](xref:outlook!Office.ReplyFormData:interface) beschränkt, das Text- oder Anlagendaten und eine Rückruffunktion enthält.
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    return:
      type: void
      description: ''
- name: displayReplyForm(formData)
  uid: outlook!Office.MessageRead#displayReplyForm:member(1)
  package: outlook!
  fullName: displayReplyForm(formData)
  summary: >-
    Zeigt ein Antwortformular an, das nur den Absender der ausgewählten Nachricht oder den Organisator des ausgewählten Termins enthält.


    In Outlook im Web wird das Antwortformular als Popupformular in der dreispaltigen Ansicht und als Popupformular in der 2-Spalten- oder 1-Spalten-Ansicht angezeigt.


    Wenn einer der Zeichenfolgenparameter seinen Grenzwert überschreitet, löst `displayReplyForm` eine Ausnahme aus.


    Wenn Anlagen im Parameter angegeben `formData.attachments` sind, versucht Outlook, alle Anlagen herunterzuladen und an das Antwortformular anzufügen. Wenn Anlagen nicht hinzugefügt werden können, wird in der Formularbenutzeroberfläche ein Fehler angezeigt. Wenn dies nicht möglich ist, wird keine Fehlermeldung ausgegeben.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code passes a string to the `displayReplyForm` function.

    Office.context.mailbox.item.displayReplyForm('hello there');

    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi'
    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some text in italics</i>.");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyForm(formData: string | ReplyFormData): void;'
    parameters:
    - id: formData
      description: Eine Zeichenfolge, die Text- und HTML-Code enthält, die den Hauptteil des Antwortformulars darstellen. Die Zeichenfolge ist auf 32 KB ODER ein [ReplyFormData-Objekt](xref:outlook!Office.ReplyFormData:interface) beschränkt, das Text- oder Anlagendaten und eine Rückruffunktion enthält.
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    return:
      type: void
      description: ''
- name: getEntities()
  uid: outlook!Office.MessageRead#getEntities:member(1)
  package: outlook!
  fullName: getEntities()
  summary: >-
    Ruft die Entitäten im Text des ausgewählten Elements ab.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    var entities = Office.context.mailbox.item.getEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntities(): Entities;'
    return:
      type: <xref uid="outlook!Office.Entities:interface" />
      description: ''
- name: getEntitiesByType(entityType)
  uid: outlook!Office.MessageRead#getEntitiesByType:member(1)
  package: outlook!
  fullName: getEntitiesByType(entityType)
  summary: >-
    Ruft ein Array aller Entitäten des angegebenen Typs ab, die im Texts des ausgewählten Elements enthalten sind.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`Restricted`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    parameters:
    - id: entityType
      description: >-
        Einer der `EntityType` Enumerationswerte.


        Die mindeste Berechtigungsstufe für die Verwendung dieser Methode ist `Restricted`<!-- -->müssen auf einige Entitätstypen `ReadItem` zugegriffen werden, wie in der folgenden Tabelle angegeben.


        <table> <tr> <th>Wert von entityType</th> <th>Typ der Objekte im zurückgegebenen Array</th> <th>Erforderliche Berechtigungsstufe</th> </tr> <tr> <td>Adresse</td> <td>Zeichenfolge</td> <td>Restricted</td> </tr> <tr> <td>Kontakt</td> <td>Kontakt</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>Zeichenfolge</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>Zeichenfolge</td> <td>Restricted</td> </tr> </table>
      type: <xref uid="outlook!Office.MailboxEnums.EntityType:enum" /> | string
    return:
      type: (string | <xref uid="outlook!Office.Contact:interface" /> | <xref uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> | <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
      description: Wenn der übergebene Wert `entityType` kein gültiges Element der `EntityType` Enumeration ist, gibt die Methode `null`<!-- -->. Wenn keine Entitäten des angegebenen Typs im Text des Elements vorhanden sind, gibt die Methode ein leeres Array zurück. Andernfalls hängt der Typ der Objekte im zurückgegebenen Array vom Typ der Entität ab, die im `entityType`-Parameter angefordert wurde.
- name: getFilteredEntitiesByName(name)
  uid: outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)
  package: outlook!
  fullName: getFilteredEntitiesByName(name)
  summary: >-
    Gibt bekannte Entitäten im ausgewählten Element zurück, die den in der XML-Manifestdatei definierten benannten Filter übergeben.


    Die `getFilteredEntitiesByName` Methode gibt die Entitäten zurück, die dem im Regelelement in der XML-Manifestdatei definierten regulären Ausdruck mit dem `ItemHasKnownEntity` angegebenen `FilterName` Elementwert entsprechen.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    parameters:
    - id: name
      description: Der Name des `ItemHasKnownEntity`-Regelelements, das den entsprechenden Filter definiert.
      type: string
    return:
      type: (string | <xref uid="outlook!Office.Contact:interface" /> | <xref uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> | <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
      description: Wenn kein `ItemHasKnownEntity` Element im Manifest mit einem Elementwert vorhanden `FilterName` ist, der dem Parameter `name` entspricht, gibt die Methode `null`<!-- -->. Wenn der `name`-Parameter einem `ItemHasKnownEntity`-Element im Manifest entspricht, es aber keine entsprechenden Entitäten im aktuellen Element gibt, gibt die Methode ein leeres Array zurück.
- name: getRegExMatches()
  uid: outlook!Office.MessageRead#getRegExMatches:member(1)
  package: outlook!
  fullName: getRegExMatches()
  summary: >-
    Gibt Zeichenfolgenwerte im ausgewählten Element zurück, die den in der XML-Manifestdatei definierten regulären Ausdrücken entsprechen.


    Die `getRegExMatches`-Methode gibt die Zeichenfolgen zurück, die dem im `ItemHasRegularExpressionMatch`- oder `ItemHasKnownEntity`-Regelelement der XML-Manifestdatei definierten regulären Ausdruck entsprechen. Bei einer `ItemHasRegularExpressionMatch`-Regel muss eine entsprechende Zeichenfolge in der Eigenschaft des Elements vorhanden sein, das von dieser Regel angegeben wird. Der einfache `PropertyName`-Typ definiert die unterstützten Eigenschaften.


    Wenn Sie eine `ItemHasRegularExpressionMatch`-Regel für die Textkörpereigenschaft eines Elements festlegen, sollte der reguläre Ausdruck den Textkörper weiter filtern und nicht versuchen, den gesamten Textkörper des Elements zurückzugeben. Bei Verwendung eines regulären Ausdrucks wie .* zum Abrufen des gesamten Textkörpers eines Elements werden nicht immer die erwarteten Ergebnisse zurückgegeben. Verwenden Sie stattdessen die `Body.getAsync`-Methode, um den gesamten Textkörper abzurufen.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    var allMatches = Office.context.mailbox.item.getRegExMatches();

    var fruits = allMatches.fruits;

    var veggies = allMatches.veggies;

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRegExMatches(): any;'
    return:
      type: any
      description: Ein Objekt mit Arrays aus Zeichenfolgen, die den in der XML-Manifestdatei definierten regulären Ausdrücken entsprechen. Der Name der einzelnen Arrays ist gleich dem entsprechenden Wert des `RegExName`-Attributs der entsprechenden `ItemHasRegularExpressionMatch`-Regel oder des `FilterName`-Attributs der entsprechenden `ItemHasKnownEntity`-Regel.
- name: getRegExMatchesByName(name)
  uid: outlook!Office.MessageRead#getRegExMatchesByName:member(1)
  package: outlook!
  fullName: getRegExMatchesByName(name)
  summary: >-
    Gibt Zeichenfolgenwerte im ausgewählten Element zurück, die dem in der XML-Manifestdatei definierten benannten regulären Ausdruck entsprechen.


    Die `getRegExMatchesByName`-Methode gibt die Zeichenfolgen zurück, die dem im `ItemHasRegularExpressionMatch`-Regelelement der XML-Manifestdatei definierten regulären Ausdruck mit dem angegebenen `RegExName`-Elementwert entsprechen.


    Wenn Sie eine `ItemHasRegularExpressionMatch`-Regel für die Textkörpereigenschaft eines Elements festlegen, sollte der reguläre Ausdruck den Textkörper weiter filtern und nicht versuchen, den gesamten Textkörper des Elements zurückzugeben. Bei Verwendung eines regulären Ausdrucks wie .* zum Abrufen des gesamten Textkörpers eines Elements werden nicht immer die erwarteten Ergebnisse zurückgegeben.


    **Hinweis:** Diese Methode wird in Outlook unter iOS oder Android nicht unterstützt.
  remarks: >-
    **[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRegExMatchesByName(name: string): string[];'
    parameters:
    - id: name
      description: Der Name des `ItemHasRegularExpressionMatch`-Regelelements, das den entsprechenden Filter definiert.
      type: string
    return:
      type: string[]
      description: Ein Array mit den Zeichenfolgen, die dem in der XML-Manifestdatei definierten regulären Ausdruck entsprechen.
- name: loadCustomPropertiesAsync(callback, userContext)
  uid: outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)
  package: outlook!
  fullName: loadCustomPropertiesAsync(callback, userContext)
  summary: >-
    Lädt asynchron benutzerdefinierte Eigenschaften für dieses Add-In für das ausgewählte Element.


    Benutzerdefinierte Eigenschaften werden als Schlüssel-/Wert-Paare pro App und pro Element gespeichert. Diese Methode gibt ein `CustomProperties`-Objekt im Rückruf zurück, das Methoden für den Zugriff auf die benutzerdefinierten Eigenschaften für das aktuelle Element und das aktuelle Add-In bietet. Benutzerdefinierte Eigenschaften sind für das Element nicht verschlüsselt und sollten darum nicht als sicherer Speicher verwendet werden.


    Die benutzerdefinierten Eigenschaften werden als `CustomProperties`-Objekt in der `asyncResult.value`-Eigenschaft bereitgestellt. Dieses Objekt kann verwendet werden, um benutzerdefinierte Eigenschaften aus dem Element abzurufen, festzulegen und zu entfernen und um Änderungen am benutzerdefinierten Eigenschaftssatz wieder auf dem Server zu speichern.
  remarks: "**[Minimale Berechtigungsstufe:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`\n\n**[Zutreffender Outlook modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Gelesene Nachricht\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example shows how to use the loadCustomPropertiesAsync method\n// to asynchronously load custom properties that are specific to the current item.\n// The example also shows how to use the saveAsync method to save these properties\n// back to the server. After loading the custom properties, the example uses the\n// get method to read the custom property myProp, the set method to write the\n// custom property otherProp, and then finally calls the saveAsync method to save\n// the custom properties.\nOffice.initialize = function () {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n        // After the DOM is loaded, add-in-specific code can run.\n        var mailbox = Office.context.mailbox;\n        mailbox.item.loadCustomPropertiesAsync(customPropsCallback);\n    });\n};\n\nfunction customPropsCallback(asyncResult) {\n    var customProps = asyncResult.value;\n    var myProp = customProps.get(\"myProp\");\n\n    customProps.set(\"otherProp\", \"value\");\n    customProps.saveAsync(saveCallback);\n}\n\nfunction saveCallback(asyncResult) {\n}\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml\nOffice.context.mailbox.item.loadCustomPropertiesAsync(function (result) {\n  if (result.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Loaded following custom properties:\");\n    customProps = result.value;\n    var dataKey = Object.keys(customProps)[0];\n    var data = customProps[dataKey];\n    for (var propertyName in data)\n    {\n      var propertyValue = data[propertyName];\n      console.log(`${propertyName}: ${propertyValue}`);\n    }              \n  }\n  else {\n    console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);\n  }\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion `callback` mit einem einzigen Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void'
    - id: userContext
      description: Optional. Entwickler können ein beliebiges Objekt bereitstellen, auf das sie in der Callbackfunktion zugreifen möchten. Der Zugriff auf dieses Objekt kann über die `asyncResult.asyncContext`-Eigenschaft in der Callbackfunktion erfolgen.
      type: any
    return:
      type: void
      description: ''
extends: <xref uid="outlook!Office.Message:interface" />
metadata:
  ms.openlocfilehash: be12513871845769198b94a8bb727ff6e3dd6e24
  ms.sourcegitcommit: 1e0143ae4add09dbe22b0080d22fb25101757fba
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 06/11/2021
  ms.locfileid: "52895434"
