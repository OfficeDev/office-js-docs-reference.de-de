### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.AppointmentRead:interface'
    summary: |-
      Der Termin Teilnehmer Modus von [Office. Context. Mailbox. Item](xref:outlook!Office.Item:interface)<!-- -->.

      **Wichtig**: Dies ist ein internes Outlook-Objekt, das nicht direkt über vorhandene Schnittstellen verfügbar gemacht wird. Sie sollten dies als einen Modus von behandeln`Office.context.mailbox.item`<!-- -->. Weitere Informationen erhalten Sie auf der Seite [Objektmodell](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.1/office.context.mailbox.item) .

      Übergeordnete Schnittstellen:

      - [ItemRead](xref:outlook!Office.ItemRead:interface)

      - [Termin](xref:outlook!Office.Appointment:interface)
    name: Office.AppointmentRead
    fullName: Office.AppointmentRead
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Appointment:interface'
      - 'outlook!Office.ItemRead:interface'
    package: outlook!
    children:
      - 'outlook!Office.AppointmentRead#attachments:member'
      - 'outlook!Office.AppointmentRead#body:member'
      - 'outlook!Office.AppointmentRead#dateTimeCreated:member'
      - 'outlook!Office.AppointmentRead#dateTimeModified:member'
      - 'outlook!Office.AppointmentRead#displayReplyAllForm:member(1)'
      - 'outlook!Office.AppointmentRead#displayReplyForm:member(1)'
      - 'outlook!Office.AppointmentRead#end:member'
      - 'outlook!Office.AppointmentRead#getEntities:member(1)'
      - 'outlook!Office.AppointmentRead#getEntitiesByType:member(1)'
      - 'outlook!Office.AppointmentRead#getFilteredEntitiesByName:member(1)'
      - 'outlook!Office.AppointmentRead#getRegExMatches:member(1)'
      - 'outlook!Office.AppointmentRead#getRegExMatchesByName:member(1)'
      - 'outlook!Office.AppointmentRead#itemClass:member'
      - 'outlook!Office.AppointmentRead#itemId:member'
      - 'outlook!Office.AppointmentRead#itemType:member'
      - 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.AppointmentRead#location:member'
      - 'outlook!Office.AppointmentRead#normalizedSubject:member'
      - 'outlook!Office.AppointmentRead#optionalAttendees:member'
      - 'outlook!Office.AppointmentRead#organizer:member'
      - 'outlook!Office.AppointmentRead#requiredAttendees:member'
      - 'outlook!Office.AppointmentRead#start:member'
      - 'outlook!Office.AppointmentRead#subject:member'
  - uid: 'outlook!Office.AppointmentRead#attachments:member'
    summary: Ruft die Anlagen des Elements als Array ab.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      **Hinweis**: bestimmte Dateitypen werden aufgrund möglicher Sicherheitsprobleme von Outlook blockiert und daher nicht zurückgegeben. Weitere Informationen finden Sie unter [Blockierte Anlagen in Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following code builds an HTML string with details of all attachments on the current item.
      var item = Office.context.mailbox.item;
      var outputString = "";

      if (item.attachments.length > 0) {
          for (i = 0 ; i < item.attachments.length ; i++) {
              var attachment = item.attachments[i];
              outputString += "<BR>" + i + ". Name: ";
              outputString += attachment.name;
              outputString += "<BR>ID: " + attachment.id;
              outputString += "<BR>contentType: " + attachment.contentType;
              outputString += "<BR>size: " + attachment.size;
              outputString += "<BR>attachmentType: " + attachment.attachmentType;
              outputString += "<BR>isInline: " + attachment.isInline;
          }
      }

      console.log(outputString);
      ```
      ```javascript
      var attachments = Office.context.mailbox.item.attachments;
      console.log(attachments);
      ```
    name: attachments
    fullName: attachments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'attachments: AttachmentDetails[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#attachments~0:complex'
  - uid: 'outlook!Office.AppointmentRead#body:member'
    summary: |-
      Ruft ein Objekt ab, das Methoden zum Bearbeiten des Textkörpers eines Elements bereitstellt.

      \[[API-Gruppe: Mailbox 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of the result parameter passed to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.AppointmentRead#dateTimeCreated:member'
    summary: Ruft das Datum und die Uhrzeit der Erstellung eines Elements ab.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;
      console.log("Date and time created: " + dateTimeCreated);
      ```
    name: dateTimeCreated
    fullName: dateTimeCreated
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeCreated: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#dateTimeModified:member'
    summary: |-
      Ruft das Datum und die Uhrzeit der letzten Änderung eines Elements ab.

      **Hinweis**: dieses Element wird in Outlook auf IOS oder Android nicht unterstützt.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var dateTimeModified = Office.context.mailbox.item.dateTimeModified;
      console.log("Date and time modified: " + dateTimeModified);
      ```
    name: dateTimeModified
    fullName: dateTimeModified
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dateTimeModified: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#displayReplyAllForm:member(1)'
    summary: |-
      Zeigt ein Antwortformular an, das den Absender und alle Empfänger der ausgewählten Nachricht oder des Organisators und alle Teilnehmer des ausgewählten Termins enthält.

      In Outlook im Web wird das Antwortformular als Popupformular in der Dreispaltenansicht und als Popupformular in der Zwei- oder Einspaltenansicht angezeigt.

      Wenn einer der Zeichenfolgenparameter seinen Grenzwert überschreitet, löst `displayReplyAllForm` eine Ausnahme aus.

      Wenn Anlagen im `formData.attachments`-Parameter angegeben werden, versuchen Outlook im Web und Desktop-Clients alle Anlagen herunterzuladen und sie an das Antwortformular anzufügen. Wenn Anlagen nicht hinzugefügt werden können, wird in der Formularbenutzeroberfläche ein Fehler ausgegeben. Wenn dies nicht möglich ist, wird keine Fehlermeldung ausgegeben.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following code passes a string to the `displayReplyAllForm` function.
      Office.context.mailbox.item.displayReplyAllForm('hello there');
      Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyAllForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyAllForm(
      {
      'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : Office.MailboxEnums.AttachmentType.File,
              'name' : 'squirrel.png',
              'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
              'type' : 'item',
              'name' : 'rand',
              'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyAllForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
      ```javascript
      Office.context.mailbox.item.displayReplyAllForm(
        "This is a reply ALL with <b>some bold text</b>."
      );
      ```
    name: displayReplyAllForm(formData)
    fullName: displayReplyAllForm(formData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: 'Eine Zeichenfolge, die Text- und HTML-Code enthält, die den Hauptteil des Antwortformulars darstellen. Die Zeichenfolge ist auf 32 KB oder ein [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) -Objekt, das Body-oder Attachment-Daten und eine Rückruffunktion enthält, limitiert.'
          type:
            - 'outlook!Office.AppointmentRead#displayReplyAllForm~0:complex'
  - uid: 'outlook!Office.AppointmentRead#displayReplyForm:member(1)'
    summary: |-
      Zeigt ein Antwortformular an, das nur den Absender der ausgewählten Nachricht oder den Organisator des ausgewählten Termins enthält.

      In Outlook im Web wird das Antwortformular als Popupformular in der Dreispaltenansicht und als Popupformular in der Zwei- oder Einspaltenansicht angezeigt.

      Wenn einer der Zeichenfolgenparameter seinen Grenzwert überschreitet, löst `displayReplyForm` eine Ausnahme aus.

      Wenn Anlagen im `formData.attachments`-Parameter angegeben werden, versuchen Outlook im Web und Desktop-Clients alle Anlagen herunterzuladen und sie an das Antwortformular anzufügen. Wenn Anlagen nicht hinzugefügt werden können, wird in der Formularbenutzeroberfläche ein Fehler ausgegeben. Wenn dies nicht möglich ist, wird keine Fehlermeldung ausgegeben.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following code passes a string to the `displayReplyForm` function.
      Office.context.mailbox.item.displayReplyForm('hello there');
      Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');

      // Reply with an empty body.
      Office.context.mailbox.item.displayReplyForm({});

      // Reply with just a body.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi'
      });

      // Reply with a body and a file attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              }
          ]
      });

      // Reply with a body and an item attachment.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ]
      });

      // Reply with a body, file attachment, item attachment, and a callback.
      Office.context.mailbox.item.displayReplyForm(
      {
          'htmlBody' : 'hi',
          'attachments' :
          [
              {
                  'type' : Office.MailboxEnums.AttachmentType.File,
                  'name' : 'squirrel.png',
                  'url' : 'http://i.imgur.com/sRgTlGR.jpg'
              },
              {
                  'type' : 'item',
                  'name' : 'rand',
                  'itemId' : Office.context.mailbox.item.itemId
              }
          ],
          'callback' : function(asyncResult)
          {
              console.log(asyncResult.value);
          }
      });
      ```
      ```javascript
      Office.context.mailbox.item.displayReplyForm(
        "This is a reply with <i>some text in italics</i>."
      );
      ```
      ```javascript
      Office.context.mailbox.item.displayReplyForm(
      {
          htmlBody : "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
          attachments :
          [
              { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
              { type: "item", itemId : Office.context.mailbox.item.itemId, name: "test_email.msg" }
          ],
          options : { asyncContext: null },
          callback : function (result)
          {
              if (result.status !== Office.AsyncResultStatus.Succeeded)
              {
                  console.error(`Action failed with message ${result.error.message}`);
              }
          }
      });
      ```
    name: displayReplyForm(formData)
    fullName: displayReplyForm(formData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayReplyForm(formData: string | ReplyFormData): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formData
          description: 'Eine Zeichenfolge, die Text- und HTML-Code enthält, die den Hauptteil des Antwortformulars darstellen. Die Zeichenfolge ist auf 32 KB oder ein [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) -Objekt, das Body-oder Attachment-Daten und eine Rückruffunktion enthält, limitiert.'
          type:
            - 'outlook!Office.AppointmentRead#displayReplyForm~0:complex'
  - uid: 'outlook!Office.AppointmentRead#end:member'
    summary: |-
      Ruft Datum und Uhrzeit der Beendigung des Termins ab.

      Die `end` -Eigenschaft ist `Date` ein Objekt, das als Coordinated Universal Time (UTC)-Datum und-Zeitwert ausgedrückt wird. Sie können die `convertToLocalClientTime` -Methode verwenden, um `end` den Eigenschaftswert in das lokale Datum und die Uhrzeit des Clients zu konvertieren.

      Wenn Sie die `Time.setAsync`-Methode verwenden, um die Endzeit im Verfassenmodus festzulegen, sollten Sie die `convertToUtcClientTime`-Methode verwenden, um die Ortszeit auf dem Client für den Server in UTC umzuwandeln.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var end = Office.context.mailbox.item.end;
      console.log("Appointment end: " + end);
      ```
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#getEntities:member(1)'
    summary: |-
      Ruft die Entitäten im Text des ausgewählten Elements ab.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var entities = Office.context.mailbox.item.getEntities();
      var entityTypesFound = 0;
      if (entities.addresses.length > 0) {
          console.warn("physical addresses: ");
          console.log(entities.addresses);
          entityTypesFound++;
      }
      if (entities.contacts.length > 0) {
          console.warn("contacts: ");
          entities.contacts.forEach(function (contact) { console.log(contact.personName); })
          entityTypesFound++;
      }
      if (entities.emailAddresses.length > 0) {
          console.warn("email addresses: ");
          console.log(entities.emailAddresses);
          entityTypesFound++;
      }
      if (entities.meetingSuggestions.length > 0) {
          console.warn("meetings suggestions: ");
          entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
          entityTypesFound++;
      }
      if (entities.phoneNumbers.length > 0) {
          console.warn("phone numbers: ");
          entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
          entityTypesFound++;
      }
      if (entities.taskSuggestions.length > 0) {
          console.warn("task suggestions: ");
          entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
          entityTypesFound++;
      }
      if (entities.urls.length > 0) {
          console.warn("URLs: ");
          console.log(entities.urls);
          entityTypesFound++;
      }
      if (entityTypesFound == 0)
      {
          console.log("No entities found on this item.");
      }
      ```
    name: getEntities()
    fullName: getEntities()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntities(): Entities;'
      return:
        type:
          - 'outlook!Office.Entities:interface'
        description: ''
  - uid: 'outlook!Office.AppointmentRead#getEntitiesByType:member(1)'
    summary: |-
      Ruft ein Array aller Entitäten des angegebenen Typs ab, die im Texts des ausgewählten Elements enthalten sind.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`Restricted`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));
      ```
    name: getEntitiesByType(entityType)
    fullName: getEntitiesByType(entityType)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#getEntitiesByType~0:complex'
        description: 'Wenn der in `entityType` übergebene Wert kein gültiges Element der `EntityType`-Enumeration ist, gibt die Methode null zurück. Wenn keine Entitäten des angegebenen Typs im Text des Elements vorhanden sind, gibt die Methode ein leeres Array zurück. Andernfalls hängt der Typ der Objekte im zurückgegebenen Array vom Typ der Entität ab, die im `entityType`-Parameter angefordert wurde.'
      parameters:
        - id: entityType
          description: |-
            Einer der `EntityType` Aufzählungswerte.

            Während die minimale Berechtigungsstufe für die Verwendung dieser Methode`Restricted`<!-- -->erfordern `ReadItem` einige Entitätstypen den Zugriff, wie in der folgenden Tabelle angegeben.

            <table> <tr> <th>Wert von EntityType</th> <th>Typ der Objekte im zurückgegebenen Array</th> <th>Erforderliche Berechtigungsstufe</th> </tr> <tr> <td>Adresse</td> <td>Zeichenfolge</td> <td>Restricted</td> </tr> <tr> <td>Kontakt</td> <td>Kontakt</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>Zeichenfolge</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>Zeichenfolge</td> <td>Restricted</td> </tr> </table>
          type:
            - 'outlook!Office.AppointmentRead#getEntitiesByType~1:complex'
  - uid: 'outlook!Office.AppointmentRead#getFilteredEntitiesByName:member(1)'
    summary: |-
      Gibt bekannte Entitäten im ausgewählten Element zurück, die den in der XML-Manifestdatei definierten benannten Filter übergeben.

      Die `getFilteredEntitiesByName` -Methode gibt die Entitäten zurück, die dem im `ItemHasKnownEntity` Rule-Element in der Manifest-XML-Datei definierten regulären `FilterName` Ausdruck mit dem angegebenen Elementwert entsprechen.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      // This API would only work when you click on highlighted physical address that has the word "Way" in it.
      console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));
      ```
    name: getFilteredEntitiesByName(name)
    fullName: getFilteredEntitiesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#getFilteredEntitiesByName~0:complex'
        description: 'Wenn im Manifest kein `ItemHasKnownEntity` Element mit einem `FilterName` Elementwert vorhanden ist, der mit dem `name` Parameter übereinstimmt, gibt die Methode`null`<!-- -->. Wenn der `name` Parameter einem `ItemHasKnownEntity` Element im Manifest entspricht, aber keine Entitäten im aktuellen Element vorhanden sind, die übereinstimmen, gibt die Methode ein leeres Array zurück.'
      parameters:
        - id: name
          description: 'Der Name des `ItemHasKnownEntity`-Regelelements, das den entsprechenden Filter definiert.'
          type:
            - string
  - uid: 'outlook!Office.AppointmentRead#getRegExMatches:member(1)'
    summary: |-
      Gibt Zeichenfolgenwerte im ausgewählten Element zurück, die den in der XML-Manifestdatei definierten regulären Ausdrücken entsprechen.

      Die `getRegExMatches`-Methode gibt die Zeichenfolgen zurück, die dem im `ItemHasRegularExpressionMatch`- oder `ItemHasKnownEntity`-Regelelement der XML-Manifestdatei definierten regulären Ausdruck entsprechen. Bei einer `ItemHasRegularExpressionMatch`-Regel muss eine entsprechende Zeichenfolge in der Eigenschaft des Elements vorhanden sein, das von dieser Regel angegeben wird. Der einfache `PropertyName`-Typ definiert die unterstützten Eigenschaften.

      Wenn Sie eine `ItemHasRegularExpressionMatch`-Regel für die Textkörpereigenschaft eines Elements festlegen, sollte der reguläre Ausdruck den Textkörper weiter filtern und nicht versuchen, den gesamten Textkörper des Elements zurückzugeben. Bei Verwendung eines regulären Ausdrucks wie .* zum Abrufen des gesamten Textkörpers eines Elements werden nicht immer die erwarteten Ergebnisse zurückgegeben. Verwenden Sie stattdessen die `Body.getAsync`-Methode, um den gesamten Textkörper abzurufen.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      // The following example shows how to access the array of
      // matches for the regular expression rule elements `fruits`
      // and `veggies`, which are specified in the manifest.
      var allMatches = Office.context.mailbox.item.getRegExMatches();
      var fruits = allMatches.fruits;
      var veggies = allMatches.veggies;
      ```
      ```javascript
      // This API would only work when you click on highlighted word "ScriptLab".
      console.log(Office.context.mailbox.item.getRegExMatches());
      ```
    name: getRegExMatches()
    fullName: getRegExMatches()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatches(): any;'
      return:
        type:
          - any
        description: 'Ein Objekt mit Arrays aus Zeichenfolgen, die den in der XML-Manifestdatei definierten regulären Ausdrücken entsprechen. Der Name jedes Arrays entspricht dem entsprechenden Wert des regexname-Attributs der Übereinstimmungs `ItemHasRegularExpressionMatch` Regel oder des `FilterName` Attributs der Übereinstimmungs `ItemHasKnownEntity` Regel.'
  - uid: 'outlook!Office.AppointmentRead#getRegExMatchesByName:member(1)'
    summary: |-
      Gibt Zeichenfolgenwerte im ausgewählten Element zurück, die dem in der XML-Manifestdatei definierten benannten regulären Ausdruck entsprechen.

      Die `getRegExMatchesByName`-Methode gibt die Zeichenfolgen zurück, die dem im `ItemHasRegularExpressionMatch`-Regelelement der XML-Manifestdatei definierten regulären Ausdruck mit dem angegebenen `RegExName`-Elementwert entsprechen.

      Wenn Sie eine `ItemHasRegularExpressionMatch`-Regel für die Textkörpereigenschaft eines Elements festlegen, sollte der reguläre Ausdruck den Textkörper weiter filtern und nicht versuchen, den gesamten Textkörper des Elements zurückzugeben. Bei Verwendung eines regulären Ausdrucks wie .* zum Abrufen des gesamten Textkörpers eines Elements werden nicht immer die erwarteten Ergebnisse zurückgegeben.

      **Hinweis**: Diese Methode wird in Outlook auf IOS oder Android nicht unterstützt.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      // Consider an add-in manifest has the following `Rule` element:
      //<Rule xsi:type="RuleCollection" Mode="And">
      //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />
      //  <Rule xsi:type="RuleCollection" Mode="Or">
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />
      //  </Rule>
      //</Rule>

      // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.
      //{
      //'fruits': ['apple','banana','Banana','coconut'],
      //'veggies': ['tomato','onion','spinach','broccoli']
      //}

      var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");
      var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");
      ```
      ```javascript
      // This API would only work when you click on highlighted word "ScriptLab".
      console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));
      ```
    name: getRegExMatchesByName(name)
    fullName: getRegExMatchesByName(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRegExMatchesByName(name: string): string[];'
      return:
        type:
          - 'string[]'
        description: 'Ein Array mit den Zeichenfolgen, die dem in der XML-Manifestdatei definierten regulären Ausdruck entsprechen.'
      parameters:
        - id: name
          description: 'Der Name des `ItemHasRegularExpressionMatch`-Regelelements, das den entsprechenden Filter definiert.'
          type:
            - string
  - uid: 'outlook!Office.AppointmentRead#itemClass:member'
    summary: |-
      Ruft die Exchange-Webdienste-Elementklasse des ausgewählten Elements ab.

      Sie können benutzerdefinierte Nachrichtenklassen erstellen, die eine Standardnachrichtenklasse erweitern, beispielsweise eine benutzerdefinierte Termin Nachrichtenklasse.`IPM.Appointment.Contoso`<!-- -->.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      Die `itemClass`-Eigenschaft gibt die Nachrichtenklasse des ausgewählten Elements an. Folgende Standardnachrichtenklassen für das Nachrichten- oder Terminelement sind vorhanden:

      <table> <tr> <th>Typ</th> <th>Beschreibung</th> <th>Item-Klasse</th> </tr> <tr> <td>Terminelemente</td> <td>Dies sind Kalenderelemente der Elementklasse IPM. Termin oder IPM. Termin. vorkommen.</td> <td>IPM. Termin, IPM. Termin. vorkommen</td> </tr> <tr> <td>Nachrichtenelemente</td> <td>Diese Elemente umfassen E-Mail-Nachrichten der Standardnachrichtenklasse "IPM.Note" sowie Besprechungsanfragen, -antworten und -absagen, die "IPM.Schedule.Meeting" als Basisnachrichtenklasse verwenden.</td> <td>IPM. Hinweis: IPM. Schedule. Meeting. Request, IPM. Schedule. Meeting. negativ, IPM. Schedule. Meeting. POS, IPM. Schedule. Meeting. Tent, IPM. Schedule. Meeting. Canceled</td> </tr> </table>

      #### <a name="examples"></a>Beispiele

      ```javascript
      var itemClass = Office.context.mailbox.item.itemClass;
      console.log("Item class: " + itemClass);
      ```
    name: itemClass
    fullName: itemClass
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemClass: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#itemId:member'
    summary: |-
      Ruft die [Exchange Webdienste Element-ID](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange) für das aktuelle Element ab.

      Die `itemId` Eigenschaft steht im Verfassenmodus nicht zur Verfügung. Wenn ein Elementbezeichner erforderlich ist, kann `saveAsync` die-Methode verwendet werden, um das Element im Store zu speichern, wodurch die Element-ID im `asyncResult.value` Parameter in der Rückruffunktion zurückgegeben wird.

      **Hinweis**: der von der `itemId` Eigenschaft zurückgegebene Bezeichner entspricht der [Exchange Webdienste Element-ID](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange) .<!-- -->. Die `itemId`-Eigenschaft ist nicht identisch mit der Outlook-Eintrags-ID oder der ID, die von der Outlook-REST-API verwendet wird. Bevor Rest-API-Aufrufe mit diesem Wert vorgenommen werden, sollte er mithilfe von`Office.context.mailbox.convertToRestId`<!-- -->. Weitere Informationen finden Sie unter [Verwenden der Outlook-Rest-APIs aus einem Outlook-Add-in](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api#get-the-item-id)<!-- -->.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following code checks for the presence of an item
      // identifier. If the `itemId` property returns `null` or
      // `undefined`, it saves the item to the store and gets the
      // item identifier from the asynchronous result.
      // **Important**: `saveAsync` was introduced with requirement set 1.3
      // so you can't get the `itemId` in Compose mode in earlier sets.
      var itemId = Office.context.mailbox.item.itemId;
      if (itemId === null || itemId == undefined) {
          Office.context.mailbox.item.saveAsync(function(result) {
              itemId = result.value;
          });
      }
      ```
    name: itemId
    fullName: itemId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#itemType:member'
    summary: |-
      Ruft den Typ des Elements ab, das eine Instanz darstellt.

      Die `itemType` -Eigenschaft gibt einen der `ItemType` Enumerationswerte zurück, der angibt, ob es sich bei der Item-Objektinstanz um eine Nachricht oder einen Termin handelt.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Appointment) {
          // Do something.
      } else {
          // Do something else.
      }
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.AppointmentRead#itemType~0:complex'
  - uid: 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync:member(1)'
    summary: |-
      Lädt asynchron benutzerdefinierte Eigenschaften für dieses Add-In für das ausgewählte Element.

      Benutzerdefinierte Eigenschaften werden als Schlüssel-/Wert-Paare pro App und pro Element gespeichert. Diese Methode gibt ein `CustomProperties`-Objekt im Rückruf zurück, das Methoden für den Zugriff auf die benutzerdefinierten Eigenschaften für das aktuelle Element und das aktuelle Add-In bietet. Benutzerdefinierte Eigenschaften sind für das Element nicht verschlüsselt und sollten darum nicht als sicherer Speicher verwendet werden.

      Die benutzerdefinierten Eigenschaften werden als `CustomProperties` Objekt in der AsyncResult. Value-Eigenschaft bereitgestellt. Dieses Objekt kann verwendet werden, um benutzerdefinierte Eigenschaften aus dem Element abzurufen, festzulegen und zu entfernen und um Änderungen am benutzerdefinierten Eigenschaftssatz wieder auf dem Server zu speichern.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
      ```javascript
      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Wenn die Methode abgeschlossen ist, wird die Funktion, `callback` die im-Parameter übergeben wird, mit einem einzelnen Parameter vom Typ aufgerufen.`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: 'Optional. Entwickler können ein beliebiges Objekt bereitstellen, auf das sie in der Callbackfunktion zugreifen möchten. Der Zugriff auf dieses Objekt kann über die `asyncResult.asyncContext`-Eigenschaft in der Callbackfunktion erfolgen.'
          type:
            - any
  - uid: 'outlook!Office.AppointmentRead#location:member'
    summary: |-
      Ruft den Ort eines Termins ab.

      Die `location`-Eigenschaft gibt eine Zeichenfolge zurück, die den Ort des Termins enthält.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var location = Office.context.mailbox.item.location;
      console.log("location: " + location);
      ```
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#normalizedSubject:member'
    summary: |-
      Ruft den Betreff eines Elements ab, wobei alle Präfixe entfernt werden (einschließlich Re: und FWD:).

      Die `normalizedSubject` -Eigenschaft ruft den Betreff des Elements mit allen Standard Präfixen (wie Re: und FW:) ab. , die von e-Mail-Programmen hinzugefügt werden. Um den Betreff des Elements mit den Präfixen intakt zu erhalten, verwenden Sie `subject` die-Eigenschaft.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var normalizedSubject = Office.context.mailbox.item.normalizedSubject;
      console.log("Normalized subject: " + normalizedSubject);
      ```
    name: normalizedSubject
    fullName: normalizedSubject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'normalizedSubject: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentRead#optionalAttendees:member'
    summary: |-
      Bietet Zugriff auf die optionalen Teilnehmer eines Ereignisses. Der Typ des Objekts und die Zugriffsebene hängen vom Modus des aktuellen Elements ab.

      Die `optionalAttendees` -Eigenschaft gibt ein Array mit einem [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) -Objekt für jeden optionalen Teilnehmer an der Besprechung zurück. Die Auflistung ist standardmäßig auf höchstens 100 Elemente beschränkt. Unter Windows und Mac können Sie jedoch maximal 500 Mitglieder abrufen.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var apptOptionalAttendees = Office.context.mailbox.item.optionalAttendees;
      console.log("Optional attendees:");
      for (var i = 0; i < apptOptionalAttendees.length; i++) {
        console.log(
          apptOptionalAttendees[i].displayName +
            " (" +
            apptOptionalAttendees[i].emailAddress +
            ") - response: " +
            apptOptionalAttendees[i].appointmentResponse
        );
      }
      ```
    name: optionalAttendees
    fullName: optionalAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'optionalAttendees: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#optionalAttendees~0:complex'
  - uid: 'outlook!Office.AppointmentRead#organizer:member'
    summary: Ruft für eine angegebene Besprechung die E-Mail-Adresse des Organisators der Besprechung ab.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var apptOrganizer = Office.context.mailbox.item.organizer;
      console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      ```
    name: organizer
    fullName: organizer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'organizer: EmailAddressDetails;'
      return:
        type:
          - 'outlook!Office.EmailAddressDetails:interface'
  - uid: 'outlook!Office.AppointmentRead#requiredAttendees:member'
    summary: |-
      Bietet Zugriff auf die erforderlichen Teilnehmer eines Ereignisses. Der Typ des Objekts und die Zugriffsebene hängen vom Modus des aktuellen Elements ab.

      Die `requiredAttendees` -Eigenschaft gibt ein Array zurück, das ein [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) -Objekt für jeden erforderlichen Teilnehmer an der Besprechung enthält. Die Auflistung ist standardmäßig auf höchstens 100 Elemente beschränkt. Unter Windows und Mac können Sie jedoch maximal 500 Mitglieder abrufen.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var apptRequiredAttendees = Office.context.mailbox.item.requiredAttendees;
      console.log("Required attendees:");
      for (var i = 0; i < apptRequiredAttendees.length; i++) {
        console.log(
          apptRequiredAttendees[i].displayName +
            " (" +
            apptRequiredAttendees[i].emailAddress +
            ") - response: " +
            apptRequiredAttendees[i].appointmentResponse
        );
      }
      ```
    name: requiredAttendees
    fullName: requiredAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'requiredAttendees: EmailAddressDetails[];'
      return:
        type:
          - 'outlook!Office.AppointmentRead#requiredAttendees~0:complex'
  - uid: 'outlook!Office.AppointmentRead#start:member'
    summary: |-
      Ruft das Datum und die Uhrzeit für den Beginn des Termins ab.

      Die `start` -Eigenschaft ist `Date` ein Objekt, das als Coordinated Universal Time (UTC)-Datum und-Zeitwert ausgedrückt wird. Sie können die `convertToLocalClientTime` -Methode verwenden, um den Wert in das lokale Datum und die Uhrzeit des Clients zu konvertieren.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      var start = Office.context.mailbox.item.start;
      console.log("Appointment start: " + JSON.stringify(start));
      ```
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Date;'
      return:
        type:
          - '!Date:interface'
  - uid: 'outlook!Office.AppointmentRead#subject:member'
    summary: |-
      Ruft die Beschreibung ab, die im Feld Subject eines Elements angezeigt wird.

      Die `subject`-Eigenschaft ruft den gesamten Betreff des Elements ab oder legt ihn fest – so, wie er vom E-Mail-Server gesendet wird.

      Die `subject`-Eigenschaft gibt eine Zeichenfolge zurück. Verwenden Sie `normalizedSubject` die-Eigenschaft, um den Betreff abzüglich aller führenden Präfixe wie Re: und FW: abzurufen.
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:`ReadItem`

      ** [Zutreffender Outlook-Modus](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**: Termin Teilnehmer

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following JavaScript code example shows how to access the
      // `subject` property of the current item in Outlook.

      // The initialize function is required for all apps.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, app-specific code can run.
              var item = Office.context.mailbox.item;
              var subject = item.subject;
              // Continue with processing the subject of the
              // current item, which can be a message or appointment.
          });
      };
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: string;'
      return:
        type:
          - string
references:
  - uid: 'outlook!Office.Appointment:interface'
    name: Appointment
  - uid: 'outlook!Office.ItemRead:interface'
    name: ItemRead
  - uid: 'outlook!Office.AppointmentRead#attachments~0:complex'
    name: 'AttachmentDetails[]'
    fullName: 'Office.AttachmentDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.AppointmentRead#displayReplyAllForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.AppointmentRead#displayReplyForm~0:complex'
    name: string | ReplyFormData
    fullName: string | Office.ReplyFormData
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'outlook!Office.ReplyFormData:interface'
        name: ReplyFormData
        fullName: Office.ReplyFormData
  - uid: 'outlook!Office.Entities:interface'
    name: Entities
  - uid: 'outlook!Office.AppointmentRead#getEntitiesByType~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.AppointmentRead#getEntitiesByType~1:complex'
    name: MailboxEnums.EntityType | string
    fullName: Office.MailboxEnums.EntityType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.EntityType:enum'
        name: MailboxEnums.EntityType
        fullName: Office.MailboxEnums.EntityType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentRead#getFilteredEntitiesByName~0:complex'
    name: '(string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]'
    fullName: '(string | Office.Contact | Office.MeetingSuggestion | Office.PhoneNumber | Office.TaskSuggestion)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.Contact:interface'
        name: Contact
        fullName: Office.Contact
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.MeetingSuggestion:interface'
        name: MeetingSuggestion
        fullName: Office.MeetingSuggestion
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.PhoneNumber:interface'
        name: PhoneNumber
        fullName: Office.PhoneNumber
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.TaskSuggestion:interface'
        name: TaskSuggestion
        fullName: Office.TaskSuggestion
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.AppointmentRead#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentRead#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentRead#optionalAttendees~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'
  - uid: 'outlook!Office.EmailAddressDetails:interface'
    name: EmailAddressDetails
  - uid: 'outlook!Office.AppointmentRead#requiredAttendees~0:complex'
    name: 'EmailAddressDetails[]'
    fullName: 'Office.EmailAddressDetails[]'
    spec.typeScript:
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]'
        fullName: '[]'