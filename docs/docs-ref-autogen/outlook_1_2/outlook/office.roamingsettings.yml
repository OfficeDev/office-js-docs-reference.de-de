### YamlMime:TSType
name: Office.RoamingSettings
uid: outlook!Office.RoamingSettings:interface
package: outlook!
fullName: Office.RoamingSettings
summary: >-
  Die Einstellungen, die mit den Methoden des `RoamingSettings`-Objekts erstellt werden, werden pro Add-In und pro Benutzer gespeichert. Das heißt, sie sind nur für das Add-In verfügbar, das sie erstellt hat, und nur aus dem Postfach des Benutzers, in dem sie gespeichert werden.


  Während die Outlook-Add-In-API den Zugriff auf diese Einstellungen auf das Add-In beschränkt, das sie erstellt hat, sollten diese Einstellungen nicht als sicherer Speicher betrachtet werden. Auf sie können Exchange-Webdienste oder erweiterte MAPI zugreifen. Sie sollten nicht zum Speichern vertraulicher Informationen wie Benutzeranmeldeinformationen oder Sicherheitstoken verwendet werden.


  Der Name einer Einstellung ist eine Zeichenfolge, während der Wert vom Typ „string“, „number“, „boolean“, „null“, „object“ oder „array“ sein kann.


  Der Zugriff auf das `RoamingSettings`-Objekt erfolgt über die `roamingSettings`-Eigenschaft im `Office.context`-Namespace.


  **Wichtig:**


  - Das Objekt wird nur beim ersten Laden des Add-Ins aus dem dauerhaften `RoamingSettings` Speicher initialisiert. Für Aufgabenbereiche bedeutet dies, dass sie nur initialisiert wird, wenn der Aufgabenbereich zum ersten Mal geöffnet wird. Wenn der Aufgabenbereich zu einer anderen Seite navigiert oder die aktuelle Seite neu lädt, wird das Im-Speicher-Objekt auf seine Ursprünglichen Werte zurückgesetzt, auch wenn das Add-In beibehaltene Änderungen vorgenommen hat. Die dauerhaften Änderungen stehen erst zur Verfügung, wenn der Aufgabenbereich (oder das Element bei ui-less add-ins) geschlossen und erneut geöffnet wird.


  - Wenn diese Einstellungen über Outlook unter Windows oder Mac festgelegt und gespeichert werden, werden diese Einstellungen erst nach einer Browseraktualisierung in Outlook im Web angezeigt.
remarks: >-
  **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`Restricted`


  **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
isPreview: false
isDeprecated: false
type: interface
methods:
- name: get(name)
  uid: outlook!Office.RoamingSettings#get:member(1)
  package: outlook!
  fullName: get(name)
  summary: Ruft die angegebene Einstellung ab.
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`Restricted`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/10-roaming-settings/roaming-settings.yaml

    var settingName = $("#settingName").val();

    var settingValue = Office.context.roamingSettings.get(settingName);

    $("#settingValue").val(settingValue);

    console.log(`The value of setting "${settingName}" is "${settingValue}".`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'get(name: string): any;'
    parameters:
    - id: name
      description: Der Name der abzurufenden Einstellung. Bei der Angabe des Namens wird die Groß-/Kleinschreibung berücksichtigt.
      type: string
    return:
      type: any
      description: 'Typ: String \| Number \| Boolean \| Object \| Array'
- name: remove(name)
  uid: outlook!Office.RoamingSettings#remove:member(1)
  package: outlook!
  fullName: remove(name)
  summary: Entfernt die angegebene Einstellung
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`Restricted`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'remove(name: string): void;'
    parameters:
    - id: name
      description: Der Name der zu entfernenden Einstellung. Bei der Angabe des Namens wird die Groß-/Kleinschreibung berücksichtigt.
      type: string
    return:
      type: void
      description: ''
- name: saveAsync(callback)
  uid: outlook!Office.RoamingSettings#saveAsync:member(1)
  package: outlook!
  fullName: saveAsync(callback)
  summary: >-
    Speichert die Einstellungen.


    Alle von einem Add-In bereits gespeicherten Einstellungen werden bei der Initialisierung geladen, daher können Sie während der Gültigkeitszeit der Sitzung einfach die Methoden set und get verwenden, um mit der speicherinternen Kopie des Einstellungseigenschaftenbehälters zu arbeiten. Wenn Sie die Einstellungen speichern möchten, damit sie bei der nächsten Verwendung des Add-Ins verfügbar sind, verwenden Sie die saveAsync-Methode.
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`Restricted`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/10-roaming-settings/roaming-settings.yaml

    // Save settings in the mailbox to make it available in future sessions.

    Office.context.roamingSettings.saveAsync(function(result) {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
      } else {
        console.log(`Settings saved with status: ${result.status}`);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'saveAsync(callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: callback
      description: Optional. Wenn die Methode abgeschlossen ist, wird die im Parameter übergebene Funktion mit einem einzelnen `callback` Parameter vom Typ aufgerufen. `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: set(name, value)
  uid: outlook!Office.RoamingSettings#set:member(1)
  package: outlook!
  fullName: set(name, value)
  summary: >-
    Legt die angegebene Einstellung fest oder erstellt sie.


    Die Methode erstellt eine neue Einstellung des angegebenen Namens, wenn sie noch nicht vorhanden ist, oder legt eine vorhandene Einstellung `set` des angegebenen Namens fest. Der Wert wird im Dokument als JSON-Seriendarstellung seines Datentyps gespeichert.


    Für die Einstellungen jedes Add-Ins sind maximal 32 KB verfügbar.


    Alle Änderungen, die mit der set-Funktion an Einstellungen vorgenommen werden, werden erst auf dem Server gespeichert, wenn `saveAsync` die Funktion aufgerufen wird.
  remarks: >-
    **[Mindestberechtigungsstufe](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`Restricted`


    **[Anwendbarer Outlook-Modus:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Verfassen oder Lesen


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/10-roaming-settings/roaming-settings.yaml

    var settingName = $("#settingName").val();

    var settingValue = $("#settingValue").val();

    Office.context.roamingSettings.set(settingName, settingValue);

    console.log(`Setting "${settingName}" set to value "${settingValue}".`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(name: string, value: any): void;'
    parameters:
    - id: name
      description: Der Name der festzulegenden oder zu erstellenden Einstellung. Groß-/Kleinschreibung des Namens wird beachtet.
      type: string
    - id: value
      description: Gibt den zu speichernden Wert an.
      type: any
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 988cefdfe1d01f2fa4b6f345b70014b3f31fd344
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51319915"
