### YamlMime:UniversalReference
ms.openlocfilehash: c4c679765c2366dc8b95782f0855853d6568ed53
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/20/2018
ms.locfileid: "24046973"
items:
- uid: office.Office.Binding
  summary: Stellt eine Bindung an einen Abschnitt des Dokuments.
  remarks: >-
    <table><tr><td>Anforderungssätze</td><td>MatrixBinding, TableBinding, TextBinding</td></tr></table>


    Das Binding-Objekt macht die Funktionalität von Alle Bindungen unabhängig vom Typ verfügbar.


    Das Binding-Objekt wird nie direkt aufgerufen. Es ist die abstrakte übergeordnete Klasse von Objekten, die jede Art von Bindung darstellen: [Office.MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->, [Office.TableBinding](xref:office.Office.TableBinding)<!-- -->, oder [Office.TextBinding](xref:office.Office.TextBinding)<!-- -->. Alle drei dieser Objekte erben die GetDataAsync und SetDataAsync-Methoden vom Binding-Objekt, mit denen Sie interagieren mit den Daten in der Bindung. Sie erben auch die Eigenschaften-Id und Typ für diese Eigenschaftswerte Abfragen. Das MatrixBinding und TableBinding-Objekt offen darüber hinaus zusätzliche Methoden für die Matrix und Tabelle-spezifische Features wie Berechnen der Anzahl von Zeilen und Spalten.


    **Supportdetails**


    In der folgenden Matrix ein großes Y gibt an, dass diese Schnittstelle in der entsprechenden Office-hostanwendung unterstützt wird. Eine leere Zelle gibt an, dass die Office-hostanwendung diese Schnittstelle nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: Office.Binding
  fullName: office.Office.Binding
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.Binding.addHandlerAsync
  - office.Office.Binding.document
  - office.Office.Binding.getDataAsync
  - office.Office.Binding.id
  - office.Office.Binding.removeHandlerAsync
  - office.Office.Binding.setDataAsync
  - office.Office.Binding.type
- uid: office.Office.Binding.addHandlerAsync
  summary: Fügt einen Ereignishandler für das Objekt für den angegebenen [Office.EventType](xref:office.Office.EventType)<!-- -->. Unterstützte EventTypes sind `Office.EventType.BindingDataChanged` und `Office.EventType.BindingSelectionChanged`.
  remarks: "Sie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange die Namen der einzelnen Ereignishandlerfunktionen eindeutig sind.\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code sample calls the select method of the Office object to access the binding\n// with ID \"MyBinding\", and then calls the addHandlerAsync method to add a handler function \n// for the bindingDataChanged event of that binding.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingDataChanged, onBindingDataChanged);\n}\n\nfunction onBindingDataChanged(eventArgs) {\n    write(\"Data has changed in binding: \" + eventArgs.binding.id);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To add an event handler for the BindingSelectionChanged event of a binding, \n// use the addHandlerAsync method of the Binding object.\n// The event handler receives an argument of type BindingSelectionChangedEventArgs.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);\n}\n\nfunction onBindingSelectionChanged(eventArgs) {\n    write(eventArgs.binding.id + \" has been selected.\");\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: office.Office.Binding.addHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Der Ereignistyp. Für Bindungen, kann es sein `Office.EventType.BindingDataChanged` oder `Office.EventType.BindingSelectionChanged`.
      type:
      - Office.EventType
    - id: handler
      description: Der Ereignishandlerfunktion hinzufügen, deren einziger Parameter vom Typ[Office.BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) oder [Office.BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)ist<!-- -->.
      type:
      - any
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: Office.AsyncResult<void>) => void'
- uid: office.Office.Binding.document
  summary: Abrufen der Bindung zugeordnete Document-Objekts.
  name: document
  fullName: office.Office.Binding.document
  langs:
  - typeScript
  type: property
  syntax:
    content: 'document: Office.Document;'
    return:
      type:
      - office.Office.Document
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.document.url);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.getDataAsync
  summary: Gibt die in der Bindung enthaltenen Daten zurück.
  remarks: "<table><tr><td>Anforderungssätze</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>\n\nWenn aus einer MatrixBinding oder TableBinding aufgerufen wird, gibt die GetDataAsync-Methode eine Teilmenge der gebundenen Werte zurück, wenn der optionale als StartRow, StartColumn, RowCount und ColumnCount-Parameter angegeben wurden (und diese einen zusammenhängenden und gültigen Bereich angeben).\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction showBindingData() {\n    Office.select(\"bindings#MyBinding\").getDataAsync(function (asyncResult) {\n        write(asyncResult.value)\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// There is an important difference in behavior between using the \"table\" and \"matrix\" coercionType with the\n// Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following\n// two examples. These code examples show event handler functions for the Binding.SelectionChanged event.\n\n// If you specify the \"table\" coercionType, the TableData.rows property ( result.value.rows in the following\n// code example) returns an array that contains only the body rows of the table. So, its 0th row will be the\n// first non-header row in the table.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'table', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value.rows[0][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n\n// However, if you specify the \"matrix\" coercionType, result.value in the following code example returns an array\n// that contains the table header in the 0th row. If the table header contains multiple rows, then these are all\n// included in the result.value matrix as separate rows before the table body rows are included.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'matrix', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value[1][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n```"
  name: getDataAsync(options, callback)
  fullName: office.Office.Binding.getDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet Optionen zum Abrufen der Daten in einer Bindung.
      type:
      - office.Office.GetBindingDataOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die Werte in der angegebenen Bindung. Wenn die `coercionType` Parameter angegeben ist (und der Aufruf erfolgreich ist), die Daten im im CoercionType-Enumerationsthema beschriebenen Format zurückgegeben.
      type:
      - '(result: AsyncResult<T>) => void'
- uid: office.Office.Binding.id
  summary: Eine Zeichenfolge, die diese Bindung in den Bindungen in demselben [Office.Document](xref:office.Office.Document) Objekt eindeutig identifiziert.
  name: id
  fullName: office.Office.Binding.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.id);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.Binding.removeHandlerAsync
  summary: Entfernt den angegebenen Handler aus der Bindung für den angegebenen Ereignistyp.
  remarks: >-
    <table><tr><td>Anforderungssätze</td><td>BindingEvents</td></tr></table>

    #### Beispiele


    ```javascript

    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(
            Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }

    ```
  name: removeHandlerAsync(eventType, options, callback)
  fullName: office.Office.Binding.removeHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Der Ereignistyp. Für Bindungen, kann es sein `Office.EventType.BindingDataChanged` oder `Office.EventType.BindingSelectionChanged`.
      type:
      - Office.EventType
    - id: options
      description: Bietet Optionen, um zu bestimmen, welche Ereignishandler oder Handler entfernt werden.
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.setDataAsync
  summary: Schreibt Daten in den gebundenen Abschnitt des Dokuments, die vom angegebenen Bindungsobjekt dargestellt werden.
  remarks: "<table><tr><td>Anforderungssätze</td><td>MatrixBindings, TableBindings, TextBindings</td></tr></table>\n\nDer Wert für Daten enthält die Daten in der Bindung geschrieben werden sollen. Die Art der übergebenen Wert bestimmt, was geschrieben werden soll, wie in der folgenden Tabelle beschrieben.\n\n<table> <tr> <th>`data`Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Nur-Text oder alle Werte, die in einen String umgewandelt werden können, werden geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays (\"Matrix\")</td> <td>Es werden Tabellendaten ohne Kopfzeilen geschrieben. Wenn z. B. Daten in drei Zeilen in zwei Spalten geschrieben werden sollen, können Sie ein Array wie das Folgende übergeben: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`. Um eine einzelne Spalte mit drei Zeilen zu schreiben, übergeben Sie ein solches: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`.</td> </tr> <tr> <td>Ein [Office.TableData](xref:office.Office.TableData) -Objekt</td> <td>Eine Tabelle mit Kopfzeilen wird geschrieben.</td> </tr> </table>\n\nAußerdem werden diese anwendungsspezifischen Aktionen angewendet, wenn Daten in eine Bindung geschrieben werden. Word werden die angegebenen Data wie folgt in die Bindung geschrieben:\n\n<table> <tr> <th>`data`Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text wird geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays (\"Matrix\") oder ein [Office.TableData](xref:office.Office.TableData) -Objekt</td> <td>Word-Tabelle wird geschrieben.</td> </tr> <tr> <td>HTML</td> <td>Der angegebene HTML-Code wird geschrieben. Wenn eines der HTML-Code zu schreiben Sie ungültig ist, löst Word keinen Fehler. Word wird als ein Großteil der HTML-Code schreiben, können und wird ausgelassen werden ungültigen Daten.</td> </tr> <tr> <td>Office Open XML (\"Open XML\")</td> <td>Der angegebene XML-Code wird geschrieben.</td> </tr> </table>\n\nIn Excel wird die angegebenen Data wie folgt in die Bindung geschrieben:\n\n<table> <tr> <th>`data`Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text ist als der Wert der ersten gebundenen Zelle eingefügt. Sie können auch eine gültige Formel zum Hinzufügen dieser Formel auf die gebundenen Zelle angeben. Indem Sie den Wert data auf `\"=SUM(A1:A5)\"` festlegen, wird das Ergebnis der Werte im angegebenen Bereich angezeigt. Wenn Sie jedoch eine Formel für die gebundene Zelle festlegen, können Sie die hinzugefügte Formel (oder eine bereits vorhandene Formel) anschließend nicht mehr aus der gebundenen Zelle lesen. Wenn Sie auf die gebundenen Zelle zum Lesen von Daten die Binding.getDataAsync-Methode aufrufen, kann die-Methode nur in der Zelle (das Ergebnis der Formel) angezeigten Daten zurück.</td> </tr> <tr> <td>Ein Array von Arrays (\"Matrix\"), die Form entspricht genau der Form der angegebenen Bindung entspricht</td> <td>Der Satz von Zeilen und Spalten wird geschrieben. Sie können auch ein Array von Arrays angeben, die gültige Formeln, um sie an die gebundenen Zellen hinzuzufügen enthalten. Festlegen von Daten beispielsweise auf `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` wird eine Bindung, die zwei Zellen enthält zwei Formeln hinzugefügt. Wie beim Festlegen von auf einer einzelnen gebundenen Zelle einer Formel, die Sie die hinzugefügten Formeln (oder alle vorhandenen Formeln) aus der Bindung mit nicht lesen können die `Binding.getDataAsync` Method - gibt nur die Daten in den gebundenen Zellen angezeigte zurück.</td> </tr> <tr> <td>Ein [Office.TableData](xref:office.Office.TableData) -Objekt und die Form der Tabelle entspricht der gebundenen Tabelle.</td> <td>Der angegebene Zeilen- und/oder Kopfzeilensatz wird geschrieben, wenn keine anderen Daten in den umgebenden Zellen überschrieben werden. Hinweis: Wenn Sie Formeln im TableData-Objekt angeben, das Sie für den *data*-Parameter weitergeben, erhalten Sie wegen der \"berechnete Spalten\"-Funktion in Excel möglicherweise nicht die erwarteten Ergebnisse, wodurch Formeln in einer Spalte automatisch dupliziert werden. Wenn Sie dies beim Schreiben der *data*, die Formeln einer gebundenen Tabelle enthalten, umgehen möchten, geben Sie die Daten als einen Array von Arrays an (statt eines  TableData-Objekts) und geben Sie den *coercionType* als Microsoft.Office.Matrix oder \"Matrix\" an.</td> </tr> </table>\n\nFür Excel Web App:\n\n- Die Gesamtzahl der Zellen in der an die Data-Parameter übergebene Wert darf 20.000 in einem einzigen Aufruf dieser Methode nicht überschreiten.\n\n- Die Anzahl der Formatierungsgruppen, die an den cellFormat-Parameter weitergegeben werden, darf 100 nicht überschreiten. Eine Formatierungsgruppe besteht aus einem Formatierungssatz, der auf einen bestimmten Zellbereich angewendet wird.\n\nIn allen anderen Fällen wird ein Fehler zurückgegeben.\n\nSetDataAsync-Methode schreiben Daten in einem Teilsatz einer Tabellen-oder matrixbindung geschrieben, wenn der optionale StartRow-Parameter und der optionale StartColumn-Parameter angegeben wurden und diese einen gültigen Bereich angeben.\n\nDie Eigenschaften des AsyncResult-Objekts können Sie in der an die SetDataAsync-Methode übergebenen Rückruffunktion die folgenden Informationen zurückzugeben.\n\n<table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da kein Objekt oder Daten abzurufen.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Verwenden Sie diese Eigenschaft, um zu ermitteln, ob der Vorgang erfolgreich war.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Verwenden Sie diese Eigenschaft, um auf ein Error-Objekt zuzugreifen, das Informationen zu dem Fehler bereitstellt, wenn der Vorgang fehlgeschlagen ist.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>\n#### Beispiele\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
  name: setDataAsync(data, options, callback)
  fullName: office.Office.Binding.setDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: >-
        Die in der aktuellen Auswahl festzulegenden Daten. Mögliche Datentypen von Host: Zeichenfolge: Excel, Online Excel, Word und Word Online nur Array von Arrays: Excel und Word nur[Office.TableData](xref:office.Office.TableData)<!-- -->: Access, Excel und Word nur


        HTML: Word- und Word nur Online


        Office Open XML: Nur Word
      type:
      - TableData | any
    - id: options
      description: Bietet Optionen zur Anzeige von Daten in eine Bindung festzulegen.
      type:
      - office.Office.SetBindingDataOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Binding.type
  summary: Ruft den Typ der Bindung ab.
  name: type
  fullName: office.Office.Binding.type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'type: Office.BindingType;'
    return:
      type:
      - Office.BindingType
      description: "\n#### <a name=\"examples\"></a>Examples\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"MyBinding\", function (asyncResult) { \n    write(asyncResult.value.type); \n}) \n\n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message;  \n}\n```"
