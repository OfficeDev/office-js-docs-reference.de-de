### YamlMime:UniversalReference
items:
  - uid: office.Office.Binding
    summary: |-
      Stellt eine Bindung an einen Abschnitt des Dokuments dar.

      Das Binding-Objekt macht die Funktionalität von allen Bindungen unabhängig vom Typ verfügbar.

      Das Binding-Objekt wird nie direkt aufgerufen. Es handelt sich um die abstrakte übergeordnete Klasse der Objekte, die die einzelnen Bindungstypen darstellen: [Office. MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->, [Office. Filebinding](xref:office.Office.TableBinding)<!-- -->oder [Office. TextBinding](xref:office.Office.TextBinding)<!-- -->. Alle drei dieser Objekte erben die Methoden getDataAsync und setDataAsync vom Binding-Objekt, mit denen Sie mit den Daten in der Bindung interagieren können. Außerdem erben Sie die ID-und Type-Eigenschaften für die Abfrage dieser Eigenschaftswerte. Darüber hinaus werden in den MatrixBinding-und Table Binding-Objekten zusätzliche Methoden für Matrix-und tabellenspezifische Features bereitgestellt, beispielsweise das zählen der Anzahl von Zeilen und Spalten.
    remarks: |-
      **Hosts**: Access, Excel, Word

      **Anforderungs Sätze**:

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)
    name: Office.Binding
    fullName: Office.Binding
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Binding.addHandlerAsync
      - office.Office.Binding.addHandlerAsync_1
      - office.Office.Binding.getDataAsync
      - office.Office.Binding.getDataAsync_1
      - office.Office.Binding.removeHandlerAsync
      - office.Office.Binding.removeHandlerAsync_1
      - office.Office.Binding.setDataAsync
      - office.Office.Binding.setDataAsync_1
      - office.Office.Binding.document
      - office.Office.Binding.id
      - office.Office.Binding.type
  - uid: office.Office.Binding.addHandlerAsync
    summary: 'Fügt dem Objekt einen Ereignishandler für den angegebenen [Office. EventType hinzu.](xref:office.Office.EventType)<!-- -->. Unterstützte `Office.EventType.BindingDataChanged` EventTypes sind und`Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Anforderungssatz**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Sie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange der Name jeder Ereignishandlerfunktion eindeutig ist.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Der Ereignistyp. Bei Bindungen kann es sich `Office.EventType.BindingDataChanged` um oder`Office.EventType.BindingSelectionChanged`<!-- -->.
          type:
            - Office.EventType
        - id: handler
          description: 'Die hinzuzufügende Ereignishandlerfunktion, deren einziger Parameter vom Typ [Office. BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) oder [Office. BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.'
          type:
            - any
        - id: options
          description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: Office.AsyncResult<void>) => void'
  - uid: office.Office.Binding.addHandlerAsync_1
    summary: 'Fügt dem Objekt einen Ereignishandler für den angegebenen [Office. EventType hinzu.](xref:office.Office.EventType)<!-- -->. Unterstützte `Office.EventType.BindingDataChanged` EventTypes sind und`Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Anforderungssatz**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Sie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange der Name jeder Ereignishandlerfunktion eindeutig ist.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following code sample calls the select method of the Office object to access the binding
      // with ID "MyBinding", and then calls the addHandlerAsync method to add a handler function 
      // for the bindingDataChanged event of that binding.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingDataChanged, onBindingDataChanged);
      }

      function onBindingDataChanged(eventArgs) {
          write("Data has changed in binding: " + eventArgs.binding.id);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // To add an event handler for the BindingSelectionChanged event of a binding, 
      // use the addHandlerAsync method of the Binding object.
      // The event handler receives an argument of type BindingSelectionChangedEventArgs.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);
      }

      function onBindingSelectionChanged(eventArgs) {
          write(eventArgs.binding.id + " has been selected.");
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Der Ereignistyp. Bei Bindungen kann es sich `Office.EventType.BindingDataChanged` um oder`Office.EventType.BindingSelectionChanged`<!-- -->.
          type:
            - Office.EventType
        - id: handler
          description: 'Die hinzuzufügende Ereignishandlerfunktion, deren einziger Parameter vom Typ [Office. BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) oder [Office. BindingSelectionChangedEventArgs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.'
          type:
            - any
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: Office.AsyncResult<void>) => void'
  - uid: office.Office.Binding.getDataAsync
    summary: Gibt die in der Bindung enthaltenen Daten zurück.
    remarks: |-
      **Anforderungs Sätze**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von`Office.CoercionType.Html`<!-- -->),

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [Zwangs Konvertierung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von`Office.CoercionType.Text`<!-- -->)

      Wenn die getDataAsync-Methode aus einer MatrixBinding oder einer Tabelle aufgerufen wird, gibt Sie eine Teilmenge der gebundenen Werte zurück, wenn die optionalen Parameter startRow, startColumn, rowCount und columnCount angegeben werden (und Sie einen zusammenhängenden und gültigen Bereich angeben).
    name: 'getDataAsync(options, callback)'
    fullName: 'getDataAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Bietet Optionen zum Abrufen der Daten in einer Bindung.
          type:
            - office.Office.GetBindingDataOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die Werte in der angegebenen Bindung. Wenn der `coercionType` Parameter angegeben wird (und der Aufruf erfolgreich ist), werden die Daten in dem Format zurückgegeben, das im Thema CoercionType-Aufzählung beschrieben wird.'
          type:
            - '(result: AsyncResult<T>) => void'
  - uid: office.Office.Binding.getDataAsync_1
    summary: Gibt die in der Bindung enthaltenen Daten zurück.
    remarks: |-
      **Anforderungs Sätze**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [Zwangs Konvertierung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von`Office.CoercionType.Text`<!-- -->)

      Wenn die getDataAsync-Methode aus einer MatrixBinding oder einer Tabelle aufgerufen wird, gibt Sie eine Teilmenge der gebundenen Werte zurück, wenn die optionalen Parameter startRow, startColumn, rowCount und columnCount angegeben werden (und Sie einen zusammenhängenden und gültigen Bereich angeben).

      #### <a name="examples"></a>Beispiele

      ```javascript
      function showBindingData() {
          Office.select("bindings#MyBinding").getDataAsync(function (asyncResult) {
              write(asyncResult.value)
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // There is an important difference in behavior between using the "table" and "matrix" coercionType with the
      // Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following
      // two examples. These code examples show event handler functions for the Binding.SelectionChanged event.

      // If you specify the "table" coercionType, the TableData.rows property ( result.value.rows in the following
      // code example) returns an array that contains only the body rows of the table. So, its 0th row will be the
      // first non-header row in the table.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'table', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value.rows[0][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }

      // However, if you specify the "matrix" coercionType, result.value in the following code example returns an array
      // that contains the table header in the 0th row. If the table header contains multiple rows, then these are all
      // included in the result.value matrix as separate rows before the table body rows are included.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'matrix', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value[1][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getDataAsync(callback)
    fullName: getDataAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die Werte in der angegebenen Bindung. Wenn der `coercionType` Parameter angegeben wird (und der Aufruf erfolgreich ist), werden die Daten in dem Format zurückgegeben, das im Thema CoercionType-Aufzählung beschrieben wird.'
          type:
            - '(result: AsyncResult<T>) => void'
  - uid: office.Office.Binding.removeHandlerAsync
    summary: Entfernt den angegebenen Handler aus der Bindung für den angegebenen Ereignistyp.
    remarks: '**Anforderungssatz**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)'
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Der Ereignistyp. Bei Bindungen kann es sich `Office.EventType.BindingDataChanged` um oder`Office.EventType.BindingSelectionChanged`<!-- -->.
          type:
            - Office.EventType
        - id: options
          description: 'Stellt Optionen bereit, um zu bestimmen, welcher Ereignishandler oder welche Handler entfernt werden.'
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.removeHandlerAsync_1
    summary: Entfernt den angegebenen Handler aus der Bindung für den angegebenen Ereignistyp.
    remarks: |-
      **Anforderungssatz**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      #### <a name="examples"></a>Beispiele

      ```javascript
      function removeEventHandlerFromBinding() {
          Office.select("bindings#MyBinding").removeHandlerAsync(
              Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
      }
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Der Ereignistyp. Bei Bindungen kann es sich `Office.EventType.BindingDataChanged` um oder`Office.EventType.BindingSelectionChanged`<!-- -->.
          type:
            - Office.EventType
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.setDataAsync
    summary: 'Schreibt Daten in den gebundenen Abschnitt des Dokuments, die vom angegebenen Bindungsobjekt dargestellt werden.'
    remarks: |-
      **Anforderungs Sätze**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [Zwangs Konvertierung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von`Office.CoercionType.Text`<!-- -->)

      Der für Data übergebene Wert enthält die Daten, die in der Bindung geschrieben werden sollen. Der übergebene Wert bestimmt, wie in der folgenden Tabelle dargestellt, was in die Bindung geschrieben werden soll.

      <table> <tr> <th>`data`Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Nur-Text oder alle Elemente, die in eine Zeichenfolge umgewandelt werden können, werden geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays ("Matrix")</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Um eine einzelne Spalte mit drei Zeilen zu schreiben, führen Sie ein Array wie folgt aus:`[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>Ein `TableData` Objekt</td> <td>Eine Tabelle mit Kopfzeilen wird geschrieben.</td> </tr> </table>

      Außerdem werden diese anwendungsspezifischen Aktionen angewendet, wenn Daten in eine Bindung geschrieben werden. Für Word werden die angegebenen Daten wie folgt in die Bindung geschrieben:

      <table> <tr> <th>`data`Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text wird geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays ("Matrix") oder ein `TableData` Objekt</td> <td>Word-Tabelle wird geschrieben.</td> </tr> <tr> <td>HTML</td> <td>Der angegebene HTML-Code wird geschrieben. Wenn der geschriebene HTML-Code ungültig ist, löst Word keinen Fehler aus. Der HTML-Code wird in Word so weit wie möglich geschrieben, und alle ungültigen Daten werden weggelassen.</td> </tr> <tr> <td>Office Open XML ("Open XML")</td> <td>Der angegebene XML-Code wird geschrieben.</td> </tr> </table>

      In Excel werden die angegebenen data wie folgt in die Bindung geschrieben:

      <table> <tr> <th>`data`Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text wird als Wert der ersten gebundenen Zelle eingefügt. Sie können auch eine gültige Formel angeben, um diese Formel der gebundenen Zelle hinzuzufügen. Indem Sie den Wert data auf `"=SUM(A1:A5)"` festlegen, wird das Ergebnis der Werte im angegebenen Bereich angezeigt. Wenn Sie jedoch eine Formel für die gebundene Zelle festlegen, können Sie die hinzugefügte Formel (oder eine bereits vorhandene Formel) anschließend nicht mehr aus der gebundenen Zelle lesen. Wenn Sie die Binding.getDataAsync-Methode in der gebundenen Zelle aufrufen, um die Daten auszulesen, kann die Methode nur die in der Zelle angezeigten Daten (das Formelergebnis) zurückgeben.</td> </tr> <tr> <td>Ein Array von Arrays ("Matrix"), die Form entspricht genau der Form der angegebenen Bindung entspricht</td> <td>Der Satz von Zeilen und Spalten wird geschrieben. Sie können auch ein Array von Arrays mit gültigen Formeln angeben, um Sie den gebundenen Zellen hinzuzufügen. Wenn Sie beispielsweise Data festlegen `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` , werden diese beiden Formeln einer Bindung hinzugefügt, die zwei Zellen enthält. Wenn Sie eine Formel für eine einzelne gebundene Zelle festlegen, können Sie die hinzugefügten Formeln (oder bereits vorhandene Formeln) nicht mit der `Binding.getDataAsync` -Methode aus der Bindung lesen – es werden nur die Daten zurückgegeben, die in den gebundenen Zellen angezeigt werden.</td> </tr> <tr> <td>Ein `TableData` Objekt, und die Form der Tabelle entspricht der gebundenen Tabelle.</td> <td>Der angegebene Satz von Zeilen und/oder Kopfzeilen wird geschrieben, falls keine anderen Daten in angrenzenden Zellen überschrieben werden. **Hinweis**: Wenn Sie Formeln im Datenobjekt angeben, das Sie für den *Data* -Parameter übergeben haben, erhalten Sie möglicherweise nicht die erwarteten Ergebnisse aufgrund des Features "berechnete Spalten" von Excel, das automatisch Formeln innerhalb einer Spalte dupliziert. Wenn Sie dies beim Schreiben der *data*, die Formeln einer gebundenen Tabelle enthalten, umgehen möchten, geben Sie die Daten als einen Array von Arrays an (statt eines TableData-Objekts) und geben Sie den *coercionType* als Microsoft.Office.Matrix oder "Matrix" an.</td> </tr> </table>

      Für Excel online:

      - Die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Wert darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.

      - Die Anzahl der an den cellFormat-Parameter übergebenen Formatierungs Gruppen darf 100 nicht überschreiten. Eine einzelne Formatierungsgruppe besteht aus einem Formatierungssatz, der auf einen bestimmten Zellenbereich angewendet wird.

      In allen anderen Fällen wird ein Fehler zurückgegeben.

      Die setDataAsync-Methode schreibt Daten in eine Teilmenge einer Tabelle oder Matrix Bindung, wenn die optionalen Parameter startRow und startColumn angegeben werden, und geben Sie einen gültigen Bereich an.

      In der callback-Funktion, die an die setDataAsync-Methode weitergegeben wird, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.

      <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, weil kein Objekt oder Daten zum Abruf existieren.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>
    name: 'setDataAsync(data, options, callback)'
    fullName: 'setDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Die in der aktuellen Auswahl festzulegenden Daten. Mögliche Datentypen nach Host:

            Zeichenfolge: nur Excel, Excel Online, Word und Word Online

            Array von Arrays: nur Excel und Word

            [Office.-Daten](xref:office.Office.TableData)<!-- -->: Nur Access, Excel und Word

            HTML: nur Word und Word Online

            Office Open XML: nur Word
          type:
            - TableData | any
        - id: options
          description: Bietet Optionen zum Festlegen der Daten in einer Bindung.
          type:
            - office.Office.SetBindingDataOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.setDataAsync_1
    summary: 'Schreibt Daten in den gebundenen Abschnitt des Dokuments, die vom angegebenen Bindungsobjekt dargestellt werden.'
    remarks: |-
      **Anforderungs Sätze**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [Zwangs Konvertierung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von`Office.CoercionType.Text`<!-- -->)

      Der für Data übergebene Wert enthält die Daten, die in der Bindung geschrieben werden sollen. Der übergebene Wert bestimmt, wie in der folgenden Tabelle dargestellt, was in die Bindung geschrieben werden soll.

      <table> <tr> <th>`data`Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Nur-Text oder alle Elemente, die in eine Zeichenfolge umgewandelt werden können, werden geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays ("Matrix")</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Um eine einzelne Spalte mit drei Zeilen zu schreiben, führen Sie ein Array wie folgt aus:`[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>Ein `TableData` Objekt</td> <td>Eine Tabelle mit Kopfzeilen wird geschrieben.</td> </tr> </table>

      Außerdem werden diese anwendungsspezifischen Aktionen angewendet, wenn Daten in eine Bindung geschrieben werden. Für Word werden die angegebenen Daten wie folgt in die Bindung geschrieben:

      <table> <tr> <th>`data`Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text wird geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays ("Matrix") oder ein `TableData` Objekt</td> <td>Word-Tabelle wird geschrieben.</td> </tr> <tr> <td>HTML</td> <td>Der angegebene HTML-Code wird geschrieben. Wenn der geschriebene HTML-Code ungültig ist, löst Word keinen Fehler aus. Der HTML-Code wird in Word so weit wie möglich geschrieben, und alle ungültigen Daten werden weggelassen.</td> </tr> <tr> <td>Office Open XML ("Open XML")</td> <td>Der angegebene XML-Code wird geschrieben.</td> </tr> </table>

      In Excel werden die angegebenen data wie folgt in die Bindung geschrieben:

      <table> <tr> <th>`data`Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text wird als Wert der ersten gebundenen Zelle eingefügt. Sie können auch eine gültige Formel angeben, um diese Formel der gebundenen Zelle hinzuzufügen. Indem Sie den Wert data auf `"=SUM(A1:A5)"` festlegen, wird das Ergebnis der Werte im angegebenen Bereich angezeigt. Wenn Sie jedoch eine Formel für die gebundene Zelle festlegen, können Sie die hinzugefügte Formel (oder eine bereits vorhandene Formel) anschließend nicht mehr aus der gebundenen Zelle lesen. Wenn Sie die Binding.getDataAsync-Methode in der gebundenen Zelle aufrufen, um die Daten auszulesen, kann die Methode nur die in der Zelle angezeigten Daten (das Formelergebnis) zurückgeben.</td> </tr> <tr> <td>Ein Array von Arrays ("Matrix"), die Form entspricht genau der Form der angegebenen Bindung entspricht</td> <td>Der Satz von Zeilen und Spalten wird geschrieben. Sie können auch ein Array von Arrays mit gültigen Formeln angeben, um Sie den gebundenen Zellen hinzuzufügen. Wenn Sie beispielsweise Data festlegen `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` , werden diese beiden Formeln einer Bindung hinzugefügt, die zwei Zellen enthält. Wenn Sie eine Formel für eine einzelne gebundene Zelle festlegen, können Sie die hinzugefügten Formeln (oder bereits vorhandene Formeln) nicht mit der `Binding.getDataAsync` -Methode aus der Bindung lesen – es werden nur die Daten zurückgegeben, die in den gebundenen Zellen angezeigt werden.</td> </tr> <tr> <td>Ein `TableData` Objekt, und die Form der Tabelle entspricht der gebundenen Tabelle.</td> <td>Der angegebene Satz von Zeilen und/oder Kopfzeilen wird geschrieben, falls keine anderen Daten in angrenzenden Zellen überschrieben werden. **Hinweis**: Wenn Sie Formeln im Datenobjekt angeben, das Sie für den *Data* -Parameter übergeben haben, erhalten Sie möglicherweise nicht die erwarteten Ergebnisse aufgrund des Features "berechnete Spalten" von Excel, das automatisch Formeln innerhalb einer Spalte dupliziert. Wenn Sie dies beim Schreiben der *data*, die Formeln einer gebundenen Tabelle enthalten, umgehen möchten, geben Sie die Daten als einen Array von Arrays an (statt eines TableData-Objekts) und geben Sie den *coercionType* als Microsoft.Office.Matrix oder "Matrix" an.</td> </tr> </table>

      Für Excel online:

      - Die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Wert darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.

      - Die Anzahl der an den cellFormat-Parameter übergebenen Formatierungs Gruppen darf 100 nicht überschreiten. Eine einzelne Formatierungsgruppe besteht aus einem Formatierungssatz, der auf einen bestimmten Zellenbereich angewendet wird.

      In allen anderen Fällen wird ein Fehler zurückgegeben.

      Die setDataAsync-Methode schreibt Daten in eine Teilmenge einer Tabelle oder Matrix Bindung, wenn die optionalen Parameter startRow und startColumn angegeben werden, und geben Sie einen gültigen Bereich an.

      In der callback-Funktion, die an die setDataAsync-Methode weitergegeben wird, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.

      <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, weil kein Objekt oder Daten zum Abruf existieren.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>

      #### <a name="examples"></a>Beispiele

      ```javascript
      function setBindingData() {
          Office.select("bindings#MyBinding").setDataAsync('Hello World!', function (asyncResult) { });
      }

      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.
      // For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter 
      // as "html" as shown in the following example, which uses HTML <b> tags to make "Hello" bold.
      function writeHtmlData() {
          Office.select("bindings#myBinding").setDataAsync(
              "<b>Hello</b> World!", {coercionType: "html"}, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In this example, the call to setDataAsync passes the data parameter as an array of arrays
      // (to create a single column of three rows), and specifies the data structure with the 
      // coercionType parameter as a "matrix".
      function writeBoundDataMatrix() {
          Office.select("bindings#myBinding").setDataAsync(
              [['Berlin'],['Munich'],['Duisburg']],{ coercionType: "matrix" }, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter 
      // as a TableData object (to write three columns and three rows), and specifies the data structure
      // with the coercionType parameter as a "table".

      // In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,
      // but as a single column with a new header and three rows, to update the values in the last column 
      // of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter 
      // is specified as 2 to replace the values in the third column of the table.
      function writeBoundDataTable() {
          // Create a TableData object.
          var myTable = new Office.TableData();
          myTable.headers = ['First Name', 'Last Name', 'Grade'];
          myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];

          // Set myTable in the binding.
          Office.select("bindings#myBinding").setDataAsync(myTable, { coercionType: "table" }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }

      // Replace last column with different data.
      function updateTableData() {
          var newTable = new Office.TableData();
          newTable.headers = ["Gender"];
          newTable.rows = [["M"],["M"],["F"]];
          Office.select("bindings#myBinding").setDataAsync(newTable, { coercionType: "table", startColumn:2 }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }     
          });   
      }

      // In this example, the following call passes two formatting groups to cellFormat.
      Office.select("bindings#myBinding").setDataAsync([['Berlin'],['Munich'],['Duisburg']],
        {cellFormat:[{cells: {row: 1}, format: {fontColor: "yellow"}}, 
            {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}]}, 
        function (asyncResult){});
      ```
    name: 'setDataAsync(data, callback)'
    fullName: 'setDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Die in der aktuellen Auswahl festzulegenden Daten. Mögliche Datentypen nach Host:

            Zeichenfolge: nur Excel, Excel Online, Word und Word Online

            Array von Arrays: nur Excel und Word

            `TableData`<!-- -->: Nur Access, Excel und Word

            HTML: nur Word und Word Online

            Office Open XML: nur Word
          type:
            - TableData | any
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.document
    summary: 'Rufen Sie das Document-Objekt ab, das der Bindung zugeordnet ist.'
    name: document
    fullName: document
    langs:
      - typeScript
    type: property
    syntax:
      content: 'document: Office.Document;'
      return:
        type:
          - office.Office.Document
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.document.url);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.Binding.id
    summary: 'Eine Zeichenfolge, die diese Bindung zwischen den Bindungen in demselben [Office. Document](xref:office.Office.Document) -Objekt eindeutig identifiziert.'
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.id);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.Binding.type
    summary: Ruft den Typ der Bindung ab.
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'type: Office.BindingType;'
      return:
        type:
          - Office.BindingType
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Office.context.document.bindings.getByIdAsync("MyBinding", function (asyncResult) { 
              write(asyncResult.value.type); 
          }) 

          // Function that writes to a div with id='message' on the page. 
          function write(message){ 
              document.getElementById('message').innerText += message;  
          }
          ```