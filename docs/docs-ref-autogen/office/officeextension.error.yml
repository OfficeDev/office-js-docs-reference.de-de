### YamlMime:UniversalReference
ms.openlocfilehash: 871024b1f5fc48a59891b6e56cf8c1f8b6fe2b8b
ms.sourcegitcommit: a36161c2113d94680dc68150d024e68bdf0390fa
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 10/10/2018
ms.locfileid: "25458054"
items:
- uid: office.OfficeExtension.Error
  summary: Das Error-Objekt zurückgegebene `context.sync()` <!-- -->, wenn eine Zusage aufgrund eines Fehlers bei der Verarbeitung der Anforderung zurückgewiesen wird.
  name: OfficeExtension.Error
  fullName: office.OfficeExtension.Error
  langs:
  - typeScript
  type: class
  package: office
  remarks: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the document body.\n    var body = context.document.body;\n\n    // Queue a commmand to insert text in to the beginning of the body.\n    // This will cause an OfficeExtension.Error.\n    body.insertText(0);\n\n    // Synchronize the document state by executing the queued-up commands,\n    // and return a promise to indicate task completion.\n    return context.sync();\n})\n.catch(function (error) {\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Error code and message: ' + error.toString());\n    }\n});\n```"
  children:
  - office.OfficeExtension.Error.code
  - office.OfficeExtension.Error.debugInfo
  - office.OfficeExtension.Error.innerError
  - office.OfficeExtension.Error.message
  - office.OfficeExtension.Error.name
  - office.OfficeExtension.Error.stack
  - office.OfficeExtension.Error.traceMessages
- uid: office.OfficeExtension.Error.code
  summary: Zeichenfolge des Fehlercodes, wie beispielsweise "Ungültiges Argument"angezeigt.
  name: code
  fullName: office.OfficeExtension.Error.code
  langs:
  - typeScript
  type: property
  syntax:
    content: 'code: string;'
    return:
      type:
      - string
- uid: office.OfficeExtension.Error.debugInfo
  summary: Debuginformationen (nützlich ausführliche Protokollierung des Fehlers, d. h., über den `JSON.stringify(...)` <!-- -->).
  name: debugInfo
  fullName: office.OfficeExtension.Error.debugInfo
  langs:
  - typeScript
  type: property
  syntax:
    content: 'debugInfo: DebugInfo;'
    return:
      type:
      - office.OfficeExtension.DebugInfo
- uid: office.OfficeExtension.Error.innerError
  summary: Interner Fehler, falls zutreffend.
  name: innerError
  fullName: office.OfficeExtension.Error.innerError
  langs:
  - typeScript
  type: property
  syntax:
    content: 'innerError: Error;'
    return:
      type:
      - Error
- uid: office.OfficeExtension.Error.message
  summary: Die Fehlermeldung, die von der Host-Office-Anwendung über übergeben werden.
  name: message
  fullName: office.OfficeExtension.Error.message
  langs:
  - typeScript
  type: property
  syntax:
    content: 'message: string;'
    return:
      type:
      - string
- uid: office.OfficeExtension.Error.name
  summary: 'Fehler-Name: "OfficeExtension.Error".'
  name: name
  fullName: office.OfficeExtension.Error.name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: office.OfficeExtension.Error.stack
  summary: Stack Trace, falls zutreffend.
  name: stack
  fullName: office.OfficeExtension.Error.stack
  langs:
  - typeScript
  type: property
  syntax:
    content: 'stack: string;'
    return:
      type:
      - string
- uid: office.OfficeExtension.Error.traceMessages
  summary: Verfolgen von Nachrichten (falls vorhanden), die hinzugefügt wurden, über eine `context.trace()` Aufruf vor dem Aufruf von `context.sync()` <!-- -->. Wenn ein Fehler aufgetreten ist, enthält diese sämtliche Ablaufverfolgungsmeldungen, die ausgeführt wurden, bevor der Fehler aufgetreten ist. Diese Nachrichten helfen Ihnen die Abfolge der Programm Ausführung überwachen und die Groß-/Kleinschreibung des Fehlers erkennen.
  name: traceMessages
  fullName: office.OfficeExtension.Error.traceMessages
  langs:
  - typeScript
  type: property
  syntax:
    content: 'traceMessages: Array<string>;'
    return:
      type:
      - Array<string>
      description: "\n#### <a name=\"examples\"></a>Examples\n\n```javascript\n// The following example shows how you can instrument a batch of commands\n// to determine where an error occurred. The first batch successfully\n// inserts the first two paragraphs into the document and cause no errors.\n// The second batch successfully inserts the third and fourth paragraphs\n// but fails in the call to insert the fifth paragraph. All other commands\n// after the failed command in the batch are not executed, including the\n// command that adds the fifth trace message. In this case, the error\n// occurred after the fourth paragraph was inserted, and before adding the\n// fifth trace message.\n\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the document body.\n    var body = context.document.body;\n\n    // Queue a commmand to insert the paragraph at the end of the document body.\n    // Start a batch of commands.\n    body.insertParagraph('1st paragraph', Word.InsertLocation.end);\n    // Queue a command for instrumenting this part of the batch.\n    context.trace('1st paragraph successful');\n\n    body.insertParagraph('2nd paragraph', Word.InsertLocation.end);\n    context.trace('2nd paragraph successful');\n\n    // Synchronize the document state by executing the queued-up commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        // Queue a commmand to insert the paragraph at the end of the document body.\n        // Start a new batch of commands.\n        body.insertParagraph('3rd paragraph', Word.InsertLocation.end);\n        context.trace('3rd paragraph successful');\n\n        body.insertParagraph('4th paragraph', Word.InsertLocation.end);\n        context.trace('4th paragraph successful');\n\n        // This command will cause an error. The trace messages in the queue up to\n        // this point will be available via Error.traceMessages.\n        body.insertParagraph(0, '5th paragraph', Word.InsertLocation.end);\n        // Queue a command for instrumenting this part of the batch.\n        // This trace message will not be set on Error.traceMessages.\n        context.trace('5th paragraph successful');\n    }).then(context.sync);\n})\n.catch(function (error) {\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Trace messages: ' + error.traceMessages);\n    }\n});\n\n// Output: \"Trace messages: 3rd paragraph successful,4th paragraph successful\"\n```"
