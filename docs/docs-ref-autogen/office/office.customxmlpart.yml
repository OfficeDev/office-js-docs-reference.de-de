### YamlMime:UniversalReference
ms.openlocfilehash: b6c06843521e065773870869f7b83148a82db32c
ms.sourcegitcommit: 31847d2ea6be78b8f473dfbfb0a575fdecd877be
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 11/13/2018
ms.locfileid: "26297959"
items:
- uid: office.Office.CustomXmlPart
  summary: <span data-ttu-id="e4783-101">Stellt ein einzelnes CustomXMLPart-Objekt in einer [Office.CustomXmlParts](xref:office.Office.CustomXmlParts) -Auflistung dar.</span><span class="sxs-lookup"><span data-stu-id="e4783-101">Represents a single CustomXMLPart in an [Office.CustomXmlParts](xref:office.Office.CustomXmlParts) collection.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="e4783-102">Anforderungssätze</span><span class="sxs-lookup"><span data-stu-id="e4783-102">Requirement Sets</span></span></td><td><span data-ttu-id="e4783-103">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="e4783-103">CustomXmlParts</span></span></td></tr></table>


    <span data-ttu-id="e4783-104">**Supportdetails**</span><span class="sxs-lookup"><span data-stu-id="e4783-104">**Support details**</span></span>


    <span data-ttu-id="e4783-105">In der folgenden Matrix ein großes Y gibt an, dass diese Schnittstelle in der entsprechenden Office-hostanwendung unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="e4783-105">A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host application.</span></span> <span data-ttu-id="e4783-106">Eine leere Zelle gibt an, dass die Office-hostanwendung diese Schnittstelle nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="e4783-106">An empty cell indicates that the Office host application doesn't support this interface.</span></span>


    <span data-ttu-id="e4783-107">Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="e4783-107">For more information about Office host application and server requirements, see [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span></span>


    <span data-ttu-id="e4783-108">*Unterstützte Hosts nach Plattform*</span><span class="sxs-lookup"><span data-stu-id="e4783-108">*Supported hosts, by platform*</span></span> <table> <tr><th> </th><th> <span data-ttu-id="e4783-109">Office für Windows Desktop</span><span class="sxs-lookup"><span data-stu-id="e4783-109">Office for Windows desktop</span></span> </th><th> <span data-ttu-id="e4783-110">Office Online (im Browser)</span><span class="sxs-lookup"><span data-stu-id="e4783-110">Office Online (in browser)</span></span> </th><th> <span data-ttu-id="e4783-111">Office für iPad</span><span class="sxs-lookup"><span data-stu-id="e4783-111">Office for iPad</span></span> </th></tr> <tr><td><span data-ttu-id="e4783-112"><strong>Word</strong></span><span class="sxs-lookup"><span data-stu-id="e4783-112"><strong> Word </strong></span></span></td><td> <span data-ttu-id="e4783-113">v</span><span class="sxs-lookup"><span data-stu-id="e4783-113">Y</span></span> </td><td> <span data-ttu-id="e4783-114">v</span><span class="sxs-lookup"><span data-stu-id="e4783-114">Y</span></span> </td><td> <span data-ttu-id="e4783-115">v</span><span class="sxs-lookup"><span data-stu-id="e4783-115">Y</span></span> </td></tr> </table>
  name: Office.CustomXmlPart
  fullName: Office.CustomXmlPart
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.CustomXmlPart.addHandlerAsync
  - office.Office.CustomXmlPart.builtIn
  - office.Office.CustomXmlPart.deleteAsync
  - office.Office.CustomXmlPart.getNodesAsync
  - office.Office.CustomXmlPart.getXmlAsync
  - office.Office.CustomXmlPart.id
  - office.Office.CustomXmlPart.namespaceManager
  - office.Office.CustomXmlPart.removeHandlerAsync
- uid: office.Office.CustomXmlPart.addHandlerAsync
  summary: <span data-ttu-id="e4783-116">Fügt einen Ereignishandler für das Objekt mithilfe den angegebenen Ereignistyp hinzu.</span><span class="sxs-lookup"><span data-stu-id="e4783-116">Adds an event handler to the object using the specified event type.</span></span>
  remarks: >-
    <span data-ttu-id="e4783-117">Sie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange die Namen der einzelnen Ereignishandlerfunktionen eindeutig sind.</span><span class="sxs-lookup"><span data-stu-id="e4783-117">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>

    #### <a name="examples"></a><span data-ttu-id="e4783-118">Beispiele</span><span class="sxs-lookup"><span data-stu-id="e4783-118">Examples</span></span>


    ```javascript

    // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeDeletedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                write("A node has been deleted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeInsertedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                write("A node has been inserted.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```

    ```javascript

    // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.

    function addNodeReplacedEvent() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                write("A node has been replaced.");
            });
        });
    }

    // Function that writes to a div with id='message' on the page.

    function write(message){
        document.getElementById('message').innerText += message;
    }

    ```
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: addHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: <span data-ttu-id="e4783-119">Gibt den Typ des Ereignisses hinzufügen.</span><span class="sxs-lookup"><span data-stu-id="e4783-119">Specifies the type of event to add.</span></span> <span data-ttu-id="e4783-120">Für ein CustomXmlPart-Objekt der EventType-Parameter angegeben werden kann, als `Office.EventType.NodeDeleted` <!-- -->, `Office.EventType.NodeInserted` <!-- -->, und `Office.EventType.NodeReplaced` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="e4783-120">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, and `Office.EventType.NodeReplaced`<!-- -->.</span></span>
      type:
      - Office.EventType
    - id: handler
      description: <span data-ttu-id="e4783-121">Der Ereignishandlerfunktion hinzufügen, deren einziger Parameter vom Typ [Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)ist<!-- -->, [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->, oder [Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)</span><span class="sxs-lookup"><span data-stu-id="e4783-121">The event handler function to add, whose only parameter is of type [Office.NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)<!-- -->, [Office.NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->, or [Office.NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)</span></span>
      type:
      - '(result: any) => void'
    - id: options
      description: <span data-ttu-id="e4783-122">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="e4783-122">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="e4783-123">Optional.</span><span class="sxs-lookup"><span data-stu-id="e4783-123">Optional.</span></span> <span data-ttu-id="e4783-124">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="e4783-124">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.builtIn
  summary: <span data-ttu-id="e4783-125">True, wenn die benutzerdefinierte XML-Komponente integriert ist. andernfalls False.</span><span class="sxs-lookup"><span data-stu-id="e4783-125">True, if the custom XML part is built in; otherwise false.</span></span>
  name: builtIn
  fullName: builtIn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'builtIn: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"e4783-126\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"e4783-126\">Examples</span></span>\n\n```javascript\nfunction showXMLPartBuiltIn() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.builtIn);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.CustomXmlPart.deleteAsync
  summary: <span data-ttu-id="e4783-127">Löscht die benutzerdefinierte XML-Komponente.</span><span class="sxs-lookup"><span data-stu-id="e4783-127">Deletes the Custom XML Part.</span></span>
  name: deleteAsync(options, callback)
  fullName: deleteAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"e4783-128\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"e4783-128\">Examples</span></span>\n\n```javascript\nfunction deleteXMLPart() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.deleteAsync(function (eventArgs) {\n            write(\"The XML Part has been deleted.\");\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: options
      description: <span data-ttu-id="e4783-129">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="e4783-129">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="e4783-130">Optional.</span><span class="sxs-lookup"><span data-stu-id="e4783-130">Optional.</span></span> <span data-ttu-id="e4783-131">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="e4783-131">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlPart.getNodesAsync
  summary: <span data-ttu-id="e4783-132">Ruft asynchron alle CustomXmlNodes in dieser benutzerdefinierten XML-Komponente ab, die dem angegebenen XPath entsprechen.</span><span class="sxs-lookup"><span data-stu-id="e4783-132">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>
  name: getNodesAsync(xPath, options, callback)
  fullName: getNodesAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"e4783-133\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"e4783-133\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeType() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.nodeType);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: xPath
      description: <span data-ttu-id="e4783-p105">Ein XPath-Ausdruck, der die zurückzugebenden Knoten angibt. Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="e4783-p105">An XPath expression that specifies the nodes you want returned. Required.</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="e4783-136">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="e4783-136">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="e4783-137">Optional.</span><span class="sxs-lookup"><span data-stu-id="e4783-137">Optional.</span></span> <span data-ttu-id="e4783-138">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="e4783-138">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="e4783-139">Die `value` -Eigenschaft des Ergebnisses ist ein Array von CustomXmlNode-Objekten, die durch die an den xPath-Parameter übergebenen XPath-Ausdruck angegebenen Knoten darstellen.</span><span class="sxs-lookup"><span data-stu-id="e4783-139">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlPart.getXmlAsync
  summary: <span data-ttu-id="e4783-140">Ruft asynchron den XML-Code in der benutzerdefinierten XML-Komponente ab.</span><span class="sxs-lookup"><span data-stu-id="e4783-140">Asynchronously gets the XML inside this custom XML part.</span></span>
  name: getXmlAsync(options, callback)
  fullName: getXmlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"e4783-141\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"e4783-141\">Examples</span></span>\n\n```javascript\nfunction showXMLPartInnerXML() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getXmlAsync({}, function (eventArgs) {\n            write(eventArgs.value);\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
    parameters:
    - id: options
      description: <span data-ttu-id="e4783-142">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="e4783-142">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="e4783-143">Optional.</span><span class="sxs-lookup"><span data-stu-id="e4783-143">Optional.</span></span> <span data-ttu-id="e4783-144">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="e4783-144">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="e4783-145">Die `value` -Eigenschaft das Ergebnis ist eine Zeichenfolge, die den XML-Code des CustomXmlPart-Objekts verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="e4783-145">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlPart.id
  summary: <span data-ttu-id="e4783-146">Ruft die GUID von CustomXMLPart ab.</span><span class="sxs-lookup"><span data-stu-id="e4783-146">Gets the GUID of the CustomXMLPart.</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'id: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"e4783-147\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"e4783-147\">Examples</span></span>\n\n```javascript\nfunction showXMLPartBuiltId() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        write(xmlPart.id);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- uid: office.Office.CustomXmlPart.namespaceManager
  summary: <span data-ttu-id="e4783-148">Ruft die Gruppe von Namespace-präfixzuordnungen ([Office.CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)<!-- -->) für das aktuelle CustomXmlPart verwendet.</span><span class="sxs-lookup"><span data-stu-id="e4783-148">Gets the set of namespace prefix mappings ([Office.CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)<!-- -->) used against the current CustomXmlPart.</span></span>
  name: namespaceManager
  fullName: namespaceManager
  langs:
  - typeScript
  type: property
  syntax:
    content: 'namespaceManager: CustomXmlPrefixMappings;'
    return:
      type:
      - office.Office.CustomXmlPrefixMappings
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"e4783-149\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"e4783-149\">Examples</span></span>\n\n```javascript\nfunction setXMLPartNamespaceManagerNamespace() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.namespaceManager.addNamespaceAsync(\"myPrefix\", \"myNamespace\");\n    });\n}\n```"
- uid: office.Office.CustomXmlPart.removeHandlerAsync
  summary: <span data-ttu-id="e4783-150">Entfernt einen Ereignishandler für den angegebenen Ereignistyp.</span><span class="sxs-lookup"><span data-stu-id="e4783-150">Removes an event handler for the specified event type.</span></span>
  name: removeHandlerAsync(eventType, handler, options, callback)
  fullName: removeHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"e4783-151\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"e4783-151\">Examples</span></span>\n\n```javascript\nfunction removeNodeInsertedEventHandler() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\",\n        function (result) {\n            var xmlPart = result.value;\n            xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});\n    });\n}\n```"
    parameters:
    - id: eventType
      description: <span data-ttu-id="e4783-152">Gibt den Typ des Ereignisses zu entfernen.</span><span class="sxs-lookup"><span data-stu-id="e4783-152">Specifies the type of event to remove.</span></span> <span data-ttu-id="e4783-153">Für ein CustomXmlPart-Objekt der EventType-Parameter angegeben werden kann, als `Office.EventType.NodeDeleted` <!-- -->, `Office.EventType.NodeInserted` <!-- -->, und `Office.EventType.NodeReplaced` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="e4783-153">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, and `Office.EventType.NodeReplaced`<!-- -->.</span></span>
      type:
      - Office.EventType
    - id: handler
      description: <span data-ttu-id="e4783-154">Der Name des zu entfernenden Handler.</span><span class="sxs-lookup"><span data-stu-id="e4783-154">The name of the handler to remove.</span></span>
      type:
      - '(result: any) => void'
    - id: options
      description: <span data-ttu-id="e4783-155">Bietet Optionen, um zu bestimmen, welche Ereignishandler oder Handler entfernt werden.</span><span class="sxs-lookup"><span data-stu-id="e4783-155">Provides options to determine which event handler or handlers are removed.</span></span>
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: <span data-ttu-id="e4783-156">Optional.</span><span class="sxs-lookup"><span data-stu-id="e4783-156">Optional.</span></span> <span data-ttu-id="e4783-157">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="e4783-157">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
