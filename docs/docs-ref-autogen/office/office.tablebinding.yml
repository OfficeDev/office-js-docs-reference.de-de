### YamlMime:UniversalReference
items:
  - uid: office.Office.TableBinding
    summary: 'Stellt eine Bindung in zwei Dimensionen von Zeilen und Spalten dar, optional mit Kopfzeilen.'
    remarks: |-
      Das Objekt der webBindung erbt die `id` Eigenschaft, `type` Eigenschaft, `getDataAsync` Methode und `setDataAsync` Methode aus dem [Office. Binding](xref:office.Office.Binding) -Objekt.

      Beachten Sie bei Excel, dass nach dem Erstellen einer Tabellenbindung jede neue Zeile, die ein Benutzer zur Tabelle hinzufügt, automatisch in die Bindung eingeschlossen wird und rowCount erhöht wird.
    name: Office.TableBinding
    fullName: Office.TableBinding
    langs:
      - typeScript
    type: interface
    extends:
      - 'Binding '
    package: office
    children:
      - office.Office.TableBinding.addColumnsAsync
      - office.Office.TableBinding.addColumnsAsync_1
      - office.Office.TableBinding.addRowsAsync
      - office.Office.TableBinding.addRowsAsync_1
      - office.Office.TableBinding.clearFormatsAsync
      - office.Office.TableBinding.clearFormatsAsync_1
      - office.Office.TableBinding.deleteAllDataValuesAsync
      - office.Office.TableBinding.deleteAllDataValuesAsync_1
      - office.Office.TableBinding.getFormatsAsync
      - office.Office.TableBinding.getFormatsAsync_1
      - office.Office.TableBinding.setFormatsAsync
      - office.Office.TableBinding.setFormatsAsync_1
      - office.Office.TableBinding.setTableOptionsAsync
      - office.Office.TableBinding.setTableOptionsAsync_1
      - office.Office.TableBinding.columnCount
      - office.Office.TableBinding.hasHeaders
      - office.Office.TableBinding.rowCount
  - uid: office.Office.TableBinding.addColumnsAsync
    summary: Fügt die angegebenen Daten der Tabelle als zusätzliche Spalten hinzu.
    remarks: |-
      Zum Hinzufügen einer oder mehrerer Spalten, die die Werte der Daten und Kopfzeilen angeben, übergeben Sie ein Datenobjekt als data-Parameter. Wenn eine oder mehrere Spalten hinzugefügt werden sollen, die nur die Daten angeben, übergeben Sie ein Array von Arrays ("Matrix") als data-Parameter.

      Der Erfolg oder Fehler eines addColumnsAsync-Vorgangs ist atomar. Dies bedeutet, dass der gesamte Vorgang zum Hinzufügen von Spalten erfolgreich sein muss, andernfalls wird er vollständig rückgängig gemacht (und die an den Rückruf zurückgegebene AsyncResult.status-Eigenschaft meldet einen Fehler):

      - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss dieselbe Anzahl von Zeilen aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, tritt bei dem Vorgang ein Fehler auf.

      - Jede Zeile und Zelle im Array muss die entsprechende Zeile oder Zelle in der Tabelle in den neu erstellten Spalten hinzufügen. Wenn eine Zeile oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.

      - Wenn Sie ein Table Data-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit dem der Tabelle übereinstimmen, die aktualisiert wird.

      Zusätzliche Bemerkung für Excel online: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following example adds a single column with three rows to a bound table with the id "myTable"
      // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,
      // the table being updated must have three rows.

      // Add a column to a binding of type table by passing a TableData object.
      function addColumns() {
          var myTable = new Office.TableData();
          myTable.headers = [["Cities"]];
          myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

          Office.context.document.bindings.getByIdAsync("myTable", function (result) {
              result.value.addColumnsAsync(myTable);
          });
      }

      // The following example adds a single column with three rows to a bound table with the id myTable
      // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.
      // To succeed, the table being updated must have three rows.

      // Add a column to a binding of type table by passing an array of arrays.
      function addColumns() {
          var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

          Office.context.document.bindings.getByIdAsync("myTable", function (result) {
              result.value.addColumnsAsync(myTable);
          });
      }
      ```
    name: 'addColumnsAsync(tableData, options, callback)'
    fullName: 'addColumnsAsync(tableData, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addColumnsAsync(tableData: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableData
          description: 'Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenspalten enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.'
          type:
            - 'TableData | any[][]'
        - id: options
          description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.addColumnsAsync_1
    summary: Fügt die angegebenen Daten der Tabelle als zusätzliche Spalten hinzu.
    remarks: |-
      Zum Hinzufügen einer oder mehrerer Spalten, die die Werte der Daten und Kopfzeilen angeben, übergeben Sie ein Datenobjekt als data-Parameter. Wenn eine oder mehrere Spalten hinzugefügt werden sollen, die nur die Daten angeben, übergeben Sie ein Array von Arrays ("Matrix") als data-Parameter.

      Der Erfolg oder Fehler eines addColumnsAsync-Vorgangs ist atomar. Dies bedeutet, dass der gesamte Vorgang zum Hinzufügen von Spalten erfolgreich sein muss, andernfalls wird er vollständig rückgängig gemacht (und die an den Rückruf zurückgegebene AsyncResult.status-Eigenschaft meldet einen Fehler):

      - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss dieselbe Anzahl von Zeilen aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, tritt bei dem Vorgang ein Fehler auf.

      - Jede Zeile und Zelle im Array muss die entsprechende Zeile oder Zelle in der Tabelle in den neu erstellten Spalten hinzufügen. Wenn eine Zeile oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.

      - Wenn Sie ein Table Data-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit dem der Tabelle übereinstimmen, die aktualisiert wird.

      Zusätzliche Bemerkung für Excel online: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.
    name: 'addColumnsAsync(tableData, callback)'
    fullName: 'addColumnsAsync(tableData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addColumnsAsync(tableData: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableData
          description: 'Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenspalten enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.'
          type:
            - 'TableData | any[][]'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.addRowsAsync
    summary: Fügt die angegebenen Daten der Tabelle als zusätzliche Zeilen hinzu.
    remarks: |-
      Der Erfolg oder Fehler eines addRowsAsync-Vorgangs ist atomar. Dies bedeutet, dass der gesamte Vorgang zum Hinzufügen von Spalten erfolgreich sein muss, andernfalls wird er vollständig rückgängig gemacht (und die an den Rückruf zurückgegebene AsyncResult.status-Eigenschaft meldet einen Fehler):

      - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss dieselbe Anzahl von Spalten aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, tritt bei dem Vorgang ein Fehler auf.

      - Jede Spalte und Zelle im Array muss die Spalte oder Zelle erfolgreich der Tabelle in den neu hinzugefügten Zeilen hinzufügen. Wenn eine Spalte oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.

      - Wenn Sie ein Table Data-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit dem der Tabelle übereinstimmen, die aktualisiert wird.

      Zusätzliche Bemerkung für Excel online: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.

      #### <a name="examples"></a>Beispiele

      ```javascript
      function addRowsToTable() {
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              var binding = asyncResult.value;
              binding.addRowsAsync([["6", "k"], ["7", "j"]]);
          });
      }
      ```
    name: 'addRowsAsync(rows, options, callback)'
    fullName: 'addRowsAsync(rows, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addRowsAsync(rows: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rows
          description: 'Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenzeilen enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.'
          type:
            - 'TableData | any[][]'
        - id: options
          description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.addRowsAsync_1
    summary: Fügt die angegebenen Daten der Tabelle als zusätzliche Zeilen hinzu.
    remarks: |-
      Der Erfolg oder Fehler eines addRowsAsync-Vorgangs ist atomar. Dies bedeutet, dass der gesamte Vorgang zum Hinzufügen von Spalten erfolgreich sein muss, andernfalls wird er vollständig rückgängig gemacht (und die an den Rückruf zurückgegebene AsyncResult.status-Eigenschaft meldet einen Fehler):

      - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss dieselbe Anzahl von Spalten aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, tritt bei dem Vorgang ein Fehler auf.

      - Jede Spalte und Zelle im Array muss die Spalte oder Zelle erfolgreich der Tabelle in den neu hinzugefügten Zeilen hinzufügen. Wenn eine Spalte oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.

      - Wenn Sie ein Table Data-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit dem der Tabelle übereinstimmen, die aktualisiert wird.

      Zusätzliche Bemerkung für Excel online: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.
    name: 'addRowsAsync(rows, callback)'
    fullName: 'addRowsAsync(rows, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addRowsAsync(rows: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rows
          description: 'Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenzeilen enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.'
          type:
            - 'TableData | any[][]'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.clearFormatsAsync
    summary: Löscht Formatierung der gebundenen Tabelle.
    remarks: |-
      Weitere Informationen finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":
      Office.select("bindings#myBinding").clearFormatsAsync();
      ```
    name: 'clearFormatsAsync(options, callback)'
    fullName: 'clearFormatsAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearFormatsAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.clearFormatsAsync_1
    summary: Löscht Formatierung der gebundenen Tabelle.
    remarks: 'Weitere Informationen finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .'
    name: clearFormatsAsync(callback)
    fullName: clearFormatsAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearFormatsAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.deleteAllDataValuesAsync
    summary: 'Löscht alle Zeilen, bei denen es sich nicht um Kopfzeilen handelt, und ihre Werte in der Tabelle, wobei für die Hostanwendung entsprechend verschoben wird'
    remarks: |-
      Wenn die Tabelle in Excel über keine Kopfzeile verfügt, löscht diese Methode die Tabelle selbst.

      #### <a name="examples"></a>Beispiele

      ```javascript
      function deleteAllRowsFromTable() {
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              var binding = asyncResult.value;
              binding.deleteAllDataValuesAsync();
          });
      }
      ```
    name: 'deleteAllDataValuesAsync(options, callback)'
    fullName: 'deleteAllDataValuesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAllDataValuesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.deleteAllDataValuesAsync_1
    summary: 'Löscht alle Zeilen, bei denen es sich nicht um Kopfzeilen handelt, und ihre Werte in der Tabelle, wobei für die Hostanwendung entsprechend verschoben wird'
    remarks: 'Wenn die Tabelle in Excel über keine Kopfzeile verfügt, löscht diese Methode die Tabelle selbst.'
    name: deleteAllDataValuesAsync(callback)
    fullName: deleteAllDataValuesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAllDataValuesAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.getFormatsAsync
    summary: Ruft die Formatierung für die angegebenen Elemente in der Tabelle ab.
    remarks: |-
      **ZurückgeGebene Formatstruktur**

      Jedes JavaScript-Objekt im Rückgabewert Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`

      Die `cells:` -Eigenschaft gibt den gewünschten Formatierungswert mit einem der folgenden Werte an:

      **Unterstützte Bereiche in Zelleneigenschaft**

      <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Datenzeile in der Tabelle darstellt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Spalte mit Daten in der Tabelle darstellt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jn-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>

      Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind ( &gt; klicken Sie mit der &gt; rechten &gt; Maustaste auf Zellen formatieren oder Zellen im Home-Format formatieren).
    name: 'getFormatsAsync(cellReference, formats, options, callback)'
    fullName: 'getFormatsAsync(cellReference, formats, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormatsAsync(cellReference?: any, formats?: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellReference
          description: 'Ein Objekt Literal mit Name-Wert-Paaren, die den Zellbereich angeben, aus dem die Formatierung abgerufen werden soll.'
          type:
            - any
        - id: formats
          description: 'Ein Array, das die abzurufenden Formateigenschaften angibt.'
          type:
            - 'any[]'
        - id: options
          description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein Array, das ein oder mehrere JavaScript-Objekte enthält, die die Formatierung der entsprechenden Zellen angeben.'
          type:
            - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
  - uid: office.Office.TableBinding.getFormatsAsync_1
    summary: Ruft die Formatierung für die angegebenen Elemente in der Tabelle ab.
    remarks: |-
      **ZurückgeGebene Formatstruktur**

      Jedes JavaScript-Objekt im Rückgabewert Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`

      Die `cells:` -Eigenschaft gibt den gewünschten Formatierungswert mit einem der folgenden Werte an:

      **Unterstützte Bereiche in Zelleneigenschaft**

      <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Datenzeile in der Tabelle darstellt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Spalte mit Daten in der Tabelle darstellt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jn-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>

      Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind ( &gt; klicken Sie mit der &gt; rechten &gt; Maustaste auf Zellen formatieren oder Zellen im Home-Format formatieren).
    name: 'getFormatsAsync(cellReference, formats, callback)'
    fullName: 'getFormatsAsync(cellReference, formats, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormatsAsync(cellReference?: any, formats?: any[], callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellReference
          description: 'Ein Objekt Literal mit Name-Wert-Paaren, die den Zellbereich angeben, aus dem die Formatierung abgerufen werden soll.'
          type:
            - any
        - id: formats
          description: 'Ein Array, das die abzurufenden Formateigenschaften angibt.'
          type:
            - 'any[]'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein Array, das ein oder mehrere JavaScript-Objekte enthält, die die Formatierung der entsprechenden Zellen angeben.'
          type:
            - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
  - uid: office.Office.TableBinding.setFormatsAsync
    summary: Legt die Formatierung für bestimmte Elemente und Daten in der Tabelle fest.
    remarks: |-
      **Angeben des cellFormat-Parameters**

      Verwenden Sie den cellFormat-Parameter zum Ändern von Zellenformatwerten wie z. B. die Breite, Höhe, Schriftart, Ausrichtung usw. Der Wert, den Sie als cellFormat-Parameter übergeben, ist ein Array, das eine Liste mit einem oder mehreren JavaScript-Objekten enthält, die angeben, welche Zellen als Ziel (`cells:`<!-- -->) und die Formate (`format:`<!-- -->).

      Jedes JavaScript-Objekt im cellFormat-Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`

      Die `cells:` -Eigenschaft gibt den gewünschten Formatierungswert mit einem der folgenden Werte an:

      **Unterstützte Bereiche in Zelleneigenschaft**

      <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Datenzeile in der Tabelle darstellt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Spalte mit Daten in der Tabelle darstellt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jn-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>

      Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind ( &gt; klicken Sie mit der &gt; rechten &gt; Maustaste auf Zellen formatieren oder Zellen im Home-Format formatieren).

      Sie geben den Wert der `format:` Eigenschaft als Liste mit einem oder mehreren Eigenschaft Name-Wert-Paaren in einem JavaScript-Objektliteral an. Der Eigenschaften Name gibt den Namen der festzulegenden Formatierungseigenschaft an, und value gibt den Eigenschaftswert an. Sie können mehrere Werte für ein bestimmtes Format angeben, beispielsweise die Farbe und Größe einer Schriftart.

      Hier sind drei `format:` Beispiele für Eigenschaftswerte:

      `//Set cells: font color to green and size to 15 points.`

      `format: {fontColor : "green", fontSize : 15}`

      `//Set cells: border to dotted blue.`

      `format: {borderStyle: "dotted", borderColor: "blue"}`

      `//Set cells: background to red and alignment to centered.`

      `format: {backgroundColor: "red", alignHorizontal: "center"}`

      Sie können Zahlenformate angeben, indem Sie die Zeichenfolge "Code" in der `numberFormat:` Eigenschaft angeben. Die Formatzeichenfolgen, die Sie festlegen können, entsprechen denjenigen, die Sie in Excel mithilfe der Kategorie Benutzerdefiniert auf der Registerkarte Zahl im Dialogfeld Zellen formatieren festlegen können. Dieses Beispiel zeigt, wie Sie eine Zahl als Prozentsatz mit zwei Dezimalstellen formatieren:

      `format: {numberFormat:"0.00%"}`

      Weitere Informationen finden Sie unter [Erstellen eines benutzerdefinierten Zahlenformats](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4) .<!-- -->.

      Wenn Sie beim Schreiben von Daten Formatierungen für Tabellen festlegen möchten, verwenden Sie die optionalen Parameter TableOptions und cellFormat der `Document.setSelectedDataAsync` or `TableBinding.setDataAsync` -Methoden.

      Das Festlegen der Formatierung mit den optionalen para `Document.setSelectedDataAsync` Metern `TableBinding.setDataAsync` und Methoden funktioniert nur zum Festlegen der Formatierung beim ersten Schreiben von Daten. Um nach dem Schreiben von Daten Formatierungsänderungen vorzunehmen, verwenden Sie die folgenden Methoden:

      - Verwenden Sie die-Methode (diese Methode), um die `TableBinding.setFormatsAsync` Zellenformatierung zu aktualisieren, beispielsweise Schriftfarbe und-Formatvorlage.

      - Verwenden Sie die `TableBinding.setTableOptions` -Methode, um Tabellenoptionen wie beispielsweise verbundene Zeilen und Filterschaltflächen zu aktualisieren.

      - Verwenden Sie die-Methode, `TableBinding.clearFormats` um die Formatierung zu löschen.

      Weitere Informationen und Beispiele finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // Specifying a single target
      // The following example shows a cellFormat value that sets the font color of the header row to red.
      Office.select("bindings#myBinding").setFormatsAsync(
          [{cells: Office.Table.Headers, format: {fontColor: "red"}}], 
          function (asyncResult){});

      // Specifying multiple targets
      // The setFormatsAsync method can support formatting multiple targets within the bound table in a 
      // single function call. To do that, you pass a list of objects in the cellFormat array 
      // for each target that you want to format.
      // For example, the following line of code will set the font color of the first row yellow, 
      // and the fourth cell in the third row to have a white border and bold text.
      Office.select("bindings#myBinding").setFormatsAsync(
          [{cells: {row: 1}, format: {fontColor: "yellow"}}, 
              {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}], 
          function (asyncResult){});

      // Additional remarks for Excel Online
      // The number of formatting groups passed to the cellFormat parameter can't exceed 100. 
      // A single formatting group consists of a set of formatting applied to a specified range of cells. 
      // For example, the following call passes two formatting groups to cellFormat.
      Office.select("bindings#myBinding").setFormatsAsync(
          [{cells: {row: 1}, format: {fontColor: "yellow"}}, 
              {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}], 
          function (asyncResult){});
      ```
    name: 'setFormatsAsync(cellFormat, options, callback)'
    fullName: 'setFormatsAsync(cellFormat, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormatsAsync(cellFormat: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellFormat
          description: 'Ein Array, das ein oder mehrere JavaScript-Objekte enthält, die angeben, welche Zellen betroffen sind und welche Formate darauf angewendet werden sollen.'
          type:
            - 'any[]'
        - id: options
          description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.setFormatsAsync_1
    summary: Legt die Formatierung für bestimmte Elemente und Daten in der Tabelle fest.
    remarks: |-
      **Angeben des cellFormat-Parameters**

      Verwenden Sie den cellFormat-Parameter zum Ändern von Zellenformatwerten wie z. B. die Breite, Höhe, Schriftart, Ausrichtung usw. Der Wert, den Sie als cellFormat-Parameter übergeben, ist ein Array, das eine Liste mit einem oder mehreren JavaScript-Objekten enthält, die angeben, welche Zellen als Ziel (`cells:`<!-- -->) und die Formate (`format:`<!-- -->).

      Jedes JavaScript-Objekt im cellFormat-Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`

      Die `cells:` -Eigenschaft gibt den gewünschten Formatierungswert mit einem der folgenden Werte an:

      **Unterstützte Bereiche in Zelleneigenschaft**

      <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Datenzeile in der Tabelle darstellt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Spalte mit Daten in der Tabelle darstellt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jn-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>

      Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind ( &gt; klicken Sie mit der &gt; rechten &gt; Maustaste auf Zellen formatieren oder Zellen im Home-Format formatieren).

      Sie geben den Wert der `format:` Eigenschaft als Liste mit einem oder mehreren Eigenschaft Name-Wert-Paaren in einem JavaScript-Objektliteral an. Der Eigenschaften Name gibt den Namen der festzulegenden Formatierungseigenschaft an, und value gibt den Eigenschaftswert an. Sie können mehrere Werte für ein bestimmtes Format angeben, beispielsweise die Farbe und Größe einer Schriftart.

      Hier sind drei `format:` Beispiele für Eigenschaftswerte:

      `//Set cells: font color to green and size to 15 points.`

      `format: {fontColor : "green", fontSize : 15}`

      `//Set cells: border to dotted blue.`

      `format: {borderStyle: "dotted", borderColor: "blue"}`

      `//Set cells: background to red and alignment to centered.`

      `format: {backgroundColor: "red", alignHorizontal: "center"}`

      Sie können Zahlenformate angeben, indem Sie die Zeichenfolge "Code" in der `numberFormat:` Eigenschaft angeben. Die Formatzeichenfolgen, die Sie festlegen können, entsprechen denjenigen, die Sie in Excel mithilfe der Kategorie Benutzerdefiniert auf der Registerkarte Zahl im Dialogfeld Zellen formatieren festlegen können. Dieses Beispiel zeigt, wie Sie eine Zahl als Prozentsatz mit zwei Dezimalstellen formatieren:

      `format: {numberFormat:"0.00%"}`

      Weitere Informationen finden Sie unter [Erstellen eines benutzerdefinierten Zahlenformats](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4) .<!-- -->.

      Wenn Sie beim Schreiben von Daten Formatierungen für Tabellen festlegen möchten, verwenden Sie die optionalen Parameter TableOptions und cellFormat der `Document.setSelectedDataAsync` or `TableBinding.setDataAsync` -Methoden.

      Das Festlegen der Formatierung mit den optionalen para `Document.setSelectedDataAsync` Metern `TableBinding.setDataAsync` und Methoden funktioniert nur zum Festlegen der Formatierung beim ersten Schreiben von Daten. Um nach dem Schreiben von Daten Formatierungsänderungen vorzunehmen, verwenden Sie die folgenden Methoden:

      - Verwenden Sie die-Methode (diese Methode), um die `TableBinding.setFormatsAsync` Zellenformatierung zu aktualisieren, beispielsweise Schriftfarbe und-Formatvorlage.

      - Verwenden Sie die `TableBinding.setTableOptions` -Methode, um Tabellenoptionen wie beispielsweise verbundene Zeilen und Filterschaltflächen zu aktualisieren.

      - Verwenden Sie die-Methode, `TableBinding.clearFormats` um die Formatierung zu löschen.

      Weitere Informationen und Beispiele finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.
    name: 'setFormatsAsync(cellFormat, callback)'
    fullName: 'setFormatsAsync(cellFormat, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormatsAsync(cellFormat: any[], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellFormat
          description: 'Ein Array, das ein oder mehrere JavaScript-Objekte enthält, die angeben, welche Zellen betroffen sind und welche Formate darauf angewendet werden sollen.'
          type:
            - 'any[]'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.setTableOptionsAsync
    summary: Aktualisiert Tabellenformatierungsoptionen für die gebundene Tabelle.
    remarks: |-
      **Anforderungssatz**: [nicht in einer Gruppe](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      In der Rückruffunktion, die Sie an die goToByIdAsync-Methode übergeben haben, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.

      <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da es beim Festlegen von Formaten keine Daten oder Objekte gibt, die abgerufen werden können.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following example shows how to:
      // 1. Create an object literal that specifies the table formatting options to update on the bound table.
      // 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object
      //    with formatting setting as the tableOptions parameter.
      function updateTableFormatting(){
          var tableOptions = {bandedRows: true, filterButton: false, style: "TableStyleMedium3"}; 

          Office.select("bindings#myBinding").setTableOptionsAsync(tableOptions, function(asyncResult){});
      }
      ```
    name: 'setTableOptionsAsync(tableOptions, options, callback)'
    fullName: 'setTableOptionsAsync(tableOptions, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTableOptionsAsync(tableOptions: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableOptions
          description: 'Ein Objekt mit einer Liste von Eigenschaftsname-Wert-Paaren, welche die anzuwendenden Tabellenoptionen definieren.'
          type:
            - any
        - id: options
          description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.setTableOptionsAsync_1
    summary: Aktualisiert Tabellenformatierungsoptionen für die gebundene Tabelle.
    remarks: |-
      **Anforderungssatz**: [nicht in einer Gruppe](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      In der Rückruffunktion, die Sie an die goToByIdAsync-Methode übergeben haben, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.

      <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da es beim Festlegen von Formaten keine Daten oder Objekte gibt, die abgerufen werden können.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>
    name: 'setTableOptionsAsync(tableOptions, callback)'
    fullName: 'setTableOptionsAsync(tableOptions, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTableOptionsAsync(tableOptions: any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableOptions
          description: 'Ein Objekt mit einer Liste von Eigenschaftsname-Wert-Paaren, welche die anzuwendenden Tabellenoptionen definieren.'
          type:
            - any
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult ist.](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.columnCount
    summary: Ruft die Anzahl der Spalten in der Tabellenbindung als ganzzahliger Wert ab.
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnCount: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          function showBindingColumnCount() {
              Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
                  write("Column: " + asyncResult.value.columnCount);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.TableBinding.hasHeaders
    summary: 'True, wenn die Tabelle über Kopfzeilen verfügt; andernfalls false.'
    name: hasHeaders
    fullName: hasHeaders
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hasHeaders: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          function showBindingHasHeaders() {
              Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
                  write("Binding has headers: " + asyncResult.value.hasHeaders);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.TableBinding.rowCount
    summary: Ruft die Anzahl der Zeilen in der-Bindung als ganzzahligen Wert ab.
    remarks: |-
      Wenn Sie eine leere Tabelle einfügen, indem Sie eine einzelne Zeile in Excel 2013 und Excel Online auswählen (mithilfe der Tabelle auf der Registerkarte Einfügen), erstellen beide Office-Hostanwendungen eine einzelne Zeile mit Kopfzeilen gefolgt von einer einzelnen leeren Zeile. Wenn das Add-in-Skript jedoch eine Bindung für diese neu eingefügte Tabelle erstellt (beispielsweise mithilfe der [Office. Bindings](xref:office.Office.Bindings)<!-- -->. addFromSelectionAsync-Methode), und überprüft dann den Wert der rowCount-Eigenschaft, der zurückgegebene Wert hängt davon ab, ob das Arbeitsblatt in Excel 2013 oder Excel Online geöffnet ist.

      - In Excel auf dem Desktop gibt rowCount 0 zurück (die leere Zeile nach den Kopfzeilen wird nicht gezählt).

      - In Excel Online gibt rowCount 1 zurück (die leere Zeile nach den Kopfzeilen wird gezählt).

      Sie können diesen Unterschied in Ihrem Skript umgehen, indem Sie prüfen, ob rowCount == 1 und falls dem so ist, prüfen Sie, ob die Zeile alle leeren Zeichenfolgen enthält.

      In Inhalts-Add-Ins für Access gibt die rowCount-Eigenschaft aus Leistungsgründen immer-1 zurück.

      #### <a name="examples"></a>Beispiele

      ```javascript
      function showBindingRowCount() {
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write("Rows: " + asyncResult.value.rowCount);
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowCount: number;'
      return:
        type:
          - number