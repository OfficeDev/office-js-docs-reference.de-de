### YamlMime:UniversalReference
ms.openlocfilehash: f323ce2a7e2510f4309a37a7123c51dcbb36d5e4
ms.sourcegitcommit: b0b614f5315ab2e5c1e0ea51c687498f87684a07
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/15/2019
ms.locfileid: "30055612"
items:
- uid: office.Office.TableBinding
  summary: Stellt eine Bindung in zwei Dimensionen von Zeilen und Spalten dar, optional mit Kopfzeilen.
  remarks: >-
    <table><tr><td>Anforderungs Sätze</td><td>TableBindings</td></tr></table>


    Das Objekt der webBindung erbt die `id` Eigenschaft, `type` Eigenschaft, `getDataAsync` Methode und `setDataAsync` Methode aus dem [Office. Binding](xref:office.Office.Binding) -Objekt.


    Beachten Sie bei Excel, dass nach dem Erstellen einer Tabellenbindung jede neue Zeile, die ein Benutzer zur Tabelle hinzufügt, automatisch in die Bindung eingeschlossen wird und rowCount erhöht wird.
  name: Office.TableBinding
  fullName: Office.TableBinding
  langs:
  - typeScript
  type: interface
  extends:
  - 'Binding '
  package: office
  children:
  - office.Office.TableBinding.addColumnsAsync
  - office.Office.TableBinding.addColumnsAsync_1
  - office.Office.TableBinding.addRowsAsync
  - office.Office.TableBinding.addRowsAsync_1
  - office.Office.TableBinding.clearFormatsAsync
  - office.Office.TableBinding.clearFormatsAsync_1
  - office.Office.TableBinding.deleteAllDataValuesAsync
  - office.Office.TableBinding.deleteAllDataValuesAsync_1
  - office.Office.TableBinding.getFormatsAsync
  - office.Office.TableBinding.getFormatsAsync_1
  - office.Office.TableBinding.setFormatsAsync
  - office.Office.TableBinding.setFormatsAsync_1
  - office.Office.TableBinding.setTableOptionsAsync
  - office.Office.TableBinding.setTableOptionsAsync_1
  - office.Office.TableBinding.columnCount
  - office.Office.TableBinding.hasHeaders
  - office.Office.TableBinding.rowCount
- uid: office.Office.TableBinding.addColumnsAsync
  summary: Fügt die angegebenen Daten der Tabelle als zusätzliche Spalten hinzu.
  remarks: >-
    Zum Hinzufügen einer oder mehrerer Spalten, die die Werte der Daten und Kopfzeilen angeben, übergeben Sie ein Datenobjekt als data-Parameter. Um eine oder mehrere Spalten hinzuzufügen, die nur die Daten angeben, übergeben Sie ein Array von Arrays ("Matrix") als data-Parameter.


    Der Erfolg oder Fehler eines addColumnsAsync-Vorgangs ist atomar. Das heißt, der gesamte Add Columns-Vorgang muss erfolgreich ausgeführt werden, oder er wird vollständig zurückgesetzt (und die AsyncResult. Status-Eigenschaft, die an den Rückruf zurückgegeben wird, meldet einen Fehler):


    - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss dieselbe Anzahl von Zeilen aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, schlägt der gesamte Vorgang fehl.


    - Jede Zeile und Zelle im Array muss die entsprechende Zeile oder Zelle in der Tabelle in den neu erstellten Spalten hinzufügen. Wenn eine Zeile oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.


    - Wenn Sie ein Table Data-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit dem der Tabelle übereinstimmen, die aktualisiert wird.


    Zusätzliche Bemerkung für Excel online: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following example adds a single column with three rows to a bound table with the id "myTable"

    // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,

    // the table being updated must have three rows.


    // Add a column to a binding of type table by passing a TableData object.

    function addColumns() {
        var myTable = new Office.TableData();
        myTable.headers = [["Cities"]];
        myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }


    // The following example adds a single column with three rows to a bound table with the id myTable

    // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.

    // To succeed, the table being updated must have three rows.


    // Add a column to a binding of type table by passing an array of arrays.

    function addColumns() {
        var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }

    ```
  name: addColumnsAsync(tableData, options, callback)
  fullName: addColumnsAsync(tableData, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableData
      description: Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenspalten enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.
      type:
      - TableData | any[][]
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addColumnsAsync_1
  summary: Fügt die angegebenen Daten der Tabelle als zusätzliche Spalten hinzu.
  remarks: >-
    Zum Hinzufügen einer oder mehrerer Spalten, die die Werte der Daten und Kopfzeilen angeben, übergeben Sie ein Datenobjekt als data-Parameter. Um eine oder mehrere Spalten hinzuzufügen, die nur die Daten angeben, übergeben Sie ein Array von Arrays ("Matrix") als data-Parameter.


    Der Erfolg oder Fehler eines addColumnsAsync-Vorgangs ist atomar. Das heißt, der gesamte Add Columns-Vorgang muss erfolgreich ausgeführt werden, oder er wird vollständig zurückgesetzt (und die AsyncResult. Status-Eigenschaft, die an den Rückruf zurückgegeben wird, meldet einen Fehler):


    - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss dieselbe Anzahl von Zeilen aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, schlägt der gesamte Vorgang fehl.


    - Jede Zeile und Zelle im Array muss die entsprechende Zeile oder Zelle in der Tabelle in den neu erstellten Spalten hinzufügen. Wenn eine Zeile oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.


    - Wenn Sie ein Table Data-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit dem der Tabelle übereinstimmen, die aktualisiert wird.


    Zusätzliche Bemerkung für Excel online: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: addColumnsAsync(tableData, callback)
  fullName: addColumnsAsync(tableData, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableData
      description: Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenspalten enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.
      type:
      - TableData | any[][]
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addRowsAsync
  summary: Fügt die angegebenen Daten der Tabelle als zusätzliche Zeilen hinzu.
  remarks: >-
    Der Erfolg oder Fehler eines addRowsAsync-Vorgangs ist atomar. Das heißt, der gesamte Add Columns-Vorgang muss erfolgreich ausgeführt werden, oder er wird vollständig zurückgesetzt (und die AsyncResult. Status-Eigenschaft, die an den Rückruf zurückgegeben wird, meldet einen Fehler):


    - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss dieselbe Anzahl von Spalten aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, schlägt der gesamte Vorgang fehl.


    - Jede Spalte und Zelle im Array muss die Spalte oder Zelle erfolgreich der Tabelle in den neu hinzugefügten Zeilen hinzufügen. Wenn eine Spalte oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.


    - Wenn Sie ein Table Data-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit dem der Tabelle übereinstimmen, die aktualisiert wird.


    Zusätzliche Bemerkung für Excel online: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    function addRowsToTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.addRowsAsync([["6", "k"], ["7", "j"]]);
        });
    }

    ```
  name: addRowsAsync(rows, options, callback)
  fullName: addRowsAsync(rows, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: rows
      description: Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenzeilen enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.
      type:
      - TableData | any[][]
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addRowsAsync_1
  summary: Fügt die angegebenen Daten der Tabelle als zusätzliche Zeilen hinzu.
  remarks: >-
    Der Erfolg oder Fehler eines addRowsAsync-Vorgangs ist atomar. Das heißt, der gesamte Add Columns-Vorgang muss erfolgreich ausgeführt werden, oder er wird vollständig zurückgesetzt (und die AsyncResult. Status-Eigenschaft, die an den Rückruf zurückgegeben wird, meldet einen Fehler):


    - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss dieselbe Anzahl von Spalten aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, schlägt der gesamte Vorgang fehl.


    - Jede Spalte und Zelle im Array muss die Spalte oder Zelle erfolgreich der Tabelle in den neu hinzugefügten Zeilen hinzufügen. Wenn eine Spalte oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.


    - Wenn Sie ein Table Data-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit dem der Tabelle übereinstimmen, die aktualisiert wird.


    Zusätzliche Bemerkung für Excel online: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzelnen Aufruf dieser Methode nicht überschreiten.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: addRowsAsync(rows, callback)
  fullName: addRowsAsync(rows, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: rows
      description: Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenzeilen enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.
      type:
      - TableData | any[][]
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.clearFormatsAsync
  summary: Löscht Formatierung der gebundenen Tabelle.
  remarks: >-
    Weitere Informationen finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":

    Office.select("bindings#myBinding").clearFormatsAsync();

    ```
  name: clearFormatsAsync(options, callback)
  fullName: clearFormatsAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearFormatsAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.clearFormatsAsync_1
  summary: Löscht Formatierung der gebundenen Tabelle.
  remarks: >-
    Weitere Informationen finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: clearFormatsAsync(callback)
  fullName: clearFormatsAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearFormatsAsync(callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.deleteAllDataValuesAsync
  summary: Löscht alle Zeilen, bei denen es sich nicht um Kopfzeilen handelt, und ihre Werte in der Tabelle, wobei für die Hostanwendung entsprechend verschoben wird
  remarks: >-
    Wenn die Tabelle in Excel über keine Kopfzeile verfügt, löscht diese Methode die Tabelle selbst.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    function deleteAllRowsFromTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.deleteAllDataValuesAsync();
        });
    }

    ```
  name: deleteAllDataValuesAsync(options, callback)
  fullName: deleteAllDataValuesAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAllDataValuesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.deleteAllDataValuesAsync_1
  summary: Löscht alle Zeilen, bei denen es sich nicht um Kopfzeilen handelt, und ihre Werte in der Tabelle, wobei für die Hostanwendung entsprechend verschoben wird
  remarks: >-
    Wenn die Tabelle in Excel über keine Kopfzeile verfügt, löscht diese Methode die Tabelle selbst.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: deleteAllDataValuesAsync(callback)
  fullName: deleteAllDataValuesAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAllDataValuesAsync(callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.getFormatsAsync
  summary: Ruft die Formatierung für die angegebenen Elemente in der Tabelle ab.
  remarks: >-
    **ZurückgeGebene Formatstruktur**


    Jedes JavaScript-Objekt im Rückgabewert Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`


    Die `cells:` -Eigenschaft gibt den gewünschten Formatierungswert mit einem der folgenden Werte an:


    **Unterstützte Bereiche in Zelleneigenschaft**


    <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Datenzeile in der Tabelle darstellt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Spalte mit Daten in der Tabelle darstellt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jn-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>


    Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind ( &gt; klicken Sie mit der &gt; rechten &gt; Maustaste auf Zellen formatieren oder Zellen im Home-Format formatieren).
  name: getFormatsAsync(cellReference, formats, options, callback)
  fullName: getFormatsAsync(cellReference, formats, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellReference
      description: Ein Objekt Literal mit Name-Wert-Paaren, die den Zellbereich angeben, aus dem die Formatierung abgerufen werden soll.
      type:
      - any
    - id: formats
      description: Ein Array, das die abzurufenden Formateigenschaften angibt.
      type:
      - any[]
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist. Die `value` Eigenschaft des Ergebnisses ist ein Array, das ein oder mehrere JavaScript-Objekte enthält, die die Formatierung der entsprechenden Zellen angeben.
      type:
      - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
- uid: office.Office.TableBinding.getFormatsAsync_1
  summary: Ruft die Formatierung für die angegebenen Elemente in der Tabelle ab.
  remarks: >-
    **ZurückgeGebene Formatstruktur**


    Jedes JavaScript-Objekt im Rückgabewert Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`


    Die `cells:` -Eigenschaft gibt den gewünschten Formatierungswert mit einem der folgenden Werte an:


    **Unterstützte Bereiche in Zelleneigenschaft**


    <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Datenzeile in der Tabelle darstellt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Spalte mit Daten in der Tabelle darstellt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jn-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>


    Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind ( &gt; klicken Sie mit der &gt; rechten &gt; Maustaste auf Zellen formatieren oder Zellen im Home-Format formatieren).
  name: getFormatsAsync(cellReference, formats, callback)
  fullName: getFormatsAsync(cellReference, formats, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellReference
      description: Ein Objekt Literal mit Name-Wert-Paaren, die den Zellbereich angeben, aus dem die Formatierung abgerufen werden soll.
      type:
      - any
    - id: formats
      description: Ein Array, das die abzurufenden Formateigenschaften angibt.
      type:
      - any[]
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist. Die `value` Eigenschaft des Ergebnisses ist ein Array, das ein oder mehrere JavaScript-Objekte enthält, die die Formatierung der entsprechenden Zellen angeben.
      type:
      - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
- uid: office.Office.TableBinding.setFormatsAsync
  summary: Legt die Formatierung für bestimmte Elemente und Daten in der Tabelle fest.
  remarks: "**Angeben des cellFormat-Parameters**\n\nVerwenden Sie den Parameter cellFormat, um Zell Formatierungswerte wie Breite, Höhe, Schriftart, Hintergrund, Ausrichtung usw. festzulegen oder zu ändern. Der Wert, den Sie als cellFormat-Parameter übergeben, ist ein Array, das eine Liste mit einem oder mehreren JavaScript-Objekten enthält, die`cells:`<!-- -->angeben, welche Zellen Ziel`format:`<!-- -->() und welche Formate () auf Sie angewendet werden sollen.\n\nJedes JavaScript-Objekt im cellFormat-Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`\n\nDie `cells:` -Eigenschaft gibt den gewünschten Formatierungswert mit einem der folgenden Werte an:\n\n**Unterstützte Bereiche in Zelleneigenschaft**\n\n<table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Datenzeile in der Tabelle darstellt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Spalte mit Daten in der Tabelle darstellt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jn-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>\n\nDie `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind ( &gt; klicken Sie mit der &gt; rechten &gt; Maustaste auf Zellen formatieren oder Zellen im Home-Format formatieren).\n\nSie geben den Wert der `format:` Eigenschaft als Liste mit einem oder mehreren Eigenschaft Name-Wert-Paaren in einem JavaScript-Objektliteral an. Der Eigenschaften Name gibt den Namen der festzulegenden Formatierungseigenschaft an, und value gibt den Eigenschaftswert an. Sie können mehrere Werte für ein bestimmtes Format angeben, beispielsweise die Farbe und Größe einer Schriftart.\n\nHier sind drei `format:` Beispiele für Eigenschaftswerte:\n\n`//Set cells: font color to green and size to 15 points.`\n\n`format: {fontColor : \"green\", fontSize : 15}`\n\n`//Set cells: border to dotted blue.`\n\n`format: {borderStyle: \"dotted\", borderColor: \"blue\"}`\n\n`//Set cells: background to red and alignment to centered.`\n\n`format: {backgroundColor: \"red\", alignHorizontal: \"center\"}`\n\nSie können Zahlenformate angeben, indem Sie die Zeichenfolge \"Code\" in der `numberFormat:` Eigenschaft angeben. Die Zahlenformatzeichenfolgen, die Sie angeben können, entsprechen denen, die Sie in Excel mithilfe der benutzerdefinierten Kategorie auf der Registerkarte Zahlen des Dialogfelds Zellen formatieren festlegen können. In diesem Beispiel wird gezeigt, wie eine Zahl als Prozentsatz mit zwei Dezimalstellen formatiert wird:\n\n`format: {numberFormat:\"0.00%\"}`\n\nWeitere Informationen finden Sie unter [Erstellen eines benutzerdefinierten Zahlenformats](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.\n\nWenn Sie beim Schreiben von Daten Formatierungen für Tabellen festlegen möchten, verwenden Sie die optionalen Parameter TableOptions und cellFormat der `Document.setSelectedDataAsync` or `TableBinding.setDataAsync` -Methoden.\n\nDas Festlegen der Formatierung mit den optionalen para `Document.setSelectedDataAsync` Metern `TableBinding.setDataAsync` und Methoden funktioniert nur zum Festlegen der Formatierung beim ersten Schreiben von Daten. Verwenden Sie die folgenden Methoden, um nach dem Schreiben von Daten Formatierungsänderungen vorzunehmen:\n\n- Verwenden Sie die-Methode (diese Methode), um die `TableBinding.setFormatsAsync` Zellenformatierung zu aktualisieren, beispielsweise Schriftfarbe und-Formatvorlage.\n\n- Verwenden Sie die `TableBinding.setTableOptions` -Methode, um Tabellenoptionen wie beispielsweise verbundene Zeilen und Filterschaltflächen zu aktualisieren.\n\n- Verwenden Sie die-Methode, `TableBinding.clearFormats` um die Formatierung zu löschen.\n\nWeitere Informationen und Beispiele finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Specifying a single target\n// The following example shows a cellFormat value that sets the font color of the header row to red.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: Office.Table.Headers, format: {fontColor: \"red\"}}], \n    function (asyncResult){});\n\n// Specifying multiple targets\n// The setFormatsAsync method can support formatting multiple targets within the bound table in a \n// single function call. To do that, you pass a list of objects in the cellFormat array \n// for each target that you want to format.\n// For example, the following line of code will set the font color of the first row yellow, \n// and the fourth cell in the third row to have a white border and bold text.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n\n// Additional remarks for Excel Online\n// The number of formatting groups passed to the cellFormat parameter can't exceed 100. \n// A single formatting group consists of a set of formatting applied to a specified range of cells. \n// For example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n```"
  name: setFormatsAsync(cellFormat, options, callback)
  fullName: setFormatsAsync(cellFormat, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellFormat
      description: Ein Array, das ein oder mehrere JavaScript-Objekte enthält, die angeben, welche Zellen zielgerichtet werden sollen, und die Formatierung, die auf Sie angewendet werden soll.
      type:
      - any[]
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setFormatsAsync_1
  summary: Legt die Formatierung für bestimmte Elemente und Daten in der Tabelle fest.
  remarks: >-
    **Angeben des cellFormat-Parameters**


    Verwenden Sie den Parameter cellFormat, um Zell Formatierungswerte wie Breite, Höhe, Schriftart, Hintergrund, Ausrichtung usw. festzulegen oder zu ändern. Der Wert, den Sie als cellFormat-Parameter übergeben, ist ein Array, das eine Liste mit einem oder mehreren JavaScript-Objekten enthält, die`cells:`<!-- -->angeben, welche Zellen Ziel`format:`<!-- -->() und welche Formate () auf Sie angewendet werden sollen.


    Jedes JavaScript-Objekt im cellFormat-Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`


    Die `cells:` -Eigenschaft gibt den gewünschten Formatierungswert mit einem der folgenden Werte an:


    **Unterstützte Bereiche in Zelleneigenschaft**


    <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Datenzeile in der Tabelle darstellt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Zeitraum an, der die nullbasierte n-te Spalte mit Daten in der Tabelle darstellt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jn-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>


    Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind ( &gt; klicken Sie mit der &gt; rechten &gt; Maustaste auf Zellen formatieren oder Zellen im Home-Format formatieren).


    Sie geben den Wert der `format:` Eigenschaft als Liste mit einem oder mehreren Eigenschaft Name-Wert-Paaren in einem JavaScript-Objektliteral an. Der Eigenschaften Name gibt den Namen der festzulegenden Formatierungseigenschaft an, und value gibt den Eigenschaftswert an. Sie können mehrere Werte für ein bestimmtes Format angeben, beispielsweise die Farbe und Größe einer Schriftart.


    Hier sind drei `format:` Beispiele für Eigenschaftswerte:


    `//Set cells: font color to green and size to 15 points.`


    `format: {fontColor : "green", fontSize : 15}`


    `//Set cells: border to dotted blue.`


    `format: {borderStyle: "dotted", borderColor: "blue"}`


    `//Set cells: background to red and alignment to centered.`


    `format: {backgroundColor: "red", alignHorizontal: "center"}`


    Sie können Zahlenformate angeben, indem Sie die Zeichenfolge "Code" in der `numberFormat:` Eigenschaft angeben. Die Zahlenformatzeichenfolgen, die Sie angeben können, entsprechen denen, die Sie in Excel mithilfe der benutzerdefinierten Kategorie auf der Registerkarte Zahlen des Dialogfelds Zellen formatieren festlegen können. In diesem Beispiel wird gezeigt, wie eine Zahl als Prozentsatz mit zwei Dezimalstellen formatiert wird:


    `format: {numberFormat:"0.00%"}`


    Weitere Informationen finden Sie unter [Erstellen eines benutzerdefinierten Zahlenformats](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.


    Wenn Sie beim Schreiben von Daten Formatierungen für Tabellen festlegen möchten, verwenden Sie die optionalen Parameter TableOptions und cellFormat der `Document.setSelectedDataAsync` or `TableBinding.setDataAsync` -Methoden.


    Das Festlegen der Formatierung mit den optionalen para `Document.setSelectedDataAsync` Metern `TableBinding.setDataAsync` und Methoden funktioniert nur zum Festlegen der Formatierung beim ersten Schreiben von Daten. Verwenden Sie die folgenden Methoden, um nach dem Schreiben von Daten Formatierungsänderungen vorzunehmen:


    - Verwenden Sie die-Methode (diese Methode), um die `TableBinding.setFormatsAsync` Zellenformatierung zu aktualisieren, beispielsweise Schriftfarbe und-Formatvorlage.


    - Verwenden Sie die `TableBinding.setTableOptions` -Methode, um Tabellenoptionen wie beispielsweise verbundene Zeilen und Filterschaltflächen zu aktualisieren.


    - Verwenden Sie die-Methode, `TableBinding.clearFormats` um die Formatierung zu löschen.


    Weitere Informationen und Beispiele finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: setFormatsAsync(cellFormat, callback)
  fullName: setFormatsAsync(cellFormat, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellFormat
      description: Ein Array, das ein oder mehrere JavaScript-Objekte enthält, die angeben, welche Zellen zielgerichtet werden sollen, und die Formatierung, die auf Sie angewendet werden soll.
      type:
      - any[]
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setTableOptionsAsync
  summary: Aktualisiert Tabellenformatierungsoptionen für die gebundene Tabelle.
  remarks: "<table> <tr><td>Hosts</td><td>Excel</td></tr> <tr><td>Anforderungs Sätze</td><td>Nicht in einem Satz</td></tr> </table>\n\nIn der an die goToByIdAsync-Methode übergebenen Rückruffunktion können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.\n\n<table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da es beim Festlegen von Formaten keine Daten oder Objekte gibt, die abgerufen werden können.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Verwenden Sie diese Eigenschaft, um zu ermitteln, ob der Vorgang erfolgreich war.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Verwenden Sie diese Eigenschaft, um auf ein Error-Objekt zuzugreifen, das Informationen zu dem Fehler bereitstellt, wenn der Vorgang fehlgeschlagen ist.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example shows how to:\n// 1. Create an object literal that specifies the table formatting options to update on the bound table.\n// 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object\n//    with formatting setting as the tableOptions parameter.\nfunction updateTableFormatting(){\n    var tableOptions = {bandedRows: true, filterButton: false, style: \"TableStyleMedium3\"}; \n\n    Office.select(\"bindings#myBinding\").setTableOptionsAsync(tableOptions, function(asyncResult){});\n}\n```"
  name: setTableOptionsAsync(tableOptions, options, callback)
  fullName: setTableOptionsAsync(tableOptions, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableOptions
      description: Ein Objektliteral mit einer Liste von Eigenschaften Name-Wert-Paaren, die die anzuwendenden Tabellenoptionen definieren.
      type:
      - any
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs unverändert zur Verwendung in einem Rückruf bereit.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setTableOptionsAsync_1
  summary: Aktualisiert Tabellenformatierungsoptionen für die gebundene Tabelle.
  remarks: >-
    <table> <tr><td>Hosts</td><td>Excel</td></tr> <tr><td>Anforderungs Sätze</td><td>Nicht in einem Satz</td></tr> </table>


    In der an die goToByIdAsync-Methode übergebenen Rückruffunktion können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.


    <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da es beim Festlegen von Formaten keine Daten oder Objekte gibt, die abgerufen werden können.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Verwenden Sie diese Eigenschaft, um zu ermitteln, ob der Vorgang erfolgreich war.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Verwenden Sie diese Eigenschaft, um auf ein Error-Objekt zuzugreifen, das Informationen zu dem Fehler bereitstellt, wenn der Vorgang fehlgeschlagen ist.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: setTableOptionsAsync(tableOptions, callback)
  fullName: setTableOptionsAsync(tableOptions, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableOptions
      description: Ein Objektliteral mit einer Liste von Eigenschaften Name-Wert-Paaren, die die anzuwendenden Tabellenoptionen definieren.
      type:
      - any
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->ist.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.columnCount
  summary: Ruft die Anzahl der Spalten in der Tabellenbindung als ganzzahliger Wert ab.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction showBindingColumnCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Column: \" + asyncResult.value.columnCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: columnCount
  fullName: columnCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'columnCount: number;'
    return:
      type:
      - number
- uid: office.Office.TableBinding.hasHeaders
  summary: True, wenn die Tabelle über Kopfzeilen verfügt; andernfalls false.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction showBindingHasHeaders() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Binding has headers: \" + asyncResult.value.hasHeaders);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: hasHeaders
  fullName: hasHeaders
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hasHeaders: boolean;'
    return:
      type:
      - boolean
- uid: office.Office.TableBinding.rowCount
  summary: Ruft die Anzahl der Zeilen in der-Bindung als ganzzahligen Wert ab.
  remarks: "Wenn Sie eine leere Tabelle einfügen, indem Sie eine einzelne Zeile in Excel 2013 und Excel Online auswählen (mithilfe der Tabelle auf der Registerkarte Einfügen), erstellen beide Office-Hostanwendungen eine einzelne Zeile mit Kopfzeilen gefolgt von einer einzelnen leeren Zeile. Wenn das Add-in-Skript jedoch eine Bindung für diese neu eingefügte Tabelle erstellt (beispielsweise mithilfe der [Office. Bindings](xref:office.Office.Bindings)<!-- -->. addFromSelectionAsync-Methode) und dann den Wert der RowCount-Eigenschaft überprüft, unterscheidet sich der zurückgegebene Wert je nachdem, ob das Arbeitsblatt in Excel 2013 oder Excel Online geöffnet ist.\n\n- In Excel auf dem Desktop gibt rowCount 0 zurück (die leere Zeile nach den Kopfzeilen wird nicht gezählt).\n\n- In Excel Online gibt rowCount 1 zurück (die leere Zeile nach den Kopfzeilen wird gezählt).\n\nSie können diesen Unterschied in Ihrem Skript umgehen, indem Sie überprüfen, ob rowCount = = 1 und wenn ja, dann überprüfen, ob die Zeile alle leeren Zeichenfolgen enthält.\n\nIn Inhalts-Add-Ins für Access gibt die rowCount-Eigenschaft aus Leistungsgründen immer-1 zurück.\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Access</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Examples\n\n```javascript\nfunction showBindingRowCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Rows: \" + asyncResult.value.rowCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: rowCount
  fullName: rowCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rowCount: number;'
    return:
      type:
      - number
