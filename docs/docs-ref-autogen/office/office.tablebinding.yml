### YamlMime:UniversalReference
ms.openlocfilehash: 3b11a41affca0912cb50d65dd94b8330d40b8b34
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/13/2019
ms.locfileid: "29979505"
items:
- uid: office.Office.TableBinding
  summary: Stellt eine Bindung in zwei Dimensionen von Zeilen und Spalten dar, optional mit Kopfzeilen.
  remarks: >-
    <table><tr><td>Anforderungssätze</td><td>TableBindings</td></tr></table>


    Das TableBinding-Objekt erbt die `id` -Eigenschaft, `type` -Eigenschaft, `getDataAsync` -Methode, und `setDataAsync` Methode aus dem [Office.Binding](xref:office.Office.Binding) -Objekt.


    In Excel ist Beachten Sie, dass jede neue Zeile ein Benutzer zur Tabelle, nachdem Sie eine tabellenbindung eingerichtet haben hinzufügt, automatisch in die Bindung und RowCount erhöht enthalten.
  name: Office.TableBinding
  fullName: Office.TableBinding
  langs:
  - typeScript
  type: interface
  extends:
  - 'Binding '
  package: office
  children:
  - office.Office.TableBinding.addColumnsAsync
  - office.Office.TableBinding.addColumnsAsync_1
  - office.Office.TableBinding.addRowsAsync
  - office.Office.TableBinding.addRowsAsync_1
  - office.Office.TableBinding.clearFormatsAsync
  - office.Office.TableBinding.clearFormatsAsync_1
  - office.Office.TableBinding.deleteAllDataValuesAsync
  - office.Office.TableBinding.deleteAllDataValuesAsync_1
  - office.Office.TableBinding.getFormatsAsync
  - office.Office.TableBinding.getFormatsAsync_1
  - office.Office.TableBinding.setFormatsAsync
  - office.Office.TableBinding.setFormatsAsync_1
  - office.Office.TableBinding.setTableOptionsAsync
  - office.Office.TableBinding.setTableOptionsAsync_1
  - office.Office.TableBinding.columnCount
  - office.Office.TableBinding.hasHeaders
  - office.Office.TableBinding.rowCount
- uid: office.Office.TableBinding.addColumnsAsync
  summary: Die angegebenen Daten hinzugefügt zur Tabelle als zusätzliche Spalten.
  remarks: >-
    Zum Hinzufügen einer oder mehrerer Spalten angeben der Werte der Daten und Header übergeben Sie ein TableData-Objekt als der Data-Parameter. Um eine oder mehrere Spalten, die nur die Daten angeben hinzuzufügen, übergeben Sie ein Array von Arrays ("Matrix") als der Data-Parameter.


    Den Erfolg oder Misserfolg eines Vorgangs AddColumnsAsync ist unteilbare. D. h., die gesamte Spalten hinzufügen Vorgang erfolgreich durchgeführt werden, oder es wird vollständig rückgängig gemacht werden (und die AsyncResult.status-Eigenschaft zurückgegeben wird, an den Rückruf meldet Fehler):


    - Jede Zeile im Array, das Sie als Datenargument übergeben muss die gleiche Anzahl Zeilen als die Tabelle, die aktualisiert haben. Wenn dies nicht der Fall ist, wird der gesamte Vorgang fehl.


    - Jede Zeile und Zelle im Array muss die entsprechende Zeile oder Zelle in der Tabelle in den neu erstellten Spalten hinzufügen. Wenn eine Zeile oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.


    - Wenn Sie ein TableData-Objekt als Datenargument übergeben, muss die Anzahl der Zeilen für Kopfzeilen mit der die zu aktualisierende Tabelle übereinstimmen.


    Zusätzliche Hinweis für Excel Online: die Gesamtanzahl von Zellen in der Data-Parameter übergeben TableData-Objekt kann nicht 20.000 in einem einzigen Aufruf dieser Methode überschreiten.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following example adds a single column with three rows to a bound table with the id "myTable"

    // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,

    // the table being updated must have three rows.


    // Add a column to a binding of type table by passing a TableData object.

    function addColumns() {
        var myTable = new Office.TableData();
        myTable.headers = [["Cities"]];
        myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }


    // The following example adds a single column with three rows to a bound table with the id myTable

    // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.

    // To succeed, the table being updated must have three rows.


    // Add a column to a binding of type table by passing an array of arrays.

    function addColumns() {
        var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

        Office.context.document.bindings.getByIdAsync("myTable", function (result) {
            result.value.addColumnsAsync(myTable);
        });
    }

    ```
  name: addColumnsAsync(tableData, options, callback)
  fullName: addColumnsAsync(tableData, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableData
      description: Ein Array von Arrays ("Matrix") oder ein TableData-Objekt, das eine oder mehrere Datenspalten hinzufügen auf die Tabelle enthält. Erforderlich.
      type:
      - TableData | any[][]
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addColumnsAsync_1
  summary: Die angegebenen Daten hinzugefügt zur Tabelle als zusätzliche Spalten.
  remarks: >-
    Zum Hinzufügen einer oder mehrerer Spalten angeben der Werte der Daten und Header übergeben Sie ein TableData-Objekt als der Data-Parameter. Um eine oder mehrere Spalten, die nur die Daten angeben hinzuzufügen, übergeben Sie ein Array von Arrays ("Matrix") als der Data-Parameter.


    Den Erfolg oder Misserfolg eines Vorgangs AddColumnsAsync ist unteilbare. D. h., die gesamte Spalten hinzufügen Vorgang erfolgreich durchgeführt werden, oder es wird vollständig rückgängig gemacht werden (und die AsyncResult.status-Eigenschaft zurückgegeben wird, an den Rückruf meldet Fehler):


    - Jede Zeile im Array, das Sie als Datenargument übergeben muss die gleiche Anzahl Zeilen als die Tabelle, die aktualisiert haben. Wenn dies nicht der Fall ist, wird der gesamte Vorgang fehl.


    - Jede Zeile und Zelle im Array muss die entsprechende Zeile oder Zelle in der Tabelle in den neu erstellten Spalten hinzufügen. Wenn eine Zeile oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.


    - Wenn Sie ein TableData-Objekt als Datenargument übergeben, muss die Anzahl der Zeilen für Kopfzeilen mit der die zu aktualisierende Tabelle übereinstimmen.


    Zusätzliche Hinweis für Excel Online: die Gesamtanzahl von Zellen in der Data-Parameter übergeben TableData-Objekt kann nicht 20.000 in einem einzigen Aufruf dieser Methode überschreiten.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: addColumnsAsync(tableData, callback)
  fullName: addColumnsAsync(tableData, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addColumnsAsync(tableData: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableData
      description: Ein Array von Arrays ("Matrix") oder ein TableData-Objekt, das eine oder mehrere Datenspalten hinzufügen auf die Tabelle enthält. Erforderlich.
      type:
      - TableData | any[][]
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addRowsAsync
  summary: Die angegebenen Daten hinzugefügt zur Tabelle als zusätzliche Zeilen.
  remarks: >-
    Den Erfolg oder Misserfolg eines Vorgangs AddRowsAsync ist unteilbare. D. h., die gesamte Spalten hinzufügen Vorgang erfolgreich durchgeführt werden, oder es wird vollständig rückgängig gemacht werden (und die AsyncResult.status-Eigenschaft zurückgegeben wird, an den Rückruf meldet Fehler):


    - Jede Zeile im Array, das Sie als Datenargument übergeben, muss die gleiche Anzahl von Spalten wie die zu aktualisierende Tabelle haben. Wenn dies nicht der Fall ist, wird der gesamte Vorgang fehl.


    - Jede Spalte und die Zelle im Array muss erfolgreich, die Spalte oder Zelle der Tabelle in die neu hinzugefügten Zeilen (s) hinzufügen. Wenn eine Spalte oder Zelle nicht aus irgendeinem Grund festgelegt werden, wird der gesamte Vorgang fehl.


    - Wenn Sie ein TableData-Objekt als Datenargument übergeben, muss die Anzahl der Zeilen für Kopfzeilen mit der die zu aktualisierende Tabelle übereinstimmen.


    Zusätzliche Hinweis für Excel Online: die Gesamtanzahl von Zellen in der Data-Parameter übergeben TableData-Objekt kann nicht 20.000 in einem einzigen Aufruf dieser Methode überschreiten.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    function addRowsToTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.addRowsAsync([["6", "k"], ["7", "j"]]);
        });
    }

    ```
  name: addRowsAsync(rows, options, callback)
  fullName: addRowsAsync(rows, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: rows
      description: Ein Array von Arrays ("Matrix") oder ein TableData-Objekt, das eine oder mehrere Zeilen mit Daten in der Tabelle hinzufügen enthält. Erforderlich.
      type:
      - TableData | any[][]
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.addRowsAsync_1
  summary: Die angegebenen Daten hinzugefügt zur Tabelle als zusätzliche Zeilen.
  remarks: >-
    Den Erfolg oder Misserfolg eines Vorgangs AddRowsAsync ist unteilbare. D. h., die gesamte Spalten hinzufügen Vorgang erfolgreich durchgeführt werden, oder es wird vollständig rückgängig gemacht werden (und die AsyncResult.status-Eigenschaft zurückgegeben wird, an den Rückruf meldet Fehler):


    - Jede Zeile im Array, das Sie als Datenargument übergeben, muss die gleiche Anzahl von Spalten wie die zu aktualisierende Tabelle haben. Wenn dies nicht der Fall ist, wird der gesamte Vorgang fehl.


    - Jede Spalte und die Zelle im Array muss erfolgreich, die Spalte oder Zelle der Tabelle in die neu hinzugefügten Zeilen (s) hinzufügen. Wenn eine Spalte oder Zelle nicht aus irgendeinem Grund festgelegt werden, wird der gesamte Vorgang fehl.


    - Wenn Sie ein TableData-Objekt als Datenargument übergeben, muss die Anzahl der Zeilen für Kopfzeilen mit der die zu aktualisierende Tabelle übereinstimmen.


    Zusätzliche Hinweis für Excel Online: die Gesamtanzahl von Zellen in der Data-Parameter übergeben TableData-Objekt kann nicht 20.000 in einem einzigen Aufruf dieser Methode überschreiten.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: addRowsAsync(rows, callback)
  fullName: addRowsAsync(rows, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addRowsAsync(rows: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: rows
      description: Ein Array von Arrays ("Matrix") oder ein TableData-Objekt, das eine oder mehrere Zeilen mit Daten in der Tabelle hinzufügen enthält. Erforderlich.
      type:
      - TableData | any[][]
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.clearFormatsAsync
  summary: Löscht Formatierung der gebundenen Tabelle.
  remarks: >-
    Weitere Informationen finden Sie unter [Formatieren von Tabellen in add-ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":

    Office.select("bindings#myBinding").clearFormatsAsync();

    ```
  name: clearFormatsAsync(options, callback)
  fullName: clearFormatsAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearFormatsAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.clearFormatsAsync_1
  summary: Löscht Formatierung der gebundenen Tabelle.
  remarks: >-
    Weitere Informationen finden Sie unter [Formatieren von Tabellen in add-ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: clearFormatsAsync(callback)
  fullName: clearFormatsAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearFormatsAsync(callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.deleteAllDataValuesAsync
  summary: Löscht alle Zeilen, bei denen es sich nicht um Kopfzeilen handelt, und ihre Werte in der Tabelle, wobei für die Hostanwendung entsprechend verschoben wird
  remarks: >-
    Wenn die Tabelle in Excel über keine Kopfzeile verfügt, löscht diese Methode die Tabelle selbst.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    function deleteAllRowsFromTable() {
        Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
            var binding = asyncResult.value;
            binding.deleteAllDataValuesAsync();
        });
    }

    ```
  name: deleteAllDataValuesAsync(options, callback)
  fullName: deleteAllDataValuesAsync(options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAllDataValuesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.deleteAllDataValuesAsync_1
  summary: Löscht alle Zeilen, bei denen es sich nicht um Kopfzeilen handelt, und ihre Werte in der Tabelle, wobei für die Hostanwendung entsprechend verschoben wird
  remarks: >-
    Wenn die Tabelle in Excel über keine Kopfzeile verfügt, löscht diese Methode die Tabelle selbst.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: deleteAllDataValuesAsync(callback)
  fullName: deleteAllDataValuesAsync(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'deleteAllDataValuesAsync(callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.getFormatsAsync
  summary: Ruft die Formatierung für bestimmte Elemente in der Tabelle.
  remarks: >-
    **Formatstruktur zurückgegeben**


    Jedes JavaScript-Objekt im Rückgabewert Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`


    Die `cells:` -Eigenschaft gibt den Bereich gewünschte Format mit einer der folgenden Werte an:


    **Unterstützte Bereiche in Zelleneigenschaft**


    <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Bereich an, der die nullbasierte n-te Zeile des Datenteils der Tabelle ist.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Bereich an, der die n-te nullbasierte Spalte des Datenteils der Tabelle ist.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle, die i-te Zeile und Spalte j-Spalte der Tabelle ist.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>


    Die `format:` -Eigenschaft gibt an, auf eine Teilmenge der Einstellungen im Dialogfeld Zellen formatieren verfügbar entsprechenden, Werte im Feld in Excel (mit der rechten Maustaste &gt; Zellen formatieren oder zu Hause &gt; Format &gt; Zellen formatieren).
  name: getFormatsAsync(cellReference, formats, options, callback)
  fullName: getFormatsAsync(cellReference, formats, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellReference
      description: Ein Objektliteral mit Name / Wert-Paaren, die den Bereich der Zellen, auf die Formatierung von Abrufen angeben.
      type:
      - any
    - id: formats
      description: Ein Array die abzurufenden Formateigenschaften angeben.
      type:
      - any[]
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist ein Array mit ein oder mehrere JavaScript-Objekte, die die Formatierung des ihrer entsprechenden Zellen angeben.
      type:
      - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
- uid: office.Office.TableBinding.getFormatsAsync_1
  summary: Ruft die Formatierung für bestimmte Elemente in der Tabelle.
  remarks: >-
    **Formatstruktur zurückgegeben**


    Jedes JavaScript-Objekt im Rückgabewert Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`


    Die `cells:` -Eigenschaft gibt den Bereich gewünschte Format mit einer der folgenden Werte an:


    **Unterstützte Bereiche in Zelleneigenschaft**


    <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Bereich an, der die nullbasierte n-te Zeile des Datenteils der Tabelle ist.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Bereich an, der die n-te nullbasierte Spalte des Datenteils der Tabelle ist.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle, die i-te Zeile und Spalte j-Spalte der Tabelle ist.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>


    Die `format:` -Eigenschaft gibt an, auf eine Teilmenge der Einstellungen im Dialogfeld Zellen formatieren verfügbar entsprechenden, Werte im Feld in Excel (mit der rechten Maustaste &gt; Zellen formatieren oder zu Hause &gt; Format &gt; Zellen formatieren).
  name: getFormatsAsync(cellReference, formats, callback)
  fullName: getFormatsAsync(cellReference, formats, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFormatsAsync(cellReference?: any, formats?: any[], callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellReference
      description: Ein Objektliteral mit Name / Wert-Paaren, die den Bereich der Zellen, auf die Formatierung von Abrufen angeben.
      type:
      - any
    - id: formats
      description: Ein Array die abzurufenden Formateigenschaften angeben.
      type:
      - any[]
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist ein Array mit ein oder mehrere JavaScript-Objekte, die die Formatierung des ihrer entsprechenden Zellen angeben.
      type:
      - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
- uid: office.Office.TableBinding.setFormatsAsync
  summary: Formatierung für bestimmte Elemente und Daten in der Tabelle festgelegt.
  remarks: "**Angeben des cellFormat-Parameters**\n\nVerwenden Sie den Parameter CellFormat, festlegen oder Ändern von zellformatierung Werte wie Breite, Höhe, Schriftart, Hintergrund, Ausrichtung und So weiter. Wie CellFormat-Parameter ist ein Array mit einer Liste von einem oder mehr JavaScript-Objekten angegeben wird, dass das Ziel cells übergebene Wert (`cells:`<!-- -->) und die Formate (`format:`<!-- -->) angewendet werden.\n\nJedes JavaScript-Objekt im CellFormat-Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`\n\nDie `cells:` -Eigenschaft gibt den Bereich gewünschte Format mit einer der folgenden Werte an:\n\n**Unterstützte Bereiche in Zelleneigenschaft**\n\n<table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Bereich an, der die nullbasierte n-te Zeile des Datenteils der Tabelle ist.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Bereich an, der die n-te nullbasierte Spalte des Datenteils der Tabelle ist.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle, die i-te Zeile und Spalte j-Spalte der Tabelle ist.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>\n\nDie `format:` -Eigenschaft gibt an, auf eine Teilmenge der Einstellungen im Dialogfeld Zellen formatieren verfügbar entsprechenden, Werte im Feld in Excel (mit der rechten Maustaste &gt; Zellen formatieren oder zu Hause &gt; Format &gt; Zellen formatieren).\n\nGeben Sie den Wert, der die `format:` -Eigenschaft, wie eine Liste mit mindestens einen Eigenschaftsnamen - Wert-Paare in einer JavaScript Objektliteral. Der Name der Eigenschaft gibt den Namen der festzulegenden Eigenschaft Formatierung und Wert gibt den Eigenschaftswert. Sie können mehrere Werte für ein bestimmtes Format, wie einer Schriftart Farbe und Größe angeben.\n\nNachfolgend finden Sie drei `format:` Beispiele für Wert:\n\n`//Set cells: font color to green and size to 15 points.`\n\n`format: {fontColor : \"green\", fontSize : 15}`\n\n`//Set cells: border to dotted blue.`\n\n`format: {borderStyle: \"dotted\", borderColor: \"blue\"}`\n\n`//Set cells: background to red and alignment to centered.`\n\n`format: {backgroundColor: \"red\", alignHorizontal: \"center\"}`\n\nSie können Zahlenformate angeben, durch Angabe der Anzahl formatieren \"code\" Zeichenfolge in der `numberFormat:` Eigenschaft. Die Zahlen Formatzeichenfolgen, die Sie angeben können, entsprechen denen, die Sie in Excel festlegen können, verwenden die benutzerdefinierte Kategorie auf der Registerkarte Zahl im Dialogfeld Zellen formatieren. Dieses Beispiel zeigt, wie ein Zahlenformat als Prozentsatz mit zwei Dezimalstellen an:\n\n`format: {numberFormat:\"0.00%\"}`\n\nWeitere Informationen finden Sie unter So [Erstellen Sie ein benutzerdefiniertes Zahlenformat](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.\n\nUm Formatierung für Tabellen beim Schreiben von Daten festzulegen, verwenden Sie die optionalen TableOptions und CellFormat-Parameter der der `Document.setSelectedDataAsync` oder `TableBinding.setDataAsync` Methoden.\n\nFestlegen von Formatierung mit den optionalen Parameter, der die `Document.setSelectedDataAsync` und `TableBinding.setDataAsync` Methoden funktioniert nur, um die Formatierung beim Schreiben von Daten das erste Mal festzulegen. Damit Formatänderungen können nach dem Schreiben von Daten, verwenden Sie die folgenden Methoden:\n\n- Verwenden Sie zum Aktualisieren der Zellenformat wie Schriftgröße und-Art, die `TableBinding.setFormatsAsync` Methode (diese Methode).\n\n- Verwenden Sie zum Aktualisieren von Tabellenoptionen wie verbundene Zellen und Filterschaltflächen, die `TableBinding.setTableOptions` Methode.\n\n- Verwenden Sie zum Deaktivieren der Formatierung der `TableBinding.clearFormats` Methode.\n\nWeitere Informationen und Beispiele finden Sie unter [Gewusst wie: Formatieren von Tabellen in add-ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Specifying a single target\n// The following example shows a cellFormat value that sets the font color of the header row to red.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: Office.Table.Headers, format: {fontColor: \"red\"}}], \n    function (asyncResult){});\n\n// Specifying multiple targets\n// The setFormatsAsync method can support formatting multiple targets within the bound table in a \n// single function call. To do that, you pass a list of objects in the cellFormat array \n// for each target that you want to format.\n// For example, the following line of code will set the font color of the first row yellow, \n// and the fourth cell in the third row to have a white border and bold text.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n\n// Additional remarks for Excel Online\n// The number of formatting groups passed to the cellFormat parameter can't exceed 100. \n// A single formatting group consists of a set of formatting applied to a specified range of cells. \n// For example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setFormatsAsync(\n    [{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n        {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}], \n    function (asyncResult){});\n```"
  name: setFormatsAsync(cellFormat, options, callback)
  fullName: setFormatsAsync(cellFormat, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellFormat
      description: Ein Array, das einen oder mehrere JavaScript-Objekte enthält, die angeben, welche Zellen Ziel und die Formatierung angewendet werden.
      type:
      - any[]
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setFormatsAsync_1
  summary: Formatierung für bestimmte Elemente und Daten in der Tabelle festgelegt.
  remarks: >-
    **Angeben des cellFormat-Parameters**


    Verwenden Sie den Parameter CellFormat, festlegen oder Ändern von zellformatierung Werte wie Breite, Höhe, Schriftart, Hintergrund, Ausrichtung und So weiter. Wie CellFormat-Parameter ist ein Array mit einer Liste von einem oder mehr JavaScript-Objekten angegeben wird, dass das Ziel cells übergebene Wert (`cells:`<!-- -->) und die Formate (`format:`<!-- -->) angewendet werden.


    Jedes JavaScript-Objekt im CellFormat-Array weist dieses Format auf:`{cells:{ cell_range }, format:{ format_definition }}`


    Die `cells:` -Eigenschaft gibt den Bereich gewünschte Format mit einer der folgenden Werte an:


    **Unterstützte Bereiche in Zelleneigenschaft**


    <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Bereich an, der die nullbasierte n-te Zeile des Datenteils der Tabelle ist.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Bereich an, der die n-te nullbasierte Spalte des Datenteils der Tabelle ist.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle, die i-te Zeile und Spalte j-Spalte der Tabelle ist.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>


    Die `format:` -Eigenschaft gibt an, auf eine Teilmenge der Einstellungen im Dialogfeld Zellen formatieren verfügbar entsprechenden, Werte im Feld in Excel (mit der rechten Maustaste &gt; Zellen formatieren oder zu Hause &gt; Format &gt; Zellen formatieren).


    Geben Sie den Wert, der die `format:` -Eigenschaft, wie eine Liste mit mindestens einen Eigenschaftsnamen - Wert-Paare in einer JavaScript Objektliteral. Der Name der Eigenschaft gibt den Namen der festzulegenden Eigenschaft Formatierung und Wert gibt den Eigenschaftswert. Sie können mehrere Werte für ein bestimmtes Format, wie einer Schriftart Farbe und Größe angeben.


    Nachfolgend finden Sie drei `format:` Beispiele für Wert:


    `//Set cells: font color to green and size to 15 points.`


    `format: {fontColor : "green", fontSize : 15}`


    `//Set cells: border to dotted blue.`


    `format: {borderStyle: "dotted", borderColor: "blue"}`


    `//Set cells: background to red and alignment to centered.`


    `format: {backgroundColor: "red", alignHorizontal: "center"}`


    Sie können Zahlenformate angeben, durch Angabe der Anzahl formatieren "code" Zeichenfolge in der `numberFormat:` Eigenschaft. Die Zahlen Formatzeichenfolgen, die Sie angeben können, entsprechen denen, die Sie in Excel festlegen können, verwenden die benutzerdefinierte Kategorie auf der Registerkarte Zahl im Dialogfeld Zellen formatieren. Dieses Beispiel zeigt, wie ein Zahlenformat als Prozentsatz mit zwei Dezimalstellen an:


    `format: {numberFormat:"0.00%"}`


    Weitere Informationen finden Sie unter So [Erstellen Sie ein benutzerdefiniertes Zahlenformat](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.


    Um Formatierung für Tabellen beim Schreiben von Daten festzulegen, verwenden Sie die optionalen TableOptions und CellFormat-Parameter der der `Document.setSelectedDataAsync` oder `TableBinding.setDataAsync` Methoden.


    Festlegen von Formatierung mit den optionalen Parameter, der die `Document.setSelectedDataAsync` und `TableBinding.setDataAsync` Methoden funktioniert nur, um die Formatierung beim Schreiben von Daten das erste Mal festzulegen. Damit Formatänderungen können nach dem Schreiben von Daten, verwenden Sie die folgenden Methoden:


    - Verwenden Sie zum Aktualisieren der Zellenformat wie Schriftgröße und-Art, die `TableBinding.setFormatsAsync` Methode (diese Methode).


    - Verwenden Sie zum Aktualisieren von Tabellenoptionen wie verbundene Zellen und Filterschaltflächen, die `TableBinding.setTableOptions` Methode.


    - Verwenden Sie zum Deaktivieren der Formatierung der `TableBinding.clearFormats` Methode.


    Weitere Informationen und Beispiele finden Sie unter [Gewusst wie: Formatieren von Tabellen in add-ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: setFormatsAsync(cellFormat, callback)
  fullName: setFormatsAsync(cellFormat, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setFormatsAsync(cellFormat: any[], callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellFormat
      description: Ein Array, das einen oder mehrere JavaScript-Objekte enthält, die angeben, welche Zellen Ziel und die Formatierung angewendet werden.
      type:
      - any[]
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setTableOptionsAsync
  summary: Aktualisiert Tabellenformatierungsoptionen für die gebundene Tabelle.
  remarks: "<table><tr><td>Hosts</td><td>Excel</td></tr>\n\n<tr><td>Anforderungssätze</td><td>Nicht in einem Satz</td></tr></table>\n\nDie Eigenschaften des AsyncResult-Objekts können Sie in der an die GoToByIdAsync-Methode übergebenen Rückruffunktion die folgenden Informationen zurückzugeben.\n\n<table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da keine Daten oder Objekte zum Abrufen von beim Festlegen von Formaten vorhanden sind.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Verwenden Sie diese Eigenschaft, um zu ermitteln, ob der Vorgang erfolgreich war.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Verwenden Sie diese Eigenschaft, um auf ein Error-Objekt zuzugreifen, das Informationen zu dem Fehler bereitstellt, wenn der Vorgang fehlgeschlagen ist.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example shows how to:\n// 1. Create an object literal that specifies the table formatting options to update on the bound table.\n// 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object\n//    with formatting setting as the tableOptions parameter.\nfunction updateTableFormatting(){\n    var tableOptions = {bandedRows: true, filterButton: false, style: \"TableStyleMedium3\"}; \n\n    Office.select(\"bindings#myBinding\").setTableOptionsAsync(tableOptions, function(asyncResult){});\n}\n```"
  name: setTableOptionsAsync(tableOptions, options, callback)
  fullName: setTableOptionsAsync(tableOptions, options, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableOptions
      description: Ein Objekt Literal mit einer Liste von Name / Wert-Paaren, die die Tabellenoptionen anzuwendende definieren.
      type:
      - any
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.setTableOptionsAsync_1
  summary: Aktualisiert Tabellenformatierungsoptionen für die gebundene Tabelle.
  remarks: >-
    <table><tr><td>Hosts</td><td>Excel</td></tr>


    <tr><td>Anforderungssätze</td><td>Nicht in einem Satz</td></tr></table>


    Die Eigenschaften des AsyncResult-Objekts können Sie in der an die GoToByIdAsync-Methode übergebenen Rückruffunktion die folgenden Informationen zurückzugeben.


    <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da keine Daten oder Objekte zum Abrufen von beim Festlegen von Formaten vorhanden sind.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Verwenden Sie diese Eigenschaft, um zu ermitteln, ob der Vorgang erfolgreich war.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Verwenden Sie diese Eigenschaft, um auf ein Error-Objekt zuzugreifen, das Informationen zu dem Fehler bereitstellt, wenn der Vorgang fehlgeschlagen ist.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: setTableOptionsAsync(tableOptions, callback)
  fullName: setTableOptionsAsync(tableOptions, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTableOptionsAsync(tableOptions: any, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: tableOptions
      description: Ein Objekt Literal mit einer Liste von Name / Wert-Paaren, die die Tabellenoptionen anzuwendende definieren.
      type:
      - any
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ [Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.TableBinding.columnCount
  summary: Ruft die Anzahl der Spalten in der TableBinding als ganze Zahl ab.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction showBindingColumnCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Column: \" + asyncResult.value.columnCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: columnCount
  fullName: columnCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'columnCount: number;'
    return:
      type:
      - number
- uid: office.Office.TableBinding.hasHeaders
  summary: True, wenn die Tabelle über Kopfzeilen verfügt; andernfalls False.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction showBindingHasHeaders() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Binding has headers: \" + asyncResult.value.hasHeaders);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: hasHeaders
  fullName: hasHeaders
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hasHeaders: boolean;'
    return:
      type:
      - boolean
- uid: office.Office.TableBinding.rowCount
  summary: Ruft die Anzahl der Zeilen in der TableBinding als ganze Zahl ab.
  remarks: "Wenn Sie eine leere Tabelle einfügen, indem Sie eine einzelne Zeile in Excel 2013 und Excel Online auswählen zu erstellen (verwenden die Tabelle auf der Registerkarte einfügen), sowohl Office-hostanwendungen eine einzelne Zeile von zuerst Kopfzeilen, dann eine einzelne leere Zeile. Jedoch, wenn Ihr Add-in Skript für eine Bindung erstellt diese eingefügte Tabelle (beispielsweise mithilfe der [Office.Bindings](xref:office.Office.Bindings)<!-- -->.addFromSelectionAsync-Methode), und klicken Sie dann überprüft den Wert der die RowCount-Eigenschaft zurückgegebene Wert ist unterschiedlich abhängig davon, ob die Kalkulationstabelle in Excel 2013 oder Excel Online geöffnet ist.\n\n- In Excel auf dem Desktop zurück RowCount gibt 0 (die leere Zeile nach den Kopfzeilen wird nicht mitgezählt).\n\n- In Excel Online zurück RowCount gibt 1 (die leere Zeile nach den Kopfzeilen wird mitgezählt).\n\nSie können diesen Unterschied in Ihrem Skript umgehen, indem überprüft wird, ob RowCount == 1 und wenn Ja, prüfen Sie, ob die Zeile alle leere Zeichenfolgen enthält.\n\nIn Content-add-ins für Access aus Leistungsgründen die RowCount-Eigenschaft immer gibt-1 zurück.\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th><th> Office for Mac </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Examples\n\n```javascript\nfunction showBindingRowCount() {\n    Office.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n        write(\"Rows: \" + asyncResult.value.rowCount);\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: rowCount
  fullName: rowCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rowCount: number;'
    return:
      type:
      - number
