### YamlMime:UniversalReference
items:
  - uid: 'office!Office.CustomXmlPart:interface'
    summary: '<span data-ttu-id="90570-101">Stellt ein einzelnes CustomXMLPart in einer [Office. CustomXmlParts](xref:office!Office.CustomXmlParts:interface) -Auflistung dar.</span><span class="sxs-lookup"><span data-stu-id="90570-101">Represents a single CustomXMLPart in an [Office.CustomXmlParts](xref:office!Office.CustomXmlParts:interface) collection.</span></span>'
    remarks: '<span data-ttu-id="90570-102">**Hosts**: Word</span><span class="sxs-lookup"><span data-stu-id="90570-102">**Hosts**: Word</span></span>'
    name: Office.CustomXmlPart
    fullName: Office.CustomXmlPart
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.CustomXmlPart#addHandlerAsync:member(1)'
      - 'office!Office.CustomXmlPart#addHandlerAsync:member(2)'
      - 'office!Office.CustomXmlPart#builtIn:member'
      - 'office!Office.CustomXmlPart#deleteAsync:member(1)'
      - 'office!Office.CustomXmlPart#deleteAsync:member(2)'
      - 'office!Office.CustomXmlPart#getNodesAsync:member(1)'
      - 'office!Office.CustomXmlPart#getNodesAsync:member(2)'
      - 'office!Office.CustomXmlPart#getXmlAsync:member(1)'
      - 'office!Office.CustomXmlPart#getXmlAsync:member(2)'
      - 'office!Office.CustomXmlPart#id:member'
      - 'office!Office.CustomXmlPart#namespaceManager:member'
      - 'office!Office.CustomXmlPart#removeHandlerAsync:member(1)'
      - 'office!Office.CustomXmlPart#removeHandlerAsync:member(2)'
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync:member(1)'
    summary: <span data-ttu-id="90570-103">Fügt dem Objekt mithilfe des angegebenen Ereignistyps einen Ereignishandler hinzu.</span><span class="sxs-lookup"><span data-stu-id="90570-103">Adds an event handler to the object using the specified event type.</span></span>
    remarks: |-
      <span data-ttu-id="90570-104">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-104">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      <span data-ttu-id="90570-105">Sie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange der Name jeder Ereignis Handlerfunktion eindeutig ist.</span><span class="sxs-lookup"><span data-stu-id="90570-105">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="90570-106">Gibt den Ereignistyp an, der hinzugefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="90570-106">Specifies the type of event to add.</span></span> <span data-ttu-id="90570-107">Für ein CustomXMLPart-Objekt kann der eventType-Parameter als angegeben werden.`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="90570-107">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="90570-108">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="90570-108"></span></span><!-- --><span data-ttu-id="90570-109">, und`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="90570-109">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="90570-110">.</span><span class="sxs-lookup"><span data-stu-id="90570-110"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '<span data-ttu-id="90570-111">Die hinzuzufügende Ereignis Handlerfunktion, deren einziger Parameter vom Typ [Office. NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="90570-111">The event handler function to add, whose only parameter is of type [Office.NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span></span><!-- --><span data-ttu-id="90570-112">, [Office. NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="90570-112">, [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span></span><!-- --><span data-ttu-id="90570-113">oder [Office. Eigenschaft nodereplacedeventargs](xref:office!Office.NodeReplacedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="90570-113">, or [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)</span></span>'
          type:
            - '(result: any) => void'
        - id: options
          description: '<span data-ttu-id="90570-114">Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.</span><span class="sxs-lookup"><span data-stu-id="90570-114">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="90570-115">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-115">Optional.</span></span> <span data-ttu-id="90570-116">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-116">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-117">.</span><span class="sxs-lookup"><span data-stu-id="90570-117"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#addHandlerAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync:member(2)'
    summary: <span data-ttu-id="90570-118">Fügt dem Objekt mithilfe des angegebenen Ereignistyps einen Ereignishandler hinzu.</span><span class="sxs-lookup"><span data-stu-id="90570-118">Adds an event handler to the object using the specified event type.</span></span>
    remarks: |-
      <span data-ttu-id="90570-119">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-119">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      <span data-ttu-id="90570-120">Sie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange der Name jeder Ereignis Handlerfunktion eindeutig ist.</span><span class="sxs-lookup"><span data-stu-id="90570-120">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>

      #### <a name="examples"></a><span data-ttu-id="90570-121">Beispiele</span><span class="sxs-lookup"><span data-stu-id="90570-121">Examples</span></span>

      ```javascript
      // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeDeletedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                  write("A node has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeInsertedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                  write("A node has been inserted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeReplacedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                  write("A node has been replaced.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="90570-122">Gibt den Ereignistyp an, der hinzugefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="90570-122">Specifies the type of event to add.</span></span> <span data-ttu-id="90570-123">Für ein CustomXMLPart-Objekt kann der eventType-Parameter als angegeben werden.`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="90570-123">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="90570-124">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="90570-124"></span></span><!-- --><span data-ttu-id="90570-125">, und`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="90570-125">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="90570-126">.</span><span class="sxs-lookup"><span data-stu-id="90570-126"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '<span data-ttu-id="90570-127">Die hinzuzufügende Ereignis Handlerfunktion, deren einziger Parameter vom Typ [Office. NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="90570-127">The event handler function to add, whose only parameter is of type [Office.NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span></span><!-- --><span data-ttu-id="90570-128">, [Office. NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="90570-128">, [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span></span><!-- --><span data-ttu-id="90570-129">oder [Office. Eigenschaft nodereplacedeventargs](xref:office!Office.NodeReplacedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="90570-129">, or [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)</span></span>'
          type:
            - '(result: any) => void'
        - id: callback
          description: '<span data-ttu-id="90570-130">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-130">Optional.</span></span> <span data-ttu-id="90570-131">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-131">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-132">.</span><span class="sxs-lookup"><span data-stu-id="90570-132"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#addHandlerAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#builtIn:member'
    summary: '<span data-ttu-id="90570-133">True, wenn die benutzerdefinierte XML-Komponente integriert ist, andernfalls false. andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="90570-133">True, if the custom XML part is built in; otherwise false.</span></span>'
    name: builtIn
    fullName: builtIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'builtIn: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="90570-134">Beispiele</span><span class="sxs-lookup"><span data-stu-id="90570-134">Examples</span></span>

          ```javascript
          function showXMLPartBuiltIn() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.builtIn);
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.CustomXmlPart#deleteAsync:member(1)'
    summary: <span data-ttu-id="90570-135">Löscht die benutzerdefinierte XML-Komponente.</span><span class="sxs-lookup"><span data-stu-id="90570-135">Deletes the Custom XML Part.</span></span>
    remarks: '<span data-ttu-id="90570-136">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-136">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'deleteAsync(options, callback)'
    fullName: 'deleteAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="90570-137">Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.</span><span class="sxs-lookup"><span data-stu-id="90570-137">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="90570-138">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-138">Optional.</span></span> <span data-ttu-id="90570-139">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-139">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-140">.</span><span class="sxs-lookup"><span data-stu-id="90570-140"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#deleteAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#deleteAsync:member(2)'
    summary: <span data-ttu-id="90570-141">Löscht die benutzerdefinierte XML-Komponente.</span><span class="sxs-lookup"><span data-stu-id="90570-141">Deletes the Custom XML Part.</span></span>
    remarks: |-
      <span data-ttu-id="90570-142">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-142">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="90570-143">Beispiele</span><span class="sxs-lookup"><span data-stu-id="90570-143">Examples</span></span>

      ```javascript
      function deleteXMLPart() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.deleteAsync(function (eventArgs) {
                  write("The XML Part has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: deleteAsync(callback)
    fullName: deleteAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="90570-144">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-144">Optional.</span></span> <span data-ttu-id="90570-145">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-145">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-146">.</span><span class="sxs-lookup"><span data-stu-id="90570-146"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#deleteAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#getNodesAsync:member(1)'
    summary: '<span data-ttu-id="90570-147">Ruft asynchron alle CustomXmlNodes in dieser benutzerdefinierten XML-Komponente ab, die dem angegebenen XPath entsprechen.</span><span class="sxs-lookup"><span data-stu-id="90570-147">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>'
    remarks: '<span data-ttu-id="90570-148">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-148">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'getNodesAsync(xPath, options, callback)'
    fullName: 'getNodesAsync(xPath, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: '<span data-ttu-id="90570-149">Ein XPath-Ausdruck, der die zurückzugebenden Knoten angibt.</span><span class="sxs-lookup"><span data-stu-id="90570-149">An XPath expression that specifies the nodes you want returned.</span></span> <span data-ttu-id="90570-150">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90570-150">Required.</span></span>'
          type:
            - string
        - id: options
          description: '<span data-ttu-id="90570-151">Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.</span><span class="sxs-lookup"><span data-stu-id="90570-151">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="90570-152">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-152">Optional.</span></span> <span data-ttu-id="90570-153">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-153">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-154">.</span><span class="sxs-lookup"><span data-stu-id="90570-154"></span></span> <span data-ttu-id="90570-155">Die `value` Eigenschaft des Ergebnisses ist ein Array von CustomXmlNode-Objekten, die die Knoten darstellen, die vom XPath-Ausdruck angegeben werden, der an den XPath-Parameter übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="90570-155">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getNodesAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#getNodesAsync:member(2)'
    summary: '<span data-ttu-id="90570-156">Ruft asynchron alle CustomXmlNodes in dieser benutzerdefinierten XML-Komponente ab, die dem angegebenen XPath entsprechen.</span><span class="sxs-lookup"><span data-stu-id="90570-156">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>'
    remarks: |-
      <span data-ttu-id="90570-157">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-157">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="90570-158">Beispiele</span><span class="sxs-lookup"><span data-stu-id="90570-158">Examples</span></span>

      ```javascript
      function showXmlNodeType() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node.nodeType);
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getNodesAsync(xPath, callback)'
    fullName: 'getNodesAsync(xPath, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: '<span data-ttu-id="90570-159">Ein XPath-Ausdruck, der die zurückzugebenden Knoten angibt.</span><span class="sxs-lookup"><span data-stu-id="90570-159">An XPath expression that specifies the nodes you want returned.</span></span> <span data-ttu-id="90570-160">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="90570-160">Required.</span></span>'
          type:
            - string
        - id: callback
          description: '<span data-ttu-id="90570-161">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-161">Optional.</span></span> <span data-ttu-id="90570-162">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-162">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-163">.</span><span class="sxs-lookup"><span data-stu-id="90570-163"></span></span> <span data-ttu-id="90570-164">Die `value` Eigenschaft des Ergebnisses ist ein Array von CustomXmlNode-Objekten, die die Knoten darstellen, die vom XPath-Ausdruck angegeben werden, der an den XPath-Parameter übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="90570-164">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getNodesAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#getXmlAsync:member(1)'
    summary: <span data-ttu-id="90570-165">Ruft asynchron den XML-Code in der benutzerdefinierten XML-Komponente ab.</span><span class="sxs-lookup"><span data-stu-id="90570-165">Asynchronously gets the XML inside this custom XML part.</span></span>
    remarks: '<span data-ttu-id="90570-166">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-166">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'getXmlAsync(options, callback)'
    fullName: 'getXmlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="90570-167">Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.</span><span class="sxs-lookup"><span data-stu-id="90570-167">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="90570-168">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-168">Optional.</span></span> <span data-ttu-id="90570-169">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-169">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-170">.</span><span class="sxs-lookup"><span data-stu-id="90570-170"></span></span> <span data-ttu-id="90570-171">Die `value` Eigenschaft des Ergebnisses ist eine Zeichenfolge, die den XML-Code des referenzierten CustomXMLPart-Objekts enthält.</span><span class="sxs-lookup"><span data-stu-id="90570-171">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getXmlAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#getXmlAsync:member(2)'
    summary: <span data-ttu-id="90570-172">Ruft asynchron den XML-Code in der benutzerdefinierten XML-Komponente ab.</span><span class="sxs-lookup"><span data-stu-id="90570-172">Asynchronously gets the XML inside this custom XML part.</span></span>
    remarks: |-
      <span data-ttu-id="90570-173">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-173">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="90570-174">Beispiele</span><span class="sxs-lookup"><span data-stu-id="90570-174">Examples</span></span>

      ```javascript
      function showXMLPartInnerXML() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getXmlAsync(function (eventArgs) {
                  write(eventArgs.value);
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getXmlAsync(callback)
    fullName: getXmlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="90570-175">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-175">Optional.</span></span> <span data-ttu-id="90570-176">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-176">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-177">.</span><span class="sxs-lookup"><span data-stu-id="90570-177"></span></span> <span data-ttu-id="90570-178">Die `value` Eigenschaft des Ergebnisses ist eine Zeichenfolge, die den XML-Code des referenzierten CustomXMLPart-Objekts enthält.</span><span class="sxs-lookup"><span data-stu-id="90570-178">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getXmlAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#id:member'
    summary: <span data-ttu-id="90570-179">Ruft die GUID von CustomXMLPart ab.</span><span class="sxs-lookup"><span data-stu-id="90570-179">Gets the GUID of the CustomXMLPart.</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="90570-180">Beispiele</span><span class="sxs-lookup"><span data-stu-id="90570-180">Examples</span></span>

          ```javascript
          function showXMLPartBuiltId() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.id);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.CustomXmlPart#namespaceManager:member'
    summary: '<span data-ttu-id="90570-181">Ruft den Satz von Namespacepräfixzuordnungen ab ([Office. CustomXmlPrefixMappings](xref:office!Office.CustomXmlPrefixMappings:interface)</span><span class="sxs-lookup"><span data-stu-id="90570-181">Gets the set of namespace prefix mappings ([Office.CustomXmlPrefixMappings](xref:office!Office.CustomXmlPrefixMappings:interface)</span></span><!-- --><span data-ttu-id="90570-182">) wird für den aktuellen CustomXMLPart verwendet.</span><span class="sxs-lookup"><span data-stu-id="90570-182">) used against the current CustomXmlPart.</span></span>'
    name: namespaceManager
    fullName: namespaceManager
    langs:
      - typeScript
    type: property
    syntax:
      content: 'namespaceManager: CustomXmlPrefixMappings;'
      return:
        type:
          - 'office!Office.CustomXmlPrefixMappings:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="90570-183">Beispiele</span><span class="sxs-lookup"><span data-stu-id="90570-183">Examples</span></span>

          ```javascript
          function setXMLPartNamespaceManagerNamespace() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.namespaceManager.addNamespaceAsync("myPrefix", "myNamespace");
              });
          }
          ```
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync:member(1)'
    summary: <span data-ttu-id="90570-184">Entfernt einen Ereignishandler für den angegebenen Ereignistyp.</span><span class="sxs-lookup"><span data-stu-id="90570-184">Removes an event handler for the specified event type.</span></span>
    remarks: '<span data-ttu-id="90570-185">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-185">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'removeHandlerAsync(eventType, handler, options, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="90570-186">Gibt den Typ des zu entfernenden Ereignisses an.</span><span class="sxs-lookup"><span data-stu-id="90570-186">Specifies the type of event to remove.</span></span> <span data-ttu-id="90570-187">Für ein CustomXMLPart-Objekt kann der eventType-Parameter als angegeben werden.`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="90570-187">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="90570-188">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="90570-188"></span></span><!-- --><span data-ttu-id="90570-189">, und`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="90570-189">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="90570-190">.</span><span class="sxs-lookup"><span data-stu-id="90570-190"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: <span data-ttu-id="90570-191">Der Name des zu entfernenden Handlers.</span><span class="sxs-lookup"><span data-stu-id="90570-191">The name of the handler to remove.</span></span>
          type:
            - '(result: any) => void'
        - id: options
          description: '<span data-ttu-id="90570-192">Enthält Optionen zum bestimmen, welche Ereignishandler oder Handler entfernt werden.</span><span class="sxs-lookup"><span data-stu-id="90570-192">Provides options to determine which event handler or handlers are removed.</span></span>'
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: '<span data-ttu-id="90570-193">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-193">Optional.</span></span> <span data-ttu-id="90570-194">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-194">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-195">.</span><span class="sxs-lookup"><span data-stu-id="90570-195"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#removeHandlerAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync:member(2)'
    summary: <span data-ttu-id="90570-196">Entfernt einen Ereignishandler für den angegebenen Ereignistyp.</span><span class="sxs-lookup"><span data-stu-id="90570-196">Removes an event handler for the specified event type.</span></span>
    remarks: |-
      <span data-ttu-id="90570-197">**Anforderungsgruppe**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="90570-197">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="90570-198">Beispiele</span><span class="sxs-lookup"><span data-stu-id="90570-198">Examples</span></span>

      ```javascript
      function removeNodeInsertedEventHandler() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}",
              function (result) {
                  var xmlPart = result.value;
                  xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});
          });
      }
      ```
    name: 'removeHandlerAsync(eventType, handler, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="90570-199">Gibt den Typ des zu entfernenden Ereignisses an.</span><span class="sxs-lookup"><span data-stu-id="90570-199">Specifies the type of event to remove.</span></span> <span data-ttu-id="90570-200">Für ein CustomXMLPart-Objekt kann der eventType-Parameter als angegeben werden.`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="90570-200">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="90570-201">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="90570-201"></span></span><!-- --><span data-ttu-id="90570-202">, und`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="90570-202">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="90570-203">.</span><span class="sxs-lookup"><span data-stu-id="90570-203"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: <span data-ttu-id="90570-204">Der Name des zu entfernenden Handlers.</span><span class="sxs-lookup"><span data-stu-id="90570-204">The name of the handler to remove.</span></span>
          type:
            - '(result: any) => void'
        - id: callback
          description: '<span data-ttu-id="90570-205">Optional.</span><span class="sxs-lookup"><span data-stu-id="90570-205">Optional.</span></span> <span data-ttu-id="90570-206">Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist</span><span class="sxs-lookup"><span data-stu-id="90570-206">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="90570-207">.</span><span class="sxs-lookup"><span data-stu-id="90570-207"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#removeHandlerAsync~1:complex'
references:
  - uid: 'office!Office.EventType:enum'
    name: Office.EventType
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#deleteAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#deleteAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#getNodesAsync~0:complex'
    name: '(result: AsyncResult<CustomXmlNode[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlNode[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlNode:interface'
        name: CustomXmlNode
        fullName: Office.CustomXmlNode
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'office!Office.CustomXmlPart#getNodesAsync~1:complex'
    name: '(result: AsyncResult<CustomXmlNode[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlNode[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlNode:interface'
        name: CustomXmlNode
        fullName: Office.CustomXmlNode
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'office!Office.CustomXmlPart#getXmlAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlPart#getXmlAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlPrefixMappings:interface'
    name: CustomXmlPrefixMappings
  - uid: 'office!Office.RemoveHandlerOptions:interface'
    name: RemoveHandlerOptions
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void