### YamlMime:UniversalReference
items:
  - uid: 'office!Office.TableData:class'
    summary: 'Stellt die Daten in einer Tabelle oder in einer [Office. Table-Bindung dar.](xref:office!Office.TableBinding:interface)<!-- -->.'
    name: Office.TableData
    fullName: Office.TableData
    langs:
      - typeScript
    type: class
    package: office!
    children:
      - 'office!Office.TableData:constructor(1)'
      - 'office!Office.TableData:constructor(2)'
      - 'office!Office.TableData#headers:member'
      - 'office!Office.TableData#rows:member'
  - uid: 'office!Office.TableData:constructor(1)'
    summary: Erstellt eine neue Instanz der Klasse. `TableData`
    name: '(constructor)(rows, headers)'
    fullName: '(constructor)(rows, headers)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(rows: any[][], headers: any[]);'
      parameters:
        - id: rows
          description: ''
          type:
            - 'any[][]'
        - id: headers
          description: ''
          type:
            - 'any[]'
  - uid: 'office!Office.TableData:constructor(2)'
    summary: Erstellt eine neue Instanz der Klasse. `TableData`
    name: (constructor)()
    fullName: (constructor)()
    langs:
      - typeScript
    type: constructor
    syntax:
      content: constructor();
  - uid: 'office!Office.TableData#headers:member'
    summary: Ruft die Kopfzeilen der Tabelle ab oder legt sie fest.
    remarks: |-
      Zum Festlegen von Kopfzeilen müssen Sie ein Array aus Arrays festlegen, das der Tabellenstruktur entspricht. Wenn Sie beispielsweise Kopfzeilen für eine Tabelle mit zwei Spalten angeben möchten, legen Sie die Header-Eigenschaft auf \[ \[ "Header1", "header2" fest \] \] .

      Wenn Sie NULL für die Headers-Eigenschaft angeben (oder die Eigenschaft beim Erstellen eines Datenobjekts leer lassen), treten beim Ausführen des Codes die folgenden Ergebnisse ein:

      - Beim Einfügen einer neuen Tabelle werden die Standardkopfzeilen erstellt.

      - Beim Überschreiben oder Aktualisieren einer vorhandenen Tabelle bleiben die vorhandenen Kopfzeilen unverändert.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following example creates a single-column table with a header and three rows.
      function createTableData() {
          var tableData = new Office.TableData();
          tableData.headers = [['header1']];
          tableData.rows = [['row1'], ['row2'], ['row3']];
          return tableData;
      }
      ```
    name: headers
    fullName: headers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'headers: any[];'
      return:
        type:
          - 'any[]'
  - uid: 'office!Office.TableData#rows:member'
    summary: 'Ruft die Zeilen in einer Tabelle ab oder legt diese fest. Gibt ein Array von Arrays zurück, das die Daten in der Tabelle enthält. Gibt ein leeres Array zurück, wenn keine Zeilen vorhanden sind.'
    remarks: |-
      Um Zeilen abzugeben, müssen Sie ein Array von Arrays angeben, das der Struktur der Tabelle entspricht. Wenn Sie beispielsweise zwei Zeilen mit Zeichenfolgenwerten in einer zweispaltigen Tabelle angeben möchten, legen Sie die Rows-Eigenschaft auf \[ \[ "a", "b" \] , \[ "c", 'd "fest \] \] .

      Wenn Sie NULL für die Rows-Eigenschaft angeben (oder die Eigenschaft beim Erstellen eines Datenobjekts leer lassen), treten beim Ausführen des Codes die folgenden Ergebnisse ein:

      - Beim Einfügen einer neuen Tabelle wird eine leere Zeile eingefügt.

      - Beim Überschreiben oder Aktualisieren einer vorhandenen Tabelle werden die vorhandenen Zeilen nicht geändert.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following example creates a single-column table with a header and three rows.
      function createTableData() {
          var tableData = new Office.TableData();
          tableData.headers = [['header1']];
          tableData.rows = [['row1'], ['row2'], ['row3']];
          return tableData;
      }
      ```
    name: rows
    fullName: rows
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rows: any[][];'
      return:
        type:
          - 'any[][]'