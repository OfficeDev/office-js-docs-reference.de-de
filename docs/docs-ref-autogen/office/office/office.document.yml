### YamlMime:TSType
name: Office.Document
uid: office!Office.Document:interface
package: office!
fullName: Office.Document
summary: Eine abstrakte Klasse, die das Dokument darstellt, mit dem das Add-In interagiert.
remarks: '**Hosts**: Excel, PowerPoint, Project, Word'
isPreview: false
isDeprecated: false
type: interface
properties:
- name: bindings
  uid: office!Office.Document#bindings:member
  package: office!
  fullName: bindings
  summary: Ruft ein Objekt ab, das Zugriff auf die im Dokument definierten Bindungen bereitstellt.
  remarks: "Das Document-Objekt wird nicht direkt in Ihrem Skript instanziiert. Verwenden Sie zum Aufrufen von Elementen des Document-Objekts, die mit dem aktuellen Dokument oder Arbeitsblatt interagieren sollen, in Ihrem Skript `Office.context.document`.\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction displayAllBindings() {\n    Office.context.document.bindings.getAllAsync(function (asyncResult) {\n        var bindingString = '';\n        for (var i in asyncResult.value) {\n            bindingString += asyncResult.value[i].id + '\\n';\n        }\n        write('Existing bindings: ' + bindingString);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'bindings: Bindings;'
    return:
      type: <xref uid="office!Office.Bindings:interface" />
- name: customXmlParts
  uid: office!Office.Document#customXmlParts:member
  package: office!
  fullName: customXmlParts
  summary: Ruft ein Objekt ab, das die benutzerdefinierten XML-Komponenten im Dokument darstellt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'customXmlParts: CustomXmlParts;'
    return:
      type: <xref uid="office!Office.CustomXmlParts:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction getCustomXmlParts(){\n    Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {\n        write('Retrieved ' + asyncResult.value.length + ' custom XML parts');\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: mode
  uid: office!Office.Document#mode:member
  package: office!
  fullName: mode
  summary: Ruft den Modus ab, in dem sich das Dokument befindet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'mode: DocumentMode;'
    return:
      type: <xref uid="office!Office.DocumentMode:enum" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction displayDocumentMode() {\n    write(Office.context.document.mode);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following example initializes the add-in and then gets properties of the\n// Document object that are available in the context of a Project document.\n// A Project document is the opened, active project. To access members of the\n// ProjectDocument object, use the Office.context.document object as shown in\n// the code examples for ProjectDocument methods and events.\n// The example assumes your add-in has a reference to the jQuery library and\n// that the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information about the document.\n            showDocumentProperties();\n        });\n    };\n\n    // Get the document mode and the URL of the active project.\n    function showDocumentProperties() {\n        var output = String.format(\n            'The document mode is {0}.<br/>The URL of the active project is {1}.',\n            Office.context.document.mode,\n            Office.context.document.url);\n        $('#message').html(output);\n    }\n})();\n```"
- name: settings
  uid: office!Office.Document#settings:member
  package: office!
  fullName: settings
  summary: Ruft ein Objekt ab, das die gespeicherten benutzerdefinierten Einstellungen des Inhalts- oder Aufgabenbereichs-Add-Ins für das aktuelle Dokument darstellt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'settings: Settings;'
    return:
      type: <xref uid="office!Office.Settings:interface" />
- name: url
  uid: office!Office.Document#url:member
  package: office!
  fullName: url
  summary: Ruft die URL des Dokuments ab, das zurzeit in der Hostanwendung geöffnet ist. Gibt null zurück, wenn die URL nicht verfügbar ist.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'url: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction displayDocumentUrl() {\n    write(Office.context.document.url);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.Document#addHandlerAsync:member(1)
  package: office!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: Fügt einen Ereignishandler für ein Document-Objekt Ereignis hinzu.
  remarks: >-
    **Anforderungsgruppe**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    Sie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange der Name jeder Ereignis Handlerfunktion eindeutig ist.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Für ein Document-Objekt Ereignis kann der eventType-Parameter als oder angegeben werden. `Office.EventType.Document.SelectionChanged``Office.EventType.Document.ActiveViewChanged`<!-- -->oder den entsprechenden Textwert dieser Aufzählung.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: 'Die hinzuzufügende Ereignis Handlerfunktion, deren einziger Parameter vom Typ [Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. Erforderlich. '
      type: any
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: office!Office.Document#addHandlerAsync:member(2)
  package: office!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: Fügt einen Ereignishandler für ein Document-Objekt Ereignis hinzu.
  remarks: "**Anforderungsgruppe**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)\n\nSie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange der Name jeder Ereignis Handlerfunktion eindeutig ist.\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example adds an event handler for the SelectionChanged event of a document\nfunction addSelectionChangedEventHandler() {\n    Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);\n}\n\nfunction MyHandler(eventArgs) {\n    write('Event raised: ' + eventArgs.type);\n    doSomethingWithDocument(eventArgs.document);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example adds a handler for the ResourceSelectionChanged event.\n// When the resource selection changes in the document, it gets the GUID of the selected resource.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ResourceSelectionChanged,\n                getResourceGuid);\n        });\n    };\n\n    // Get the GUID of the selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ResourceSelectionChanged\n// event handler in a Project add-in, see \"Create your first task pane add-in\n// for Project 2013 by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example adds a handler for the TaskSelectionChanged event.\n// When the task selection changes in the document, it gets the GUID of the\n// selected task.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.TaskSelectionChanged,\n                getTaskGuid);\n            getTaskGuid();\n        });\n    };\n\n    // Get the GUID of the selected task and display it in the add-in.\n    function getTaskGuid() {\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```\n```javascript\n// The following code example adds a handler for the ViewSelectionChanged\n// event. When the active view changes, it gets the name and type of the active view.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the name and type of the active view and display it in the add-in.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, result.value.viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For an example that shows how to use a ViewSelectionChanged event handler in a\n// Project add-in, see \"Create your first task pane add-in for Project 2013 by\n// using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.\n// When the active view changes, the handler checks the view type. It enables a button if the view is a resource\n// view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected\n// resource and displays it in the add-in.\n// The example assumes that your add-in has a reference to the jQuery library and that the following page controls\n// are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" disabled=\"disabled\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            // Add a ViewSelectionChanged event handler.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            $('#get-info').click(getResourceGuid);\n\n            // This example calls the handler on page load to get the active view\n            // of the default page.\n            getActiveView();\n        });\n    };\n\n    // Activate the button based on the active view type of the document.\n    // This is the ViewSelectionChanged event handler.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var viewType = result.value.viewType;\n                    if (viewType == 6 ||   // ResourceForm\n                        viewType == 7 ||   // ResourceSheet\n                        viewType == 8 ||   // ResourceGraph\n                        viewType == 15) {  // ResourceUsage\n                        $('#get-info').removeAttr('disabled');\n                    }\n                    else {\n                        $('#get-info').attr('disabled', 'disabled');\n                    }\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    // Get the GUID of the currently selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html('Resource GUID: ' + result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,\n// see \"Create your first task pane add-in for Project by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Für ein Document-Objekt Ereignis kann der eventType-Parameter als oder angegeben werden. `Office.EventType.Document.SelectionChanged``Office.EventType.Document.ActiveViewChanged`<!-- -->oder den entsprechenden Textwert dieser Aufzählung.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: 'Die hinzuzufügende Ereignis Handlerfunktion, deren einziger Parameter vom Typ [Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. Erforderlich. '
      type: any
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(options, callback)
  uid: office!Office.Document#getActiveViewAsync:member(1)
  package: office!
  fullName: getActiveViewAsync(options, callback)
  summary: Gibt den Status der aktuellen Ansicht der Präsentation ("Bearbeiten" oder "Lesen") zurück.
  remarks: >-
    **Anforderungsgruppe**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    Kann ein Ereignis auslösen, wenn die Ansicht geändert wird.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses entspricht dem Status der aktuellen Ansicht der Präsentation. Der zurückgegebene Wert kann entweder "Edit" oder "Read" lauten. "Bearbeiten" entspricht einer der Ansichten, in denen Sie Folien bearbeiten können, beispielsweise "Normal" oder "Gliederungsansicht". "Read" entspricht entweder der Bildschirmpräsentation oder der Leseansicht.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(callback)
  uid: office!Office.Document#getActiveViewAsync:member(2)
  package: office!
  fullName: getActiveViewAsync(callback)
  summary: Gibt den Status der aktuellen Ansicht der Präsentation ("Bearbeiten" oder "Lesen") zurück.
  remarks: >-
    **Anforderungsgruppe**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    Kann ein Ereignis auslösen, wenn die Ansicht geändert wird.


    #### <a name="examples"></a>Beispiele


    ```javascript

    function getFileView() {
        // Get whether the current view is edit or read.
        Office.context.document.getActiveViewAsync(function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage(asyncResult.value);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses entspricht dem Status der aktuellen Ansicht der Präsentation. Der zurückgegebene Wert kann entweder "Edit" oder "Read" lauten. "Bearbeiten" entspricht einer der Ansichten, in denen Sie Folien bearbeiten können, beispielsweise "Normal" oder "Gliederungsansicht". "Read" entspricht entweder der Bildschirmpräsentation oder der Leseansicht.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, options, callback)
  uid: office!Office.Document#getFileAsync:member(1)
  package: office!
  fullName: getFileAsync(fileType, options, callback)
  summary: Gibt die gesamte Dokumentdatei in Segmenten von bis zu 4194304 Byte (4 MB) zurück. Für Add-Ins auf dem iPad wird das Dateisegment bis zu 65536 (64 KB) unterstützt. Beachten Sie, dass Angabe einer Foliendateigröße oberhalb des zulässigen Grenzwerts zu einem "Internen Fehler" führt.
  remarks: "**Anforderungs Sätze**:\n\n- [Komprimierte](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (bei Verwendung `Office.FileType.Compressed`<!-- -->)\n\n- [Datei](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)\n\n- [Textfile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (bei Verwendung von `Office.FileType.Text`<!-- -->)\n\nFür Add-Ins, die in Office-Hostanwendungen außer Office auf dem iPad durchführen werden, `getFileAsync` unterstützt die Methode das erhalten von Dateien in Slices mit bis zu 4194304 Byte (4 MB). Bei Add-Ins, die in Office-Apps auf dem iPad durchführen, `getFileAsync` unterstützt die Methode das erhalten von Dateien in Slices von bis zu 65536 (64 KB).\n\nDer `fileType` Parameter kann mithilfe der [Office. filetype](xref:office!Office.FileType:enum) -Aufzählung oder von Textwerten angegeben werden. Die möglichen Werte variieren jedoch mit dem Host:\n\n*Unterstützte FileTypes, nach Plattform* <table> <tr><th> </th><th> Office unter Windows </th><th> Office im Web </th><th> Office auf dem iPad </th><th> Office für Mac </th></tr> <tr><td><strong> Excel </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Wort </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example gets the document in Office Open XML (\"compressed\") format in 65536 bytes (64 KB) slices.\n// Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.\nfunction getDocumentAsCompressed() {\n    Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, \n        function (result) {\n            if (result.status == \"succeeded\") {\n                // If the getFileAsync call succeeded, then\n                // result.value will return a valid File Object.\n                var myFile = result.value;\n                var sliceCount = myFile.sliceCount;\n                var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];\n                app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n\n                // Get the file slices.\n                getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n            else {\n                app.showNotification(\"Error:\", result.error.message);\n            }\n    });\n}\n\nfunction getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {\n    file.getSliceAsync(nextSlice, function (sliceResult) {\n        if (sliceResult.status == \"succeeded\") {\n            if (!gotAllSlices) { // Failed to get all slices, no need to continue.\n                return;\n            }\n\n            // Got one slice, store it in a temporary array.\n            // (Or you can do something else, such as\n            // send it to a third-party server.)\n            docdataSlices[sliceResult.value.index] = sliceResult.value.data;\n            if (++slicesReceived == sliceCount) {\n              // All slices have been received.\n              file.closeAsync();\n              onGotAllSlices(docdataSlices);\n            }\n            else {\n                getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n        }\n            else {\n                gotAllSlices = false;\n                file.closeAsync();\n                app.showNotification(\"getSliceAsync Error:\", sliceResult.error.message);\n            }\n    });\n}\n\nfunction onGotAllSlices(docdataSlices) {\n    var docdata = [];\n    for (var i = 0; i < docdataSlices.length; i++) {\n        docdata = docdata.concat(docdataSlices[i]);\n    }\n\n    var fileContent = new String();\n    for (var j = 0; j < docdata.length; j++) {\n        fileContent += String.fromCharCode(docdata[j]);\n    }\n\n    // Now all the file content is stored in 'fileContent' variable,\n    // you can do something with it, such as print, fax...\n}\n\n// The following example gets the document in PDF format.\nOffice.context.document.getFileAsync(Office.FileType.Pdf,\n    function(result) {\n        if (result.status == \"succeeded\") {\n            var myFile = result.value;\n            var sliceCount = myFile.sliceCount;\n            app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n            // Now, you can call getSliceAsync to download the files,\n            // as described in the previous code segment (compressed format).\n            \n            myFile.closeAsync();\n        }\n        else {\n            app.showNotification(\"Error:\", result.error.message);\n        }\n}\n);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: Das Format, in dem die Datei zurückgegeben wird.
      type: <xref uid="office!Office.FileType:enum" />
    - id: options
      description: Enthält Optionen zum Festlegen der Größe von Segmenten, in die das Dokument aufgeteilt wird.
      type: <xref uid="office!Office.GetFileOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist das File-Objekt.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, callback)
  uid: office!Office.Document#getFileAsync:member(2)
  package: office!
  fullName: getFileAsync(fileType, callback)
  summary: Gibt die gesamte Dokumentdatei in Segmenten von bis zu 4194304 Byte (4 MB) zurück. Für Add-Ins auf dem iPad wird das Dateisegment bis zu 65536 (64 KB) unterstützt. Beachten Sie, dass Angabe einer Foliendateigröße oberhalb des zulässigen Grenzwerts zu einem "Internen Fehler" führt.
  remarks: >-
    **Anforderungs Sätze**:


    - [Komprimierte](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (bei Verwendung `Office.FileType.Compressed`<!-- -->)


    - [Datei](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


    - [Textfile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (bei Verwendung von `Office.FileType.Text`<!-- -->)


    Für Add-Ins, die in Office-Hostanwendungen außer Office auf dem iPad durchführen werden, `getFileAsync` unterstützt die Methode das erhalten von Dateien in Slices mit bis zu 4194304 Byte (4 MB). Für Add-Ins, die in Office auf iPad-apps gestartet werden, `getFileAsync` unterstützt die Methode das erhalten von Dateien in Slices von bis zu 65536 (64 KB).


    Der `fileType` Parameter kann mithilfe der [Office. filetype](xref:office!Office.FileType:enum) -Aufzählung oder von Textwerten angegeben werden. Die möglichen Werte variieren jedoch mit dem Host:


    *Unterstützte FileTypes, nach Plattform* <table> <tr><th> </th><th> Office unter Windows </th><th> Office im Web </th><th> Office auf dem iPad </th><th> Office für Mac </th></tr> <tr><td><strong> Excel </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> PowerPoint </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Wort </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: Das Format, in dem die Datei zurückgegeben wird.
      type: <xref uid="office!Office.FileType:enum" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist das File-Objekt.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(options, callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(1)
  package: office!
  fullName: getFilePropertiesAsync(options, callback)
  summary: Ruft Dateieigenschaften des aktuellen Dokuments ab.
  remarks: >-
    **Anforderungs Sätze**: [nicht in einer Gruppe](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    Die URL der Datei wird mit der URL-Eigenschaft abgerufen. `asyncResult.value.url`<!-- -->.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses sind die Eigenschaften der Datei (mit der URL unter `asyncResult.value.url`<!-- -->).
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(2)
  package: office!
  fullName: getFilePropertiesAsync(callback)
  summary: Ruft Dateieigenschaften des aktuellen Dokuments ab.
  remarks: >-
    **Anforderungs Sätze**: [nicht in einer Gruppe](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    Die URL der Datei wird mit der URL-Eigenschaft abgerufen. `asyncResult.value.url`<!-- -->.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // To read the URL of the current file, you need to write a callback function that returns the URL.

    // The following example shows how to:

    // 1. Pass an anonymous callback function that returns the value of the file's URL

    //    to the callback parameter of the getFilePropertiesAsync method.

    // 2. Display the value on the add-in's page.

    function getFileUrl() {
        // Get the URL of the current file.
        Office.context.document.getFilePropertiesAsync(function (asyncResult) {
            var fileUrl = asyncResult.value.url;
            if (fileUrl == "") {
                showMessage("The file hasn't been saved yet. Save the file and try again");
            }
            else {
                showMessage(fileUrl);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: callback
      description: Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses sind die Eigenschaften der Datei (mit der URL unter `asyncResult.value.url`<!-- -->).
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(options, callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(1)
  package: office!
  fullName: getMaxResourceIndexAsync(options, callback)
  summary: >-
    Nur Projektdokumente. Rufen Sie den maximalen Index der Sammlung von Ressourcen im aktuellen Projekt ab.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die höchste Indexnummer in der Ressourcensammlung des aktuellen Projekts.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(2)
  package: office!
  fullName: getMaxResourceIndexAsync(callback)
  summary: >-
    Nur Projektdokumente. Rufen Sie den maximalen Index der Sammlung von Ressourcen im aktuellen Projekt ab.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die höchste Indexnummer in der Ressourcensammlung des aktuellen Projekts.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection \n// of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync\n// method to get each resource GUID. The example assumes that your add-in has a reference to the \n// jQuery library and that the following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getMaxTaskIndexAsync(options, callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(1)
  package: office!
  fullName: getMaxTaskIndexAsync(options, callback)
  summary: >-
    Nur Projektdokumente. Rufen Sie den maximalen Index der Auflistung von Aufgaben im aktuellen Projekt ab.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die höchste Indexnummer in der Aufgabensammlung des aktuellen Projekts.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxTaskIndexAsync(callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(2)
  package: office!
  fullName: getMaxTaskIndexAsync(callback)
  summary: >-
    Nur Projektdokumente. Rufen Sie den maximalen Index der Auflistung von Aufgaben im aktuellen Projekt ab.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die höchste Indexnummer in der Aufgabensammlung des aktuellen Projekts.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the maximum index\n// of the collection of tasks in the current project. Then it uses the returned value\n// with the getTaskByIndexAsync method to get each task GUID.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getProjectFieldAsync(fieldId, options, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(1)
  package: office!
  fullName: getProjectFieldAsync(fieldId, options, callback)
  summary: Nur Projektdokumente. Projektfeld abrufen (ex. ProjectWebAccessURL).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: Felder auf Projektebene
      type: number
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die `fieldValue` -Eigenschaft, die den Wert des angegebenen Felds darstellt.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getProjectFieldAsync(fieldId, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(2)
  package: office!
  fullName: getProjectFieldAsync(fieldId, callback)
  summary: Nur Projektdokumente. Projektfeld abrufen (ex. ProjectWebAccessURL).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: Felder auf Projektebene
      type: number
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die `fieldValue` -Eigenschaft, die den Wert des angegebenen Felds darstellt.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example gets the values of three specified fields for the active project, \n// and then displays the values in the add-in.\n// The example calls getProjectFieldAsync recursively, after the previous call returns successfully.\n// It also tracks the calls to determine when all calls are sent.\n// The example assumes your add-in has a reference to the jQuery library and that the \n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information for the active project.\n            getProjectInformation();\n        });\n    };\n\n    // Get the specified fields for the active project.\n    function getProjectInformation() {\n        var fields =\n            [Office.ProjectProjectFields.Start, \n             Office.ProjectProjectFields.Finish, \n             Office.ProjectProjectFields.GUID];\n        var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == fields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n            else {\n                Office.context.document.getProjectFieldAsync(\n                    fields[index],\n                    function (result) {\n\n                        // If the call is successful, get the field value and then get the next field.\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceByIndexAsync(resourceIndex, options, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(1)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, options, callback)
  summary: >-
    Nur Projektdokumente. Rufen Sie die GUID der Ressource ab, die den angegebenen Index in der Ressourcensammlung aufweist.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: Der Index der Ressource in der Sammlung von Ressourcen für das Projekt.
      type: number
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceByIndexAsync(resourceIndex, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(2)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, callback)
  summary: >-
    Nur Projektdokumente. Rufen Sie die GUID der Ressource ab, die den angegebenen Index in der Ressourcensammlung aufweist.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: Der Index der Ressource in der Sammlung von Ressourcen für das Projekt.
      type: number
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource\n// collection, and then calls getResourceByIndexAsync to get the GUID for each resource.\n// The example assumes that your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceFieldAsync(resourceId, fieldId, options, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(1)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, options, callback)
  summary: Nur Projektdokumente. Ressourcenfeld für die angegebene Ressourcen-ID abrufen. (ex. resourceName)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: Entweder eine Zeichenfolge oder ein Wert der Ressourcen-ID.
      type: string
    - id: fieldId
      description: Ressourcenfelder.
      type: number
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceFieldAsync(resourceId, fieldId, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(2)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, callback)
  summary: Nur Projektdokumente. Ressourcenfeld für die angegebene Ressourcen-ID abrufen. (ex. resourceName)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: Entweder eine Zeichenfolge oder ein Wert der Ressourcen-ID.
      type: string
    - id: fieldId
      description: Ressourcenfelder.
      type: number
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource\n// that's currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedDataAsync(coercionType, options, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(1)
  package: office!
  fullName: getSelectedDataAsync(coercionType, options, callback)
  summary: Liest die Daten, die in der aktuellen Auswahl des Dokuments enthalten sind.
  remarks: "**Anforderungs Sätze**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von `Office.CoercionType.Html`<!-- -->)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Auswahl](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [Umwandlung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von `Office.CoercionType.Table`<!-- -->)\n\n- [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von `Office.CoercionType.Text`<!-- -->)\n\nIn der Callback-Funktion, die an die getSelectedDataAsync-Methode übergeben wird, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.\n\n<table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, weil kein Objekt oder Daten zum Abruf existieren.</td> </tr> <tr> <td>AsyncResult. Status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>\n\nDie möglichen Werte für den [Office. CoercionType](xref:office!Office.CoercionType:enum) -Parameter variieren je nach Host.\n\n<table> <tr> <th>Host</th> <th>Unterstützter coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project und Word</td> <td>`Office.CoercionType.Text` String</td> </tr> <tr> <td>Excel und Word</td> <td>`Office.CoercionType.Matrix` (Array von Arrays)</td> </tr> <tr> <td>Excel und Word</td> <td>`Office.CoercionType.Table` (Datenobjekt)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint im Internet und Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint und Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example uses the getSelectedDataAsync method of the Document object to retrieve the\n// user's current selection as text, and then display it in the add-in's page.\n\n// Display the user's current selection.\nfunction showSelection() {\n    Office.context.document.getSelectedDataAsync(\n        \"text\",                        // coercionType\n        {valueFormat: \"unformatted\",   // valueFormat\n        filterType: \"all\"},            // filterType\n        function (result) {            // callback\n            var dataValue; \n            dataValue = result.value;\n            write('Selected data is: ' + dataValue);\n        });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To read the value of the current selection, you need to write a callback function that reads the selection.\n// The following example shows how to:\n// 1. Pass an anonymous callback function that reads the value of the current selection\n//    to the callback parameter of the getSelectedDataAsync method.\n// 2. Read the selection as text, unformatted, and not filtered.\n// 3. Display the value on the add-in's page.\nfunction getText() {\n    Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, \n        { valueFormat: \"unformatted\", filterType: \"all\" },\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            } \n            else {\n                // Get selected data.\n                var dataValue = asyncResult.value; \n                write('Selected data is ' + dataValue);\n            }            \n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example gets the values of the selected cells. It uses the optional\n// asyncContext parameter to pass some text to the callback function.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getSelectedText);\n        });\n    };\n\n    // Get the text from the selected cells in the document, and display it in the add-in.\n    function getSelectedText() {\n        Office.context.document.getSelectedDataAsync(\n            Office.CoercionType.Text,\n            {asyncContext: 'Some related info'},\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'Selected text: {0}<br/>Passed info: {1}',\n                        result.value, result.asyncContext);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: Der Typ der Datenstruktur, die zurückgegeben werden soll. Weitere Informationen finden Sie im Abschnitt "Hinweise" für die unterstützten Umwandlungstypen der einzelnen Hosts.
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: options
      description: Enthält Optionen zum Anpassen der Daten, die zurückgegeben werden, und deren Formatierung.
      type: <xref uid="office!Office.GetSelectedDataOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses sind die Daten in der aktuellen Auswahl. Dieser wird in der Datenstruktur oder dem Format zurückgegeben, die Sie mit dem coercionType-Parameter angegeben haben. (Weitere Informationen zur Datenumwandlung finden unter Hinweise.)
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedDataAsync(coercionType, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(2)
  package: office!
  fullName: getSelectedDataAsync(coercionType, callback)
  summary: Liest die Daten, die in der aktuellen Auswahl des Dokuments enthalten sind.
  remarks: >-
    **Anforderungs Sätze**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von `Office.CoercionType.Html`<!-- -->)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von `Office.CoercionType.Ooxml`<!-- -->)


    - [Auswahl](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [Umwandlung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von `Office.CoercionType.Table`<!-- -->)


    - [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von `Office.CoercionType.Text`<!-- -->)


    In der Callback-Funktion, die an die getSelectedDataAsync-Methode übergeben wird, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.


    <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, weil kein Objekt oder Daten zum Abruf existieren.</td> </tr> <tr> <td>AsyncResult. Status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>


    Die möglichen Werte für den [Office. CoercionType](xref:office!Office.CoercionType:enum) -Parameter variieren je nach Host.


    <table> <tr> <th>Host</th> <th>Unterstützter coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project und Word</td> <td>`Office.CoercionType.Text` String</td> </tr> <tr> <td>Excel und Word</td> <td>`Office.CoercionType.Matrix` (Array von Arrays)</td> </tr> <tr> <td>Excel und Word</td> <td>`Office.CoercionType.Table` (Datenobjekt)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint im Internet und Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint und Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: Der Typ der Datenstruktur, die zurückgegeben werden soll. Weitere Informationen finden Sie im Abschnitt "Hinweise" für die unterstützten Umwandlungstypen der einzelnen Hosts.
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses sind die Daten in der aktuellen Auswahl. Dieser wird in der Datenstruktur oder dem Format zurückgegeben, die Sie mit dem coercionType-Parameter angegeben haben. (Weitere Informationen zur Datenumwandlung finden unter Hinweise.)
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(options, callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(1)
  package: office!
  fullName: getSelectedResourceAsync(options, callback)
  summary: Nur Projektdokumente. Rufen Sie die ID der aktuell ausgewählten Ressource ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(2)
  package: office!
  fullName: getSelectedResourceAsync(callback)
  summary: Nur Projektdokumente. Rufen Sie die ID der aktuell ausgewählten Ressource ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's \n// currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page controls are\n// defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedTaskAsync(options, callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(1)
  package: office!
  fullName: getSelectedTaskAsync(options, callback)
  summary: Nur Projektdokumente. Rufen Sie die ID des aktuell ausgewählten Vorgangs ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedTaskAsync(callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(2)
  package: office!
  fullName: getSelectedTaskAsync(callback)
  summary: Nur Projektdokumente. Rufen Sie die ID des aktuell ausgewählten Vorgangs ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets task properties by calling getTaskAsync.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedViewAsync(options, callback)
  uid: office!Office.Document#getSelectedViewAsync:member(1)
  package: office!
  fullName: getSelectedViewAsync(options, callback)
  summary: Nur Projektdokumente. Abrufen des aktuellen ausgewählten Ansichtstyps (z. b. Gantt) und Ansichts Name.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die folgenden Eigenschaften: `viewName` -den Namen der Ansicht als ProjectViewTypes-Konstante. `viewType` -Der Typ der Ansicht als ganzzahliger Wert einer ProjectViewTypes-Konstante.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedViewAsync(callback)
  uid: office!Office.Document#getSelectedViewAsync:member(2)
  package: office!
  fullName: getSelectedViewAsync(callback)
  summary: Nur Projektdokumente. Abrufen des aktuellen ausgewählten Ansichtstyps (z. b. Gantt) und Ansichts Name.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die folgenden Eigenschaften: `viewName` -den Namen der Ansicht als ProjectViewTypes-Konstante. `viewType` -Der Typ der Ansicht als ganzzahliger Wert einer ProjectViewTypes-Konstante.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls adds a ViewSelectionChanged event handler that\n// calls getSelectedViewAsync to get the name and type of the active view in the document.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the active view's name and type.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskAsync(taskId, options, callback)
  uid: office!Office.Document#getTaskAsync:member(1)
  package: office!
  fullName: getTaskAsync(taskId, options, callback)
  summary: Nur Projektdokumente. Rufen Sie den Vorgangsnamen, die WSS-Aufgaben-ID und ResourceNames für die angegebene Task-ID ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Entweder eine Zeichenfolge oder ein Wert der Aufgaben-ID.
      type: string
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die folgenden Eigenschaften: `taskName` -den Namen der Aufgabe. `wssTaskId` – Die ID der Aufgabe in der synchronisierten SharePoint-Aufgabenliste. Wenn das Projekt nicht mit einer SharePoint-Aufgabenliste synchronisiert wird, ist der Wert 0. `resourceNames` -Die durch trennzeichengetrennte Liste der Namen von Ressourcen, die dem Vorgang zugeordnet sind.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskAsync(taskId, callback)
  uid: office!Office.Document#getTaskAsync:member(2)
  package: office!
  fullName: getTaskAsync(taskId, callback)
  summary: Nur Projektdokumente. Rufen Sie den Vorgangsnamen, die WSS-Aufgaben-ID und ResourceNames für die angegebene Task-ID ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Entweder eine Zeichenfolge oder ein Wert der Aufgaben-ID.
      type: string
    - id: callback
      description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die folgenden Eigenschaften: `taskName` -den Namen der Aufgabe. `wssTaskId` – Die ID der Aufgabe in der synchronisierten SharePoint-Aufgabenliste. Wenn das Projekt nicht mit einer SharePoint-Aufgabenliste synchronisiert wird, ist der Wert 0. `resourceNames` -Die durch trennzeichengetrennte Liste der Namen von Ressourcen, die dem Vorgang zugeordnet sind.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the task GUID of the currently\n// selected task. Then it calls getTaskAsync to get the properties for the task that are\n// available from the JavaScript API for Office.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskByIndexAsync(taskIndex, options, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(1)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, options, callback)
  summary: >-
    Nur Projektdokumente. Rufen Sie die GUID der Aufgabe ab, die den angegebenen Index in der Aufgabensammlung aufweist.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: Der Index der Aufgabe in der Sammlung von Aufgaben für das Projekt.
      type: number
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Aufgabe als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskByIndexAsync(taskIndex, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(2)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, callback)
  summary: >-
    Nur Projektdokumente. Rufen Sie die GUID der Aufgabe ab, die den angegebenen Index in der Aufgabensammlung aufweist.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: Der Index der Aufgabe in der Sammlung von Aufgaben für das Projekt.
      type: number
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die GUID der Aufgabe als Zeichenfolge.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the\n// maximum index in the project's task collection, and then\n// calls getTaskByIndexAsync to get the GUID for each task.\n// The example assumes that your add-in has a reference to the\n// jQuery library and that the following page controls are defined\n// in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskFieldAsync(taskId, fieldId, options, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(1)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, options, callback)
  summary: Nur Projektdokumente. Dient zum Abrufen des Vorgangsfelds für die angegebene Aufgaben-ID. (ex. StartDate).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Entweder eine Zeichenfolge oder ein Wert der Aufgaben-ID.
      type: string
    - id: fieldId
      description: Vorgangsfelder.
      type: number
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die `fieldValue` -Eigenschaft, die den Wert des angegebenen Felds darstellt.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskFieldAsync(taskId, fieldId, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(2)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, callback)
  summary: Nur Projektdokumente. Dient zum Abrufen des Vorgangsfelds für die angegebene Aufgaben-ID. (ex. StartDate).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Entweder eine Zeichenfolge oder ein Wert der Aufgaben-ID.
      type: string
    - id: fieldId
      description: Vorgangsfelder.
      type: number
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die `fieldValue` -Eigenschaft, die den Wert des angegebenen Felds darstellt.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected task.\n    function getTaskFields(taskGuid) {\n        var output = '';\n        var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];\n        var fieldValues = ['Priority: ', '% Complete: '];\n        var index = 0;\n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // Get the field value. If the call is successful, then get the next field.\n            else {\n                Office.context.document.getTaskFieldAsync(\n                    taskGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getWSSUrlAsync(options, callback)
  uid: office!Office.Document#getWSSUrlAsync:member(1)
  package: office!
  fullName: getWSSUrlAsync(options, callback)
  summary: Nur Projektdokumente. Abrufen der WSS-URL und des Listen namens für die Aufgabenliste wird auch das MPP synchronisiert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die folgenden Eigenschaften: `listName` -den Namen der synchronisierten SharePoint-Aufgabenliste. `serverUrl` – die URL der synchronisierten SharePoint-Aufgabenliste.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getWSSUrlAsync(callback)
  uid: office!Office.Document#getWSSUrlAsync:member(2)
  package: office!
  fullName: getWSSUrlAsync(callback)
  summary: Nur Projektdokumente. Abrufen der WSS-URL und des Listen namens für die Aufgabenliste wird auch das MPP synchronisiert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses enthält die folgenden Eigenschaften: `listName` -den Namen der synchronisierten SharePoint-Aufgabenliste. `serverUrl` – die URL der synchronisierten SharePoint-Aufgabenliste.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, options, callback)
  uid: office!Office.Document#goToByIdAsync:member(1)
  package: office!
  fullName: goToByIdAsync(id, goToType, options, callback)
  summary: Wechselt zum angegebenen Objekt oder Speicherort im Dokument.
  remarks: >-
    **Anforderungsgruppe**: [nicht in einer Gruppe](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    PowerPoint unterstützt die goToByIdAsync-Methode in Master Ansichten nicht.


    Das durch die SelectionMode-Option verursachte Verhalten variiert je nach Host:


    In Excel: `Office.SelectionMode.Selected` wählt alle Inhalte in der Bindung oder dem benannten Element aus. Office.SelectionMode.Nonewählt für Textbindungen die Zelle aus; für Matrixbindungen, Tabellenbindungen und benannte Elemente wird die erste Datenzelle (nicht die erste Zell in der Kopfzeile für Tabellen) ausgewählt.


    In PowerPoint: `Office.SelectionMode.Selected` wählt den Folientitel oder das erste TextBox-Objekt auf der Folie aus. `Office.SelectionMode.None` wählt nichts aus.


    In Word: `Office.SelectionMode.Selected` wählt alle Inhalte in der Bindung aus. Office.SelectionMode.None verschiebt für Textbindungen den Cursor an den Anfang des Textes; für Matrixbindungen und Tabellenbindungen wird die erste Datenzelle (nicht die erste Zelle in der Kopfzeile für Tabellen) ausgewählt.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: Der Bezeichner des Objekts oder Speicherorts, zu dem gewechselt werden soll.
      type: string | number
    - id: goToType
      description: Der Typ des Speicherorts, zu dem gewechselt werden soll.
      type: <xref uid="office!Office.GoToType:enum" />
    - id: options
      description: Enthält Optionen zum Auswählen des Standorts, zu dem navigiert wird.
      type: <xref uid="office!Office.GoToByIdOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die aktuelle Ansicht.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, callback)
  uid: office!Office.Document#goToByIdAsync:member(2)
  package: office!
  fullName: goToByIdAsync(id, goToType, callback)
  summary: Wechselt zum angegebenen Objekt oder Speicherort im Dokument.
  remarks: >-
    **Anforderungsgruppe**: [nicht in einer Gruppe](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    PowerPoint unterstützt die goToByIdAsync-Methode in Master Ansichten nicht.


    Das durch die SelectionMode-Option verursachte Verhalten variiert je nach Host:


    In Excel: `Office.SelectionMode.Selected` wählt alle Inhalte in der Bindung oder dem benannten Element aus. Office.SelectionMode.Nonewählt für Textbindungen die Zelle aus; für Matrixbindungen, Tabellenbindungen und benannte Elemente wird die erste Datenzelle (nicht die erste Zell in der Kopfzeile für Tabellen) ausgewählt.


    In PowerPoint: `Office.SelectionMode.Selected` wählt den Folientitel oder das erste TextBox-Objekt auf der Folie aus. `Office.SelectionMode.None` wählt nichts aus.


    In Word: `Office.SelectionMode.Selected` wählt alle Inhalte in der Bindung aus. Office.SelectionMode.None verschiebt für Textbindungen den Cursor an den Anfang des Textes; für Matrixbindungen und Tabellenbindungen wird die erste Datenzelle (nicht die erste Zelle in der Kopfzeile für Tabellen) ausgewählt.


    #### <a name="examples"></a>Beispiele


    ```javascript

    // Go to a binding by id (Word and Excel)

    // The following example shows how to:

    // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.

    // 2. Specify that binding as the binding to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value on the add-in's page.

    function gotoBinding() {
        // Create a new table binding for the selected table.
        Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
        if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
              }
        });

        // Go to binding by id.
        Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to a table in a spreadsheet (Excel)

    // The following example shows how to:

    // 1. Specify a table by name as the table to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToTable() {
        Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to the currently selected slide by id (PowerPoint)

    // The following example shows how to:

    // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.

    // 2. Specify the returned id as the slide to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value of the stringified JSON object returned by asyncResult.value,

    //    which contains information about the selected slides, on the add-in's page.

    var firstSlideId = 0;

    function gotoSelectedSlide() {
        //Get currently selected slide's id
        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                firstSlideId = asyncResult.value.slides[0].id;
                app.showNotification(JSON.stringify(asyncResult.value));
            }
        });
        //Go to slide by id.
        Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                app.showNotification("Navigation successful");
            }
        });
    }


    // Go to slide by index (PowerPoint)

    // The following example shows how to:

    // 1. Specify the index of the first, last, previous, or next slide to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToSlideByIndex() {
        var goToFirst = Office.Index.First;
        var goToLast = Office.Index.Last;
        var goToPrevious = Office.Index.Previous;
        var goToNext = Office.Index.Next;

        Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: Der Bezeichner des Objekts oder Speicherorts, zu dem gewechselt werden soll.
      type: string | number
    - id: goToType
      description: Der Typ des Speicherorts, zu dem gewechselt werden soll.
      type: <xref uid="office!Office.GoToType:enum" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist die aktuelle Ansicht.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: office!Office.Document#removeHandlerAsync:member(1)
  package: office!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: Entfernt einen Ereignishandler für den angegebenen Ereignistyp.
  remarks: '**Anforderungsgruppe**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Der Ereignistyp. Für Document kann "Document. SelectionChanged" oder "Document. ActiveViewChanged" sein.
      type: <xref uid="office!Office.EventType:enum" />
    - id: options
      description: Enthält Optionen zum bestimmen, welche Ereignishandler oder Handler entfernt werden.
      type: <xref uid="office!Office.RemoveHandlerOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: office!Office.Document#removeHandlerAsync:member(2)
  package: office!
  fullName: removeHandlerAsync(eventType, callback)
  summary: Entfernt einen Ereignishandler für den angegebenen Ereignistyp.
  remarks: >-
    **Anforderungsgruppe**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following example removes the event handler named 'MyHandler'.

    function removeSelectionChangedEventHandler() {
        Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
    }


    function MyHandler(eventArgs) {
        doSomethingWithDocument(eventArgs.document);
    }

    ```

    ```javascript

    // The following code example uses addHandlerAsync to add an event handler for the

    // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.

    // When a resource is selected in a resource view, the handler displays the

    // resource GUID. When the handler is removed, the GUID is not displayed.

    // The example assumes that your add-in has a reference to the jQuery library and

    // that the following page control is defined in the content div in the page body:

    // <input id="remove-handler" type="button" value="Remove handler" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                Office.context.document.addHandlerAsync(
                    Office.EventType.ResourceSelectionChanged,
                    getResourceGuid);
                $('#remove-handler').click(removeEventHandler);
            });
        };

        // Remove the event handler.
        function removeEventHandler() {
            Office.context.document.removeHandlerAsync(
                Office.EventType.ResourceSelectionChanged,
                {handler:getResourceGuid,
                asyncContext:'The handler is removed.'},
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#remove-handler').attr('disabled', 'disabled');
                        $('#message').html(result.asyncContext);
                    }
                }
            );
        }

        // Get the GUID of the currently selected resource and display it in the add-in.
        function getResourceGuid() {
            Office.context.document.getSelectedResourceAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#message').html('Resource GUID: ' + result.value);
                    }
                }
            );
        }

        function onError(error) {
            $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Der Ereignistyp. Für Document kann "Document. SelectionChanged" oder "Document. ActiveViewChanged" sein.
      type: <xref uid="office!Office.EventType:enum" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(1)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  summary: >-
    Nur Projektdokumente. Ressourcenfeld für angegebene Ressourcen-ID festlegen.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: Entweder eine Zeichenfolge oder ein Wert der Ressourcen-ID.
      type: string
    - id: fieldId
      description: Ressourcenfelder.
      type: number
    - id: fieldValue
      description: Wert des Ziel Felds.
      type: string | number | boolean | object
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(2)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  summary: >-
    Nur Projektdokumente. Ressourcenfeld für angegebene Ressourcen-ID festlegen.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: Entweder eine Zeichenfolge oder ein Wert der Ressourcen-ID.
      type: string
    - id: fieldId
      description: Ressourcenfelder.
      type: number
    - id: fieldValue
      description: Wert des Ziel Felds.
      type: string | number | boolean | object
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's\n// currently selected in a resource view. Then it sets two resource field values by calling\n// setResourceFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync\n// method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource, and then get the resource fields.\n    function setResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                setResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected resource.\n    function setResourceFields(resourceGuid) {\n        var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];\n        var fieldValues = [.28, 'Notes for the resource.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setResourceFieldAsync(\n                resourceGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: setSelectedDataAsync(data, options, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(1)
  package: office!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: Schreibt die angegebenen Daten in die aktuelle Auswahl.
  remarks: "**Anforderungs Sätze**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->(bei Verwendung von `Office.CoercionType.Html`<!-- -->)\n\n- [Imageerzwingung 1,1](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (bei Verwendung von `Office.CoercionType.Image`<!-- -->)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Auswahl](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [Umwandlung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von `Office.CoercionType.Table`<!-- -->)\n\n- [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von `Office.CoercionType.Text`<!-- -->)\n\n- [Imageerzwingung 1,2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (bei Verwendung von `Office.CoercionType.XmlSvg`<!-- -->)\n\n**Anwendungsspezifische Verhaltensweisen**\n\nDie folgenden anwendungsspezifischen Aktionen gelten beim Schreiben von Daten in eine Auswahl.\n\n<table> <tr> <td>Word</td> <td>Wenn keine Auswahl vorhanden ist und sich die Einfügemarke an einer gültigen Position befindet, wird das angegebene `data` an der Einfügemarke eingefügt.</td> <td>Wenn `data` es sich um eine Zeichenfolge handelt, wird der angegebene Text eingefügt.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um ein Array von Arrays (\"Matrix\") oder ein Tabellendaten Objekt handelt, wird eine neue Word-Tabelle eingefügt.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um HTML handelt, wird der angegebene HTML-Code eingefügt. (**Wichtig**: Wenn einer der von Ihnen eingefügten HTML-Code ungültig ist, löst Word keinen Fehler aus. Word wird so viel HTML wie möglich einfügen und alle ungültigen Daten weglassen.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` Office Open XML ist, wird der angegebene XML-Code eingefügt.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um einen Base64-codierten Bilddatenstrom handelt, wird das angegebene Bild eingefügt.</td> </tr> <tr> <td></td> <td>Wenn eine Auswahl vorhanden ist</td> <td>Es wird durch das angegebene `data` nach den gleichen Regeln wie oben ersetzt.</td> </tr> <tr> <td></td> <td>Einfügen von Bildern</td> <td>Eingefügte Bilder werden Inline platziert. Die Parameter imageLeft und imageTop werden ignoriert. Das Bildseitenverhältnis ist immer gesperrt. Wenn nur einer der Parameter imageWidth und imageHeight angegeben ist, wird der andere Wert automatisch skaliert, um das ursprüngliche Seitenverhältnis beizubehalten.</td> </tr>\n\n<tr> <td>Excel</td> <td>Wenn eine einzelne Zelle ausgewählt ist</td> <td>Wenn `data` es sich um eine Zeichenfolge handelt, wird der angegebene Text als Wert der aktuellen Zelle eingefügt.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um ein Array von Arrays (\"Matrix\") handelt, wird die angegebene Gruppe von Zeilen und Spalten eingefügt, wenn keine anderen Daten in den umliegenden Zellen überschrieben werden.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um ein Tabellendaten Objekt handelt, wird eine neue Excel-Tabelle mit dem angegebenen Zeilen-und Kopfzeilentyp eingefügt, wenn keine anderen Daten in den umliegenden Zellen überschrieben werden.</td> </tr> <tr> <td></td> <td>Wenn mehrere Zellen ausgewählt sind</td> <td>If the shape does not match the shape of `data`<!-- -->, wird ein Fehler zurückgegeben.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->, werden die Werte der ausgewählten Zellen basierend auf den Werten in aktualisiert. `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Einfügen von Bildern</td> <td>Eingefügte Bilder sind schwebend. Die Positionsparameter imageLeft und imageTop sind relativ zu den aktuell ausgewählten Zellen. Negative Werte für imageLeft und imageTop sind zulässig und werden möglicherweise  von Excel an die Bildposition innerhalb eines Arbeitsblatts angepasst. Das Bild-Seitenverhältnis ist gesperrt, es sei denn, die beiden Parameter imageWidth und imageHeight werden angegeben. Wenn nur einer der Parameter imageWidth und imageHeight angegeben ist, wird der andere Wert automatisch skaliert, um das ursprüngliche Seitenverhältnis beizubehalten.</td> </tr> <tr> <td></td> <td>Alle anderen Fälle</td> <td>Es wird ein Fehler zurückgegeben.</td> </tr>\n\n<tr> <td>Excel im Web</td> <td>Zusätzlich zu den oben beschriebenen Verhaltensweisen für Excel gelten diese Grenzwerte beim Schreiben von Daten in Excel im Internet.</td> <td>Die Gesamtzahl der Zellen, die Sie in ein Arbeitsblatt mit dem Parameter schreiben können, `data` darf 20.000 in einem einzigen Aufruf dieser Methode nicht überschreiten.</td> </tr> <tr> <td></td> <td></td> <td>Die Anzahl der Formatierungs Gruppen, die an den Parameter übergeben werden, `cellFormat` darf 100 nicht überschreiten. Eine einzelne Formatierungsgruppe besteht aus einem Formatierungssatz, der auf einen bestimmten Zellenbereich angewendet wird.</td> </tr>\n\n<tr> <td>PowerPoint</td> <td>Bild einfügen</td> <td>Eingefügte Bilder sind schwebend. Die Parameter Position imageleft und imageTop sind optional, aber wenn angegeben, sollten beide vorhanden sein. Wenn ein einzelner Wert bereitgestellt wird, wird er ignoriert. Negative Wert für imageLeft und imageTop sind zulässig und können ein Bild außerhalb einer Folie positionieren. Wenn keine optionaler Parameter angegeben ist und die Folie einen Platzhalter aufweist, ersetzt das Bild den Platzhalter auf der Folie. Das Bild-Seitenverhältnis wird gesperrt, es sei denn, die beiden Parameter imageWidth und imageHeight werden angegeben. Wenn nur einer der Parameter imageWidth und imageHeight angegeben ist, wird der andere Wert automatisch skaliert, um das ursprüngliche Seitenverhältnis beizubehalten.</td> </tr> </table>\n\n**Typen spezifisches Verhalten**\n\n<table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>(Nur Excel): in Excel-Builds zwischen 16.0.11526.10000 und 16.0.12309.10000 gibt es eine 64 KB-Größenbeschränkung für SVG-Einfügungen.</td> </tr> </table>\n\n**Hosts**\n\nDie möglichen Werte für den [Office. CoercionType](xref:office!Office.CoercionType:enum) -Parameter variieren je nach Host.\n\n<table> <tr> <th>Host</th> <th>Unterstützter coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project und Word</td> <td>`Office.CoercionType.Text` String</td> </tr> <tr> <td>Excel und Word</td> <td>`Office.CoercionType.Matrix` (Array von Arrays)</td> </tr> <tr> <td>Excel und Word</td> <td>`Office.CoercionType.Table` (Datenobjekt)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint im Internet und Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint und Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example sets the selected text or cell to \"Hello World!\", \n// and if that fails, displays the value of the error.message property.\nfunction writeText() {\n    Office.context.document.setSelectedDataAsync(\"Hello World!\",\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write\n// to a selection. The following example writes data as an array of three rows of two columns, \n// specifying the coercionType as `Matrix` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeMatrix() {\n    Office.context.document.setSelectedDataAsync(\n        [[\"Red\", \"Rojo\"], [\"Green\", \"Verde\"], [\"Blue\", \"Azul\"]],\n        {coercionType: Office.CoercionType.Matrix}\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// The following example writes data as a one column table with a header and four rows, \n// specifying the coercionType as `Table` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeTable() {\n    // Build table.\n    var myTable = new Office.TableData();\n    myTable.headers = [[\"Cities\"]];\n    myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];\n\n    // Write table.\n    Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},\n        function (result) {\n            var error = result.error\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`\n// as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.context.document.setSelectedDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: Office.CoercionType.Html}, function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write('Error: ' + asyncResult.error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType\n// parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertPictureAtSelection(base64EncodedImageStr) {\n\n    Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {\n        coercionType: Office.CoercionType.Image,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 100,\n        imageHeight: 100\n    },\n    function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(\"Action failed with error: \" + asyncResult.error.message);\n        }\n    });\n}\n\n// In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can specify the \n// coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertSvgAtSelection(base64EncodedImageStr) {\n    Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {\n        coercionType: Office.CoercionType.XmlSvg,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 400\n    },\n        function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(asyncResult.error.message);\n            }\n        });\n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Die festzulegenden Daten. Entweder eine Zeichenfolge oder ein [Office. CoercionType](xref:office!Office.CoercionType:enum) -Wert, ein 2D-Array oder ein Datenobjekt.


        Wenn der übergebene Wert `data` lautet:


        - Eine Zeichenfolge: Nur-Text oder alle Werte, die in eine Zeichenfolge umgewandelt werden können, werden eingefügt. In Excel können Sie auch Daten als gültige Formel angeben, um diese Formel zur ausgewählten Zelle hinzuzufügen. Indem Sie den Wert data auf "=SUM(A1:A5)" setzen, wird das Ergebnis der Werte des angegebenen Bereichs angezeigt. Wenn Sie jedoch eine Formel für die gebundene Zelle festlegen, können Sie die hinzugefügte Formel (oder eine bereits vorhandene Formel) anschließend nicht mehr aus der gebundenen Zelle lesen. Wenn Sie die Document.getSelectedDataAsyncMethode in der ausgewählten Zelle aufrufen, um die Daten zu lesen, kann die Methode nur die in der Zelle angezeigten Daten (das Formelergebnis) zurückgeben.


        - Ein Array von Arrays („Matrix“): Es werden tabellarische Daten ohne Kopfzeilen eingefügt. Um beispielsweise Daten in drei Zeilen in zwei Spalten zu schreiben, können Sie ein Array wie das folgende übergeben: \[ \[ "Z1S1", "R1C2" \] , \[ "R2C1", "R2C2" \] , \[ "R3C1", "R3C2" \] \] . Wenn Sie eine einzelne Spalte aus drei Zeilen schreiben möchten, übergeben Sie ein Array wie das folgende: \[ \[ "Z1S1" \] , \[ "R2C1" \] , \[ "R3C1"\]\]


        In Excel können Sie auch  data als ein Array von Arrays mit gültigen Formeln angeben, um diese Formeln zu den ausgewählten Zellen hinzuzufügen. Wenn beispielsweise keine anderen Daten überschrieben werden, werden durch Festlegen von Daten auf \[ \[ "= Sum (a1: A5)", "= Average (a1: A5)" \] \] diese beiden Formeln zur Auswahl hinzugefügt. Genau wie beim Angeben einer Formel für eine einzelne Zelle als „Text“, können Sie die hinzugefügten Formeln (oder bereits vorhandene Formeln) anschließend nicht mehr lesen. Sie können nur die Formelergebnisse lesen.


        - Ein TableData-Objekt: Eine Tabelle mit Kopfzeilen wird eingefügt. Wenn Sie in Excel die Formeln im TableData-Objekt angeben, dass Sie für den data-Parameter weitergeben, erhalten Sie wegen der "berechnete Spalten"-Funktion möglicherweise nicht die erwarteten Ergebnisse, die die Formeln innerhalb einer Spalte automatisch dupliziert. Um dies zu umgehen, wenn Sie schreiben möchten, `data` das Formeln in einer ausgewählten Tabelle enthält, versuchen Sie, die Daten als Array von Arrays (anstelle eines tabledaten-Objekts) anzugeben, und geben Sie die coercionType als Microsoft. Office. Matrix oder "Matrix" an. Dieses Verfahren blockiert jedoch das Feature "berechnete Spalten" nur, wenn eine der folgenden Bedingungen erfüllt ist: (1) Sie schreiben in alle Zellen der Spalte, oder (2) Es gibt bereits mindestens zwei unterschiedliche Formeln in der Spalte.
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: options
      description: Enthält Optionen zum Einfügen von Daten in die Auswahl.
      type: <xref uid="office!Office.SetSelectedDataOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die AsyncResult. Value-Eigenschaft gibt immer undefined zurück, da kein Objekt oder Daten zum Abrufen vorhanden sind.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(2)
  package: office!
  fullName: setSelectedDataAsync(data, callback)
  summary: Schreibt die angegebenen Daten in die aktuelle Auswahl.
  remarks: >-
    **Anforderungs Sätze**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->(bei Verwendung von `Office.CoercionType.Html`<!-- -->)


    - [Imagezwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (bei Verwendung von `Office.CoercionType.Image`<!-- -->)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von `Office.CoercionType.Ooxml`<!-- -->)


    - [Auswahl](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [Umwandlung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von `Office.CoercionType.Table`<!-- -->)


    - [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von `Office.CoercionType.Text`<!-- -->)


    - [Imageerzwingung 1,2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (bei Verwendung von `Office.CoercionType.XmlSvg`<!-- -->)


    **Anwendungsspezifische Verhaltensweisen**


    Die folgenden anwendungsspezifischen Aktionen gelten beim Schreiben von Daten in eine Auswahl.


    <table> <tr> <td>Word</td> <td>Wenn keine Auswahl vorhanden ist und sich die Einfügemarke an einer gültigen Position befindet, wird das angegebene `data` an der Einfügemarke eingefügt.</td> <td>Wenn `data` es sich um eine Zeichenfolge handelt, wird der angegebene Text eingefügt.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um ein Array von Arrays ("Matrix") oder ein Tabellendaten Objekt handelt, wird eine neue Word-Tabelle eingefügt.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um HTML handelt, wird der angegebene HTML-Code eingefügt. (**Wichtig**: Wenn einer der von Ihnen eingefügten HTML-Code ungültig ist, löst Word keinen Fehler aus. Word wird so viel HTML wie möglich einfügen und alle ungültigen Daten weglassen.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` Office Open XML ist, wird der angegebene XML-Code eingefügt.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um einen Base64-codierten Bilddatenstrom handelt, wird das angegebene Bild eingefügt.</td></tr></td> </tr> <tr> <td></td> <td>Wenn eine Auswahl vorhanden ist</td> <td>Es wird durch das angegebene `data` nach den gleichen Regeln wie oben ersetzt.</td> </tr> <tr> <td></td> <td>Einfügen von Bildern</td> <td>Eingefügte Bilder werden Inline platziert. Die Parameter imageLeft und imageTop werden ignoriert. Das Bildseitenverhältnis ist immer gesperrt. Wenn nur einer der Parameter imageWidth und imageHeight angegeben ist, wird der andere Wert automatisch skaliert, um das ursprüngliche Seitenverhältnis beizubehalten.</td> </tr>


    <tr> <td>Excel</td> <td>Wenn eine einzelne Zelle ausgewählt ist</td> <td>Wenn `data` es sich um eine Zeichenfolge handelt, wird der angegebene Text als Wert der aktuellen Zelle eingefügt.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um ein Array von Arrays ("Matrix") handelt, wird die angegebene Gruppe von Zeilen und Spalten eingefügt, wenn keine anderen Daten in den umliegenden Zellen überschrieben werden.</td> </tr> <tr> <td></td> <td></td> <td>Wenn `data` es sich um ein Tabellendaten Objekt handelt, wird eine neue Excel-Tabelle mit dem angegebenen Zeilen-und Kopfzeilentyp eingefügt, wenn keine anderen Daten in den umliegenden Zellen überschrieben werden.</td> </tr> <tr> <td></td> <td>Wenn mehrere Zellen ausgewählt sind</td><td>If the shape does not match the shape of `data`<!-- -->, wird ein Fehler zurückgegeben.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->, werden die Werte der ausgewählten Zellen basierend auf den Werten in aktualisiert. `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Einfügen von Bildern</td> <td>Eingefügte Bilder sind schwebend. Die Positionsparameter imageLeft und imageTop sind relativ zu den aktuell ausgewählten Zellen. Negative Werte für imageLeft und imageTop sind zulässig und werden möglicherweise  von Excel an die Bildposition innerhalb eines Arbeitsblatts angepasst. Das Bild-Seitenverhältnis ist gesperrt, es sei denn, die beiden Parameter imageWidth und imageHeight werden angegeben. Wenn nur einer der Parameter imageWidth und imageHeight angegeben ist, wird der andere Wert automatisch skaliert, um das ursprüngliche Seitenverhältnis beizubehalten.</td> </tr> <tr> <td></td> <td>Alle anderen Fälle</td> <td>Es wird ein Fehler zurückgegeben.</td> </tr>


    <tr> <td>Excel im Web</td> <td>Zusätzlich zu den oben beschriebenen Verhaltensweisen für Excel gelten diese Grenzwerte beim Schreiben von Daten in Excel im Internet.</td> <td>Die Gesamtzahl der Zellen, die Sie in ein Arbeitsblatt mit dem Parameter schreiben können, `data` darf 20.000 in einem einzigen Aufruf dieser Methode nicht überschreiten.</td> </tr> <tr> <td></td> <td></td> <td>Die Anzahl der Formatierungs Gruppen, die an den Parameter übergeben werden, `cellFormat` darf 100 nicht überschreiten. Eine einzelne Formatierungsgruppe besteht aus einem Formatierungssatz, der auf einen bestimmten Zellenbereich angewendet wird.</td> </tr>


    <tr> <td>PowerPoint</td> <td>Bild einfügen</td> <td>Eingefügte Bilder sind schwebend. Die Parameter Position imageleft und imageTop sind optional, aber wenn angegeben, sollten beide vorhanden sein. Wenn ein einzelner Wert bereitgestellt wird, wird er ignoriert. Negative Wert für imageLeft und imageTop sind zulässig und können ein Bild außerhalb einer Folie positionieren. Wenn keine optionaler Parameter angegeben ist und die Folie einen Platzhalter aufweist, ersetzt das Bild den Platzhalter auf der Folie. Das Bild-Seitenverhältnis wird gesperrt, es sei denn, die beiden Parameter imageWidth und imageHeight werden angegeben. Wenn nur einer der Parameter imageWidth und imageHeight angegeben ist, wird der andere Wert automatisch skaliert, um das ursprüngliche Seitenverhältnis beizubehalten.</td> </tr> </table>


    **Typen spezifisches Verhalten**


    <table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>(Nur Excel): beim Erstellen von 16.0.11526.10000 gibt es eine Größenbeschränkung von 64 KB für SVG-Einfügungen.</td> </tr> </table>


    **Hosts**


    Die möglichen Werte für den [Office. CoercionType](xref:office!Office.CoercionType:enum) -Parameter variieren je nach Host.


    <table> <tr> <th>Host</th> <th>Unterstützter coercionType</th> </tr> <tr> <td>Excel, PowerPoint, Project und Word</td> <td>`Office.CoercionType.Text` String</td> </tr> <tr> <td>Excel und Word</td> <td>`Office.CoercionType.Matrix` (Array von Arrays)</td> </tr> <tr> <td>Excel und Word</td> <td>`Office.CoercionType.Table` (Datenobjekt)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint im Internet und Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint und Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Die festzulegenden Daten. Entweder eine Zeichenfolge oder ein [Office. CoercionType](xref:office!Office.CoercionType:enum) -Wert, ein 2D-Array oder ein Datenobjekt.


        Wenn der übergebene Wert `data` lautet:


        - Eine Zeichenfolge: Nur-Text oder alle Werte, die in eine Zeichenfolge umgewandelt werden können, werden eingefügt. In Excel können Sie auch Daten als gültige Formel angeben, um diese Formel zur ausgewählten Zelle hinzuzufügen. Indem Sie den Wert data auf "=SUM(A1:A5)" setzen, wird das Ergebnis der Werte des angegebenen Bereichs angezeigt. Wenn Sie jedoch eine Formel für die gebundene Zelle festlegen, können Sie die hinzugefügte Formel (oder eine bereits vorhandene Formel) anschließend nicht mehr aus der gebundenen Zelle lesen. Wenn Sie die Document.getSelectedDataAsyncMethode in der ausgewählten Zelle aufrufen, um die Daten zu lesen, kann die Methode nur die in der Zelle angezeigten Daten (das Formelergebnis) zurückgeben.


        - Ein Array von Arrays („Matrix“): Es werden tabellarische Daten ohne Kopfzeilen eingefügt. Um beispielsweise Daten in drei Zeilen in zwei Spalten zu schreiben, können Sie ein Array wie das folgende übergeben: \[ \[ "Z1S1", "R1C2" \] , \[ "R2C1", "R2C2" \] , \[ "R3C1", "R3C2" \] \] . Wenn Sie eine einzelne Spalte aus drei Zeilen schreiben möchten, übergeben Sie ein Array wie das folgende: \[ \[ "Z1S1" \] , \[ "R2C1" \] , \[ "R3C1"\]\]


        In Excel können Sie auch  data als ein Array von Arrays mit gültigen Formeln angeben, um diese Formeln zu den ausgewählten Zellen hinzuzufügen. Wenn beispielsweise keine anderen Daten überschrieben werden, werden durch Festlegen von Daten auf \[ \[ "= Sum (a1: A5)", "= Average (a1: A5)" \] \] diese beiden Formeln zur Auswahl hinzugefügt. Genau wie beim Angeben einer Formel für eine einzelne Zelle als „Text“, können Sie die hinzugefügten Formeln (oder bereits vorhandene Formeln) anschließend nicht mehr lesen. Sie können nur die Formelergebnisse lesen.


        - Ein TableData-Objekt: Eine Tabelle mit Kopfzeilen wird eingefügt. Wenn Sie in Excel die Formeln im TableData-Objekt angeben, dass Sie für den data-Parameter weitergeben, erhalten Sie wegen der "berechnete Spalten"-Funktion möglicherweise nicht die erwarteten Ergebnisse, die die Formeln innerhalb einer Spalte automatisch dupliziert. Um dies zu umgehen, wenn Sie schreiben möchten, `data` das Formeln in einer ausgewählten Tabelle enthält, versuchen Sie, die Daten als Array von Arrays (anstelle eines tabledaten-Objekts) anzugeben, und geben Sie die coercionType als Microsoft. Office. Matrix oder "Matrix" an. Dieses Verfahren blockiert jedoch das Feature "berechnete Spalten" nur, wenn eine der folgenden Bedingungen erfüllt ist: (1) Sie schreiben in alle Zellen der Spalte, oder (2) Es gibt bereits mindestens zwei unterschiedliche Formeln in der Spalte.
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die AsyncResult. Value-Eigenschaft gibt immer undefined zurück, da kein Objekt oder Daten zum Abrufen vorhanden sind.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(1)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  summary: >-
    Nur Projektdokumente. Legen Sie das Vorgangsfeld für die angegebene Vorgangs-ID fest.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: Entweder eine Zeichenfolge oder ein Wert der Aufgaben-ID.
      type: string
    - id: fieldId
      description: Vorgangsfelder.
      type: number
    - id: fieldValue
      description: Wert des Ziel Felds.
      type: string | number | boolean | object
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(2)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  summary: >-
    Nur Projektdokumente. Legen Sie das Vorgangsfeld für die angegebene Vorgangs-ID fest.


    **Wichtig**: Diese API funktioniert nur in Project 2016 auf dem Windows-Desktop.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: Entweder eine Zeichenfolge oder ein Wert der Aufgaben-ID.
      type: string
    - id: fieldId
      description: Vorgangsfelder.
      type: number
    - id: fieldValue
      description: Wert des Ziel Felds.
      type: string | number | boolean | object
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's\n// currently selected in a task view. Then it sets two task field values by calling\n// setTaskFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the\n// addHandlerAsync method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function setTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                setTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected task.\n    function setTaskFields(taskGuid) {\n        var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];\n        var fieldValues = [true, 'Notes for the task.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setTaskFieldAsync(\n                taskGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
metadata:
  ms.openlocfilehash: 2a56c1459ba92f4cc0062babd1a613bbbd51928f
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49143540"
