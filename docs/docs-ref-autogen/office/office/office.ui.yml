### YamlMime:UniversalReference
items:
  - uid: 'office!Office.UI:interface'
    summary: |-
      Stellt Objekte und Methoden bereit, die Sie zum Erstellen und Bearbeiten von Benutzeroberflächenkomponenten wie Dialogfeldern in Ihren Office-Add-Ins verwenden können.

      Visit "[Verwenden der Dialog-API in Ihren Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/develop/dialog-api-in-office-add-ins)<!-- -->"Weitere Informationen.
    name: Office.UI
    fullName: Office.UI
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.UI#closeContainer:member(1)'
      - 'office!Office.UI#displayDialogAsync:member(1)'
      - 'office!Office.UI#displayDialogAsync:member(2)'
      - 'office!Office.UI#messageParent:member(1)'
  - uid: 'office!Office.UI#closeContainer:member(1)'
    summary: 'Schließt den UI-Container, in dem der JavaScript-Code ausgeführt wird.'
    remarks: |-
      **Hosts**: Excel, Word, PowerPoint, Outlook (minimaler Anforderungssatz: Postfach 1,5)

      **Anforderungsgruppe**: [DialogAPI](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/dialog-api-requirement-sets)

      Das Verhalten dieser Methode wird durch Folgendes angegeben:

      - Wird von einer Benutzeroberflächen losen Befehlsschaltfläche aufgerufen: keine Auswirkung. Jedes über displayDialogAsync geöffnete Dialogfeld bleibt geöffnet.

      - Wird von einem Aufgabenbereich aus aufgerufen: der Aufgabenbereich wird geschlossen. Alle von displayDialogAsync geöffneten Dialogfelder werden ebenfalls geschlossen. Wenn der Aufgabenbereich das Anheften unterstützt und vom Benutzer fixiert wurde, wird er nicht fixiert.

      - Wird von einer Modul Erweiterung aufgerufen: keine Auswirkung.
    name: closeContainer()
    fullName: closeContainer()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'closeContainer(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'office!Office.UI#displayDialogAsync:member(1)'
    summary: Zeigt ein Dialogfeld zum Anzeigen oder Erfassen von Informationen vom Benutzer oder zum Vereinfachen der Webnavigation an.
    remarks: |-
      **Hosts**: Word, Excel, Outlook, PowerPoint

      **Anforderungs Sätze**:

      - [DialogAPI](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/dialog-api-requirement-sets)

      - [Mailbox 1.4](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)

      Diese Methode ist im DialogAPI-Anforderungssatz für Word-, Excel- oder PowerPoint-Add-Ins und im Mailbox-Anforderungssatz 1.4 für Outlook verfügbar. Weitere Informationen zum Angeben eines Anforderungs Satzes im Manifest finden Sie unter [Angeben von Office-Hosts und API-Anforderungen](https://docs.microsoft.com/office/dev/add-ins/develop/specify-office-hosts-and-api-requirements) .<!-- -->.

      Die Ausgangsseite muss sich in derselben Domäne wie die übergeordnete Seite befinden (der Parameter startAddress). Nachdem die Startseite geladen wurde, können Sie zu anderen Domänen wechseln.

      Alle Seitenaufrufe `Office.context.ui.messageParent` müssen sich ebenfalls in derselben Domäne wie die übergeordnete Seite befinden.

      **Entwurfsüberlegungen**:

      Die folgenden Entwurfsüberlegungen gelten für Dialogfelder:

      - In einem Office-Add-in-Aufgabenbereich kann immer nur ein Dialogfeld geöffnet sein. Mehrere Dialogfelder können von Add-in-Befehlen gleichzeitig geöffnet werden (benutzerdefinierte menübandschaltflächen oder Menüelemente).

      - Jedes Dialogfeld kann vom Benutzer verschoben und in der Größe geändert werden.

      - Jedes Dialogfeld wird beim Öffnen auf dem Bildschirm zentriert.

      - Dialogfelder werden im Vordergrund der Hostanwendung und in der Reihenfolge angezeigt, in der sie erstellt wurden.

      Verwenden Sie ein Dialogfelder zu folgenden Zwecken:

      - Anzeigen von Authentifizierungsseiten zum Sammeln von Benutzeranmeldeinformationen

      - Zeigt einen Fehler/Fortschritt/Eingabebildschirm von einem ShowTaskpane-oder Execute-Befehl an.

      - Vorübergehende Vergrößerung der Oberfläche, die einem Benutzer zum Durchführen einer Aufgabe zur Verfügung steht.

      Verwenden Sie ein Dialogfeld nicht zur Interaktion mit einem Dokument. Verwenden Sie stattdessen einen Aufgabenbereich.

      Ein Entwurfsmuster, nach dem Sie ein Dialogfeld erstellen können, finden Sie unter [Client-Dialogfeld](https://github.com/OfficeDev/Office-Add-in-UX-Design-Patterns/blob/master/Patterns/Client_Dialog.md) im Repository „Office-Add-in-UX-Design-Patterns“ auf GitHub.

      **displayDialogAsync-Fehler**:

      <table> <tr> <th>Codenummer</th> <th>Bedeutung</th> </tr> <tr> <td>12004</td> <td>Die Domäne der an displayDialogAsync übergebenen URL ist nicht vertrauenswürdig. Die Domäne muss sich entweder in derselben Domäne wie die Hostseite befinden (einschließlich Protokoll und Portnummer), oder Sie muss im <AppDomains> Abschnitt des Add-in-Manifests registriert sein.</td> </tr> <tr> <td>12005</td> <td>Die an displayDialogAsync übergebene URL verwendet das HTTP-Protokoll. HTTPS ist erforderlich. (In manchen Versionen von Office ist die Fehlermeldung, die für 12005 zurückgegeben wird, dieselbe wie für 12004.)</td> </tr> <tr> <td>12007</td> <td>Ein Dialogfeld ist bereits im Aufgabenbereich geöffnet. Für ein Aufgabenbereich-Add-In kann nur ein Dialogfeld geöffnet sein.</td> </tr> <tr> <td>12009</td> <td>Der Benutzer hat das Dialogfeld ignoriert. Dieser Fehler kann in Online-Versionen von Office auftreten, in denen Benutzer auswählen können, dass ein Add-In kein Dialogfeld präsentiert.</td> </tr> </table>

      In der an die displayDialogAsync-Methode übergebenen Rückruffunktion können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.

      <table> <tr> <th>Eigenschaft</th> <th>Verwenden Sie, um</th> </tr> <tr> <td>AsyncResult.value</td> <td>Greift auf das Dialog-Objekt zu.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Verwenden Sie diese Eigenschaft, um auf Ihr benutzerdefiniertes object oder den Wert zuzugreifen, wenn Sie ein solches als asyncContext-Parameter übergeben haben.</td> </tr> </table>
    name: 'displayDialogAsync(startAddress, options, callback)'
    fullName: 'displayDialogAsync(startAddress, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayDialogAsync(startAddress: string, options?: DialogOptions, callback?: (result: AsyncResult<Dialog>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: startAddress
          description: 'Akzeptiert die anfängliche HTTPS-URL, die im Dialogfeld geöffnet wird.'
          type:
            - string
        - id: options
          description: 'Optional. Akzeptiert ein [Office. dialogies-](xref:office!Office.DialogOptions:interface) Objekt zum Definieren der Dialogfeldanzeige.'
          type:
            - 'office!Office.DialogOptions:interface'
        - id: callback
          description: 'Optional. Akzeptiert eine Rückrufmethode, die den Versuch der Dialogfelderstellung zu behandelt. Wenn die Methode erfolgreich verläuft, handelt es sich bei AsyncResult. Value um ein Dialog-Objekt.'
          type:
            - 'office!Office.UI#displayDialogAsync~0:complex'
  - uid: 'office!Office.UI#displayDialogAsync:member(2)'
    summary: Zeigt ein Dialogfeld zum Anzeigen oder Erfassen von Informationen vom Benutzer oder zum Vereinfachen der Webnavigation an.
    remarks: |-
      **Hosts**: Excel, Outlook, PowerPoint, Word

      **Anforderungs Sätze**:

      - [DialogAPI](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/dialog-api-requirement-sets)

      - [Mailbox 1.4](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)

      Diese Methode ist im DialogAPI-Anforderungssatz für Word-, Excel- oder PowerPoint-Add-Ins und im Mailbox-Anforderungssatz 1.4 für Outlook verfügbar. Weitere Informationen zum Angeben eines Anforderungs Satzes im Manifest finden Sie unter [Angeben von Office-Hosts und API-Anforderungen](https://docs.microsoft.com/office/dev/add-ins/develop/specify-office-hosts-and-api-requirements) .<!-- -->.

      Die Ausgangsseite muss sich in derselben Domäne wie die übergeordnete Seite befinden (der Parameter startAddress). Nachdem die Startseite geladen wurde, können Sie zu anderen Domänen wechseln.

      Alle Seitenaufrufe `Office.context.ui.messageParent` müssen sich ebenfalls in derselben Domäne wie die übergeordnete Seite befinden.

      **Entwurfsüberlegungen**:

      Die folgenden Entwurfsüberlegungen gelten für Dialogfelder:

      - In einem Office-Add-in-Aufgabenbereich kann immer nur ein Dialogfeld geöffnet sein. Mehrere Dialogfelder können von Add-in-Befehlen gleichzeitig geöffnet werden (benutzerdefinierte menübandschaltflächen oder Menüelemente).

      - Jedes Dialogfeld kann vom Benutzer verschoben und in der Größe geändert werden.

      - Jedes Dialogfeld wird beim Öffnen auf dem Bildschirm zentriert.

      - Dialogfelder werden im Vordergrund der Hostanwendung und in der Reihenfolge angezeigt, in der sie erstellt wurden.

      Verwenden Sie ein Dialogfelder zu folgenden Zwecken:

      - Anzeigen von Authentifizierungsseiten zum Sammeln von Benutzeranmeldeinformationen

      - Zeigt einen Fehler/Fortschritt/Eingabebildschirm von einem ShowTaskpane-oder Execute-Befehl an.

      - Vorübergehende Vergrößerung der Oberfläche, die einem Benutzer zum Durchführen einer Aufgabe zur Verfügung steht.

      Verwenden Sie ein Dialogfeld nicht zur Interaktion mit einem Dokument. Verwenden Sie stattdessen einen Aufgabenbereich.

      Ein Entwurfsmuster, nach dem Sie ein Dialogfeld erstellen können, finden Sie unter [Client-Dialogfeld](https://github.com/OfficeDev/Office-Add-in-UX-Design-Patterns/blob/master/Patterns/Client_Dialog.md) im Repository „Office-Add-in-UX-Design-Patterns“ auf GitHub.

      **displayDialogAsync-Fehler**:

      <table> <tr> <th>Codenummer</th> <th>Bedeutung</th> </tr> <tr> <td>12004</td> <td>Die Domäne der an displayDialogAsync übergebenen URL ist nicht vertrauenswürdig. Die Domäne muss sich entweder in derselben Domäne wie die Hostseite befinden (einschließlich Protokoll und Portnummer), oder Sie muss im <AppDomains> Abschnitt des Add-in-Manifests registriert sein.</td> </tr> <tr> <td>12005</td> <td>Die an displayDialogAsync übergebene URL verwendet das HTTP-Protokoll. HTTPS ist erforderlich. (In manchen Versionen von Office ist die Fehlermeldung, die für 12005 zurückgegeben wird, dieselbe wie für 12004.)</td> </tr> <tr> <td>12007</td> <td>Ein Dialogfeld ist bereits im Aufgabenbereich geöffnet. Für ein Aufgabenbereich-Add-In kann nur ein Dialogfeld geöffnet sein.</td> </tr> <tr> <td>12009</td> <td>Der Benutzer hat das Dialogfeld ignoriert. Dieser Fehler kann in Online-Versionen von Office auftreten, in denen Benutzer auswählen können, dass ein Add-In kein Dialogfeld präsentiert.</td> </tr> </table>

      In der an die displayDialogAsync-Methode übergebenen Rückruffunktion können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.

      <table> <tr> <th>Eigenschaft</th> <th>Verwenden Sie, um</th> </tr> <tr> <td>AsyncResult.value</td> <td>Greift auf das Dialog-Objekt zu.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Verwenden Sie diese Eigenschaft, um auf Ihr benutzerdefiniertes object oder den Wert zuzugreifen, wenn Sie ein solches als asyncContext-Parameter übergeben haben.</td> </tr> </table>
    name: 'displayDialogAsync(startAddress, callback)'
    fullName: 'displayDialogAsync(startAddress, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayDialogAsync(startAddress: string, callback?: (result: AsyncResult<Dialog>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: startAddress
          description: 'Akzeptiert die anfängliche HTTPS-URL, die im Dialogfeld geöffnet wird.'
          type:
            - string
        - id: callback
          description: 'Optional. Akzeptiert eine Rückrufmethode, die den Versuch der Dialogfelderstellung zu behandelt. Wenn die Methode erfolgreich verläuft, handelt es sich bei AsyncResult. Value um ein Dialog-Objekt.'
          type:
            - 'office!Office.UI#displayDialogAsync~1:complex'
  - uid: 'office!Office.UI#messageParent:member(1)'
    summary: 'Übermittelt eine Nachricht vom Dialogfeld an die übergeordnete/öffnende Seite. Die Seite, die diese API aufruft, muss sich in derselben Domäne wie die übergeordnete Seite befinden.'
    remarks: '**Anforderungsgruppe**: [DialogAPI](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/dialog-api-requirement-sets)'
    name: messageParent(message)
    fullName: messageParent(message)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'messageParent(message: boolean | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: message
          description: 'Akzeptiert eine Nachricht aus dem Dialogfeld, die an das Add-In übermittelt wird. Zusätzlich zu einem booleschen Wert können alle Elemente, die in eine Zeichenfolge serialisiert werden können, einschließlich JSON und XML, gesendet werden.'
          type:
            - boolean | string
references:
  - uid: 'office!Office.DialogOptions:interface'
    name: DialogOptions
  - uid: 'office!Office.UI#displayDialogAsync~0:complex'
    name: '(result: AsyncResult<Dialog>) => void'
    fullName: '(result: Office.AsyncResult<Office.Dialog>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.Dialog:interface'
        name: Dialog
        fullName: Office.Dialog
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'office!Office.UI#displayDialogAsync~1:complex'
    name: '(result: AsyncResult<Dialog>) => void'
    fullName: '(result: Office.AsyncResult<Office.Dialog>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.Dialog:interface'
        name: Dialog
        fullName: Office.Dialog
      - name: '>) => void'
        fullName: '>) => void'