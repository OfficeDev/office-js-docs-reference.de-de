### YamlMime:UniversalReference
items:
  - uid: 'office!Office.TableBinding:interface'
    summary: 'Stellt eine Bindung in zwei Dimensionen von Zeilen und Spalten dar, optional mit Kopfzeilen.'
    remarks: |-
      Das Binding-Objekt erbt die `id` Eigenschaften, `type` Eigenschaften, `getDataAsync` Methoden und Methoden des `setDataAsync` [Office. Binding](xref:office!Office.Binding:interface) -Objekts.

      Beachten Sie für Excel, dass nach dem Einrichten einer Tabellenbindung jede neue Zeile, die ein Benutzer zur Tabelle hinzufügt, automatisch in die Bindung eingeschlossen wird und RowCount zunimmt.
    name: Office.TableBinding
    fullName: Office.TableBinding
    langs:
      - typeScript
    type: interface
    extends:
      - 'office!Office.Binding:interface'
    package: office!
    children:
      - 'office!Office.TableBinding#addColumnsAsync:member(1)'
      - 'office!Office.TableBinding#addColumnsAsync:member(2)'
      - 'office!Office.TableBinding#addRowsAsync:member(1)'
      - 'office!Office.TableBinding#addRowsAsync:member(2)'
      - 'office!Office.TableBinding#clearFormatsAsync:member(1)'
      - 'office!Office.TableBinding#clearFormatsAsync:member(2)'
      - 'office!Office.TableBinding#columnCount:member'
      - 'office!Office.TableBinding#deleteAllDataValuesAsync:member(1)'
      - 'office!Office.TableBinding#deleteAllDataValuesAsync:member(2)'
      - 'office!Office.TableBinding#getFormatsAsync:member(1)'
      - 'office!Office.TableBinding#getFormatsAsync:member(2)'
      - 'office!Office.TableBinding#hasHeaders:member'
      - 'office!Office.TableBinding#rowCount:member'
      - 'office!Office.TableBinding#setFormatsAsync:member(1)'
      - 'office!Office.TableBinding#setFormatsAsync:member(2)'
      - 'office!Office.TableBinding#setTableOptionsAsync:member(1)'
      - 'office!Office.TableBinding#setTableOptionsAsync:member(2)'
  - uid: 'office!Office.TableBinding#addColumnsAsync:member(1)'
    summary: Fügt der Tabelle die angegebenen Daten als zusätzliche Spalten hinzu.
    remarks: |-
      Zum Hinzufügen einer oder mehrerer Spalten, die die Werte der Daten und Kopfzeilen angeben, übergeben Sie ein Datenobjekt als data-Parameter. Wenn eine oder mehrere Spalten hinzugefügt werden sollen, die nur die Daten angeben, übergeben Sie ein Array von Arrays ("Matrix") als data-Parameter.

      Der Erfolg oder Fehler eines addColumnsAsync-Vorgangs ist atomar. Dies bedeutet, dass der gesamte Vorgang zum Hinzufügen von Spalten erfolgreich sein muss, andernfalls wird er vollständig rückgängig gemacht (und die an den Rückruf zurückgegebene AsyncResult.status-Eigenschaft meldet einen Fehler):

      - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss die gleiche Anzahl von Zeilen aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, tritt bei dem Vorgang ein Fehler auf.

      - Jede Zeile und Zelle im Array muss die entsprechende Zeile oder Zelle in der Tabelle in den neu erstellten Spalten hinzufügen. Wenn eine Zeile oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.

      - Wenn Sie ein tabledaten-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit der der Tabelle übereinstimmen, die aktualisiert wird.

      Zusätzliche Bemerkung für Excel im Internet: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzigen Aufruf dieser Methode nicht überschreiten.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following example adds a single column with three rows to a bound table with the id "myTable"
      // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,
      // the table being updated must have three rows.

      // Add a column to a binding of type table by passing a TableData object.
      function addColumns() {
          var myTable = new Office.TableData();
          myTable.headers = [["Cities"]];
          myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

          Office.context.document.bindings.getByIdAsync("myTable", function (result) {
              result.value.addColumnsAsync(myTable);
          });
      }

      // The following example adds a single column with three rows to a bound table with the id myTable
      // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.
      // To succeed, the table being updated must have three rows.

      // Add a column to a binding of type table by passing an array of arrays.
      function addColumns() {
          var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

          Office.context.document.bindings.getByIdAsync("myTable", function (result) {
              result.value.addColumnsAsync(myTable);
          });
      }
      ```
    name: 'addColumnsAsync(tableData, options, callback)'
    fullName: 'addColumnsAsync(tableData, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addColumnsAsync(tableData: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableData
          description: 'Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenspalten enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.'
          type:
            - 'office!Office.TableBinding#addColumnsAsync~0:complex'
        - id: options
          description: 'Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#addColumnsAsync~1:complex'
  - uid: 'office!Office.TableBinding#addColumnsAsync:member(2)'
    summary: Fügt der Tabelle die angegebenen Daten als zusätzliche Spalten hinzu.
    remarks: |-
      Zum Hinzufügen einer oder mehrerer Spalten, die die Werte der Daten und Kopfzeilen angeben, übergeben Sie ein Datenobjekt als data-Parameter. Wenn eine oder mehrere Spalten hinzugefügt werden sollen, die nur die Daten angeben, übergeben Sie ein Array von Arrays ("Matrix") als data-Parameter.

      Der Erfolg oder Fehler eines addColumnsAsync-Vorgangs ist atomar. Dies bedeutet, dass der gesamte Vorgang zum Hinzufügen von Spalten erfolgreich sein muss, andernfalls wird er vollständig rückgängig gemacht (und die an den Rückruf zurückgegebene AsyncResult.status-Eigenschaft meldet einen Fehler):

      - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss die gleiche Anzahl von Zeilen aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, tritt bei dem Vorgang ein Fehler auf.

      - Jede Zeile und Zelle im Array muss die entsprechende Zeile oder Zelle in der Tabelle in den neu erstellten Spalten hinzufügen. Wenn eine Zeile oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, schlägt der gesamte Vorgang fehl.

      - Wenn Sie ein tabledaten-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit der der Tabelle übereinstimmen, die aktualisiert wird.

      Zusätzliche Bemerkung für Excel im Internet: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzigen Aufruf dieser Methode nicht überschreiten.
    name: 'addColumnsAsync(tableData, callback)'
    fullName: 'addColumnsAsync(tableData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addColumnsAsync(tableData: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableData
          description: 'Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenspalten enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.'
          type:
            - 'office!Office.TableBinding#addColumnsAsync~2:complex'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#addColumnsAsync~3:complex'
  - uid: 'office!Office.TableBinding#addRowsAsync:member(1)'
    summary: Fügt der Tabelle die angegebenen Daten als zusätzliche Zeilen hinzu.
    remarks: |-
      Der Erfolg oder Fehler eines addRowsAsync-Vorgangs ist atomar. Dies bedeutet, dass der gesamte Vorgang zum Hinzufügen von Spalten erfolgreich sein muss, andernfalls wird er vollständig rückgängig gemacht (und die an den Rückruf zurückgegebene AsyncResult.status-Eigenschaft meldet einen Fehler):

      - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss die gleiche Anzahl von Spalten aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, tritt bei dem Vorgang ein Fehler auf.

      - Jede Spalte und Zelle im Array muss diese Spalte oder Zelle in der Tabelle in den neu hinzugefügten Zeilen erfolgreich hinzufügen. Wenn eine Spalte oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, tritt bei der gesamten Operation ein Fehler auf.

      - Wenn Sie ein tabledaten-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit der der Tabelle übereinstimmen, die aktualisiert wird.

      Zusätzliche Bemerkung für Excel im Internet: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzigen Aufruf dieser Methode nicht überschreiten.

      #### <a name="examples"></a>Beispiele

      ```javascript
      function addRowsToTable() {
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              var binding = asyncResult.value;
              binding.addRowsAsync([["6", "k"], ["7", "j"]]);
          });
      }
      ```
    name: 'addRowsAsync(rows, options, callback)'
    fullName: 'addRowsAsync(rows, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addRowsAsync(rows: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rows
          description: 'Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenzeilen enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.'
          type:
            - 'office!Office.TableBinding#addRowsAsync~0:complex'
        - id: options
          description: 'Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#addRowsAsync~1:complex'
  - uid: 'office!Office.TableBinding#addRowsAsync:member(2)'
    summary: Fügt der Tabelle die angegebenen Daten als zusätzliche Zeilen hinzu.
    remarks: |-
      Der Erfolg oder Fehler eines addRowsAsync-Vorgangs ist atomar. Dies bedeutet, dass der gesamte Vorgang zum Hinzufügen von Spalten erfolgreich sein muss, andernfalls wird er vollständig rückgängig gemacht (und die an den Rückruf zurückgegebene AsyncResult.status-Eigenschaft meldet einen Fehler):

      - Jede Zeile im Array, das Sie als Daten Argument übergeben, muss die gleiche Anzahl von Spalten aufweisen wie die Tabelle, die aktualisiert wird. Wenn dies nicht der Fall ist, tritt bei dem Vorgang ein Fehler auf.

      - Jede Spalte und Zelle im Array muss diese Spalte oder Zelle in der Tabelle in den neu hinzugefügten Zeilen erfolgreich hinzufügen. Wenn eine Spalte oder Zelle aus irgendeinem Grund nicht festgelegt werden kann, tritt bei der gesamten Operation ein Fehler auf.

      - Wenn Sie ein tabledaten-Objekt als Daten Argument übergeben, muss die Anzahl der Kopfzeilen mit der der Tabelle übereinstimmen, die aktualisiert wird.

      Zusätzliche Bemerkung für Excel im Internet: die Gesamtanzahl der Zellen im an den Data-Parameter übergebenen Datenobjekt darf 20.000 in einem einzigen Aufruf dieser Methode nicht überschreiten.
    name: 'addRowsAsync(rows, callback)'
    fullName: 'addRowsAsync(rows, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addRowsAsync(rows: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rows
          description: 'Ein Array von Arrays ("Matrix") oder ein Table Data-Objekt, das eine oder mehrere Datenzeilen enthält, die der Tabelle hinzugefügt werden sollen. Erforderlich.'
          type:
            - 'office!Office.TableBinding#addRowsAsync~2:complex'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#addRowsAsync~3:complex'
  - uid: 'office!Office.TableBinding#clearFormatsAsync:member(1)'
    summary: Löscht Formatierung der gebundenen Tabelle.
    remarks: |-
      Weitere Informationen finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":
      Office.select("bindings#myBinding").clearFormatsAsync();
      ```
    name: 'clearFormatsAsync(options, callback)'
    fullName: 'clearFormatsAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearFormatsAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#clearFormatsAsync~0:complex'
  - uid: 'office!Office.TableBinding#clearFormatsAsync:member(2)'
    summary: Löscht Formatierung der gebundenen Tabelle.
    remarks: 'Weitere Informationen finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .'
    name: clearFormatsAsync(callback)
    fullName: clearFormatsAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearFormatsAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#clearFormatsAsync~1:complex'
  - uid: 'office!Office.TableBinding#columnCount:member'
    summary: Ruft die Anzahl der Spalten in der Tabellenbindung als ganzzahliger Wert ab.
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnCount: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          function showBindingColumnCount() {
              Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
                  write("Column: " + asyncResult.value.columnCount);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.TableBinding#deleteAllDataValuesAsync:member(1)'
    summary: 'Löscht alle Zeilen, bei denen es sich nicht um Kopfzeilen handelt, und ihre Werte in der Tabelle, wobei für die Hostanwendung entsprechend verschoben wird'
    remarks: |-
      Wenn die Tabelle in Excel über keine Kopfzeile verfügt, löscht diese Methode die Tabelle selbst.

      #### <a name="examples"></a>Beispiele

      ```javascript
      function deleteAllRowsFromTable() {
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              var binding = asyncResult.value;
              binding.deleteAllDataValuesAsync();
          });
      }
      ```
    name: 'deleteAllDataValuesAsync(options, callback)'
    fullName: 'deleteAllDataValuesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAllDataValuesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#deleteAllDataValuesAsync~0:complex'
  - uid: 'office!Office.TableBinding#deleteAllDataValuesAsync:member(2)'
    summary: 'Löscht alle Zeilen, bei denen es sich nicht um Kopfzeilen handelt, und ihre Werte in der Tabelle, wobei für die Hostanwendung entsprechend verschoben wird'
    remarks: 'Wenn die Tabelle in Excel über keine Kopfzeile verfügt, löscht diese Methode die Tabelle selbst.'
    name: deleteAllDataValuesAsync(callback)
    fullName: deleteAllDataValuesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAllDataValuesAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#deleteAllDataValuesAsync~1:complex'
  - uid: 'office!Office.TableBinding#getFormatsAsync:member(1)'
    summary: Ruft die Formatierung für die angegebenen Elemente in der Tabelle ab.
    remarks: |-
      **Zurückgegebene Formatstruktur**

      Jedes JavaScript-Objekt im Rückgabewert Array verfügt über folgendes Formular:`{cells:{ cell_range }, format:{ format_definition }}`

      Die `cells:` -Eigenschaft gibt den Bereich an, den Sie mit einem der folgenden Werte formatieren möchten:

      **Unterstützte Bereiche in Zelleneigenschaft**

      <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Bereich an, bei dem es sich um die nullbasierte n-te Zeile mit Daten in der Tabelle handelt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Bereich an, bei dem es sich um die nullbasierte n-te-Spalte mit Daten in der Tabelle handelt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jth-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>

      Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind (Klicken Sie mit der rechten Maustaste auf Zellen formatieren oder Zellen im &gt; Ausgangs &gt; Format formatieren &gt; ).
    name: 'getFormatsAsync(cellReference, formats, options, callback)'
    fullName: 'getFormatsAsync(cellReference, formats, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormatsAsync(cellReference?: any, formats?: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellReference
          description: 'Ein Objekt Literal, das Name/Wert-Paare enthält, die den Zellbereich angeben, aus dem die Formatierung abgerufen werden soll.'
          type:
            - any
        - id: formats
          description: 'Ein Array, das die abzurufenden Formateigenschaften angibt.'
          type:
            - 'any[]'
        - id: options
          description: 'Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein Array mit einem oder mehreren JavaScript-Objekten, die die Formatierung der entsprechenden Zellen angeben.'
          type:
            - 'office!Office.TableBinding#getFormatsAsync~0:complex'
  - uid: 'office!Office.TableBinding#getFormatsAsync:member(2)'
    summary: Ruft die Formatierung für die angegebenen Elemente in der Tabelle ab.
    remarks: |-
      **Zurückgegebene Formatstruktur**

      Jedes JavaScript-Objekt im Rückgabewert Array verfügt über folgendes Formular:`{cells:{ cell_range }, format:{ format_definition }}`

      Die `cells:` -Eigenschaft gibt den Bereich an, den Sie mit einem der folgenden Werte formatieren möchten:

      **Unterstützte Bereiche in Zelleneigenschaft**

      <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Bereich an, bei dem es sich um die nullbasierte n-te Zeile mit Daten in der Tabelle handelt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Bereich an, bei dem es sich um die nullbasierte n-te-Spalte mit Daten in der Tabelle handelt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jth-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>

      Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind (Klicken Sie mit der rechten Maustaste auf Zellen formatieren oder Zellen im &gt; Ausgangs &gt; Format formatieren &gt; ).
    name: 'getFormatsAsync(cellReference, formats, callback)'
    fullName: 'getFormatsAsync(cellReference, formats, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormatsAsync(cellReference?: any, formats?: any[], callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellReference
          description: 'Ein Objekt Literal, das Name/Wert-Paare enthält, die den Zellbereich angeben, aus dem die Formatierung abgerufen werden soll.'
          type:
            - any
        - id: formats
          description: 'Ein Array, das die abzurufenden Formateigenschaften angibt.'
          type:
            - 'any[]'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses ist ein Array mit einem oder mehreren JavaScript-Objekten, die die Formatierung der entsprechenden Zellen angeben.'
          type:
            - 'office!Office.TableBinding#getFormatsAsync~1:complex'
  - uid: 'office!Office.TableBinding#hasHeaders:member'
    summary: 'True, wenn die Tabelle über Kopfzeilen verfügt; andernfalls false. andernfalls false.'
    name: hasHeaders
    fullName: hasHeaders
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hasHeaders: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          function showBindingHasHeaders() {
              Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
                  write("Binding has headers: " + asyncResult.value.hasHeaders);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.TableBinding#rowCount:member'
    summary: Ruft die Anzahl der Zeilen in der Daten Bindungsinstanz als ganzzahligen Wert ab.
    remarks: |-
      Wenn Sie eine leere Tabelle einfügen, indem Sie eine einzelne Zeile in Excel 2013 und Excel im Internet auswählen (mithilfe der Tabelle auf der Registerkarte Einfügen), erstellen beide Office-Hostanwendungen eine einzelne Zeile mit Kopfzeilen, gefolgt von einer einzelnen leeren Zeile. Wenn das Add-in-Skript jedoch eine Bindung für diese neu eingefügte Tabelle erstellt (beispielsweise mithilfe der [Office. Bindings](xref:office!Office.Bindings:interface)<!-- -->. addFromSelectionAsync-Methode) und dann den Wert der RowCount-Eigenschaft überprüft, unterscheidet sich der zurückgegebene Wert je nachdem, ob die Kalkulationstabelle in Excel 2013 oder Excel im Internet geöffnet ist.

      - In Excel auf dem Desktop gibt ROWCOUNT 0 zurück (die leere Zeile nach den Kopfzeilen wird nicht gezählt).

      - In Excel im Internet gibt ROWCOUNT 1 zurück (die leere Zeile nach den Kopfzeilen wird gezählt).

      Sie können diesen Unterschied in Ihrem Skript umgehen, indem Sie prüfen, ob rowCount == 1 und falls dem so ist, prüfen Sie, ob die Zeile alle leeren Zeichenfolgen enthält.

      #### <a name="examples"></a>Beispiele

      ```javascript
      function showBindingRowCount() {
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write("Rows: " + asyncResult.value.rowCount);
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowCount: number;'
      return:
        type:
          - number
  - uid: 'office!Office.TableBinding#setFormatsAsync:member(1)'
    summary: Legt die Formatierung für bestimmte Elemente und Daten in der Tabelle fest.
    remarks: |-
      **Angeben des cellFormat-Parameters**

      Verwenden Sie den cellFormat-Parameter zum Ändern von Zellenformatwerten wie z. B. die Breite, Höhe, Schriftart, Ausrichtung usw. Der Wert, den Sie als cellFormat-Parameter übergeben, ist ein Array, das eine Liste mit einem oder mehreren JavaScript-Objekten enthält, die angeben, welche Zellen angezielt werden sollen (`cells:`<!-- -->) und die Formate (`format:`<!-- -->) auf diese anzuwenden.

      Jedes JavaScript-Objekt im cellFormat-Array verfügt über folgendes Formular:`{cells:{ cell_range }, format:{ format_definition }}`

      Die `cells:` -Eigenschaft gibt den Bereich an, den Sie mit einem der folgenden Werte formatieren möchten:

      **Unterstützte Bereiche in Zelleneigenschaft**

      <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Bereich an, bei dem es sich um die nullbasierte n-te Zeile mit Daten in der Tabelle handelt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Bereich an, bei dem es sich um die nullbasierte n-te-Spalte mit Daten in der Tabelle handelt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jth-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>

      Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind (Klicken Sie mit der rechten Maustaste auf Zellen formatieren oder Zellen im &gt; Ausgangs &gt; Format formatieren &gt; ).

      Sie geben den Wert der `format:` Eigenschaft als Liste mit einem oder mehreren Eigenschaften Name-Wert-Paaren in einem JavaScript-Objektliteral an. Der Name der Eigenschaft gibt den Namen der festzulegenden Formatierungseigenschaft an, und value gibt den Eigenschaftswert an. Sie können mehrere Werte für ein bestimmtes Format angeben, beispielsweise die Farbe und Größe der Schriftart.

      Im folgenden finden Sie drei `format:` Beispiele für Eigenschaftswerte:

      `//Set cells: font color to green and size to 15 points.`

      `format: {fontColor : "green", fontSize : 15}`

      `//Set cells: border to dotted blue.`

      `format: {borderStyle: "dotted", borderColor: "blue"}`

      `//Set cells: background to red and alignment to centered.`

      `format: {backgroundColor: "red", alignHorizontal: "center"}`

      Sie können Zahlenformate angeben, indem Sie die Zahlenformatierung "Code"-Zeichenfolge in der `numberFormat:` -Eigenschaft angeben. Die Formatzeichenfolgen, die Sie festlegen können, entsprechen denjenigen, die Sie in Excel mithilfe der Kategorie Benutzerdefiniert auf der Registerkarte Zahl im Dialogfeld Zellen formatieren festlegen können. Dieses Beispiel zeigt, wie Sie eine Zahl als Prozentsatz mit zwei Dezimalstellen formatieren:

      `format: {numberFormat:"0.00%"}`

      Weitere Informationen finden Sie unter [Erstellen eines benutzerdefinierten Zahlenformats](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.

      Wenn Sie beim Schreiben von Daten Formatierungen für Tabellen festlegen möchten, verwenden Sie die optionalen Parameter TableOptions und cellFormat der `Document.setSelectedDataAsync` or- `TableBinding.setDataAsync` Methoden.

      Das Festlegen der Formatierung mit den optionalen Parametern der `Document.setSelectedDataAsync` `TableBinding.setDataAsync` Methoden and funktioniert nur zum Festlegen der Formatierung beim ersten Schreiben von Daten. Um nach dem Schreiben von Daten Formatierungsänderungen vorzunehmen, verwenden Sie die folgenden Methoden:

      - Verwenden Sie die `TableBinding.setFormatsAsync` -Methode (diese Methode), um die Zellenformatierung wie Schriftfarbe und-Format zu aktualisieren.

      - Verwenden Sie die-Methode, um Tabellenoptionen wie etwa verbundene Zeilen und Filterschaltflächen zu aktualisieren `TableBinding.setTableOptions` .

      - Verwenden Sie die-Methode, um die Formatierung zu löschen `TableBinding.clearFormats` .

      Weitere Details und Beispiele finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // Specifying a single target
      // The following example shows a cellFormat value that sets the font color of the header row to red.
      Office.select("bindings#myBinding").setFormatsAsync(
          [{cells: Office.Table.Headers, format: {fontColor: "red"}}], 
          function (asyncResult){});

      // Specifying multiple targets
      // The setFormatsAsync method can support formatting multiple targets within the bound table in a 
      // single function call. To do that, you pass a list of objects in the cellFormat array 
      // for each target that you want to format.
      // For example, the following line of code will set the font color of the first row yellow, 
      // and the fourth cell in the third row to have a white border and bold text.
      Office.select("bindings#myBinding").setFormatsAsync(
          [{cells: {row: 1}, format: {fontColor: "yellow"}}, 
              {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}], 
          function (asyncResult){});

      // Additional remarks for Excel Online
      // The number of formatting groups passed to the cellFormat parameter can't exceed 100. 
      // A single formatting group consists of a set of formatting applied to a specified range of cells. 
      // For example, the following call passes two formatting groups to cellFormat.
      Office.select("bindings#myBinding").setFormatsAsync(
          [{cells: {row: 1}, format: {fontColor: "yellow"}}, 
              {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}], 
          function (asyncResult){});
      ```
    name: 'setFormatsAsync(cellFormat, options, callback)'
    fullName: 'setFormatsAsync(cellFormat, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormatsAsync(cellFormat: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellFormat
          description: 'Ein Array, das ein oder mehrere JavaScript-Objekte enthält, die angeben, welche Zellen betroffen sind und welche Formate darauf angewendet werden sollen.'
          type:
            - 'any[]'
        - id: options
          description: 'Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#setFormatsAsync~0:complex'
  - uid: 'office!Office.TableBinding#setFormatsAsync:member(2)'
    summary: Legt die Formatierung für bestimmte Elemente und Daten in der Tabelle fest.
    remarks: |-
      **Angeben des cellFormat-Parameters**

      Verwenden Sie den cellFormat-Parameter zum Ändern von Zellenformatwerten wie z. B. die Breite, Höhe, Schriftart, Ausrichtung usw. Der Wert, den Sie als cellFormat-Parameter übergeben, ist ein Array, das eine Liste mit einem oder mehreren JavaScript-Objekten enthält, die angeben, welche Zellen angezielt werden sollen (`cells:`<!-- -->) und die Formate (`format:`<!-- -->) auf diese anzuwenden.

      Jedes JavaScript-Objekt im cellFormat-Array verfügt über folgendes Formular:`{cells:{ cell_range }, format:{ format_definition }}`

      Die `cells:` -Eigenschaft gibt den Bereich an, den Sie mit einem der folgenden Werte formatieren möchten:

      **Unterstützte Bereiche in Zelleneigenschaft**

      <table> <tr> <th>Zellenbereicheinstellungen</th> <th>Beschreibung</th> </tr> <tr> <td>`{row: n}`</td> <td>Gibt den Bereich an, bei dem es sich um die nullbasierte n-te Zeile mit Daten in der Tabelle handelt.</td> </tr> <tr> <td>`{column: n}`</td> <td>Gibt den Bereich an, bei dem es sich um die nullbasierte n-te-Spalte mit Daten in der Tabelle handelt.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Gibt die einzelne Zelle an, die die ITH-Zeile und die Jth-Spalte der Tabelle darstellt.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Gibt die gesamte Tabelle, einschließlich Spaltenüberschriften, Daten und Ergebnissen (falls vorhanden) an.</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Gibt nur die Daten in der Tabelle an (keine Überschriften und Ergebnisse).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Gibt nur die Kopfzeile an.</td> </tr> </table>

      Die `format:` -Eigenschaft gibt Werte an, die einer Teilmenge der Einstellungen entsprechen, die im Dialogfeld Zellen formatieren in Excel verfügbar sind (Klicken Sie mit der rechten Maustaste auf Zellen formatieren oder Zellen im &gt; Ausgangs &gt; Format formatieren &gt; ).

      Sie geben den Wert der `format:` Eigenschaft als Liste mit einem oder mehreren Eigenschaften Name-Wert-Paaren in einem JavaScript-Objektliteral an. Der Name der Eigenschaft gibt den Namen der festzulegenden Formatierungseigenschaft an, und value gibt den Eigenschaftswert an. Sie können mehrere Werte für ein bestimmtes Format angeben, beispielsweise die Farbe und Größe der Schriftart.

      Im folgenden finden Sie drei `format:` Beispiele für Eigenschaftswerte:

      `//Set cells: font color to green and size to 15 points.`

      `format: {fontColor : "green", fontSize : 15}`

      `//Set cells: border to dotted blue.`

      `format: {borderStyle: "dotted", borderColor: "blue"}`

      `//Set cells: background to red and alignment to centered.`

      `format: {backgroundColor: "red", alignHorizontal: "center"}`

      Sie können Zahlenformate angeben, indem Sie die Zahlenformatierung "Code"-Zeichenfolge in der `numberFormat:` -Eigenschaft angeben. Die Formatzeichenfolgen, die Sie festlegen können, entsprechen denjenigen, die Sie in Excel mithilfe der Kategorie Benutzerdefiniert auf der Registerkarte Zahl im Dialogfeld Zellen formatieren festlegen können. Dieses Beispiel zeigt, wie Sie eine Zahl als Prozentsatz mit zwei Dezimalstellen formatieren:

      `format: {numberFormat:"0.00%"}`

      Weitere Informationen finden Sie unter [Erstellen eines benutzerdefinierten Zahlenformats](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4)<!-- -->.

      Wenn Sie beim Schreiben von Daten Formatierungen für Tabellen festlegen möchten, verwenden Sie die optionalen Parameter TableOptions und cellFormat der `Document.setSelectedDataAsync` or- `TableBinding.setDataAsync` Methoden.

      Das Festlegen der Formatierung mit den optionalen Parametern der `Document.setSelectedDataAsync` `TableBinding.setDataAsync` Methoden and funktioniert nur zum Festlegen der Formatierung beim ersten Schreiben von Daten. Um nach dem Schreiben von Daten Formatierungsänderungen vorzunehmen, verwenden Sie die folgenden Methoden:

      - Verwenden Sie die `TableBinding.setFormatsAsync` -Methode (diese Methode), um die Zellenformatierung wie Schriftfarbe und-Format zu aktualisieren.

      - Verwenden Sie die-Methode, um Tabellenoptionen wie etwa verbundene Zeilen und Filterschaltflächen zu aktualisieren `TableBinding.setTableOptions` .

      - Verwenden Sie die-Methode, um die Formatierung zu löschen `TableBinding.clearFormats` .

      Weitere Details und Beispiele finden Sie unter [Formatieren von Tabellen in Add-Ins für Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.
    name: 'setFormatsAsync(cellFormat, callback)'
    fullName: 'setFormatsAsync(cellFormat, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormatsAsync(cellFormat: any[], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellFormat
          description: 'Ein Array, das ein oder mehrere JavaScript-Objekte enthält, die angeben, welche Zellen betroffen sind und welche Formate darauf angewendet werden sollen.'
          type:
            - 'any[]'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#setFormatsAsync~1:complex'
  - uid: 'office!Office.TableBinding#setTableOptionsAsync:member(1)'
    summary: Aktualisiert Tabellenformatierungsoptionen für die gebundene Tabelle.
    remarks: |-
      **Anforderungsgruppe**: [nicht in einer Gruppe](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      In der Rückruffunktion, die Sie an die goToByIdAsync-Methode übergeben haben, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.

      <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da beim Festlegen von Formaten keine Daten oder Objekte zum Abrufen vorhanden sind.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>

      #### <a name="examples"></a>Beispiele

      ```javascript
      // The following example shows how to:
      // 1. Create an object literal that specifies the table formatting options to update on the bound table.
      // 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object
      //    with formatting setting as the tableOptions parameter.
      function updateTableFormatting(){
          var tableOptions = {bandedRows: true, filterButton: false, style: "TableStyleMedium3"}; 

          Office.select("bindings#myBinding").setTableOptionsAsync(tableOptions, function(asyncResult){});
      }
      ```
    name: 'setTableOptionsAsync(tableOptions, options, callback)'
    fullName: 'setTableOptionsAsync(tableOptions, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTableOptionsAsync(tableOptions: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableOptions
          description: 'Ein Objekt mit einer Liste von Eigenschaftsname-Wert-Paaren, welche die anzuwendenden Tabellenoptionen definieren.'
          type:
            - any
        - id: options
          description: 'Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#setTableOptionsAsync~0:complex'
  - uid: 'office!Office.TableBinding#setTableOptionsAsync:member(2)'
    summary: Aktualisiert Tabellenformatierungsoptionen für die gebundene Tabelle.
    remarks: |-
      **Anforderungsgruppe**: [nicht in einer Gruppe](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      In der Rückruffunktion, die Sie an die goToByIdAsync-Methode übergeben haben, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.

      <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da beim Festlegen von Formaten keine Daten oder Objekte zum Abrufen vorhanden sind.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>
    name: 'setTableOptionsAsync(tableOptions, callback)'
    fullName: 'setTableOptionsAsync(tableOptions, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTableOptionsAsync(tableOptions: any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableOptions
          description: 'Ein Objekt mit einer Liste von Eigenschaftsname-Wert-Paaren, welche die anzuwendenden Tabellenoptionen definieren.'
          type:
            - any
        - id: callback
          description: 'Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.'
          type:
            - 'office!Office.TableBinding#setTableOptionsAsync~1:complex'
references:
  - uid: 'office!Office.Binding:interface'
    name: Binding
  - uid: 'office!Office.TableBinding#addColumnsAsync~0:complex'
    name: 'TableData | any[][]'
    fullName: 'Office.TableData | any[][]'
    spec.typeScript:
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any[][]'
        fullName: ' | any[][]'
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.TableBinding#addColumnsAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#addColumnsAsync~2:complex'
    name: 'TableData | any[][]'
    fullName: 'Office.TableData | any[][]'
    spec.typeScript:
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any[][]'
        fullName: ' | any[][]'
  - uid: 'office!Office.TableBinding#addColumnsAsync~3:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#addRowsAsync~0:complex'
    name: 'TableData | any[][]'
    fullName: 'Office.TableData | any[][]'
    spec.typeScript:
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any[][]'
        fullName: ' | any[][]'
  - uid: 'office!Office.TableBinding#addRowsAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#addRowsAsync~2:complex'
    name: 'TableData | any[][]'
    fullName: 'Office.TableData | any[][]'
    spec.typeScript:
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any[][]'
        fullName: ' | any[][]'
  - uid: 'office!Office.TableBinding#addRowsAsync~3:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#clearFormatsAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#clearFormatsAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#deleteAllDataValuesAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#deleteAllDataValuesAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#getFormatsAsync~0:complex'
    name: '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
    fullName: '(result: Office.AsyncResult< ({ cells: any, format: any})[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: '< ({ cells: any, format: any})[]>) => void'
        fullName: '< ({ cells: any, format: any})[]>) => void'
  - uid: 'office!Office.TableBinding#getFormatsAsync~1:complex'
    name: '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
    fullName: '(result: Office.AsyncResult< ({ cells: any, format: any})[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: '< ({ cells: any, format: any})[]>) => void'
        fullName: '< ({ cells: any, format: any})[]>) => void'
  - uid: 'office!Office.TableBinding#setFormatsAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#setFormatsAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#setTableOptionsAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.TableBinding#setTableOptionsAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void