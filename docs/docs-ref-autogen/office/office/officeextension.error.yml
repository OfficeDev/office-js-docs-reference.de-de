### YamlMime:UniversalReference
items:
  - uid: 'office!OfficeExtension.Error:class'
    summary: 'Das Error-Objekt, das von zurückgegeben wird`context.sync()`<!-- -->, wenn eine Zusage aufgrund eines Fehlers bei der Verarbeitung der Anforderung zurückgewiesen wird.'
    name: OfficeExtension.Error
    fullName: OfficeExtension.Error
    langs:
      - typeScript
    type: class
    package: office!
    remarks: |-


      #### <a name="examples"></a>Beispiele

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the document body.
          var body = context.document.body;

          // Queue a command to insert text in to the beginning of the body.
          // This will cause an OfficeExtension.Error.
          body.insertText(0);

          // Synchronize the document state by executing the queued-up commands,
          // and return a promise to indicate task completion.
          return context.sync();
      })
      .catch(function (error) {
          if (error instanceof OfficeExtension.Error) {
              console.log('Error code and message: ' + error.toString());
          }
      });
      ```
    children:
      - 'office!OfficeExtension.Error#code:member'
      - 'office!OfficeExtension.Error#debugInfo:member'
      - 'office!OfficeExtension.Error#innerError:member'
      - 'office!OfficeExtension.Error#message:member'
      - 'office!OfficeExtension.Error#name:member'
      - 'office!OfficeExtension.Error#stack:member'
      - 'office!OfficeExtension.Error#traceMessages:member'
  - uid: 'office!OfficeExtension.Error#code:member'
    summary: 'Fehlercode Zeichenfolge, beispielsweise "InvalidArgument".'
    name: code
    fullName: code
    langs:
      - typeScript
    type: property
    syntax:
      content: 'code: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#debugInfo:member'
    summary: 'Debuginformationen (nützlich zur detaillierten Protokollierung des Fehlers, also über`JSON.stringify(...)`<!-- -->).'
    name: debugInfo
    fullName: debugInfo
    langs:
      - typeScript
    type: property
    syntax:
      content: 'debugInfo: DebugInfo;'
      return:
        type:
          - 'office!OfficeExtension.DebugInfo:interface'
  - uid: 'office!OfficeExtension.Error#innerError:member'
    summary: 'Interner Fehler, falls zutreffend.'
    name: innerError
    fullName: innerError
    langs:
      - typeScript
    type: property
    syntax:
      content: 'innerError: Error;'
      return:
        type:
          - 'office!OfficeExtension.Error:class'
  - uid: 'office!OfficeExtension.Error#message:member'
    summary: 'Die Fehlermeldung, die von der Host-Office-Anwendung übergeben wurde.'
    name: message
    fullName: message
    langs:
      - typeScript
    type: property
    syntax:
      content: 'message: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#name:member'
    summary: 'Fehler Name: "OfficeExtension. Error".'
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#stack:member'
    summary: Stapelüberwachung (falls zutreffend).
    name: stack
    fullName: stack
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stack: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#traceMessages:member'
    summary: 'Trace-Nachrichten (falls vorhanden), die über `context.trace()` einen Anruf vor dem Aufruf hinzugefügt wurden`context.sync()`<!-- -->. Wenn ein Fehler aufgetreten ist, enthält dies alle Ablaufverfolgungsmeldungen, die vor dem Auftreten des Fehlers ausgeführt wurden. Diese Nachrichten können Ihnen dabei helfen, die Programm Ausführungssequenz zu überwachen und den Fall des Fehlers zu erkennen.'
    name: traceMessages
    fullName: traceMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'traceMessages: string[];'
      return:
        type:
          - 'string[]'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          // The following example shows how you can instrument a batch of commands
          // to determine where an error occurred. The first batch successfully
          // inserts the first two paragraphs into the document and cause no errors.
          // The second batch successfully inserts the third and fourth paragraphs
          // but fails in the call to insert the fifth paragraph. All other commands
          // after the failed command in the batch are not executed, including the
          // command that adds the fifth trace message. In this case, the error
          // occurred after the fourth paragraph was inserted, and before adding the
          // fifth trace message.

          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert the paragraph at the end of the document body.
              // Start a batch of commands.
              body.insertParagraph('1st paragraph', Word.InsertLocation.end);
              // Queue a command for instrumenting this part of the batch.
              context.trace('1st paragraph successful');

              body.insertParagraph('2nd paragraph', Word.InsertLocation.end);
              context.trace('2nd paragraph successful');

              // Synchronize the document state by executing the queued-up commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  // Queue a command to insert the paragraph at the end of the document body.
                  // Start a new batch of commands.
                  body.insertParagraph('3rd paragraph', Word.InsertLocation.end);
                  context.trace('3rd paragraph successful');

                  body.insertParagraph('4th paragraph', Word.InsertLocation.end);
                  context.trace('4th paragraph successful');

                  // This command will cause an error. The trace messages in the queue up to
                  // this point will be available via Error.traceMessages.
                  body.insertParagraph(0, '5th paragraph', Word.InsertLocation.end);
                  // Queue a command for instrumenting this part of the batch.
                  // This trace message will not be set on Error.traceMessages.
                  context.trace('5th paragraph successful');
              }).then(context.sync);
          })
          .catch(function (error) {
              if (error instanceof OfficeExtension.Error) {
                  console.log('Trace messages: ' + error.traceMessages);
              }
          });

          // Output: "Trace messages: 3rd paragraph successful,4th paragraph successful"
          ```
references:
  - uid: 'office!OfficeExtension.DebugInfo:interface'
    name: DebugInfo
  - uid: 'office!OfficeExtension.Error:class'
    name: Error