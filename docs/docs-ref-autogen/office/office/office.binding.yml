### YamlMime:TSType
name: Office.Binding
uid: office!Office.Binding:interface
package: office!
fullName: Office.Binding
summary: >-
  Stellt eine Bindung an einen Abschnitt des Dokuments dar.


  Das Binding-Objekt macht die Funktionalität verfügbar, die alle Bindungen unabhängig vom Typ besitzen.


  Das Binding-Objekt wird nie direkt aufgerufen. Dabei handelt es sich um die abstrakte übergeordnete Klasse der Objekte, die die einzelnen Bindungstypen darstellen: [Office. MatrixBinding](xref:office!Office.MatrixBinding:interface)<!-- -->, [Office. Binding](xref:office!Office.TableBinding:interface)<!-- -->oder [Office. TextBinding](xref:office!Office.TextBinding:interface)<!-- -->. Alle drei Objekte erben die getDataAsync-und die setDataAsync-Methode des Binding-Objekts, mit dem Sie mit den Daten in der Bindung interagieren können. Außerdem erben Sie die Eigenschaften ID und Type zum Abfragen dieser Eigenschaftswerte. Darüber hinaus legen die Objekte MatrixBinding und Table Binding zusätzliche Methoden für Matrix-und tabellenspezifische Features offen, beispielsweise das zählen der Anzahl von Zeilen und Spalten.
remarks: >-
  **Hosts**: Excel, Word


  **Anforderungs Sätze**:


  - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)


  - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)


  - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)
isPreview: false
isDeprecated: false
type: interface
properties:
- name: document
  uid: office!Office.Binding#document:member
  package: office!
  fullName: document
  summary: Rufen Sie das der Bindung zugeordnete Document-Objekt ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'document: Office.Document;'
    return:
      type: <xref uid="office!Office.Document:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.document.url);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: id
  uid: office!Office.Binding#id:member
  package: office!
  fullName: id
  summary: Eine Zeichenfolge, die diese Bindung zwischen den Bindungen in demselben [Office.Document](xref:office!Office.Document:interface) -Objekt eindeutig identifiziert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'id: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"myBinding\", function (asyncResult) {\n    write(asyncResult.value.id);\n});\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: type
  uid: office!Office.Binding#type:member
  package: office!
  fullName: type
  summary: Ruft den Typ der Bindung ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'type: Office.BindingType;'
    return:
      type: <xref uid="office!Office.BindingType:enum" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOffice.context.document.bindings.getByIdAsync(\"MyBinding\", function (asyncResult) { \n    write(asyncResult.value.type); \n}) \n\n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message;  \n}\n```"
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.Binding#addHandlerAsync:member(1)
  package: office!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: Fügt dem Objekt einen Ereignishandler für den angegebenen [Office. EventType hinzu.](xref:office!Office.EventType:enum)<!-- -->. Unterstützte EventTypes sind `Office.EventType.BindingDataChanged` und `Office.EventType.BindingSelectionChanged`<!-- -->.
  remarks: >-
    **Anforderungsgruppe**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)


    Sie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange der Name jeder Ereignis Handlerfunktion eindeutig ist.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Der Ereignistyp. Für Bindungen kann es sein `Office.EventType.BindingDataChanged` oder `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Die Ereignis Handlerfunktion, die hinzugefügt werden soll, deren einziger Parameter vom Typ " [Office. BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) " oder " [Office. BindingSelectionChangedEventArgs](xref:office!Office.BindingSelectionChangedEventArgs:interface) " ist<!-- -->.
      type: any
    - id: options
      description: Stellt eine Option zum Beibehalten von Kontextdaten eines beliebigen Typs, unverändert, zur Verwendung in einem Rückruf bereit.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: office!Office.Binding#addHandlerAsync:member(2)
  package: office!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: Fügt dem Objekt einen Ereignishandler für den angegebenen [Office. EventType hinzu.](xref:office!Office.EventType:enum)<!-- -->. Unterstützte EventTypes sind `Office.EventType.BindingDataChanged` und `Office.EventType.BindingSelectionChanged`<!-- -->.
  remarks: "**Anforderungsgruppe**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)\n\nSie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange der Name jeder Ereignis Handlerfunktion eindeutig ist.\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code sample calls the select method of the Office object to access the binding\n// with ID \"MyBinding\", and then calls the addHandlerAsync method to add a handler function \n// for the bindingDataChanged event of that binding.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingDataChanged, onBindingDataChanged);\n}\n\nfunction onBindingDataChanged(eventArgs) {\n    write(\"Data has changed in binding: \" + eventArgs.binding.id);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To add an event handler for the BindingSelectionChanged event of a binding, \n// use the addHandlerAsync method of the Binding object.\n// The event handler receives an argument of type BindingSelectionChangedEventArgs.\nfunction addEventHandlerToBinding() {\n    Office.select(\"bindings#MyBinding\").addHandlerAsync(\n        Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);\n}\n\nfunction onBindingSelectionChanged(eventArgs) {\n    write(eventArgs.binding.id + \" has been selected.\");\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Der Ereignistyp. Für Bindungen kann es sein `Office.EventType.BindingDataChanged` oder `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Die Ereignis Handlerfunktion, die hinzugefügt werden soll, deren einziger Parameter vom Typ " [Office. BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) " oder " [Office. BindingSelectionChangedEventArgs](xref:office!Office.BindingSelectionChangedEventArgs:interface) " ist<!-- -->.
      type: any
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getDataAsync(options, callback)
  uid: office!Office.Binding#getDataAsync:member(1)
  package: office!
  fullName: getDataAsync(options, callback)
  summary: Gibt die in der Bindung enthaltenen Daten zurück.
  remarks: >-
    **Anforderungs Sätze**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von `Office.CoercionType.Html`<!-- -->)


    - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von `Office.CoercionType.Ooxml`<!-- -->)


    - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)


    - [Umwandlung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von `Office.CoercionType.Table`<!-- -->)


    - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)


    - [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von `Office.CoercionType.Text`<!-- -->)


    Wenn die getDataAsync-Methode von einer MatrixBinding-oder einer Tabellenbindung aufgerufen wird, gibt Sie eine Teilmenge der gebundenen Werte zurück, wenn die optionalen Parameter startRow, startColumn, ROWCOUNT und ColumnCount angegeben sind (und Sie einen zusammenhängenden und gültigen Bereich angeben).
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: options
      description: Enthält Optionen zum Abrufen der Daten in einer Bindung.
      type: <xref uid="office!Office.GetBindingDataOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses entspricht den Werten in der angegebenen Bindung. Wenn der `coercionType` Parameter angegeben ist (und der Aufruf erfolgreich ist), werden die Daten in dem im Thema CoercionType-Aufzählung beschriebenen Format zurückgegeben.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getDataAsync(callback)
  uid: office!Office.Binding#getDataAsync:member(2)
  package: office!
  fullName: getDataAsync(callback)
  summary: Gibt die in der Bindung enthaltenen Daten zurück.
  remarks: "**Anforderungs Sätze**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von `Office.CoercionType.Html`<!-- -->)\n\n- [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von `Office.CoercionType.Ooxml`<!-- -->)\n\n- [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)\n\n- [Umwandlung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von `Office.CoercionType.Table`<!-- -->)\n\n- [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)\n\n- [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von `Office.CoercionType.Text`<!-- -->)\n\nWenn die getDataAsync-Methode von einer MatrixBinding-oder einer Tabellenbindung aufgerufen wird, gibt Sie eine Teilmenge der gebundenen Werte zurück, wenn die optionalen Parameter startRow, startColumn, ROWCOUNT und ColumnCount angegeben sind (und Sie einen zusammenhängenden und gültigen Bereich angeben).\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction showBindingData() {\n    Office.select(\"bindings#MyBinding\").getDataAsync(function (asyncResult) {\n        write(asyncResult.value)\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// There is an important difference in behavior between using the \"table\" and \"matrix\" coercionType with the\n// Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following\n// two examples. These code examples show event handler functions for the Binding.SelectionChanged event.\n\n// If you specify the \"table\" coercionType, the TableData.rows property ( result.value.rows in the following\n// code example) returns an array that contains only the body rows of the table. So, its 0th row will be the\n// first non-header row in the table.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'table', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value.rows[0][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n\n// However, if you specify the \"matrix\" coercionType, result.value in the following code example returns an array\n// that contains the table header in the 0th row. If the table header contains multiple rows, then these are all\n// included in the result.value matrix as separate rows before the table body rows are included.\nfunction selectionChanged(evtArgs) { \n    Office.select(\"bindings#TableTranslate\").getDataAsync(\n        { coercionType: 'matrix', \n          startRow: evtArgs.startRow, \n          startCol: 0, \n          rowCount: 1, \n          columnCount: 1 },  \n        function (result) { \n            if (result.status == 'succeeded') { \n                write(\"Image to find: \" + result.value[1][0]); \n            } \n            else \n                write(result.error.message); \n    }); \n}     \n// Function that writes to a div with id='message' on the page. \nfunction write(message){ \n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataAsync<T>(callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->. Die `value` Eigenschaft des Ergebnisses entspricht den Werten in der angegebenen Bindung. Wenn der `coercionType` Parameter angegeben ist (und der Aufruf erfolgreich ist), werden die Daten in dem im Thema CoercionType-Aufzählung beschriebenen Format zurückgegeben.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: office!Office.Binding#removeHandlerAsync:member(1)
  package: office!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: Entfernt den angegebenen Handler aus der Bindung für den angegebenen Ereignistyp.
  remarks: '**Anforderungsgruppe**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Der Ereignistyp. Für Bindungen kann es sein `Office.EventType.BindingDataChanged` oder `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: options
      description: Enthält Optionen zum bestimmen, welche Ereignishandler oder Handler entfernt werden.
      type: <xref uid="office!Office.RemoveHandlerOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: office!Office.Binding#removeHandlerAsync:member(2)
  package: office!
  fullName: removeHandlerAsync(eventType, callback)
  summary: Entfernt den angegebenen Handler aus der Bindung für den angegebenen Ereignistyp.
  remarks: >-
    **Anforderungsgruppe**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)


    #### <a name="examples"></a>Beispiele


    ```javascript

    function removeEventHandlerFromBinding() {
        Office.select("bindings#MyBinding").removeHandlerAsync(
            Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Der Ereignistyp. Für Bindungen kann es sein `Office.EventType.BindingDataChanged` oder `Office.EventType.BindingSelectionChanged`<!-- -->.
      type: <xref uid="office!Office.EventType:enum" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setDataAsync(data, options, callback)
  uid: office!Office.Binding#setDataAsync:member(1)
  package: office!
  fullName: setDataAsync(data, options, callback)
  summary: Schreibt Daten in den gebundenen Abschnitt des Dokuments, die vom angegebenen Bindungsobjekt dargestellt werden.
  remarks: >-
    **Anforderungs Sätze**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von `Office.CoercionType.Html`<!-- -->)


    - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von `Office.CoercionType.Ooxml`<!-- -->)


    - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)


    - [Umwandlung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von `Office.CoercionType.Table`<!-- -->)


    - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)


    - [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von `Office.CoercionType.Text`<!-- -->)


    Der für Data übergebene Wert enthält die Daten, die in die Bindung geschrieben werden sollen. Der übergebene Wert bestimmt, wie in der folgenden Tabelle dargestellt, was in die Bindung geschrieben werden soll.


    <table> <tr> <th>`data` Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Nur-Text oder alles, was in eine Zeichenfolge umgewandelt werden kann, wird geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays ("Matrix")</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Wenn Sie eine einzelne Spalte aus drei Zeilen schreiben möchten, übergeben Sie ein Array wie das folgende: `[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>Ein `TableData` Objekt</td> <td>Eine Tabelle mit Kopfzeilen wird geschrieben.</td> </tr> </table>


    Außerdem werden diese anwendungsspezifischen Aktionen angewendet, wenn Daten in eine Bindung geschrieben werden. Für Word werden die angegebenen Daten wie folgt in die Bindung geschrieben:


    <table> <tr> <th>`data` Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text wird geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays ("Matrix") oder ein `TableData` Objekt</td> <td>Word-Tabelle wird geschrieben.</td> </tr> <tr> <td>HTML</td> <td>Der angegebene HTML-Code wird geschrieben. Wenn der geschriebene HTML-Code ungültig ist, löst Word keinen Fehler aus. Der HTML-Code wird in Word so weit wie möglich geschrieben, und alle ungültigen Daten werden weggelassen.</td> </tr> <tr> <td>Office Open XML ("Open XML")</td> <td>Der angegebene XML-Code wird geschrieben.</td> </tr> </table>


    In Excel werden die angegebenen data wie folgt in die Bindung geschrieben:


    <table> <tr> <th>`data` Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text wird als Wert der ersten gebundenen Zelle eingefügt. Sie können auch eine gültige Formel angeben, um diese Formel zur gebundenen Zelle hinzuzufügen. Indem Sie den Wert data auf `"=SUM(A1:A5)"` festlegen, wird das Ergebnis der Werte im angegebenen Bereich angezeigt. Wenn Sie jedoch eine Formel für die gebundene Zelle festlegen, können Sie die hinzugefügte Formel (oder eine bereits vorhandene Formel) anschließend nicht mehr aus der gebundenen Zelle lesen. Wenn Sie die Binding.getDataAsync-Methode in der gebundenen Zelle aufrufen, um die Daten auszulesen, kann die Methode nur die in der Zelle angezeigten Daten (das Formelergebnis) zurückgeben.</td> </tr> <tr> <td>Ein Array von Arrays ("Matrix"), die Form entspricht genau der Form der angegebenen Bindung entspricht</td> <td>Die Gruppe von Zeilen und Spalten wird geschrieben. Sie können auch ein Array von Arrays angeben, die gültige Formeln enthalten, um Sie den gebundenen Zellen hinzuzufügen. Wenn Sie beispielsweise Daten festlegen, `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` werden diese beiden Formeln einer Bindung hinzugefügt, die zwei Zellen enthält. Genau wie beim Festlegen einer Formel für eine einzelne gebundene Zelle können Sie die hinzugefügten Formeln (oder bereits vorhandene Formeln) aus der Bindung nicht mit der `Binding.getDataAsync` -Methode lesen, sondern nur die Daten, die in den gebundenen Zellen angezeigt werden.</td> </tr> <tr> <td>Ein `TableData` Objekt, und die Form der Tabelle entspricht der gebundenen Tabelle.</td> <td>Der angegebene Satz von Zeilen und/oder Kopfzeilen wird geschrieben, falls keine anderen Daten in angrenzenden Zellen überschrieben werden. **Hinweis**: Wenn Sie Formeln im Datenobjekt angeben, das Sie für den *Data* -Parameter übergeben, erhalten Sie möglicherweise nicht die erwarteten Ergebnisse aufgrund der Funktion "berechnete Spalten" von Excel, die Formeln in einer Spalte automatisch dupliziert. Wenn Sie dies beim Schreiben der *data*, die Formeln einer gebundenen Tabelle enthalten, umgehen möchten, geben Sie die Daten als einen Array von Arrays an (statt eines TableData-Objekts) und geben Sie den *coercionType* als Microsoft.Office.Matrix oder "Matrix" an.</td> </tr> </table>


    Für Excel im Internet:


    - Die Gesamtzahl der Zellen im Wert, die an den Data-Parameter übergeben werden, darf 20.000 in einem einzigen Aufruf dieser Methode nicht überschreiten.


    - Die Anzahl der Formatierungs Gruppen, die an den cellFormat-Parameter übergeben werden, darf 100 nicht überschreiten. Eine einzelne Formatierungsgruppe besteht aus einem Formatierungssatz, der auf einen bestimmten Zellenbereich angewendet wird.


    In allen anderen Fällen wird ein Fehler zurückgegeben.


    Die setDataAsync-Methode schreibt Daten in einer Teilmenge einer Tabelle oder Matrix Bindung, wenn die optionalen startRow-und startColumn-Parameter angegeben werden und ein gültiger Bereich angegeben wird.


    In der callback-Funktion, die an die setDataAsync-Methode weitergegeben wird, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.


    <table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, weil kein Objekt oder Daten zum Abruf existieren.</td> </tr> <tr> <td>AsyncResult. Status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Die in der aktuellen Auswahl festzulegenden Daten. Mögliche Datentypen nach Host:


        Zeichenfolge: Excel im Internet und Windows und Word im Internet und nur Windows


        Array von Arrays: nur Excel und Word


        [Office. tabellendata](xref:office!Office.TableData:class)<!-- -->: Nur Excel und Word


        HTML: Word im Internet und nur Windows


        Office Open XML: nur Word
      type: <xref uid="office!Office.TableData:class" /> | any
    - id: options
      description: Enthält Optionen zum Festlegen der Daten in einer Bindung.
      type: <xref uid="office!Office.SetBindingDataOptions:interface" />
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setDataAsync(data, callback)
  uid: office!Office.Binding#setDataAsync:member(2)
  package: office!
  fullName: setDataAsync(data, callback)
  summary: Schreibt Daten in den gebundenen Abschnitt des Dokuments, die vom angegebenen Bindungsobjekt dargestellt werden.
  remarks: "**Anforderungs Sätze**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (bei Verwendung von `Office.CoercionType.Html`<!-- -->)\n\n- [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (bei Verwendung von `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (bei Verwendung von `Office.CoercionType.Ooxml`<!-- -->)\n\n- [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)\n\n- [Umwandlung](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (bei Verwendung von `Office.CoercionType.Table`<!-- -->)\n\n- [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)\n\n- [Textzwang](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (bei Verwendung von `Office.CoercionType.Text`<!-- -->)\n\nDer für Data übergebene Wert enthält die Daten, die in die Bindung geschrieben werden sollen. Der übergebene Wert bestimmt, wie in der folgenden Tabelle dargestellt, was in die Bindung geschrieben werden soll.\n\n<table> <tr> <th>`data` Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Nur-Text oder alles, was in eine Zeichenfolge umgewandelt werden kann, wird geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays (\"Matrix\")</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`<!-- -->. Wenn Sie eine einzelne Spalte aus drei Zeilen schreiben möchten, übergeben Sie ein Array wie das folgende: `[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`<!-- -->.</td> </tr> <tr> <td>Ein `TableData` Objekt</td> <td>Eine Tabelle mit Kopfzeilen wird geschrieben.</td> </tr> </table>\n\nAußerdem werden diese anwendungsspezifischen Aktionen angewendet, wenn Daten in eine Bindung geschrieben werden. Für Word werden die angegebenen Daten wie folgt in die Bindung geschrieben:\n\n<table> <tr> <th>`data` Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text wird geschrieben.</td> </tr> <tr> <td>Ein Array von Arrays (\"Matrix\") oder ein `TableData` Objekt</td> <td>Word-Tabelle wird geschrieben.</td> </tr> <tr> <td>HTML</td> <td>Der angegebene HTML-Code wird geschrieben. Wenn der geschriebene HTML-Code ungültig ist, löst Word keinen Fehler aus. Der HTML-Code wird in Word so weit wie möglich geschrieben, und alle ungültigen Daten werden weggelassen.</td> </tr> <tr> <td>Office Open XML (\"Open XML\")</td> <td>Der angegebene XML-Code wird geschrieben.</td> </tr> </table>\n\nIn Excel werden die angegebenen data wie folgt in die Bindung geschrieben:\n\n<table> <tr> <th>`data` Wert</th> <th>Geschriebene Daten</th> </tr> <tr> <td>Eine Zeichenfolge</td> <td>Der angegebene Text wird als Wert der ersten gebundenen Zelle eingefügt. Sie können auch eine gültige Formel angeben, um diese Formel zur gebundenen Zelle hinzuzufügen. Indem Sie den Wert data auf `\"=SUM(A1:A5)\"` festlegen, wird das Ergebnis der Werte im angegebenen Bereich angezeigt. Wenn Sie jedoch eine Formel für die gebundene Zelle festlegen, können Sie die hinzugefügte Formel (oder eine bereits vorhandene Formel) anschließend nicht mehr aus der gebundenen Zelle lesen. Wenn Sie die Binding.getDataAsync-Methode in der gebundenen Zelle aufrufen, um die Daten auszulesen, kann die Methode nur die in der Zelle angezeigten Daten (das Formelergebnis) zurückgeben.</td> </tr> <tr> <td>Ein Array von Arrays (\"Matrix\"), die Form entspricht genau der Form der angegebenen Bindung entspricht</td> <td>Die Gruppe von Zeilen und Spalten wird geschrieben. Sie können auch ein Array von Arrays angeben, die gültige Formeln enthalten, um Sie den gebundenen Zellen hinzuzufügen. Wenn Sie beispielsweise Daten festlegen, `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` werden diese beiden Formeln einer Bindung hinzugefügt, die zwei Zellen enthält. Genau wie beim Festlegen einer Formel für eine einzelne gebundene Zelle können Sie die hinzugefügten Formeln (oder bereits vorhandene Formeln) aus der Bindung nicht mit der `Binding.getDataAsync` -Methode lesen, sondern nur die Daten, die in den gebundenen Zellen angezeigt werden.</td> </tr> <tr> <td>Ein `TableData` Objekt, und die Form der Tabelle entspricht der gebundenen Tabelle.</td> <td>Der angegebene Satz von Zeilen und/oder Kopfzeilen wird geschrieben, falls keine anderen Daten in angrenzenden Zellen überschrieben werden. **Hinweis**: Wenn Sie Formeln im Datenobjekt angeben, das Sie für den *Data* -Parameter übergeben, erhalten Sie möglicherweise nicht die erwarteten Ergebnisse aufgrund der Funktion \"berechnete Spalten\" von Excel, die Formeln in einer Spalte automatisch dupliziert. Wenn Sie dies beim Schreiben der *data*, die Formeln einer gebundenen Tabelle enthalten, umgehen möchten, geben Sie die Daten als einen Array von Arrays an (statt eines TableData-Objekts) und geben Sie den *coercionType* als Microsoft.Office.Matrix oder \"Matrix\" an.</td> </tr> </table>\n\nFür Excel im Internet:\n\n- Die Gesamtzahl der Zellen im Wert, die an den Data-Parameter übergeben werden, darf 20.000 in einem einzigen Aufruf dieser Methode nicht überschreiten.\n\n- Die Anzahl der Formatierungs Gruppen, die an den cellFormat-Parameter übergeben werden, darf 100 nicht überschreiten. Eine einzelne Formatierungsgruppe besteht aus einem Formatierungssatz, der auf einen bestimmten Zellenbereich angewendet wird.\n\nIn allen anderen Fällen wird ein Fehler zurückgegeben.\n\nDie setDataAsync-Methode schreibt Daten in einer Teilmenge einer Tabelle oder Matrix Bindung, wenn die optionalen startRow-und startColumn-Parameter angegeben werden und ein gültiger Bereich angegeben wird.\n\nIn der callback-Funktion, die an die setDataAsync-Methode weitergegeben wird, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.\n\n<table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, weil kein Objekt oder Daten zum Abruf existieren.</td> </tr> <tr> <td>AsyncResult. Status</td> <td>Bestimmen Sie, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Greifen Sie auf ein Error-Objekt zu, das nach einem fehlgeschlagenen Vorgang Fehlerinformationen bereitstellt.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDataAsync(data: TableData | any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Die in der aktuellen Auswahl festzulegenden Daten. Mögliche Datentypen nach Host:


        Zeichenfolge: Excel im Internet und Windows und Word im Internet und nur Windows


        Array von Arrays: nur Excel und Word


        `TableData`<!-- -->: Nur Excel und Word


        HTML: Word im Internet und nur Windows


        Office Open XML: nur Word
      type: <xref uid="office!Office.TableData:class" /> | any
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 911e6146ab18fe4fbc4129b3e53d72949dbccd6f
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49151366"
