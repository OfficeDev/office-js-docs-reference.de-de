### YamlMime:UniversalReference
ms.openlocfilehash: 76d0713ffe5aa33cf020eb37a24a216e9adbc93c
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/20/2018
ms.locfileid: "24046633"
items:
- uid: office.Office.CustomXmlNode
  summary: <span data-ttu-id="8a86b-101">Stellt einen XML-Knoten in einer Struktur in einem Dokument dar.</span><span class="sxs-lookup"><span data-stu-id="8a86b-101">Represents an XML node in a tree in a document.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="8a86b-102">Anforderungssätze</span><span class="sxs-lookup"><span data-stu-id="8a86b-102">Requirement Sets</span></span></td><td><span data-ttu-id="8a86b-103">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="8a86b-103">CustomXmlParts</span></span></td></tr></table>


    <span data-ttu-id="8a86b-104">**Supportdetails**</span><span class="sxs-lookup"><span data-stu-id="8a86b-104">**Support details**</span></span>


    <span data-ttu-id="8a86b-105">In der folgenden Matrix ein großes Y gibt an, dass diese Schnittstelle in der entsprechenden Office-hostanwendung unterstützt wird.</span><span class="sxs-lookup"><span data-stu-id="8a86b-105">A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host application.</span></span> <span data-ttu-id="8a86b-106">Eine leere Zelle gibt an, dass die Office-hostanwendung diese Schnittstelle nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="8a86b-106">An empty cell indicates that the Office host application doesn't support this interface.</span></span>


    <span data-ttu-id="8a86b-107">Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="8a86b-107">For more information about Office host application and server requirements, see [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span></span>


    <span data-ttu-id="8a86b-108">*Unterstützte Hosts nach Plattform*</span><span class="sxs-lookup"><span data-stu-id="8a86b-108">*Supported hosts, by platform*</span></span> <table> <tr><th> </th><th> <span data-ttu-id="8a86b-109">Office für Windows Desktop</span><span class="sxs-lookup"><span data-stu-id="8a86b-109">Office for Windows desktop</span></span> </th><th> <span data-ttu-id="8a86b-110">Office Online (im Browser)</span><span class="sxs-lookup"><span data-stu-id="8a86b-110">Office Online (in browser)</span></span> </th><th> <span data-ttu-id="8a86b-111">Office für iPad</span><span class="sxs-lookup"><span data-stu-id="8a86b-111">Office for iPad</span></span> </th></tr> <tr><td><span data-ttu-id="8a86b-112"><strong>Word</strong></span><span class="sxs-lookup"><span data-stu-id="8a86b-112"><strong> Word </strong></span></span></td><td> <span data-ttu-id="8a86b-113">v</span><span class="sxs-lookup"><span data-stu-id="8a86b-113">Y</span></span> </td><td> <span data-ttu-id="8a86b-114">v</span><span class="sxs-lookup"><span data-stu-id="8a86b-114">Y</span></span> </td><td> <span data-ttu-id="8a86b-115">v</span><span class="sxs-lookup"><span data-stu-id="8a86b-115">Y</span></span> </td></tr> </table>
  name: Office.CustomXmlNode
  fullName: office.Office.CustomXmlNode
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.CustomXmlNode.baseName
  - office.Office.CustomXmlNode.getNodesAsync
  - office.Office.CustomXmlNode.getNodeValueAsync
  - office.Office.CustomXmlNode.getTextAsync
  - office.Office.CustomXmlNode.getXmlAsync
  - office.Office.CustomXmlNode.namespaceUri
  - office.Office.CustomXmlNode.nodeType
  - office.Office.CustomXmlNode.setNodeValueAsync
  - office.Office.CustomXmlNode.setTextAsync
  - office.Office.CustomXmlNode.setXmlAsync
- uid: office.Office.CustomXmlNode.baseName
  summary: <span data-ttu-id="8a86b-116">Ruft den Basisnamen des Knotens ohne Namespacepräfix ab, falls vorhanden.</span><span class="sxs-lookup"><span data-stu-id="8a86b-116">Gets the base name of the node without the namespace prefix, if one exists.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"8a86b-117\">Anforderungssätze</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-117\">Requirement Sets</span></span></td><td><span data-ttu-id=\"8a86b-118\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-118\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"8a86b-119\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-119\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeBaseNames() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.baseName);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: baseName
  fullName: office.Office.CustomXmlNode.baseName
  langs:
  - typeScript
  type: property
  syntax:
    content: 'baseName: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.getNodesAsync
  summary: <span data-ttu-id="8a86b-120">Ruft die Knoten zugeordnet den XPath-Ausdruck ab.</span><span class="sxs-lookup"><span data-stu-id="8a86b-120">Gets the nodes associated with the XPath expression.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"8a86b-121\">Anforderungssätze</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-121\">Requirement Sets</span></span></td><td><span data-ttu-id=\"8a86b-122\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-122\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"8a86b-123\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-123\">Examples</span></span>\n\n```javascript\nfunction showXmlChildNodes() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getNodesAsync('*', function (nodeResults) {\n                    write(nodeResults.value.length + \" childNodes\");\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getNodesAsync(xPath, options, callback)
  fullName: office.Office.CustomXmlNode.getNodesAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xPath
      description: <span data-ttu-id="8a86b-124">Der XPath-Ausdruck, der die abzurufenden Knoten angibt.</span><span class="sxs-lookup"><span data-stu-id="8a86b-124">The XPath expression that specifies the nodes to get.</span></span> <span data-ttu-id="8a86b-125">Erforderlich. </span><span class="sxs-lookup"><span data-stu-id="8a86b-125">Required.</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="8a86b-126">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="8a86b-126">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="8a86b-127">Optional.</span><span class="sxs-lookup"><span data-stu-id="8a86b-127">Optional.</span></span> <span data-ttu-id="8a86b-128">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="8a86b-128">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="8a86b-129">Die `value` -Eigenschaft des Ergebnisses ist ein Array von CustomXmlNode-Objekten, die durch den XPath-Ausdruck übergeben angegebenen Knoten darstellen, der `xPath` Parameter.</span><span class="sxs-lookup"><span data-stu-id="8a86b-129">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the `xPath` parameter.</span></span>
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlNode.getNodeValueAsync
  summary: <span data-ttu-id="8a86b-130">Ruft den Wert des Knotens ab.</span><span class="sxs-lookup"><span data-stu-id="8a86b-130">Gets the node value.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"8a86b-131\">Anforderungssätze</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-131\">Requirement Sets</span></span></td><td><span data-ttu-id=\"8a86b-132\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-132\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"8a86b-133\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-133\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeValues() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getNodeValueAsync(function (asyncResult) {\n                    write(asyncResult.value);\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getNodeValueAsync(options, callback)
  fullName: office.Office.CustomXmlNode.getNodeValueAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodeValueAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="8a86b-134">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="8a86b-134">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="8a86b-135">Optional.</span><span class="sxs-lookup"><span data-stu-id="8a86b-135">Optional.</span></span> <span data-ttu-id="8a86b-136">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="8a86b-136">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="8a86b-137">Die `value` -Eigenschaft das Ergebnis ist eine Zeichenfolge mit dem Wert des Knotens verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="8a86b-137">The `value` property of the result is a string that contains the value of the referenced node.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getTextAsync
  summary: <span data-ttu-id="8a86b-138">Ruft den Text eines XML-Knotens in eine benutzerdefinierte XML-Komponente ab.</span><span class="sxs-lookup"><span data-stu-id="8a86b-138">Gets the text of an XML node in a custom XML part.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"8a86b-139\">Anforderungssätze</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-139\">Requirement Sets</span></span></td><td><span data-ttu-id=\"8a86b-140\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-140\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"8a86b-141\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-141\">Examples</span></span>\n\n```javascript\n// Get the built-in core properties XML part by using its ID. This results in a call to Word.\nOffice.context.document.customXmlParts.getByIdAsync(\n    \"{6C3C8BC8-F283-45AE-878A-BAB7291924A1}\", function (getByIdAsyncResult) {\n    \n    // Access the XML part.\n    var xmlPart = getByIdAsyncResult.value;\n    \n    // Add namespaces to the namespace manager. These two calls result in two calls to Word.\n    xmlPart.namespaceManager.addNamespaceAsync(\n        'cp',\n        'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n        function () {\n        xmlPart.namespaceManager.addNamespaceAsync(\n            'dc', \n            'http://purl.org/dc/elements/1.1/', \n            function () {\n\n            // Get XML nodes by using an Xpath expression. This results in a call to Word.\n            xmlPart.getNodesAsync(\"/cp:coreProperties/dc:title\", function (getNodesAsyncResult) {\n                \n                // Get the first node returned by using the Xpath expression. \n                var node = getNodesAsyncResult.value[0];\n                \n                // Get the text value of the node and use the asyncContext. This results in a call to Word. \n                // The results are logged to the browser console.\n                node.getTextAsync({asyncContext: \"StateNormal\"}, function (getTextAsyncResult) {\n                  console.log(\"Text of the title element = \" + getTextAsyncResult.value;\n                  console.log(\"The asyncContext value = \" + getTextAsyncResult.asyncContext;\n                });\n            });\n        });\n    });\n});\n```"
  name: getTextAsync(options, callback)
  fullName: office.Office.CustomXmlNode.getTextAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="8a86b-142">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="8a86b-142">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="8a86b-143">Optional.</span><span class="sxs-lookup"><span data-stu-id="8a86b-143">Optional.</span></span> <span data-ttu-id="8a86b-144">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="8a86b-144">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="8a86b-145">Die `value` -Eigenschaft das Ergebnis ist eine Zeichenfolge, die den inneren Text der referenzierten Knoten enthält.</span><span class="sxs-lookup"><span data-stu-id="8a86b-145">The `value` property of the result is a string that contains the inner text of the referenced nodes.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getXmlAsync
  summary: <span data-ttu-id="8a86b-146">Ruft den Knoten XML ab.</span><span class="sxs-lookup"><span data-stu-id="8a86b-146">Gets the node's XML.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"8a86b-147\">Anforderungssätze</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-147\">Requirement Sets</span></span></td><td><span data-ttu-id=\"8a86b-148\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-148\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"8a86b-149\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-149\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeInnerXml() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getXmlAsync(function (asyncResult) {\n                    write(asyncResult.value);\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getXmlAsync(options, callback)
  fullName: office.Office.CustomXmlNode.getXmlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="8a86b-150">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="8a86b-150">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="8a86b-151">Optional.</span><span class="sxs-lookup"><span data-stu-id="8a86b-151">Optional.</span></span> <span data-ttu-id="8a86b-152">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="8a86b-152">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="8a86b-153">Die `value` -Eigenschaft das Ergebnis ist eine Zeichenfolge, die den XML-Code des Knotens verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="8a86b-153">The `value` property of the result is a string that contains the XML of the referenced node.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.namespaceUri
  summary: <span data-ttu-id="8a86b-154">Ruft die Zeichenfolgendarstellung der GUID des CustomXMLPart ab.</span><span class="sxs-lookup"><span data-stu-id="8a86b-154">Retrieves the string GUID of the CustomXMLPart.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"8a86b-155\">Anforderungssätze</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-155\">Requirement Sets</span></span></td><td><span data-ttu-id=\"8a86b-156\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-156\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"8a86b-157\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-157\">Examples</span></span>\n\n```javascript\nfunction showXmlNamespaceUri() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.namespaceUri);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: namespaceUri
  fullName: office.Office.CustomXmlNode.namespaceUri
  langs:
  - typeScript
  type: property
  syntax:
    content: 'namespaceUri: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.nodeType
  summary: <span data-ttu-id="8a86b-158">Ruft den Typ des CustomXMLNode-Objekts ab.</span><span class="sxs-lookup"><span data-stu-id="8a86b-158">Gets the type of the CustomXMLNode.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"8a86b-159\">Anforderungssätze</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-159\">Requirement Sets</span></span></td><td><span data-ttu-id=\"8a86b-160\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-160\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"8a86b-161\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-161\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeType() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.nodeType);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: nodeType
  fullName: office.Office.CustomXmlNode.nodeType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'nodeType: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.setNodeValueAsync
  summary: <span data-ttu-id="8a86b-162">Legt den Wert des Knotens fest.</span><span class="sxs-lookup"><span data-stu-id="8a86b-162">Sets the node value.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"8a86b-163\">Anforderungssätze</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-163\">Requirement Sets</span></span></td><td><span data-ttu-id=\"8a86b-164\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-164\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"8a86b-165\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-165\">Examples</span></span>\n\n```javascript\nfunction setXmlNodeValue() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node);\n                node.setNodeValueAsync(\"item number\" + i, {}, function (result) { });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: setNodeValueAsync(value, options, callback)
  fullName: office.Office.CustomXmlNode.setNodeValueAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setNodeValueAsync(value: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: value
      description: <span data-ttu-id="8a86b-166">Der Wert für den Knoten festgelegt werden soll</span><span class="sxs-lookup"><span data-stu-id="8a86b-166">The value to be set on the node</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="8a86b-167">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="8a86b-167">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="8a86b-168">Optional.</span><span class="sxs-lookup"><span data-stu-id="8a86b-168">Optional.</span></span> <span data-ttu-id="8a86b-169">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="8a86b-169">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setTextAsync
  summary: <span data-ttu-id="8a86b-170">Legt den Text eines XML-Knotens in einer benutzerdefinierten XML-Komponente asynchron fest.</span><span class="sxs-lookup"><span data-stu-id="8a86b-170">Asynchronously sets the text of an XML node in a custom XML part.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"8a86b-171\">Hosts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-171\">Hosts</span></span></td><td><span data-ttu-id=\"8a86b-172\">Word</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-172\">Word</span></span></td></tr>\n\n<tr><td><span data-ttu-id=\"8a86b-173\">Anforderungssätze</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-173\">Requirement Sets</span></span></td><td><span data-ttu-id=\"8a86b-174\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-174\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"8a86b-175\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"8a86b-175\">Examples</span></span>\n\n```javascript\n// Learn how to set the text value of a node in a custom XML part from the following example.\n\n// Get the built-in core properties XML part by using its ID. This results in a call to Word.\nOffice.context.document.customXmlParts.getByIdAsync(\n    \"{6C3C8BC8-F283-45AE-878A-BAB7291924A1}\",\n    function (getByIdAsyncResult) {\n    \n    // Access the XML part.\n    var xmlPart = getByIdAsyncResult.value;\n    \n    // Add namespaces to the namespace manager. These two calls result in two calls to Word.\n    xmlPart.namespaceManager.addNamespaceAsync(\n        'cp', \n        'http://schemas.openxmlformats.org/package/2006/metadata/core-properties', \n        function () {\n        xmlPart.namespaceManager.addNamespaceAsync(\n            'dc', \n            'http://purl.org/dc/elements/1.1/', \n            function () {\n\n            // Get XML nodes by using an Xpath expression. This results in a call to the host.\n            xmlPart.getNodesAsync(\"/cp:coreProperties/dc:subject\", function (getNodesAsyncResult) {\n                \n                // Get the first node returned by using the Xpath expression.\n                // This will be the subject element in this example.\n                var subjectNode = getNodesAsyncResult.value[0];\n                \n                // Set the text value of the subject node and use the asyncContext. \n                // This results in a call to the host.  The results are logged to the browser console.\n                subjectNode.setTextAsync(\n                    \"newSubject\", \n                    {asyncContext: \"StateNormal\"}, \n                    function (setTextAsyncResult) {\n                        console.log(\"The status of the call: \" + setTextAsyncResult.status);\n                        console.log(\"The asyncContext value = \" + setTextAsyncResult.asyncContext);\n                });\n            });\n        });\n    });\n});\n```"
  name: setTextAsync(text, options, callback)
  fullName: office.Office.CustomXmlNode.setTextAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTextAsync(text: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: text
      description: <span data-ttu-id="8a86b-p108">Erforderlich. Der Textwert des XML-Knotens.</span><span class="sxs-lookup"><span data-stu-id="8a86b-p108">Required. The text value of the XML node.</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="8a86b-178">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="8a86b-178">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="8a86b-179">Optional.</span><span class="sxs-lookup"><span data-stu-id="8a86b-179">Optional.</span></span> <span data-ttu-id="8a86b-180">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="8a86b-180">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setXmlAsync
  summary: <span data-ttu-id="8a86b-181">Legt den XML-Knoten fest.</span><span class="sxs-lookup"><span data-stu-id="8a86b-181">Sets the node XML.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="8a86b-182">Anforderungssätze</span><span class="sxs-lookup"><span data-stu-id="8a86b-182">Requirement Sets</span></span></td><td><span data-ttu-id="8a86b-183">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="8a86b-183">CustomXmlParts</span></span></td></tr></table>

    #### <span data-ttu-id="8a86b-184">Beispiele</span><span class="sxs-lookup"><span data-stu-id="8a86b-184">Examples</span></span>


    ```javascript

    function setXmlNodeInnerXml() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    node.setXmlAsync("<childNode>" + i + "</childNode>");
                }
            });
        });
    }

    ```
  name: setXmlAsync(xml, options, callback)
  fullName: office.Office.CustomXmlNode.setXmlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setXmlAsync(xml: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xml
      description: <span data-ttu-id="8a86b-185">Den XML-Code für den Knoten festgelegt werden soll</span><span class="sxs-lookup"><span data-stu-id="8a86b-185">The XML to be set on the node</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="8a86b-186">Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.</span><span class="sxs-lookup"><span data-stu-id="8a86b-186">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="8a86b-187">Optional.</span><span class="sxs-lookup"><span data-stu-id="8a86b-187">Optional.</span></span> <span data-ttu-id="8a86b-188">Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="8a86b-188">A function that is invoked when the callback returns, whose only parameter is of type[Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
