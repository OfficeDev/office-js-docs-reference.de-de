### YamlMime:UniversalReference
ms.openlocfilehash: 80671c3c96e92a15b96379aa5f1474f0843451e0
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/28/2018
ms.locfileid: "24046600"
items:
- uid: office.Office.Document
  summary: Eine abstrakte Klasse, die das Dokument darstellt, mit dem das Add-In interagiert.
  remarks: <table><tr><td>Hosts</td><td>Access, Excel, PowerPoint, Project, Word</td></tr></table>
  name: Office.Document
  fullName: office.Office.Document
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.Document.addHandlerAsync
  - office.Office.Document.bindings
  - office.Office.Document.customXmlParts
  - office.Office.Document.getActiveViewAsync
  - office.Office.Document.getFileAsync
  - office.Office.Document.getFilePropertiesAsync
  - office.Office.Document.getMaxResourceIndexAsync
  - office.Office.Document.getMaxTaskIndexAsync
  - office.Office.Document.getProjectFieldAsync
  - office.Office.Document.getResourceByIndexAsync
  - office.Office.Document.getResourceFieldAsync
  - office.Office.Document.getSelectedDataAsync
  - office.Office.Document.getSelectedResourceAsync
  - office.Office.Document.getSelectedTaskAsync
  - office.Office.Document.getSelectedViewAsync
  - office.Office.Document.getTaskAsync
  - office.Office.Document.getTaskByIndexAsync
  - office.Office.Document.getTaskFieldAsync
  - office.Office.Document.getWSSUrlAsync
  - office.Office.Document.goToByIdAsync
  - office.Office.Document.mode
  - office.Office.Document.removeHandlerAsync
  - office.Office.Document.setResourceFieldAsync
  - office.Office.Document.setSelectedDataAsync
  - office.Office.Document.setTaskFieldAsync
  - office.Office.Document.settings
  - office.Office.Document.url
- uid: office.Office.Document.addHandlerAsync
  summary: Fügt einen Ereignishandler für ein Document-Objektereignis hinzu.
  remarks: "<table><tr><td>Anforderungssätze</td><td>DocumentEvents</td></tr></table>\n\nSie können mehrere Ereignishandler für den angegebenen EventType hinzufügen, solange die Namen der einzelnen Ereignishandlerfunktionen eindeutig sind.\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example adds an event handler for the SelectionChanged event of a document\nfunction addSelectionChangedEventHandler() {\n    Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);\n}\n\nfunction MyHandler(eventArgs) {\n    write('Event raised: ' + eventArgs.type);\n    doSomethingWithDocument(eventArgs.document);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example adds a handler for the ResourceSelectionChanged event.\n// When the resource selection changes in the document, it gets the GUID of the selected resource.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ResourceSelectionChanged,\n                getResourceGuid);\n        });\n    };\n\n    // Get the GUID of the selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ResourceSelectionChanged\n// event handler in a Project add-in, see \"Create your first task pane add-in\n// for Project 2013 by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example adds a handler for the TaskSelectionChanged event.\n// When the task selection changes in the document, it gets the GUID of the\n// selected task.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.TaskSelectionChanged,\n                getTaskGuid);\n            getTaskGuid();\n        });\n    };\n\n    // Get the GUID of the selected task and display it in the add-in.\n    function getTaskGuid() {\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```\n```javascript\n// The following code example adds a handler for the ViewSelectionChanged\n// event. When the active view changes, it gets the name and type of the active view.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the name and type of the active view and display it in the add-in.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, result.value.viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For an example that shows how to use a ViewSelectionChanged event handler in a\n// Project add-in, see \"Create your first task pane add-in for Project 2013 by\n// using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.\n// When the active view changes, the handler checks the view type. It enables a button if the view is a resource\n// view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected\n// resource and displays it in the add-in.\n// The example assumes that your add-in has a reference to the jQuery library and that the following page controls\n// are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" disabled=\"disabled\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            // Add a ViewSelectionChanged event handler.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            $('#get-info').click(getResourceGuid);\n\n            // This example calls the handler on page load to get the active view\n            // of the default page.\n            getActiveView();\n        });\n    };\n\n    // Activate the button based on the active view type of the document.\n    // This is the ViewSelectionChanged event handler.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var viewType = result.value.viewType;\n                    if (viewType == 6 ||   // ResourceForm\n                        viewType == 7 ||   // ResourceSheet\n                        viewType == 8 ||   // ResourceGraph\n                        viewType == 15) {  // ResourceUsage\n                        $('#get-info').removeAttr('disabled');\n                    }\n                    else {\n                        $('#get-info').attr('disabled', 'disabled');\n                    }\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    // Get the GUID of the currently selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html('Resource GUID: ' + result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,\n// see \"Create your first task pane add-in for Project by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```"
  name: addHandlerAsync(eventType, handler, options, callback)
  fullName: office.Office.Document.addHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Für ein Document-Objektereignis kann der EventType-Parameter angegeben werden als `Office.EventType.Document.SelectionChanged` oder `Office.EventType.Document.ActiveViewChanged`, oder der entsprechende Textwert dieser Enumeration.
      type:
      - Office.EventType
    - id: handler
      description: 'Der Ereignishandlerfunktion hinzufügen, deren einziger Parameter vom Typ[Office.DocumentSelectionChangedEventArgs](xref:office.Office.DocumentSelectionChangedEventArgs)ist<!-- -->. Erforderlich. '
      type:
      - any
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Document.bindings
  summary: Ruft ein Objekt ab, das Zugriff auf die im Dokument definierten Bindungen bereitstellt.
  remarks: "Das Document-Objekt nicht direkt in Ihrem Skript instanziiert werden. Verwenden Sie zum Aufrufen der Member des Document-Objekts zur Interaktion mit dem aktuellen Dokument oder Arbeitsblatt `Office.context.document` in Ihr Skript.\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction displayAllBindings() {\n    Office.context.document.bindings.getAllAsync(function (asyncResult) {\n        var bindingString = '';\n        for (var i in asyncResult.value) {\n            bindingString += asyncResult.value[i].id + '\\n';\n        }\n        write('Existing bindings: ' + bindingString);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: bindings
  fullName: office.Office.Document.bindings
  langs:
  - typeScript
  type: property
  syntax:
    content: 'bindings: Bindings;'
    return:
      type:
      - office.Office.Bindings
- uid: office.Office.Document.customXmlParts
  summary: Ruft ein Objekt ab, das die benutzerdefinierten XML-Komponenten im Dokument darstellt.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Word</strong></td><td> v </td><td> </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction getCustomXmlParts(){\n    Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {\n        write('Retrieved ' + asyncResult.value.length + ' custom XML parts');\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: customXmlParts
  fullName: office.Office.Document.customXmlParts
  langs:
  - typeScript
  type: property
  syntax:
    content: 'customXmlParts: CustomXmlParts;'
    return:
      type:
      - office.Office.CustomXmlParts
- uid: office.Office.Document.getActiveViewAsync
  summary: Gibt den Status der aktuellen Ansicht der Präsentation ("Bearbeiten" oder "Lesen") zurück.
  remarks: >-
    <table><tr><td>Anforderungssätze</td><td>ActiveView</td></tr></table>


    Kann ein Ereignis auslösen, wenn die Ansicht geändert wird.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Excel</strong></td><td> </td><td> </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> </td><td> </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    function getFileView() {
        // Get whether the current view is edit or read.
        Office.context.document.getActiveViewAsync(function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage(asyncResult.value);
            }
        });
    }

    ```
  name: getActiveViewAsync(options, callback)
  fullName: office.Office.Document.getActiveViewAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist der Status der aktuellen Ansicht der Präsentation. Der zurückgegebene Wert kann entweder "Bearbeiten" oder "Lesen". "edit" entspricht der Ansichten, in dem Sie Folien, z. B. Normal oder Gliederungsansicht bearbeiten können. "Lesen" entspricht Bildschirmpräsentation oder Leseansicht.
      type:
      - '(result: AsyncResult<"edit" | "read">) => void'
- uid: office.Office.Document.getFileAsync
  summary: Gibt die gesamte Dokumentdatei in Segmenten von bis zu 4194304 Byte (4 MB) zurück. Für Add-Ins für iOS werden Dateisegmente von bis zu 65536 (64 KB) unterstützt. Beachten Sie, dass die Angabe einer Dateisegmentgröße über dem zulässigen Grenzwert zu einem „Internen Fehler“ führt.
  remarks: "<table><tr><td>Anforderungssätze</td><td>Datei</td></tr></table>\n\nFür Add-Ins in Office-hostanwendungen als Office für iOS ausführen unterstützt die GetFileAsync-Methode beim Abrufen von Dateien in bis zu 4194304 Byte (4 MB) großen Segmenten. Für Add-Ins, die in Office für iOS-Apps ausgeführt werden, unterstützt die getFileAsync-Methode den Abruf von Dateien in Segmenten bis zu 65536 Byte (64 KB).\n\nFileType-Parameter kann mithilfe der [Office.FileType](xref:office.Office.FileType) -Enumeration oder Textwerte angegeben werden. Jedoch die möglichen Werte, die mit dem Host unterschiedlich sein:\n\nExcel Online, Win32, Mac und iOS:`Office.FileType.Compressed`\n\nPowerPoint auf Windows Desktop, Mac, und iPad und PowerPoint Online: `Office.FileType.Compressed`,`Office.FileType.Pdf`\n\nKlicken Sie auf Windows Desktop Word für Mac, Word und Word Online: `Office.FileType.Compressed`, `Office.FileType.Pdf`,`Office.FileType.Text`\n\nWord auf iPad-Geräten: `Office.FileType.Compressed`,`Office.FileType.Text`\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example gets the document in Office Open XML (\"compressed\") format in 65536 bytes (64 KB) slices.\n// Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.\nfunction getDocumentAsCompressed() {\n    Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, \n        function (result) {\n            if (result.status == \"succeeded\") {\n            // If the getFileAsync call succeeded, then\n            // result.value will return a valid File Object.\n            var myFile = result.value;\n            var sliceCount = myFile.sliceCount;\n            var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];\n            app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n\n            // Get the file slices.\n            getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n            else {\n            app.showNotification(\"Error:\", result.error.message);\n            }\n    });\n}\n\nfunction getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {\n    file.getSliceAsync(nextSlice, function (sliceResult) {\n        if (sliceResult.status == \"succeeded\") {\n            if (!gotAllSlices) { // Failed to get all slices, no need to continue.\n                return;\n            }\n\n            // Got one slice, store it in a temporary array.\n            // (Or you can do something else, such as\n            // send it to a third-party server.)\n            docdataSlices[sliceResult.value.index] = sliceResult.value.data;\n            if (++slicesReceived == sliceCount) {\n              // All slices have been received.\n              file.closeAsync();\n              onGotAllSlices(docdataSlices);\n            }\n            else {\n                getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n        }\n            else {\n                gotAllSlices = false;\n                file.closeAsync();\n                app.showNotification(\"getSliceAsync Error:\", sliceResult.error.message);\n            }\n    });\n}\n\nfunction onGotAllSlices(docdataSlices) {\n    var docdata = [];\n    for (var i = 0; i < docdataSlices.length; i++) {\n        docdata = docdata.concat(docdataSlices[i]);\n    }\n\n    var fileContent = new String();\n    for (var j = 0; j < docdata.length; j++) {\n        fileContent += String.fromCharCode(docdata[j]);\n    }\n\n    // Now all the file content is stored in 'fileContent' variable,\n    // you can do something with it, such as print, fax...\n}\n\n// The following example gets the document in PDF format.\nOffice.context.document.getFileAsync(Office.FileType.Pdf,\n    function(result) {\n        if (result.status == \"succeeded\") {\n            var myFile = result.value;\n            var sliceCount = myFile.sliceCount;\n            app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n            // Now, you can call getSliceAsync to download the files,\n            // as described in the previous code segment (compressed format).\n            \n            myFile.closeAsync();\n        }\n        else {\n            app.showNotification(\"Error:\", result.error.message);\n        }\n}\n);\n```"
  name: getFileAsync(fileType, options, callback)
  fullName: office.Office.Document.getFileAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: fileType
      description: Das Format, in dem die Datei zurückgegeben wird
      type:
      - office.Office.FileType
    - id: options
      description: Bietet Optionen zum Festlegen der Größe der Segmente, denen das Dokument aufgeteilt.
      type:
      - office.Office.GetFileOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist das File-Objekt.
      type:
      - '(result: AsyncResult<Office.File>) => void'
- uid: office.Office.Document.getFilePropertiesAsync
  summary: Ruft Dateieigenschaften des aktuellen Dokuments ab.
  remarks: >-
    <table><tr><td>Anforderungssätze</td><td>Nicht in einem Satz</td></tr></table>


    Sie erhalten die URL der Datei mit der Url-Eigenschaft `asyncResult.value.url`.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // To read the URL of the current file, you need to write a callback function that returns the URL.

    // The following example shows how to:

    // 1. Pass an anonymous callback function that returns the value of the file's URL

    //    to the callback parameter of the getFilePropertiesAsync method.

    // 2. Display the value on the add-in's page.

    function getFileUrl() {
        // Get the URL of the current file.
        Office.context.document.getFilePropertiesAsync(function (asyncResult) {
            var fileUrl = asyncResult.value.url;
            if (fileUrl == "") {
                showMessage("The file hasn't been saved yet. Save the file and try again");
            }
            else {
                showMessage(fileUrl);
            }
        });
    }

    ```
  name: getFilePropertiesAsync(options, callback)
  fullName: office.Office.Document.getFilePropertiesAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die Eigenschaften der Datei (mit der URL finden Sie unter `asyncResult.value.url`).
      type:
      - '(result: AsyncResult<Office.FileProperties>) => void'
- uid: office.Office.Document.getMaxResourceIndexAsync
  summary: >-
    Nur Projektdokumente. Rufen Sie den maximalen Index der Auflistung von Ressourcen im aktuellen Projekt.


    Wichtig: Diese API funktioniert nur in Project 2016 auf Windows-Desktop.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection \n// of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync\n// method to get each resource GUID. The example assumes that your add-in has a reference to the \n// jQuery library and that the following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  name: getMaxResourceIndexAsync(options, callback)
  fullName: office.Office.Document.getMaxResourceIndexAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die höchste Indexnummer in das aktuelle Projekt Resource-Auflistung.
      type:
      - '(result: AsyncResult<number>) => void'
- uid: office.Office.Document.getMaxTaskIndexAsync
  summary: >-
    Nur Projektdokumente. Rufen Sie den maximalen Index der Auflistung von Aufgaben im aktuellen Projekt.


    Wichtig: Diese API funktioniert nur in Project 2016 auf Windows-Desktop.
  remarks: >-
    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code example calls getMaxTaskIndexAsync to get the maximum index

    // of the collection of tasks in the current project. Then it uses the returned value

    // with the getTaskByIndexAsync method to get each task GUID.

    // The example assumes your add-in has a reference to the jQuery library and that the

    // following page controls are defined in the content div in the page body:

    // <input id="get-info" type="button" value="Get info" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";
        var taskGuids = ;

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                app.initialize();
                $('#get-info').click(getTaskInfo);
            });
        };

        // Get the maximum task index, and then get the task GUIDs.
        function getTaskInfo() {
            getMaxTaskIndex().then(
                function (data) {
                    getTaskGuids(data);
                }
            );
        }

        // Get the maximum index of the tasks for the current project.
        function getMaxTaskIndex() {
            var defer = $.Deferred();
            Office.context.document.getMaxTaskIndexAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        defer.resolve(result.value);
                    }
                }
            );
            return defer.promise();
        }

        // Get each task GUID, and then display the GUIDs in the add-in.
        function getTaskGuids(maxTaskIndex) {
            var defer = $.Deferred();
            for (var i = 0; i <= maxTaskIndex; i++) {
                getTaskGuid(i);
            }
            return defer.promise();
            function getTaskGuid(index) {
                Office.context.document.getTaskByIndexAsync(index,
                    function (result) {
                        if (result.status === Office.AsyncResultStatus.Succeeded) {
                            taskGuids.push(result.value);
                            if (index == maxTaskIndex) {
                                defer.resolve();
                                $('#message').html(taskGuids.toString());
                            }
                        }
                        else {
                            onError(result.error);
                        }
                    }
                );
            }
        }
        function onError(error) {
            app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  name: getMaxTaskIndexAsync(options, callback)
  fullName: office.Office.Document.getMaxTaskIndexAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die höchste Indexnummer in das aktuelle Projekt Task-Auflistung.
      type:
      - '(result: AsyncResult<number>) => void'
- uid: office.Office.Document.getProjectFieldAsync
  summary: Nur Projektdokumente. Project-Feld (z. B. Abrufen ProjectWebAccessURL).
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example gets the values of three specified fields for the active project, \n// and then displays the values in the add-in.\n// The example calls getProjectFieldAsync recursively, after the previous call returns successfully.\n// It also tracks the calls to determine when all calls are sent.\n// The example assumes your add-in has a reference to the jQuery library and that the \n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information for the active project.\n            getProjectInformation();\n        });\n    };\n\n    // Get the specified fields for the active project.\n    function getProjectInformation() {\n        var fields =\n            [Office.ProjectProjectFields.Start, \n             Office.ProjectProjectFields.Finish, \n             Office.ProjectProjectFields.GUID];\n        var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == fields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n            else {\n                Office.context.document.getProjectFieldAsync(\n                    fields[index],\n                    function (result) {\n\n                        // If the call is successful, get the field value and then get the next field.\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  name: getProjectFieldAsync(fieldId, options, callback)
  fullName: office.Office.Document.getProjectFieldAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: fieldId
      description: Ebene Projektfelder.
      type:
      - number
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses enthält die `fieldValue` -Eigenschaft, die den Wert des angegebenen Felds darstellt.
      type:
      - '(result: AsyncResult<any>) => void'
- uid: office.Office.Document.getResourceByIndexAsync
  summary: >-
    Nur Projektdokumente. Rufen Sie die GUID der Ressource, die dem angegebenen Index in der Auflistung Ressource ab.


    Wichtig: Diese API funktioniert nur in Project 2016 auf Windows-Desktop.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource\n// collection, and then calls getResourceByIndexAsync to get the GUID for each resource.\n// The example assumes that your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  name: getResourceByIndexAsync(resourceIndex, options, callback)
  fullName: office.Office.Document.getResourceByIndexAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: resourceIndex
      description: Der Index der Ressource in der Ressourcensammlung für das Projekt.
      type:
      - number
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.Document.getResourceFieldAsync
  summary: Nur Projektdokumente. Ressourcenfeld für bereitgestellten Ressource ID (Ex.ResourceName) abzurufen
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource\n// that's currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  name: getResourceFieldAsync(resourceId, fieldId, options, callback)
  fullName: office.Office.Document.getResourceFieldAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: resourceId
      description: Entweder eine Zeichenfolge oder ein Wert, der die Ressourcen-ID
      type:
      - string
    - id: fieldId
      description: Ressourcenfelder.
      type:
      - number
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.Document.getSelectedDataAsync
  summary: Liest die Daten, die in der aktuellen Auswahl des Dokuments enthalten sind.
  remarks: "<table><tr><td>Anforderungssätze</td><td>Selection</td></tr></table>\n\nIn der Rückruffunktion, die an die GetSelectedDataAsync-Methode übergeben wird, können Sie die Eigenschaften des AsyncResult-Objekts verwenden, um die folgenden Informationen zurückzugeben.\n\n<table> <tr> <th>Eigenschaft</th> <th>Verwendung</th> </tr> <tr> <td>AsyncResult.value</td> <td>Gibt immer undefined zurück, da kein Objekt oder Daten abzurufen.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Verwenden Sie diese Eigenschaft, um zu ermitteln, ob der Vorgang erfolgreich war.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Verwenden Sie diese Eigenschaft, um auf ein Error-Objekt zuzugreifen, das Informationen zu dem Fehler bereitstellt, wenn der Vorgang fehlgeschlagen ist.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Ein benutzerdefiniertes Element beliebigen Typs, das im AsyncResult-Objekt ohne Änderung zurückgegeben wird.</td> </tr> </table>\n\nDie möglichen Werte für den Parameter [Office.CoercionType](xref:office.Office.CoercionType) variieren je nach dem Host.\n\n<table> <tr> <th>Host</th> <th>Unterstützter coercionType</th> </tr> <tr> <td>Excel, Online Excel, PowerPoint, Online PowerPoint, Word und Word Web App</td> <td>`Office.CoercionType.Text`(Zeichenfolge)</td> </tr> <tr> <td>Excel, Word und Word Web App</td> <td>`Office.CoercionType.Matrix`(Array von Arrays)</td> </tr> <tr> <td>Access, Excel, Word und Word Web App</td> <td>`Office.CoercionType.Table`(Objekt \"tabledata\")</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word und Word Web App </td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint und PowerPoint Online</td> <td>`Office.CoercionType.SlideRange`</td> </tr> </table>\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> v </td><td> </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example uses the getSelectedDataAsync method of the Document object to retrieve the\n// user's current selection as text, and then display it in the add-in's page.\n\n// Display the user's current selection.\nfunction showSelection() {\n    Office.context.document.getSelectedDataAsync(\n        \"text\",                        // coercionType\n        {valueFormat: \"unformatted\",   // valueFormat\n        filterType: \"all\"},            // filterType\n        function (result) {            // callback\n            var dataValue; \n            dataValue = result.value;\n            write('Selected data is: ' + dataValue);\n        });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To read the value of the current selection, you need to write a callback function that reads the selection.\n// The following example shows how to:\n// 1. Pass an anonymous callback function that reads the value of the current selection\n//    to the callback parameter of the getSelectedDataAsync method.\n// 2. Read the selection as text, unformatted, and not filtered.\n// 3. Display the value on the add-in's page.\nfunction getText() {\n    Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, \n        { valueFormat: \"unformatted\", filterType: \"all\" },\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            } \n            else {\n                // Get selected data.\n                var dataValue = asyncResult.value; \n                write('Selected data is ' + dataValue);\n            }            \n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example gets the values of the selected cells. It uses the optional\n// asyncContext parameter to pass some text to the callback function.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getSelectedText);\n        });\n    };\n\n    // Get the text from the selected cells in the document, and display it in the add-in.\n    function getSelectedText() {\n        Office.context.document.getSelectedDataAsync(\n            Office.CoercionType.Text,\n            {asyncContext: 'Some related info'},\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'Selected text: {0}<br/>Passed info: {1}',\n                        result.value, result.asyncContext);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  name: getSelectedDataAsync(coerciontype, options, callback)
  fullName: office.Office.Document.getSelectedDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedDataAsync<T>(coerciontype: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: coerciontype
      description: ''
      type:
      - office.Office.CoercionType
    - id: options
      description: Bietet Optionen zum Anpassen, welche Daten zurückgegeben werden und wie es formatiert werden.
      type:
      - office.Office.GetSelectedDataOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die Daten in der aktuellen Auswahl. Dies wird in der Datenstruktur oder Ihnen mit den CoercionType-Parameter angegebenen Format zurückgegeben. (Weitere Informationen zur Datenumwandlung finden unter Hinweise.)
      type:
      - '(result: AsyncResult<T>) => void'
- uid: office.Office.Document.getSelectedResourceAsync
  summary: Nur Projektdokumente. Abrufen der aktuellen ausgewählten Ressourcen-Id.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's \n// currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page controls are\n// defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  name: getSelectedResourceAsync(options, callback)
  fullName: office.Office.Document.getSelectedResourceAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.Document.getSelectedTaskAsync
  summary: Nur Projektdokumente. Abrufen der aktuellen ausgewählten Vorgangs-ID
  remarks: >-
    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently

    // selected in a task view. Then it gets task properties by calling getTaskAsync.

    // The example assumes your add-in has a reference to the jQuery library and that the following page

    // controls are defined in the content div in the page body:

    // <input id="get-info" type="button" value="Get info" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                $('#get-info').click(getTaskInfo);
            });
        };

        // // Get the GUID of the task, and then get local task properties.
        function getTaskInfo() {
            getTaskGuid().then(
                function (data) {
                    getTaskProperties(data);
                }
            );
        }

        // Get the GUID of the selected task.
        function getTaskGuid() {
            var defer = $.Deferred();
            Office.context.document.getSelectedTaskAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        defer.resolve(result.value);
                    }
                }
            );
            return defer.promise();
        }

        // Get local properties for the selected task, and then display it in the add-in.
        function getTaskProperties(taskGuid) {
            Office.context.document.getTaskAsync(
                taskGuid,
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        var taskInfo = result.value;
                        var output = String.format(
                            'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                            taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                        $('#message').html(output);
                    }
                }
            );
        }

        function onError(error) {
            $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  name: getSelectedTaskAsync(options, callback)
  fullName: office.Office.Document.getSelectedTaskAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die GUID der Ressource als Zeichenfolge.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.Document.getSelectedViewAsync
  summary: Nur Projektdokumente. Abrufen der aktuellen ausgewählten Ansichtstyp (z. B. Gantt), und zeigen Sie Namen.
  remarks: >-
    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code example calls adds a ViewSelectionChanged event handler that

    // calls getSelectedViewAsync to get the name and type of the active view in the document.

    // The example assumes your add-in has a reference to the jQuery library and that

    // the following page control is defined in the content div in the page body:

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                Office.context.document.addHandlerAsync(
                    Office.EventType.ViewSelectionChanged,
                    getActiveView);
                getActiveView();
            });
        };

        // Get the active view's name and type.
        function getActiveView() {
            Office.context.document.getSelectedViewAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        var output = String.format(
                            'View name: {0}<br/>View type: {1}',
                            result.value.viewName, viewType);
                        $('#message').html(output);
                    }
                }
            );
        }

        function onError(error) {
            $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  name: getSelectedViewAsync(options, callback)
  fullName: office.Office.Document.getSelectedViewAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 'Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses enthält die folgenden Eigenschaften: `viewName` -der Name der Ansicht, als Konstante ProjectViewTypes. `viewType`-Der Typ der Ansicht, als der Ganzzahlwert der ProjectViewTypes-Konstante.'
      type:
      - '(result: AsyncResult<any>) => void'
- uid: office.Office.Document.getTaskAsync
  summary: Nur Projektdokumente. Get den Vorgangsnamen, Vorgangsnummer WSS und ResourceNames für TaskId zu reparieren.
  remarks: >-
    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code example calls getSelectedTaskAsync to get the task GUID of the currently

    // selected task. Then it calls getTaskAsync to get the properties for the task that are

    // available from the JavaScript API for Office.

    // The example assumes your add-in has a reference to the jQuery library and that the

    // following page controls are defined in the content div in the page body:

    // <input id="get-info" type="button" value="Get info" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                $('#get-info').click(getTaskInfo);
            });
        };

        // Get the GUID of the task, and then get local task properties.
        function getTaskInfo() {
            getTaskGuid().then(
                function (data) {
                    getTaskProperties(data);
                }
            );
        }

        // Get the GUID of the selected task.
        function getTaskGuid() {
            var defer = $.Deferred();
            Office.context.document.getSelectedTaskAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        defer.resolve(result.value);
                    }
                }
            );
            return defer.promise();
        }

        // Get local properties for the selected task, and then display it in the add-in.
        function getTaskProperties(taskGuid) {
            Office.context.document.getTaskAsync(
                taskGuid,
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        var taskInfo = result.value;
                        var output = String.format(
                            'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                            taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                        $('#message').html(output);
                    }
                }
            );
        }

        function onError(error) {
            $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  name: getTaskAsync(taskId, options, callback)
  fullName: office.Office.Document.getTaskAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: taskId
      description: Entweder eine Zeichenfolge oder der Wert der Aufgaben-ID.
      type:
      - string
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 'Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses enthält die folgenden Eigenschaften: `taskName` -der Name des Vorgangs. `wssTaskId`-Die ID des Vorgangs in der synchronisierten SharePoint-Aufgabenliste. Wenn das Projekt nicht mit einer SharePoint-Aufgabenliste synchronisiert ist, ist der Wert 0. `resourceNames`-Die durch Trennzeichen getrennte Liste mit den Namen der Ressourcen, die die Aufgabe zugewiesen sind.'
      type:
      - '(result: AsyncResult<any>) => void'
- uid: office.Office.Document.getTaskByIndexAsync
  summary: >-
    Nur Projektdokumente. Rufen Sie die GUID der Aufgabe, die dem angegebenen Index in der Auflistung Aufgabe ab.


    Wichtig: Diese API funktioniert nur in Project 2016 auf Windows-Desktop.
  remarks: >-
    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code example calls getMaxTaskIndexAsync to get the

    // maximum index in the project's task collection, and then

    // calls getTaskByIndexAsync to get the GUID for each task.

    // The example assumes that your add-in has a reference to the

    // jQuery library and that the following page controls are defined

    // in the content div in the page body:

    // <input id="get-info" type="button" value="Get info" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";
        var taskGuids = ;

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                app.initialize();
                $('#get-info').click(getTaskInfo);
            });
        };

        // Get the maximum task index, and then get the task GUIDs.
        function getTaskInfo() {
            getMaxTaskIndex().then(
                function (data) {
                    getTaskGuids(data);
                }
            );
        }

        // Get the maximum index of the tasks for the current project.
        function getMaxTaskIndex() {
            var defer = $.Deferred();
            Office.context.document.getMaxTaskIndexAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        defer.resolve(result.value);
                    }
                }
            );
            return defer.promise();
        }

        // Get each task GUID, and then display the GUIDs in the add-in.
        function getTaskGuids(maxTaskIndex) {
            var defer = $.Deferred();
            for (var i = 0; i <= maxTaskIndex; i++) {
                getTaskGuid(i);
            }
            return defer.promise();
            function getTaskGuid(index) {
                Office.context.document.getTaskByIndexAsync(index,
                    function (result) {
                        if (result.status === Office.AsyncResultStatus.Succeeded) {
                            taskGuids.push(result.value);
                            if (index == maxTaskIndex) {
                                defer.resolve();
                                $('#message').html(taskGuids.toString());
                            }
                        }
                        else {
                            onError(result.error);
                        }
                    }
                );
            }
        }
        function onError(error) {
            app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  name: getTaskByIndexAsync(taskIndex, options, callback)
  fullName: office.Office.Document.getTaskByIndexAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: taskIndex
      description: Der Index der Aufgabe in der Aufgabensammlung für das Projekt.
      type:
      - number
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die GUID des Vorgangs als Zeichenfolge.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.Document.getTaskFieldAsync
  summary: Nur Projektdokumente. Vorgangsfeld für bereitgestellten Aufgabe ID (z. B. Abrufen StartDate).
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected task.\n    function getTaskFields(taskGuid) {\n        var output = '';\n        var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];\n        var fieldValues = ['Priority: ', '% Complete: '];\n        var index = 0;\n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // Get the field value. If the call is successful, then get the next field.\n            else {\n                Office.context.document.getTaskFieldAsync(\n                    taskGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  name: getTaskFieldAsync(taskId, fieldId, options, callback)
  fullName: office.Office.Document.getTaskFieldAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: taskId
      description: Entweder eine Zeichenfolge oder der Wert der Aufgaben-ID.
      type:
      - string
    - id: fieldId
      description: Vorgangsfelder.
      type:
      - number
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses enthält die `fieldValue` -Eigenschaft, die den Wert des angegebenen Felds darstellt.
      type:
      - '(result: AsyncResult<any>) => void'
- uid: office.Office.Document.getWSSUrlAsync
  summary: Nur Projektdokumente. Abrufen des WSS-Url und die Liste namens für die Aufgabenliste, die MPP zu synchronisiert wird.
  remarks: >-
    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>
  name: getWSSUrlAsync(options, callback)
  fullName: office.Office.Document.getWSSUrlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: 'Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses enthält die folgenden Eigenschaften: `listName` -den Namen der synchronisierten SharePoint-Vorgangsliste. `serverUrl`-die URL der synchronisierten SharePoint-Vorgangsliste.'
      type:
      - '(result: AsyncResult<any>) => void'
- uid: office.Office.Document.goToByIdAsync
  summary: Wechselt zum angegebenen Objekt oder Speicherort im Dokument.
  remarks: >-
    <table><tr><td>Anforderungssätze</td><td>nicht in einem Satz</td></tr></table>


    PowerPoint unterstützt die GoToByIdAsync-Methode in Masteransicht nicht.


    Das Verhalten, das durch die Option SelectionMode verursacht hängt vom Host ab:


    In Excel: `Office.SelectionMode.Selected` wählt alle Inhalte in der Bindung oder benannte Element. Office.SelectionMode.Nonewählt für Textbindungen die Zelle aus; für Matrixbindungen, Tabellenbindungen und benannte Elemente wird die erste Datenzelle (nicht die erste Zell in der Kopfzeile für Tabellen) ausgewählt.


    In PowerPoint: `Office.SelectionMode.Selected` wählt den Folientitel oder den ersten TextBox-Steuerelement auf der Folie. `Office.SelectionMode.None`keine markiert nichts.


    In Word: `Office.SelectionMode.Selected` wählt alle Inhalte in der Bindung. Office.SelectionMode.None verschiebt für Textbindungen den Cursor an den Anfang des Textes; für Matrixbindungen und Tabellenbindungen wird die erste Datenzelle (nicht die erste Zelle in der Kopfzeile für Tabellen) ausgewählt.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // Go to a binding by id (Word and Excel)

    // The following example shows how to:

    // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.

    // 2. Specify that binding as the binding to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value on the add-in's page.

    function gotoBinding() {
        // Create a new table binding for the selected table.
        Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
        if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
              }
        });

        // Go to binding by id.
        Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to a table in a spreadsheet (Excel)

    // The following example shows how to:

    // 1. Specify a table by name as the table to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToTable() {
        Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to the currently selected slide by id (PowerPoint)

    // The following example shows how to:

    // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.

    // 2. Specify the returned id as the slide to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value of the stringified JSON object returned by asyncResult.value,

    //    which contains information about the selected slides, on the add-in's page.

    var firstSlideId = 0;

    function gotoSelectedSlide() {
        //Get currently selected slide's id
        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                firstSlideId = asyncResult.value.slides[0].id;
                app.showNotification(JSON.stringify(asyncResult.value));
            }
        });
        //Go to slide by id.
        Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                app.showNotification("Navigation successful");
            }
        });
    }


    // Go to slide by index (PowerPoint)

    // The following example shows how to:

    // 1. Specify the index of the first, last, previous, or next slide to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToSlideByIndex() {
        var goToFirst = Office.Index.First;
        var goToLast = Office.Index.Last;
        var goToPrevious = Office.Index.Previous;
        var goToNext = Office.Index.Next;

        Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }

    ```
  name: goToByIdAsync(id, goToType, options, callback)
  fullName: office.Office.Document.goToByIdAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: id
      description: Der Bezeichner des Objekts oder der Speicherort.
      type:
      - string | number
    - id: goToType
      description: Der Typ des Speicherorts zu wechseln.
      type:
      - office.Office.GoToType
    - id: options
      description: Bietet Optionen dazu, ob Sie den Speicherort auszuwählen, zu dem navigiert wird.
      type:
      - office.Office.GoToByIdOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die `value` -Eigenschaft des Ergebnisses ist die aktuelle Ansicht.
      type:
      - '(result: AsyncResult<any>) => void'
- uid: office.Office.Document.mode
  summary: Ruft den Modus ab, in dem sich das Dokument befindet.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction displayDocumentMode() {\n    write(Office.context.document.mode);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following example initializes the add-in and then gets properties of the\n// Document object that are available in the context of a Project document.\n// A Project document is the opened, active project. To access members of the\n// ProjectDocument object, use the Office.context.document object as shown in\n// the code examples for ProjectDocument methods and events.\n// The example assumes your add-in has a reference to the jQuery library and\n// that the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information about the document.\n            showDocumentProperties();\n        });\n    };\n\n    // Get the document mode and the URL of the active project.\n    function showDocumentProperties() {\n        var output = String.format(\n            'The document mode is {0}.<br/>The URL of the active project is {1}.',\n            Office.context.document.mode,\n            Office.context.document.url);\n        $('#message').html(output);\n    }\n})();\n```"
  name: mode
  fullName: office.Office.Document.mode
  langs:
  - typeScript
  type: property
  syntax:
    content: 'mode: DocumentMode;'
    return:
      type:
      - office.Office.DocumentMode
- uid: office.Office.Document.removeHandlerAsync
  summary: Entfernt einen Ereignishandler für den angegebenen Ereignistyp.
  remarks: >-
    <table><tr><td>Anforderungssätze</td><td>DocumentEvents</td></tr></table>


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following example removes the event handler named 'MyHandler'.

    function removeSelectionChangedEventHandler() {
        Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
    }


    function MyHandler(eventArgs) {
        doSomethingWithDocument(eventArgs.document);
    }

    ```

    ```javascript

    // The following code example uses addHandlerAsync to add an event handler for the

    // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.

    // When a resource is selected in a resource view, the handler displays the

    // resource GUID. When the handler is removed, the GUID is not displayed.

    // The example assumes that your add-in has a reference to the jQuery library and

    // that the following page control is defined in the content div in the page body:

    // <input id="remove-handler" type="button" value="Remove handler" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                Office.context.document.addHandlerAsync(
                    Office.EventType.ResourceSelectionChanged,
                    getResourceGuid);
                $('#remove-handler').click(removeEventHandler);
            });
        };

        // Remove the event handler.
        function removeEventHandler() {
            Office.context.document.removeHandlerAsync(
                Office.EventType.ResourceSelectionChanged,
                {handler:getResourceGuid,
                asyncContext:'The handler is removed.'},
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#remove-handler').attr('disabled', 'disabled');
                        $('#message').html(result.asyncContext);
                    }
                }
            );
        }

        // Get the GUID of the currently selected resource and display it in the add-in.
        function getResourceGuid() {
            Office.context.document.getSelectedResourceAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#message').html('Resource GUID: ' + result.value);
                    }
                }
            );
        }

        function onError(error) {
            $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  name: removeHandlerAsync(eventType, options, callback)
  fullName: office.Office.Document.removeHandlerAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: eventType
      description: Der Ereignistyp. Für Dokument kann "Document.SelectionChanged" oder "Document.ActiveViewChanged" sein.
      type:
      - Office.EventType
    - id: options
      description: Bietet Optionen, um zu bestimmen, welche Ereignishandler oder Handler entfernt werden.
      type:
      - office.Office.RemoveHandlerOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Document.setResourceFieldAsync
  summary: >-
    Nur Projektdokumente. Ressourcenfeld für die angegebene Ressource ID festlegen


    Wichtig: Diese API funktioniert nur in Project 2016 auf Windows-Desktop.
  remarks: >-
    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's

    // currently selected in a resource view. Then it sets two resource field values by calling

    // setResourceFieldAsync recursively.

    // The getSelectedTaskAsync method used in the example requires that a task view

    // (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync

    // method for an example that activates a button based on the active view type.

    // The example assumes your add-in has a reference to the jQuery library and that the

    // following page controls are defined in the content div in the page body:

    // <input id="set-info" type="button" value="Set info" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                app.initialize();
                $('#set-info').click(setResourceInfo);
            });
        };

        // Get the GUID of the resource, and then get the resource fields.
        function setResourceInfo() {
            getResourceGuid().then(
                function (data) {
                    setResourceFields(data);
                }
            );
        }

        // Get the GUID of the selected resource.
        function getResourceGuid() {
            var defer = $.Deferred();
            Office.context.document.getSelectedResourceAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        defer.resolve(result.value);
                    }
                }
            );
            return defer.promise();
        }

        // Set the specified fields for the selected resource.
        function setResourceFields(resourceGuid) {
            var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];
            var fieldValues = [.28, 'Notes for the resource.'];

            // Set the field value. If the call is successful, set the next field.
            for (var i = 0; i < targetFields.length; i++) {
                Office.context.document.setResourceFieldAsync(
                    resourceGuid,
                    targetFields[i],
                    fieldValues[i],
                    function (result) {
                        if (result.status === Office.AsyncResultStatus.Succeeded) {
                            i++;
                        }
                        else {
                            onError(result.error);
                        }
                    }
                );
            }
            $('#message').html('Field values set');
        }

        function onError(error) {
            app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  name: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  fullName: office.Office.Document.setResourceFieldAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: resourceId
      description: Entweder eine Zeichenfolge oder ein Wert, der die Ressourcen-ID
      type:
      - string
    - id: fieldId
      description: Ressourcenfelder.
      type:
      - number
    - id: fieldValue
      description: Der Wert des Felds Ziel.
      type:
      - string | number | boolean | object
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Document.setSelectedDataAsync
  summary: Schreibt die angegebenen Daten in der aktuellen Markierung.
  remarks: "<table><tr><td>Anforderungssätze</td><td>Selection</td></tr></table>\n\n**Anwendungsspezifische Verhaltensweisen**\n\nDie folgenden anwendungsspezifischen Aktionen angewendet, wenn Daten in eine Auswahl geschrieben.\n\n<table> <tr><td>Word</td><td>Wenn keine Auswahl vorhanden ist und die Einfügemarke, um eine gültige Position, die dem angegebenen befindet `data` wird an der Einfügemarke eingefügt</td><td>Wenn `data` eine Zeichenfolge ist, wird der angegebene Text eingefügt.</td></tr> <tr><td></td><td></td><td>Wenn `data` ist ein Array von Arrays (\"Matrix\") oder ein TableData-Objekt eine neue Wordtabelle wird eingefügt.</td></tr> <tr><td></td><td></td><td>Wenn `data` wird HTML verwendet, wird der angegebene HTML-Code eingefügt. (Wichtig: Wenn keines der HTML-Code einlegen ungültig ist, wird nicht Word meldet einen Fehler. Word wird als ein Großteil der HTML-Code einfügen können und schließt alle ungültigen Daten).</td></tr> <tr><td></td><td></td><td>Wenn `data` Office Open XML, wird die angegebene XML wird eingefügt.</td></tr> <tr><td></td><td></td><td>Wenn `data` eine base64-codierte Bild-Stream ist, wird das angegebene Bild eingefügt.</td></tr></td></tr> <tr><td></td><td>Wenn eine Auswahl vorhanden ist</td><td>Es ersetzt werden mit dem angegebenen `data` folgen dieselben Regeln wie oben beschrieben.</td></tr> <tr><td></td><td>Einfügen von Bildern</td><td>Eingefügten Bilder werden Inline platziert. Die Parameter imageLeft und imageTop werden ignoriert. Das Bildseitenverhältnis ist immer gesperrt. Wenn nur einer der Parameter imageWidth und imageHeight angegeben ist, wird der andere Wert automatisch skaliert, um das ursprüngliche Seitenverhältnis beizubehalten.</td></tr>\n\n<tr><td>Excel</td><td>Wenn Sie eine einzelne Zelle ausgewählt wird</td><td>Wenn `data` ist eine Zeichenfolge der angegebene Text ist als der Wert der aktuellen Zelle eingefügt.</td></tr> <tr><td></td><td></td><td>Wenn `data` ist ein Array von Arrays (\"Matrix\"), der angegebene Satz von Zeilen und Spalten eingefügt, falls keine anderen Daten in angrenzenden Zellen überschrieben werden.</td></tr> <tr><td></td><td></td><td>Wenn `data` ist ein TableData-Objekt, eine neue Excel-Tabelle mit dem angegebenen Satz von Zeilen und Kopfzeilen eingefügt, falls keine anderen Daten in angrenzenden Zellen überschrieben werden.</td></tr> <tr><td></td><td>Wenn mehrere Zellen ausgewählt sind</td><td>Wenn das Shape nicht mit die Form der entspricht `data`, wird ein Fehler zurückgegeben.</td></tr> <tr><td></td><td></td><td>Wenn die Form der Auswahl genau die Form der entspricht `data`, werden die Werte der markierten Zellen aktualisiert basierend auf den Werten in `data`.</td></tr> <tr><td></td><td>Einfügen von Bildern</td><td>Eingefügte Bilder sind schwebend. Die Positionsparameter imageLeft und imageTop sind relativ zu den aktuell ausgewählten Zellen. Negative Werte für imageLeft und imageTop sind zulässig und werden möglicherweise  von Excel an die Bildposition innerhalb eines Arbeitsblatts angepasst. Das Bild-Seitenverhältnis ist gesperrt, es sei denn, die beiden Parameter imageWidth und imageHeight werden angegeben. Wenn nur einer der Parameter imageWidth und imageHeight angegeben ist, wird der andere Wert automatisch skaliert, um das ursprüngliche Seitenverhältnis beizubehalten.</td></tr> <tr><td></td><td>Alle anderen Fälle</td><td>Es wird ein Fehler zurückgegeben.</td></tr>\n\n<tr><td>Excel Online</td><td>Zusätzlich zu den für Excel oben beschriebenen Verhaltensweisen gelten diese Grenzwerte beim Schreiben von Daten in Excel Online</td><td>Die Gesamtzahl der Zellen können Sie ein Arbeitsblatt mit Schreiben der `data` Parameter darf nicht in einem einzigen Aufruf dieser Methode 20.000 überschreiten.</td></tr> <tr><td></td><td></td><td>Die Anzahl der Formatierung Gruppen übergeben, um die `cellFormat` Parameter darf nicht 100 sein. Eine Formatierungsgruppe besteht aus einem Formatierungssatz, der auf einen bestimmten Zellbereich angewendet wird.</td></tr>\n\n<tr><td>PowerPoint</td><td>Bild einfügen</td><td>Eingefügte Bilder sind schwebend. Die Position ImageLeft und ImageTop-Parameter sind optional, aber wenn bereitgestellt, sollten beide vorhanden sein. Wenn ein einzelner Wert bereitgestellt wird, wird er ignoriert. Negative Wert für imageLeft und imageTop sind zulässig und können ein Bild außerhalb einer Folie positionieren. Wenn kein optionaler Parameter angegeben ist und die Folie einen Platzhalter aufweist, ersetzt das Bild den Platzhalter auf der Folie. Das Bild-Seitenverhältnis wird gesperrt, es sei denn, die beiden Parameter imageWidth und imageHeight werden angegeben. Wenn nur einer der Parameter imageWidth und imageHeight angegeben ist, wird der andere Wert automatisch skaliert, um das ursprüngliche Seitenverhältnis beizubehalten.</td></tr> </table>\n\nDie möglichen Werte für den Parameter [Office.CoercionType](xref:office.Office.CoercionType) variieren je nach dem Host.\n\n<table> <tr> <th>Host</th> <th>Unterstützter coercionType</th> </tr> <tr> <td>Excel, Online Excel, PowerPoint, Online PowerPoint, Word und Word Web App</td> <td>`Office.CoercionType.Text`(Zeichenfolge)</td> </tr> <tr> <td>Excel, Word und Word Web App</td> <td>`Office.CoercionType.Matrix`(Array von Arrays)</td> </tr> <tr> <td>Access, Excel, Word und Word Web App</td> <td>`Office.CoercionType.Table`(Objekt \"tabledata\")</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word und Word Web App </td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint und PowerPoint Online</td> <td>`Office.CoercionType.SlideRange`</td> </tr> </table>\n\n**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Zugriff</strong></td><td> y </td><td> </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following example sets the selected text or cell to \"Hello World!\", \n// and if that fails, displays the value of the error.message property.\nfunction writeText() {\n    Office.context.document.setSelectedDataAsync(\"Hello World!\",\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write\n// to a selection. The following example writes data as an array of three rows of two columns, \n// specifying the coercionType as \"matrix\" for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeMatrix() {\n    Office.context.document.setSelectedDataAsync(\n        [[\"Red\", \"Rojo\"], [\"Green\", \"Verde\"], [\"Blue\", \"Azul\"]],\n        {coercionType: Office.CoercionType.Matrix}\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// The following example writes data as a one column table with a header and four rows, \n// specifying the coercionType as \"table\" for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeTable() {\n    // Build table.\n    var myTable = new Office.TableData();\n    myTable.headers = [[\"Cities\"]];\n    myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];\n\n    // Write table.\n    Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},\n        function (result) {\n            var error = result.error\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word if you want to write HTML to the selection, you can specify the coercionType parameter as \"html\"\n// as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.context.document.setSelectedDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: Office.CoercionType.Html}, function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write('Error: ' + asyncResult.error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType\n// parameter as \"image\" as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertPictureAtSelection(base64EncodedImageStr) {\n\n    Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {\n    coercionType: Office.CoercionType.Image,\n    imageLeft: 50,\n    imageTop: 50,\n    imageWidth: 100,\n    imageHeight: 100\n    },\n    function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(\"Action failed with error: \" + asyncResult.error.message);\n        }\n    });\n}\n```"
  name: setSelectedDataAsync(data, options, callback)
  fullName: office.Office.Document.setSelectedDataAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: data
      description: >-
        Die Daten festgelegt werden soll. Entweder eine Zeichenfolge oder[Office.CoercionType](xref:office.Office.CoercionType) -Wert, 2d Array oder TableData-Objekt.


        Wenn der Wert für `data` ist:


        - Eine Zeichenfolge: Nur-Text oder alle Werte, die in eine Zeichenfolge umgewandelt werden können, werden eingefügt. In Excel können Sie auch  data als eine gültige Formel angeben, um diese Formel zu der ausgewählten Zelle hinzuzufügen. Festlegen von Daten an "SUM(A1:A5) =" Addieren beispielsweise die Werte im angegebenen Bereich. Wenn Sie jedoch eine Formel für die gebundene Zelle festlegen, können Sie die hinzugefügte Formel (oder eine bereits vorhandene Formel) anschließend nicht mehr aus der gebundenen Zelle lesen. Wenn Sie die Document.getSelectedDataAsyncMethode in der ausgewählten Zelle aufrufen, um die Daten zu lesen, kann die Methode nur die in der Zelle angezeigten Daten (das Formelergebnis) zurückgeben.


        - Ein Array von Arrays („Matrix“): Es werden tabellarische Daten ohne Kopfzeilen eingefügt. Übergeben Sie beispielsweise zum Schreiben von Daten in drei Zeilen und zwei Spalten ein solches: \[ \["R1C1", "R1C2"\], \["R2C1", "R2C2"\], \["R3C1", "R3C2"\]\]. Um eine einzelne Spalte mit drei Zeilen zu schreiben, übergeben Sie ein solches: \[ \["R1C1"\], \["R2C1"\], \["R3C1"\]\]


        In Excel können Sie auch  data als ein Array von Arrays mit gültigen Formeln angeben, um diese Formeln zu den ausgewählten Zellen hinzuzufügen. Wenn keine anderen Daten, die überschrieben werden, wenn Daten auf beispielsweise \[ \["SUM(A1:A5)","=AVERAGE(A1:A5) ="\] \] wird die Auswahl zwei Formeln hinzugefügt. Genau wie beim Angeben einer Formel für eine einzelne Zelle als „Text“, können Sie die hinzugefügten Formeln (oder bereits vorhandene Formeln) anschließend nicht mehr lesen. Sie können nur die Formelergebnisse lesen.


        - Ein TableData-Objekt: Eine Tabelle mit Kopfzeilen wird eingefügt. In Excel Wenn Sie Formeln im TableData-Objekt angeben, die Sie für die Data-Parameter übergeben erhalten Sie möglicherweise nicht die Ergebnisse gewünschten aufgrund des "berechnete Spalten" Features von Excel, die Formeln in einer Spalte automatisch dupliziert. Um dieses Problem umgehen, wenn Sie schreiben möchten `data` , Formeln, die einer ausgewählten Tabelle enthält, geben Sie die Daten als ein Array von Arrays (anstelle eines TableData-Objekts), und geben Sie den CoercionType als Microsoft.Office.Matrix oder "Matrix".
      type:
      - string | TableData | any[][]
    - id: options
      description: Bietet Optionen zur Anzeige von Daten in der Auswahl eingefügt.
      type:
      - office.Office.SetSelectedDataOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->. Die AsyncResult.value-Eigenschaft gibt immer undefined zurück, da kein Objekt oder Daten abzurufen.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Document.setTaskFieldAsync
  summary: >-
    Nur Projektdokumente. Vorgangsfeld für den angegebenen Vorgang ID festlegen


    Wichtig: Diese API funktioniert nur in Project 2016 auf Windows-Desktop.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser)</th></tr> <tr><td><strong>Projekt</strong></td><td> v </td><td> </td></tr> </table>\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's\n// currently selected in a task view. Then it sets two task field values by calling\n// setTaskFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the\n// addHandlerAsync method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function setTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                setTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected task.\n    function setTaskFields(taskGuid) {\n        var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];\n        var fieldValues = [true, 'Notes for the task.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setTaskFieldAsync(\n                taskGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  name: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  fullName: office.Office.Document.setTaskFieldAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: taskId
      description: Entweder eine Zeichenfolge oder der Wert der Aufgaben-ID.
      type:
      - string
    - id: fieldId
      description: Vorgangsfelder.
      type:
      - number
    - id: fieldValue
      description: Der Wert des Felds Ziel.
      type:
      - string | number | boolean | object
    - id: options
      description: Bietet die Möglichkeit zur Beibehaltung von Kontextdaten eines beliebigen Typs, die für die Verwendung in einem Rückruf unverändert.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Optional. Eine Funktion, die bei der Rückgabe des Rückrufs aufgerufen wird, dessen einziger Parameter vom Typ[Office.AsyncResult](xref:office.Office.AsyncResult)ist<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.Document.settings
  summary: Ruft ein Objekt ab, das die gespeicherten benutzerdefinierten Einstellungen des Inhalts- oder Aufgabenbereichs-Add-Ins für das aktuelle Dokument darstellt.
  remarks: >-
    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.


    Weitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: settings
  fullName: office.Office.Document.settings
  langs:
  - typeScript
  type: property
  syntax:
    content: 'settings: Settings;'
    return:
      type:
      - office.Office.Settings
- uid: office.Office.Document.url
  summary: Ruft die URL des Dokuments ab, das zurzeit in der Hostanwendung geöffnet ist. Gibt null zurück, wenn die URL nicht verfügbar ist.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.\n\nWeitere Informationen zu Office-Host-Anwendung und Server-Anforderungen, finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Zugriff</strong></td><td> </td><td> v </td><td> </td></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>\n#### <a name=\"examples\"></a>Examples\n\n```javascript\nfunction displayDocumentUrl() {\n    write(Office.context.document.url);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: url
  fullName: office.Office.Document.url
  langs:
  - typeScript
  type: property
  syntax:
    content: 'url: string;'
    return:
      type:
      - string
