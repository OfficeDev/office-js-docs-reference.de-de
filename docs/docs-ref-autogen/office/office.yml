### YamlMime:TSPackage
uid: office!
name: office
type: package
summary: ''
interfaces:
- office!Office.Actions:interface
- office!Office.AddBindingFromNamedItemOptions:interface
- office!Office.AddBindingFromPromptOptions:interface
- office!Office.AddBindingFromSelectionOptions:interface
- office!Office.Addin:interface
- office!Office.AddinCommands.Event:interface
- office!Office.AddinCommands.EventCompletedOptions:interface
- office!Office.AddinCommands.Source:interface
- office!Office.AsyncContextOptions:interface
- office!Office.AsyncResult:interface
- office!Office.Auth:interface
- office!Office.AuthOptions:interface
- office!Office.Binding:interface
- office!Office.BindingDataChangedEventArgs:interface
- office!Office.Bindings:interface
- office!Office.BindingSelectionChangedEventArgs:interface
- office!Office.Context:interface
- office!Office.ContextInformation:interface
- office!Office.Control:interface
- office!Office.CustomXmlNode:interface
- office!Office.CustomXmlPart:interface
- office!Office.CustomXmlParts:interface
- office!Office.CustomXmlPrefixMappings:interface
- office!Office.Dialog:interface
- office!Office.DialogOptions:interface
- office!Office.DialogParentMessageReceivedEventArgs:interface
- office!Office.Document:interface
- office!Office.DocumentSelectionChangedEventArgs:interface
- office!Office.Error:interface
- office!Office.File:interface
- office!Office.FileProperties:interface
- office!Office.GetBindingDataOptions:interface
- office!Office.GetFileOptions:interface
- office!Office.GetSelectedDataOptions:interface
- office!Office.GoToByIdOptions:interface
- office!Office.IPromiseConstructor:interface
- office!Office.MatrixBinding:interface
- office!Office.NodeDeletedEventArgs:interface
- office!Office.NodeInsertedEventArgs:interface
- office!Office.NodeReplacedEventArgs:interface
- office!Office.OfficeTheme:interface
- office!Office.RangeCoordinates:interface
- office!Office.RangeFormatConfiguration:interface
- office!Office.RemoveHandlerOptions:interface
- office!Office.RequirementSetSupport:interface
- office!Office.Ribbon:interface
- office!Office.RibbonUpdaterData:interface
- office!Office.SaveSettingsOptions:interface
- office!Office.SetBindingDataOptions:interface
- office!Office.SetSelectedDataOptions:interface
- office!Office.Settings:interface
- office!Office.SettingsChangedEventArgs:interface
- office!Office.Slice:interface
- office!Office.Tab:interface
- office!Office.TableBinding:interface
- office!Office.TextBinding:interface
- office!Office.UI:interface
- office!Office.VisibilityModeChangedMessage:interface
- office!OfficeExtension.DebugInfo:interface
- office!OfficeExtension.EmbeddedOptions:interface
- office!OfficeExtension.EventInfo:interface
- office!OfficeExtension.LoadOption:interface
- office!OfficeExtension.RequestContextDebugInfo:interface
- office!OfficeExtension.RequestUrlAndHeaderInfo:interface
- office!OfficeExtension.RunOptions:interface
- office!OfficeExtension.UpdateOptions:interface
enums:
- office!Office.ActiveView:enum
- office!Office.AsyncResultStatus:enum
- office!Office.BindingType:enum
- office!Office.CoercionType:enum
- office!Office.CustomXMLNodeType:enum
- office!Office.DocumentMode:enum
- office!Office.EventType:enum
- office!Office.FileType:enum
- office!Office.FilterType:enum
- office!Office.GoToType:enum
- office!Office.HostType:enum
- office!Office.Index:enum
- office!Office.InitializationReason:enum
- office!Office.PlatformType:enum
- office!Office.ProjectProjectFields:enum
- office!Office.ProjectResourceFields:enum
- office!Office.ProjectTaskFields:enum
- office!Office.ProjectViewTypes:enum
- office!Office.SelectionMode:enum
- office!Office.StartupBehavior:enum
- office!Office.Table:enum
- office!Office.ValueFormat:enum
- office!Office.VisibilityMode:enum
classes:
- office!Office.TableData:class
- office!OfficeExtension.ClientObject:class
- office!OfficeExtension.ClientRequestContext:class
- office!OfficeExtension.ClientResult:class
- office!OfficeExtension.EmbeddedSession:class
- office!OfficeExtension.Error:class
- office!OfficeExtension.ErrorCodes:class
- office!OfficeExtension.EventHandlerResult:class
- office!OfficeExtension.EventHandlers:class
- office!OfficeExtension.TrackedObjects:class
functions:
- name: Office.initialize(reason)
  uid: office!Office.initialize:function(1)
  package: office!
  summary: >-
    Tritt ein, wenn die Laufzeitumgebung geladen wird und das Add-In bereit für die Interaktion mit der Anwendung und dem gehosteten Dokument ist.


    Der Reason-Parameter der Initialize-Ereignislistener-Funktion gibt einen `InitializationReason` Aufzählungswert zurück, der angibt, wie die Initialisierung aufgetreten ist. Es gibt zwei Möglichkeiten zum Initialisieren einer Aufgabenbereich- oder eines Inhalts-Add-Ins:


    - Der Benutzer hat ihn soeben aus dem Abschnitt zuletzt verwendete Add-Ins der Add-in-Dropdownliste auf der Registerkarte Einfügen des Menübands in der Office-Hostanwendung oder über das Dialogfeld Add-in Einfügen eingefügt.


    - Der Benutzer hat ein Dokument geöffnet, das das Add-In bereits enthält.


    *Hinweis*: der Reason-Parameter der Initialize-Ereignislistener-Funktion gibt nur einen `InitializationReason` Aufzählungswert für Aufgabenbereich-und Inhalts-Add-Ins zurück. Für Outlook-Add-Ins wird kein Wert zurückgegeben.
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office unter Windows </th><th> Office im Webbrowser </th><th> Office auf dem iPad </th><th> Outlook auf mobilen Geräten </th><th> Office für Mac </th></tr> <tr><td><strong> Excel </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> v </td></tr> <tr><td><strong> Outlook </strong></td><td> v </td><td> v </td><td> </td><td> v </td><td> v </td></tr> <tr><td><strong> PowerPoint </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> v </td></tr> <tr><td><strong> Project </strong></td><td> v </td><td> </td><td> </td><td> </td><td> v </td></tr> <tr><td><strong> Wort </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> v </td></tr> </table>\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// You can use the value of the InitializationEnumeration to implement different logic for\n// when the add-in is first inserted versus when it is already part of the document.\n// The following example shows some simple logic that uses the value of the reason parameter\n// to display how the task pane or content add-in was initialized.\nOffice.initialize = function (reason) {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n    // After the DOM is loaded, code specific to the add-in can run.\n    // Display initialization reason.\n    if (reason == \"inserted\")\n    write(\"The add-in was just inserted.\");\n\n    if (reason == \"documentOpened\")\n    write(\"The add-in is already part of the document.\");\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function initialize(reason: InitializationReason): void;'
    parameters:
    - id: reason
      description: Gibt an, wie die APP initialisiert wurde.
      type: <xref uid="office!Office.InitializationReason:enum" />
    return:
      type: void
      description: ''
- name: Office.isSetSupported(name, minVersion)
  uid: office!Office.isSetSupported:function(1)
  package: office!
  summary: Überprüft, ob der angegebene Anforderungs Satzes von der Host-Office-Anwendung unterstützt wird.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function isSetSupported(name: string, minVersion?: string): boolean;'
    parameters:
    - id: name
      description: Name festlegen; beispielsweise "MatrixBindings".
      type: string
    - id: minVersion
      description: Die mindestens erforderliche Version; beispielsweise "1,4".
      type: string
    return:
      type: boolean
      description: ''
- name: Office.onReady(callback)
  uid: office!Office.onReady:function(1)
  package: office!
  summary: Stellt sicher, dass die Office-JavaScript-APIs bereit sind, vom Add-in aufgerufen zu werden. Wenn das Framework noch nicht initialisiert wurde, wird der Rückruf oder die Zusage warten, bis der Office-Host bereit ist, API-Aufrufe zu akzeptieren. Beachten Sie, dass diese API zwar für die Verwendung in einem Office-Add-in vorgesehen ist, aber auch außerhalb des Add-Ins verwendet werden kann. Wenn Office.js in diesem Fall feststellt, dass es außerhalb einer Office-Hostanwendung läuft, ruft es den Rückruf auf und löst das Promise mit "Null" sowohl für den Host als auch für die Plattform auf.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function onReady(callback?: (info: { host: HostType, platform: PlatformType }) => any): Promise<{ host: HostType, platform: PlatformType }>;'
    parameters:
    - id: callback
      description: Eine optionale Rückrufmethode, die die Host-und Plattforminformationen empfangen wird. Alternativ kann ein Add-in, anstatt einen Rückruf zu verwenden, einfach auf die von der Funktion zurückgegebene Zusage warten, um Sie aufzulösen.
      type: '(info: { host: <xref uid="office!Office.HostType:enum" />, platform: <xref uid="office!Office.PlatformType:enum" /> }) =&gt; any'
    return:
      type: 'Promise&lt;{ host: <xref uid="office!Office.HostType:enum" />, platform: <xref uid="office!Office.PlatformType:enum" /> }&gt;'
      description: Eine Zusage, die die Host-und Plattforminformationen enthält, sobald die Initialisierung abgeschlossen ist.
- name: Office.select(expression, callback)
  uid: office!Office.select:function(1)
  package: office!
  summary: Gibt eine Zusage eines im Ausdruck beschriebenen Objekts zurück. Rückruf wird nur aufgerufen, wenn Method fehlschlägt.
  remarks: >-
    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office unter Windows </th><th> Office im Webbrowser </th><th> Office auf dem iPad </th></tr> <tr><td><strong> Excel </strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong> Wort </strong></td><td> v </td><td> </td><td> v </td></tr> </table>


    #### <a name="examples"></a>Beispiele


    ```javascript

    // The following code example uses the select method to retrieve a binding with the id "cities" from

    // the Bindings collection, and then calls the addHandlerAsync method to add an event handler for the

    // dataChanged event of the binding.

    function addBindingDataChangedEventHandler() {
        Office.select("bindings#cities", function onError(){}).addHandlerAsync(Office.EventType.BindingDataChanged,
        function (eventArgs) {
            doSomethingWithBinding(eventArgs.binding);
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function select(expression: string, callback?: (result: AsyncResult<any>) => void): Binding;'
    parameters:
    - id: expression
      description: 'Das Objekt, das abgerufen werden soll. Beispiel "Bindings- \# Bindungsname": Ruft ein Bindungs Versprechen für eine Bindung mit dem Namen "bindingName" ab.'
      type: string
    - id: callback
      description: Optional. Eine Funktion, die aufgerufen wird, wenn der Rückruf zurückgegeben wird, deren einziger Parameter vom Typ [Office. AsyncResult](xref:office!Office.AsyncResult:interface) ist<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: <xref uid="office!Office.Binding:interface" />
      description: ''
- name: Office.useShortNamespace(useShortNamespace)
  uid: office!Office.useShortNamespace:function(1)
  package: office!
  summary: Schaltet den `Office` Alias für den vollständigen Namespace ein und aus `Microsoft.Office.WebExtension` .
  remarks: "**Supportdetails**\n\nEin Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.\n\nWeitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Anforderungen für die Ausführung von Office-Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office unter Windows </th><th> Office im Webbrowser </th><th> Office auf dem iPad </th><th> Outlook auf mobilen Geräten </th><th> Office für Mac </th></tr> <tr><td><strong> Excel </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong> Outlook </strong></td><td> v </td><td> v </td><td> </td><td> v </td><td> v </td></tr> <tr><td><strong> PowerPoint </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong> Project </strong></td><td> v </td><td> </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Wort </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> </td></tr> </table>\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nfunction startUsingShortNamespace() {\n    if (typeof Office === 'undefined') {\n        Microsoft.Office.WebExtension.useShortNamespace(true);\n    }\n    else {\n        Office.useShortNamespace(true);\n    }\n    write('Office alias is now ' + typeof Office);\n}\n\nfunction stopUsingShortNamespace() {\n    if (typeof Office === 'undefined') {\n        Microsoft.Office.WebExtension.useShortNamespace(false);\n    }\n    else {\n        Office.useShortNamespace(false);\n    }\n    write('Office alias is now ' + typeof Office);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function useShortNamespace(useShortNamespace: boolean): void;'
    parameters:
    - id: useShortNamespace
      description: True, wenn der Verknüpfungs Alias verwendet werden soll; andernfalls false, um es zu deaktivieren. Der Standardwert ist „true“.
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 857c715bbcafb17c20df32383d9c9c44e38699d0
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49265955"
