### YamlMime:UniversalReference
items:
  - uid: office.OfficeExtension.LoadOption
    summary: '<span data-ttu-id="a79a6-101">Gibt an, welche Eigenschaften eines Objekts geladen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a79a6-101">Specifies which properties of an object should be loaded.</span></span> <span data-ttu-id="a79a6-102">Diese Belastung geschieht, wenn die Sync ()-Methode ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="a79a6-102">This load happens when the sync() method is executed.</span></span> <span data-ttu-id="a79a6-103">Dadurch werden die Status zwischen Office-Objekten und den entsprechenden JavaScript-Proxyobjekten synchronisiert.</span><span class="sxs-lookup"><span data-stu-id="a79a6-103">This synchronizes the states between Office objects and corresponding JavaScript proxy objects.</span></span>'
    remarks: |-
      <span data-ttu-id="a79a6-104">Bei Word ist die bevorzugte Methode zum Angeben der Eigenschaften und Paginginformationen ein Zeichenfolgenliteral.</span><span class="sxs-lookup"><span data-stu-id="a79a6-104">For Word, the preferred method for specifying the properties and paging information is by using a string literal.</span></span> <span data-ttu-id="a79a6-105">In den folgenden zwei Beispielen wird die bevorzugte Methode zum Anfordern der Text- und Schriftgradeigenschaften für Absätze in einer Absatzsammlung dargestellt:</span><span class="sxs-lookup"><span data-stu-id="a79a6-105">The first two examples show the preferred way to request the text and font size properties for paragraphs in a paragraph collection:</span></span>

      `context.load(paragraphs, 'text, font/size');`

      `paragraphs.load('text, font/size');`

      <span data-ttu-id="a79a6-106">Hier sehen Sie ein ähnliches Beispiel mit Objektnotation (einschließlich Paging):</span><span class="sxs-lookup"><span data-stu-id="a79a6-106">Here is a similar example using object notation (includes paging):</span></span>

      `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`

      `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`

      <span data-ttu-id="a79a6-107">Hinweis: Wenn keine bestimmten Eigenschaften des Schriftartenobjekts in der select-Anweisung angegeben sind, gibt die expand-Anweisung an, dass alle Schriftarteneigenschaften geladen werden.</span><span class="sxs-lookup"><span data-stu-id="a79a6-107">Note that if we don't specify the specific properties on the font object in the select statement, the expand statement by itself would indicate that all of the font properties are loaded.</span></span>

      #### <a name="examples"></a><span data-ttu-id="a79a6-108">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a79a6-108">Examples</span></span>

      ```javascript
      // This example shows how to get the paragraphs in the Word document
      // along with their text and font size properties.

      // Run a batch operation against the Word object model.
      Word.run(function (context) {
          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the text and font properties.
          // It is best practice to always specify the property set.
          // Otherwise, all properties are returned on the object.
          context.load(paragraphs, 'text, font/size');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              // Insert code that works with the paragraphs loaded by context.load().
          })
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
    name: OfficeExtension.LoadOption
    fullName: OfficeExtension.LoadOption
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.OfficeExtension.LoadOption.expand
      - office.OfficeExtension.LoadOption.select
      - office.OfficeExtension.LoadOption.skip
      - office.OfficeExtension.LoadOption.top
  - uid: office.OfficeExtension.LoadOption.expand
    summary: '<span data-ttu-id="a79a6-109">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="a79a6-109">A comma-delimited string, or array of strings, that specifies the navigation properties to load.</span></span>'
    name: expand
    fullName: expand
    langs:
      - typeScript
    type: property
    syntax:
      content: 'expand?: string | string[];'
      return:
        type:
          - 'string | string[]'
  - uid: office.OfficeExtension.LoadOption.select
    summary: '<span data-ttu-id="a79a6-110">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="a79a6-110">A comma-delimited string, or array of strings, that specifies the properties to load.</span></span>'
    name: select
    fullName: select
    langs:
      - typeScript
    type: property
    syntax:
      content: 'select?: string | string[];'
      return:
        type:
          - 'string | string[]'
  - uid: office.OfficeExtension.LoadOption.skip
    summary: '<span data-ttu-id="a79a6-111">Nur für Sammlungstypen nutzbar.</span><span class="sxs-lookup"><span data-stu-id="a79a6-111">Only usable on collection types.</span></span> <span data-ttu-id="a79a6-112">Gibt die Anzahl der Elemente in der Auflistung an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="a79a6-112">Specifies the number of items in the collection that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a79a6-113">Wenn Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.</span><span class="sxs-lookup"><span data-stu-id="a79a6-113">If top is specified, the result set will start after skipping the specified number of items.</span></span>'
    name: skip
    fullName: skip
    langs:
      - typeScript
    type: property
    syntax:
      content: 'skip?: number;'
      return:
        type:
          - number
  - uid: office.OfficeExtension.LoadOption.top
    summary: '<span data-ttu-id="a79a6-114">Nur für Sammlungstypen nutzbar.</span><span class="sxs-lookup"><span data-stu-id="a79a6-114">Only usable on collection types.</span></span> <span data-ttu-id="a79a6-115">Gibt die maximale Anzahl der Sammlungselemente an, die im Ergebnis enthalten sein können.</span><span class="sxs-lookup"><span data-stu-id="a79a6-115">Specifies the maximum number of collection items that can be included in the result.</span></span>'
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'top?: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a79a6-116">Beispiele</span><span class="sxs-lookup"><span data-stu-id="a79a6-116">Examples</span></span>

          ```javascript
          // This OneNote example shows how to get the page title and indentation level
          // of the top five pages in the current section.
          OneNote.run(function (context) {
              // Get the pages in the current section.
              var pages = context.application.getActiveSection().pages;

              // Queue a command to load the pages.           
              pages.load({ "select":"title,pageLevel", "top":5, "skip":0 });
              return context.sync()
                  .then(function() {
                      // Iterate through the collection of pages.    
                      $.each(pages.items, function(index, page) {
                          // Show some properties.
                          console.log("Page title: " + page.title);
                          console.log("Indentation level: " + page.pageLevel);
                      });
                  }).catch(function(error) {
                      console.log("Error: " + error);
                      if (error instanceof OfficeExtension.Error) {
                          console.log("Debug info: " + JSON.stringify(error.debugInfo));
                      }
                  })
              });
          ```