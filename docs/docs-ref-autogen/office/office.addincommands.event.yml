### YamlMime:UniversalReference
ms.openlocfilehash: 708200260af7682cd194186f3048a84ac72b1320
ms.sourcegitcommit: b0b614f5315ab2e5c1e0ea51c687498f87684a07
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/15/2019
ms.locfileid: "30055757"
items:
- uid: office.Office.AddinCommands.Event
  summary: Das event-Objekt wird als ein Parameter an Add-In-Funktionen übergeben, die von Befehlsschaltflächen ohne Benutzeroberfläche aufgerufen werden. Das Objekt ermöglicht dem Add-In, zu erkennen, auf welche Schaltfläche geklickt wurde, und dem Host zu signalisieren, dass die Verarbeitung abgeschlossen wurde.
  remarks: <table> <tr><td>Add-In-Typ</td><td>Inhalt, Aufgabenbereich, Outlook</td></tr> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Eingeschränkt</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>VerFassen oder lesen</td></tr> </table>
  name: Office.AddinCommands.Event
  fullName: Office.AddinCommands.Event
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.AddinCommands.Event.completed
  - office.Office.AddinCommands.Event.source
- uid: office.Office.AddinCommands.Event.completed
  summary: >-
    Gibt an, dass das Add-In die Verarbeitung abgeschlossen hat, die durch eine Add-In-Befehlsschaltfläche oder einen Ereignishandler ausgelöst wurde.


    Diese Methode muss am Ende einer Funktion aufgerufen werden, die durch einen Add-In-Befehl aufgerufen wurde, der mit einem Action-Element mit einem xsi:type-Attribut (festgelegt auf ExecuteFunction) definiert wurde. Das Aufrufen dieser Methode signalisiert dem Hostclient, dass die Funktion abgeschlossen ist und dass er alle Zustände, die mit dem Aufrufen der Funktion verknüpft sind, bereinigen kann. Wenn der Benutzer z. B. Outlook schließt, bevor diese Methode aufgerufen wird, gibt Outlook eine Warnung aus, dass noch eine Funktion ausgeführt wird.


    Diese Methode muss in einem über Office.context.mailbox.addHandlerAsync hinzugefügten Ereignishandler aufgerufen werden, sobald die Verarbeitung des Ereignisses abgeschlossen ist.


    \[[API-Satz: Mailbox 1,3](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: >-
    <table> <tr><td>[Mindestberechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Eingeschränkt</td></tr> <tr><td>[Zutreffender Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>VerFassen oder lesen</td></tr> </table>


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Methode in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Methode nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Outlook</strong></td><td> Y (Postfach 1,3) </td><td> </td><td> </td></tr> <tr><td><strong>Kulissen</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Wort</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Beispiele


    ```javascript

    function processItem (event) {
        // Do some processing

        event.completed();
    }


    // In the following example, the checkMessage function has

    // been registered as an event handler for ItemSend.

    function checkMessage(event) {
        // Get the item being sent
        var outgoingMsg = Office.context.mailbox.item;

        // Check if subject contains "BLOCK"
        outgoingMsg.subject.getAsync(function (result) {
            // Subject is in result.value
            if (result.value.indexOf('BLOCK') != -1) {
                // Value is found, stop send
                event.completed({allowEvent = false});
            } else {
                // Value wasn't found, allow send
                event.completed({allowEvent = true});
            }
        });
    }

    ```
  name: completed(options)
  fullName: completed(options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'completed(options?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: 'Optional. Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. allowEvent: ein boolescher Wert. Wenn die completed-Methode verwendet wird, um den Abschluss eines Ereignishandlers zu signalisieren, gibt dieser Wert an, dass das Handled-Ereignis weiterhin ausgeführt oder abgebrochen werden soll. Beispielsweise kann ein Add-in, das das ItemSend-Ereignis behandelt, allowEvent = false festlegen, um das Senden der Nachricht abzubrechen.'
      type:
      - any
- uid: office.Office.AddinCommands.Event.source
  summary: >-
    Informationen zu dem Steuerelement, das das Aufrufen dieser Funktion ausgelöst hat.


    **Supportdetails**


    Ein Häkchen (v) in der folgenden Matrix weist darauf hin, dass diese Eigenschaft in der entsprechenden Office-Hostanwendung unterstützt wird. Eine leere Zelle weist darauf hin, dass die Office-Hostanwendung diese Eigenschaft nicht unterstützt.


    Weitere Informationen zu den Anforderungen der Office-Hostanwendung und des Servers finden Sie unter [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Unterstützte Hosts nach Plattform* <table> <tr><th> </th><th> Office für Windows Desktop </th><th> Office Online (im Browser) </th><th> Office für iPad </th></tr> <tr><td><strong>Outlook</strong></td><td> Y (Postfach 1,3) </td><td> </td><td> </td></tr> </table>
  name: source
  fullName: source
  langs:
  - typeScript
  type: property
  syntax:
    content: source:Source;
    return:
      type:
      - office.Office.AddinCommands.Source
      description: "\n#### <a name=\"examples\"></a>Examples\n\n```javascript\n// In this example, consider a button defined in an add-in manifest as follows:\n//<Control xsi:type=\"Button\" id=\"eventTestButton\">\n//    <Label resid=\"eventButtonLabel\" />\n//    <Tooltip resid=\"eventButtonTooltip\" />\n//    <Supertip>\n//        <Title resid=\"eventSuperTipTitle\" />\n//        <Description resid=\"eventSuperTipDescription\" />\n//    </Supertip>\n//    <Icon>\n//        <bt:Image size=\"16\" resid=\"blue-icon-16\" />\n//        <bt:Image size=\"32\" resid=\"blue-icon-32\" />\n//        <bt:Image size=\"80\" resid=\"blue-icon-80\" />\n//    </Icon>\n//    <Action xsi:type=\"ExecuteFunction\">\n//        <FunctionName>testEventObject</FunctionName>\n//    </Action>\n//</Control>\n\n// The button has an id attribute set to eventTestButton, and will invoke\n// the testEventObject function defined in the add-in.\n// That function looks like this:\nfunction testEventObject(event) {\n    // The event object implements the Event interface.\n\n    // This value will be \"eventTestButton\".\n    var buttonId = event.source.id;\n\n    // Signal to the host app that processing is complete.\n    event.completed();\n}\n```\n```javascript\n// Function is used by two buttons:\n// button1 and button2\nfunction multiButton (event) {\n    // Check which button was clicked.\n    var buttonId = event.source.id;\n\n    if (buttonId === 'button1') {\n        doButton1Action();\n    } else {\n        doButton2Action();\n    }\n\n    event.completed();\n}\n```"
