### YamlMime:UniversalReference
items:
  - uid: office.Office.AddinCommands.Event
    summary: '<span data-ttu-id="7ad74-101">Das Event-Objekt wird als Parameter an Add-in-Funktionen übergeben, die von Benutzeroberflächen losen Befehlsschaltflächen aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="7ad74-101">The event object is passed as a parameter to add-in functions invoked by UI-less command buttons.</span></span> <span data-ttu-id="7ad74-102">Das Objekt ermöglicht dem Add-In, zu erkennen, auf welche Schaltfläche geklickt wurde, und dem Host zu signalisieren, dass die Verarbeitung abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="7ad74-102">The object allows the add-in to identify which button was clicked and to signal the host that it has completed its processing.</span></span>'
    remarks: |-
      <span data-ttu-id="7ad74-103">Weitere Supportinformationen finden Sie unter [Add-in-Befehle – Anforderungs Sätze](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets) .</span><span class="sxs-lookup"><span data-stu-id="7ad74-103">See [Add-in commands requirement sets](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets) for more support information.</span></span>

      <span data-ttu-id="7ad74-104">\*\* [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->\*\*: eingeschränkt</span><span class="sxs-lookup"><span data-stu-id="7ad74-104">**[Minimum permission level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted</span></span>

      <span data-ttu-id="7ad74-105">\*\* [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->\*\*: Verfassen oder lesen</span><span class="sxs-lookup"><span data-stu-id="7ad74-105">**[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose or Read</span></span>
    name: Office.AddinCommands.Event
    fullName: Office.AddinCommands.Event
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.AddinCommands.Event.completed
      - office.Office.AddinCommands.Event.source
  - uid: office.Office.AddinCommands.Event.completed
    summary: |-
      <span data-ttu-id="7ad74-106">Gibt an, dass das Add-In die Verarbeitung abgeschlossen hat, die durch eine Add-In-Befehlsschaltfläche oder einen Ereignishandler ausgelöst wurde.</span><span class="sxs-lookup"><span data-stu-id="7ad74-106">Indicates that the add-in has completed processing that was triggered by an add-in command button or event handler.</span></span>

      <span data-ttu-id="7ad74-107">Diese Methode muss am Ende einer Funktion aufgerufen werden, die durch einen Add-in-Befehl aufgerufen wurde, der mit einem Action-Element mit einem xsi: Type-Attribut auf ExecuteFunction festgelegt wurde.</span><span class="sxs-lookup"><span data-stu-id="7ad74-107">This method must be called at the end of a function which was invoked by an add-in command defined with an Action element with an xsi:type attribute set to ExecuteFunction.</span></span> <span data-ttu-id="7ad74-108">Durch Aufrufen dieser Methode wird dem Host Client signalisiert, dass die Funktion abgeschlossen ist und dass Sie alle mit dem Aufrufen der Funktion befassten Zustände bereinigen kann.</span><span class="sxs-lookup"><span data-stu-id="7ad74-108">Calling this method signals the host client that the function is complete and that it can clean up any state involved with invoking the function.</span></span> <span data-ttu-id="7ad74-109">Wenn der Benutzer beispielsweise Outlook schließt, bevor diese Methode aufgerufen wird, warnt Outlook davor, dass eine Funktion noch ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="7ad74-109">For example, if the user closes Outlook before this method is called, Outlook will warn that a function is still executing.</span></span>

      <span data-ttu-id="7ad74-110">Diese Methode muss in einem über Office.context.mailbox.addHandlerAsync hinzugefügten Ereignishandler aufgerufen werden, sobald die Verarbeitung des Ereignisses abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="7ad74-110">This method must be called in an event handler added via Office.context.mailbox.addHandlerAsync after completing processing of the event.</span></span>

      <span data-ttu-id="7ad74-111">\[[API-Gruppe: Mailbox 1,3](/office/dev/add-ins/reference/javascript-api-for-office)\]</span><span class="sxs-lookup"><span data-stu-id="7ad74-111">\[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/javascript-api-for-office) \]</span></span>
    remarks: |-
      <span data-ttu-id="7ad74-112">\*\* [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->\*\*: eingeschränkt</span><span class="sxs-lookup"><span data-stu-id="7ad74-112">**[Minimum permission level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted</span></span>

      <span data-ttu-id="7ad74-113">\*\* [Anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->\*\*: Verfassen oder lesen</span><span class="sxs-lookup"><span data-stu-id="7ad74-113">**[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose or Read</span></span>

      <span data-ttu-id="7ad74-114">Das Postfach 1,3 verfügt nicht über `options` den Parameter, während die Post fach Vorschau `options` Unterstützung für Parameter hat.</span><span class="sxs-lookup"><span data-stu-id="7ad74-114">Mailbox 1.3 does not have the `options` parameter while Mailbox Preview does have support for `options` parameter.</span></span>

      #### <a name="examples"></a><span data-ttu-id="7ad74-115">Beispiele</span><span class="sxs-lookup"><span data-stu-id="7ad74-115">Examples</span></span>

      ```javascript
      function processItem (event) {
          // Do some processing

          event.completed();
      }

      // In the following example, the checkMessage function has
      // been registered as an event handler for ItemSend.
      function checkMessage(event) {
          // Get the item being sent
          var outgoingMsg = Office.context.mailbox.item;

          // Check if subject contains "BLOCK"
          outgoingMsg.subject.getAsync(function (result) {
              // Subject is in result.value
              if (result.value.indexOf('BLOCK') != -1) {
                  // Value is found, stop send
                  event.completed({allowEvent = false});
              } else {
                  // Value wasn't found, allow send
                  event.completed({allowEvent = true});
              }
          });
      }
      ```
    name: completed(options)
    fullName: completed(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'completed(options?: EventCompletedOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="7ad74-116">Optional.</span><span class="sxs-lookup"><span data-stu-id="7ad74-116">Optional.</span></span> <span data-ttu-id="7ad74-117">Ein Objekt, das Verhaltensoptionen für das Ende des Ereignisses angibt.</span><span class="sxs-lookup"><span data-stu-id="7ad74-117">An object that specifies behavior options for when the event is completed.</span></span>'
          type:
            - office.Office.AddinCommands.EventCompletedOptions
  - uid: office.Office.AddinCommands.Event.source
    summary: '<span data-ttu-id="7ad74-118">Informationen zu dem Steuerelement, das den Aufruf dieser Funktion ausgelöst hat.</span><span class="sxs-lookup"><span data-stu-id="7ad74-118">Information about the control that triggered calling this function.</span></span>'
    remarks: |-
      <span data-ttu-id="7ad74-119">Diese Eigenschaft wird nur in Outlook im [Anforderungs Mappen](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) -Postfach 1,3 und höher unterstützt.</span><span class="sxs-lookup"><span data-stu-id="7ad74-119">This property is only supported in Outlook in [requirement set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) Mailbox 1.3 and later.</span></span>

      #### <a name="examples"></a><span data-ttu-id="7ad74-120">Beispiele</span><span class="sxs-lookup"><span data-stu-id="7ad74-120">Examples</span></span>

      ```javascript
      // In this example, consider a button defined in an add-in manifest as follows:
      //<Control xsi:type="Button" id="eventTestButton">
      //    <Label resid="eventButtonLabel" />
      //    <Tooltip resid="eventButtonTooltip" />
      //    <Supertip>
      //        <Title resid="eventSuperTipTitle" />
      //        <Description resid="eventSuperTipDescription" />
      //    </Supertip>
      //    <Icon>
      //        <bt:Image size="16" resid="blue-icon-16" />
      //        <bt:Image size="32" resid="blue-icon-32" />
      //        <bt:Image size="80" resid="blue-icon-80" />
      //    </Icon>
      //    <Action xsi:type="ExecuteFunction">
      //        <FunctionName>testEventObject</FunctionName>
      //    </Action>
      //</Control>

      // The button has an id attribute set to eventTestButton, and will invoke
      // the testEventObject function defined in the add-in.
      // That function looks like this:
      function testEventObject(event) {
          // The event object implements the Event interface.

          // This value will be "eventTestButton".
          var buttonId = event.source.id;

          // Signal to the host app that processing is complete.
          event.completed();
      }
      ```
      ```javascript
      // Function is used by two buttons:
      // button1 and button2
      function multiButton (event) {
          // Check which button was clicked.
          var buttonId = event.source.id;

          if (buttonId === 'button1') {
              doButton1Action();
          } else {
              doButton2Action();
          }

          event.completed();
      }
      ```
    name: source
    fullName: source
    langs:
      - typeScript
    type: property
    syntax:
      content: 'source:Source;'
      return:
        type:
          - office.Office.AddinCommands.Source