### YamlMime:UniversalReference
items:
  - uid: office.Office.AddinCommands.Event
    summary: 'Das Event-Objekt wird als Parameter an Add-in-Funktionen übergeben, die von Benutzeroberflächen losen Befehlsschaltflächen aufgerufen werden. Das Objekt ermöglicht dem Add-In, zu erkennen, auf welche Schaltfläche geklickt wurde, und dem Host zu signalisieren, dass die Verarbeitung abgeschlossen wurde.'
    remarks: |-
      Weitere Informationen finden Sie unter [Add-in-Befehls Anforderungs Sätze](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets) .

      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: eingeschränkt ** [anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen
    name: Office.AddinCommands.Event
    fullName: Office.AddinCommands.Event
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.AddinCommands.Event.completed
      - office.Office.AddinCommands.Event.source
  - uid: office.Office.AddinCommands.Event.completed
    summary: |-
      Gibt an, dass das Add-In die Verarbeitung abgeschlossen hat, die durch eine Add-In-Befehlsschaltfläche oder einen Ereignishandler ausgelöst wurde.

      Diese Methode muss am Ende einer Funktion aufgerufen werden, die von einem Add-in-Befehl aufgerufen wurde, der mit einem Action-Element mit einem xsi: Type-Attribut auf ExecuteFunction festgelegt wurde. Durch Aufrufen dieser Methode wird dem Host Client signalisiert, dass die Funktion abgeschlossen ist und dass jeder Zustand, der mit dem Aufrufen der Funktion verbunden ist, bereinigt werden kann. Wenn der Benutzer beispielsweise Outlook schließt, bevor diese Methode aufgerufen wird, warnt Outlook, dass eine Funktion weiterhin ausgeführt wird.

      Diese Methode muss in einem über Office.context.mailbox.addHandlerAsync hinzugefügten Ereignishandler aufgerufen werden, sobald die Verarbeitung des Ereignisses abgeschlossen ist.

      \[[API-Satz: Mailbox 1,3](/office/dev/add-ins/reference/javascript-api-for-office)\]
    remarks: |-
      ** [Minimale Berechtigungsstufe](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: eingeschränkt ** [anwendbarer Outlook-Modus](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Verfassen oder lesen

      Postfach 1,3 hat nicht den Parameter `options` , während die Post fach Vorschau Unterstützung `options` für Parameter hat)

      #### <a name="examples"></a>Beispiele

      ```javascript
      function processItem (event) {
          // Do some processing

          event.completed();
      }

      // In the following example, the checkMessage function has
      // been registered as an event handler for ItemSend.
      function checkMessage(event) {
          // Get the item being sent
          var outgoingMsg = Office.context.mailbox.item;

          // Check if subject contains "BLOCK"
          outgoingMsg.subject.getAsync(function (result) {
              // Subject is in result.value
              if (result.value.indexOf('BLOCK') != -1) {
                  // Value is found, stop send
                  event.completed({allowEvent = false});
              } else {
                  // Value wasn't found, allow send
                  event.completed({allowEvent = true});
              }
          });
      }
      ```
    name: completed(options)
    fullName: completed(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'completed(options?: { allowEvent: boolean }): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Optional. Ein Objektliteral, das mindestens eine der folgenden Eigenschaften enthält. allowEvent: ein boolescher Wert. Wenn die completed-Methode verwendet wird, um den Abschluss eines Ereignishandlers zu signalisieren, gibt dieser Wert an, dass das Handled-Ereignis weiterhin ausgeführt oder abgebrochen werden soll. Beispielsweise kann ein Add-in, das das ItemSend-Ereignis behandelt, allowEvent = false festlegen, um das Senden der Nachricht abzubrechen.'
          type:
            - '{ allowEvent: boolean }'
  - uid: office.Office.AddinCommands.Event.source
    summary: 'Informationen zu dem Steuerelement, das das Aufrufen dieser Funktion ausgelöst hat.'
    remarks: |-
      Diese Eigenschaft wird nur in Outlook im [Anforderungssatz](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) Mailbox 1,3 und höher unterstützt.

      #### <a name="examples"></a>Beispiele

      ```javascript
      // In this example, consider a button defined in an add-in manifest as follows:
      //<Control xsi:type="Button" id="eventTestButton">
      //    <Label resid="eventButtonLabel" />
      //    <Tooltip resid="eventButtonTooltip" />
      //    <Supertip>
      //        <Title resid="eventSuperTipTitle" />
      //        <Description resid="eventSuperTipDescription" />
      //    </Supertip>
      //    <Icon>
      //        <bt:Image size="16" resid="blue-icon-16" />
      //        <bt:Image size="32" resid="blue-icon-32" />
      //        <bt:Image size="80" resid="blue-icon-80" />
      //    </Icon>
      //    <Action xsi:type="ExecuteFunction">
      //        <FunctionName>testEventObject</FunctionName>
      //    </Action>
      //</Control>

      // The button has an id attribute set to eventTestButton, and will invoke
      // the testEventObject function defined in the add-in.
      // That function looks like this:
      function testEventObject(event) {
          // The event object implements the Event interface.

          // This value will be "eventTestButton".
          var buttonId = event.source.id;

          // Signal to the host app that processing is complete.
          event.completed();
      }
      ```
      ```javascript
      // Function is used by two buttons:
      // button1 and button2
      function multiButton (event) {
          // Check which button was clicked.
          var buttonId = event.source.id;

          if (buttonId === 'button1') {
              doButton1Action();
          } else {
              doButton2Action();
          }

          event.completed();
      }
      ```
    name: source
    fullName: source
    langs:
      - typeScript
    type: property
    syntax:
      content: 'source:Source;'
      return:
        type:
          - office.Office.AddinCommands.Source