### YamlMime:UniversalReference
ms.openlocfilehash: 38cca7c5b3392313fdba2b69e9339111400f77ea
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/13/2019
ms.locfileid: "29978715"
items:
- uid: office-runtime.OfficeRuntime.AsyncStorage
  summary: <span data-ttu-id="ae215-101">Asynchrone, globale und beständigen-Schlüssel / Wert-Speicher, die durch benutzerdefinierte Funktionen von Excel verwendet werden können.</span><span class="sxs-lookup"><span data-stu-id="ae215-101">Asynchronous, global, and persistent key-value storage that can be used by Excel Custom Functions.</span></span>
  remarks: >-
    <span data-ttu-id="ae215-102">Jede Instanz-add-in verfügt über eine eigene Speicherpartition, die für einen Benutzer und ihr Gerät eindeutig.</span><span class="sxs-lookup"><span data-stu-id="ae215-102">Each add-in instance has its own storage partition, unique to a user and their device.</span></span>


    <span data-ttu-id="ae215-103">Die Standarddaten Gesamtspeicher pro-add-in ist 5 MB groß sind.</span><span class="sxs-lookup"><span data-stu-id="ae215-103">The default amount of total storage allowed per add-in is 5MB.</span></span>


    <span data-ttu-id="ae215-104">Jede Methode, die unten aufgeführten gibt eine Zusage-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="ae215-104">Each method listed below returns a Promise object.</span></span>
  isPreview: true
  name: OfficeRuntime.AsyncStorage
  fullName: OfficeRuntime.AsyncStorage
  langs:
  - typeScript
  type: interface
  package: office-runtime
  children:
  - office-runtime.OfficeRuntime.AsyncStorage.getAllKeys
  - office-runtime.OfficeRuntime.AsyncStorage.getItem
  - office-runtime.OfficeRuntime.AsyncStorage.multiGet
  - office-runtime.OfficeRuntime.AsyncStorage.multiRemove
  - office-runtime.OfficeRuntime.AsyncStorage.multiSet
  - office-runtime.OfficeRuntime.AsyncStorage.removeItem
  - office-runtime.OfficeRuntime.AsyncStorage.setItem
- uid: office-runtime.OfficeRuntime.AsyncStorage.getAllKeys
  summary: <span data-ttu-id="ae215-105">Gibt eine Zusage mit alle Schlüssel zurück.</span><span class="sxs-lookup"><span data-stu-id="ae215-105">Returns a Promise with all keys.</span></span>
  isPreview: true
  name: getAllKeys(callback)
  fullName: getAllKeys(callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getAllKeys(callback?: (error?: Error, keys?: string[]) => void): Promise<string[]>;'
    return:
      type:
      - Promise<string[]>
      description: ''
    parameters:
    - id: callback
      description: ''
      type:
      - '(error?: Error, keys?: string[]) => void'
- uid: office-runtime.OfficeRuntime.AsyncStorage.getItem
  summary: <span data-ttu-id="ae215-106">Ruft ein Objekt auf Grundlage eines Schlüssels ab und ruft einen Rückruf nach Abschluss des.</span><span class="sxs-lookup"><span data-stu-id="ae215-106">Retrieves an object based on a key and invokes a callback when finished.</span></span> <span data-ttu-id="ae215-107">Gibt eine Zusage zurück.</span><span class="sxs-lookup"><span data-stu-id="ae215-107">Returns a Promise.</span></span>
  isPreview: true
  name: getItem(key, callback)
  fullName: getItem(key, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string, callback?: (error?: Error, result?: string) => void): Promise<string>;'
    return:
      type:
      - Promise<string>
      description: ''
    parameters:
    - id: key
      description: ''
      type:
      - string
    - id: callback
      description: ''
      type:
      - '(error?: Error, result?: string) => void'
- uid: office-runtime.OfficeRuntime.AsyncStorage.multiGet
  summary: <span data-ttu-id="ae215-108">Ruft einen Batch von Schlüsseln, gemäß dem `keys` Array.</span><span class="sxs-lookup"><span data-stu-id="ae215-108">Fetches a batch of keys, specified in the `keys` array.</span></span> <span data-ttu-id="ae215-109">Wenn Sie ein Schlüssel nicht vorhanden ist, gibt null zurück.</span><span class="sxs-lookup"><span data-stu-id="ae215-109">When a key doesn't exist, returns null.</span></span>
  isPreview: true
  name: multiGet(keys, callback)
  fullName: multiGet(keys, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'multiGet(keys: string[], callback?: (errors?: Error[], result?: string[][]) => void): Promise<string[][]>;'
    return:
      type:
      - Promise<string[][]>
      description: ''
    parameters:
    - id: keys
      description: ''
      type:
      - string[]
    - id: callback
      description: ''
      type:
      - '(errors?: Error[], result?: string[][]) => void'
- uid: office-runtime.OfficeRuntime.AsyncStorage.multiRemove
  summary: <span data-ttu-id="ae215-110">Löscht einen Batch von Schlüsseln, gemäß dem `keys` Array.</span><span class="sxs-lookup"><span data-stu-id="ae215-110">Deletes a batch of keys, specified in the `keys` array.</span></span>
  isPreview: true
  name: multiRemove(keys, callback)
  fullName: multiRemove(keys, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'multiRemove(keys: string[], callback?: (errors?: Error[]) => void): Promise<void>;'
    return:
      type:
      - Promise<void>
      description: ''
    parameters:
    - id: keys
      description: ''
      type:
      - string[]
    - id: callback
      description: ''
      type:
      - '(errors?: Error[]) => void'
- uid: office-runtime.OfficeRuntime.AsyncStorage.multiSet
  summary: <span data-ttu-id="ae215-111">Mehrere Schlüssel-Wert-Paare in einem Batch gespeichert.</span><span class="sxs-lookup"><span data-stu-id="ae215-111">Stores multiple key-value pairs in one batch.</span></span> <span data-ttu-id="ae215-112">Gibt eine Zusage zurück.</span><span class="sxs-lookup"><span data-stu-id="ae215-112">Returns a Promise.</span></span> <span data-ttu-id="ae215-113">Wenn Sie ein Schlüssel nicht vorhanden ist, gibt null zurück.</span><span class="sxs-lookup"><span data-stu-id="ae215-113">When a key doesn't exist, returns null.</span></span>
  isPreview: true
  name: multiSet(keyValuePairs, callback)
  fullName: multiSet(keyValuePairs, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'multiSet(keyValuePairs: string[][], callback?: (errors?: Error[]) => void): Promise<void>;'
    return:
      type:
      - Promise<void>
      description: ''
    parameters:
    - id: keyValuePairs
      description: ''
      type:
      - string[][]
    - id: callback
      description: ''
      type:
      - '(errors?: Error[]) => void'
- uid: office-runtime.OfficeRuntime.AsyncStorage.removeItem
  summary: <span data-ttu-id="ae215-114">Entfernt ein Element für den angegebenen Schlüssel und ruft einen Rückruf nach Abschluss des.</span><span class="sxs-lookup"><span data-stu-id="ae215-114">Removes an item for specified key and invokes a callback when finished.</span></span> <span data-ttu-id="ae215-115">Gibt eine Zusage zurück.</span><span class="sxs-lookup"><span data-stu-id="ae215-115">Returns a Promise.</span></span>
  isPreview: true
  name: removeItem(key, callback)
  fullName: removeItem(key, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeItem(key: string, callback?: (error?: Error) => void): Promise<void>;'
    return:
      type:
      - Promise<void>
      description: ''
    parameters:
    - id: key
      description: ''
      type:
      - string
    - id: callback
      description: ''
      type:
      - '(error?: Error) => void'
- uid: office-runtime.OfficeRuntime.AsyncStorage.setItem
  summary: <span data-ttu-id="ae215-116">Weist den Wert für den Schlüssel-Wert-Paar und ruft einen Rückruf nach Abschluss des.</span><span class="sxs-lookup"><span data-stu-id="ae215-116">Assigns the value for a key-value pair and invokes a callback when finished.</span></span> <span data-ttu-id="ae215-117">Gibt eine Zusage zurück.</span><span class="sxs-lookup"><span data-stu-id="ae215-117">Returns a Promise.</span></span>
  isPreview: true
  name: setItem(key, value, callback)
  fullName: setItem(key, value, callback)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setItem(key: string, value: string, callback?: (error?: Error) => void): Promise<void>;'
    return:
      type:
      - Promise<void>
      description: ''
    parameters:
    - id: key
      description: ''
      type:
      - string
    - id: value
      description: ''
      type:
      - string
    - id: callback
      description: ''
      type:
      - '(error?: Error) => void'
