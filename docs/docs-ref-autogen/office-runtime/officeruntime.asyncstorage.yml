### YamlMime:UniversalReference
items:
  - uid: office-runtime.OfficeRuntime.AsyncStorage
    summary: 'Asynchroner, globaler und dauerhafter Schlüssel-Wert-Speicher. Der Speichergrenzwert beträgt 10 MB pro Domäne, die von mehreren Add-Ins gemeinsam genutzt werden können.'
    remarks: 'In Zukunft veraltet, verwenden Sie stattdessen Office. Storage.'
    name: OfficeRuntime.AsyncStorage
    fullName: OfficeRuntime.AsyncStorage
    langs:
      - typeScript
    type: interface
    package: office-runtime
    children:
      - office-runtime.OfficeRuntime.AsyncStorage.getAllKeys
      - office-runtime.OfficeRuntime.AsyncStorage.getItem
      - office-runtime.OfficeRuntime.AsyncStorage.multiGet
      - office-runtime.OfficeRuntime.AsyncStorage.multiRemove
      - office-runtime.OfficeRuntime.AsyncStorage.multiSet
      - office-runtime.OfficeRuntime.AsyncStorage.removeItem
      - office-runtime.OfficeRuntime.AsyncStorage.setItem
  - uid: office-runtime.OfficeRuntime.AsyncStorage.getAllKeys
    summary: Ruft alle Schlüssel ab und ruft nach Abschluss einen Rückruf auf. Gibt eine Zusage zurück.
    name: getAllKeys(callback)
    fullName: getAllKeys(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAllKeys(callback?: (error?: Error, keys?: string[]) => void): Promise<string[]>;'
      return:
        type:
          - 'Promise<string[]>'
        description: ''
      parameters:
        - id: callback
          description: ''
          type:
            - '(error?: Error, keys?: string[]) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.getItem
    summary: Ruft ein Element nach Schlüssel ab und gibt dann einen Rückruf aus. Gibt eine Zusage zurück.
    name: 'getItem(key, callback)'
    fullName: 'getItem(key, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string, callback?: (error?: Error, result?: string) => void): Promise<string>;'
      return:
        type:
          - Promise<string>
        description: ''
      parameters:
        - id: key
          description: Der Name des abzurufenden Schlüssels. Muss eine Zeichenfolge sein.
          type:
            - string
        - id: callback
          description: Zurückgegebenes Ergebnis ist eine Zeichenfolge.
          type:
            - '(error?: Error, result?: string) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.multiGet
    summary: Ruft mehrere Elemente aus dem Speicher ab und ruft nach Abschluss einen Rückruf auf. Gibt eine Zusage zurück.
    name: 'multiGet(keys, callback)'
    fullName: 'multiGet(keys, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiGet(keys: string[], callback?: (errors?: Error[], result?: string[][]) => void): Promise<string[][]>;'
      return:
        type:
          - 'Promise<string[][]>'
        description: ''
      parameters:
        - id: keys
          description: Schlüssel der abzurufenden Elemente. Muss ein Array von Zeichenfolgen sein.
          type:
            - 'string[]'
        - id: callback
          description: ''
          type:
            - '(errors?: Error[], result?: string[][]) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.multiRemove
    summary: Entfernt mehrere Elemente aus dem Speicher und ruft nach Abschluss einen Rückruf auf. Gibt eine Zusage zurück.
    name: 'multiRemove(keys, callback)'
    fullName: 'multiRemove(keys, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiRemove(keys: string[], callback?: (errors?: Error[]) => void): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: ''
      parameters:
        - id: keys
          description: Schlüssel der zu entfernenden Elemente. Muss ein Array von Zeichenfolgen sein.
          type:
            - 'string[]'
        - id: callback
          description: ''
          type:
            - '(errors?: Error[]) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.multiSet
    summary: Legt mehrere Schlüssel-Wert-Paare fest und ruft nach Abschluss einen Rückruf auf. Gibt eine Zusage zurück.
    name: 'multiSet(keyValuePairs, callback)'
    fullName: 'multiSet(keyValuePairs, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiSet(keyValuePairs: string[][], callback?: (errors?: Error[]) => void): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: ''
      parameters:
        - id: keyValuePairs
          description: Muss Zeichenfolgenarrays sein.
          type:
            - 'string[][]'
        - id: callback
          description: ''
          type:
            - '(errors?: Error[]) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.removeItem
    summary: 'Entfernt Elemente nach Schlüssel und ruft nach Abschluss einen Rückruf auf. Sie gibt eine Zusage zurück, die in ein Objekt aufgelöst wird, das die angeforderten Schlüssel und Werte enthält.'
    name: 'removeItem(key, callback)'
    fullName: 'removeItem(key, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeItem(key: string, callback?: (error?: Error) => void): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: ''
      parameters:
        - id: key
          description: Der Schlüssel des zu entfernenden Elements. Muss eine Zeichenfolge sein.
          type:
            - string
        - id: callback
          description: ''
          type:
            - '(error?: Error) => void'
  - uid: office-runtime.OfficeRuntime.AsyncStorage.setItem
    summary: Erstellt ein neues Schlüssel-Wert-Paar im Speicher oder aktualisiert einen vorhandenen Schlüssel mit einem neuen Wert. Gibt eine Zusage zurück.
    name: 'setItem(key, value, callback)'
    fullName: 'setItem(key, value, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setItem(key: string, value: string, callback?: (error?: Error) => void): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: ''
      parameters:
        - id: key
          description: Der Name des Schlüssels für das Schlüssel-Wert-Paar. Muss eine Zeichenfolge sein.
          type:
            - string
        - id: value
          description: Der Name des Werts. Muss eine Zeichenfolge sein.
          type:
            - string
        - id: callback
          description: ''
          type:
            - '(error?: Error) => void'