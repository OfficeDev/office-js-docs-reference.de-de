### YamlMime:TSType
name: Excel.Worksheet
uid: excel!Excel.Worksheet:class
package: excel!
fullName: Excel.Worksheet
summary: >-
  Ein Excel-Arbeitsblatt ist ein Raster von Zellen. Sie kann Daten, Tabellen, Diagramme usw. enthalten. Weitere Informationen zum Arbeitsblatt-Objektmodell finden Sie [unter Arbeiten mit Arbeitsblättern mithilfe der Excel-JavaScript-API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets) .<!-- -->.


  \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: charts
  uid: excel!Excel.Worksheet#charts:member
  package: excel!
  fullName: charts
  summary: >-
    Gibt eine Auflistung von Diagrammen zurück, die Teil des Arbeitsblatts sind.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
- name: context
  uid: excel!Excel.Worksheet#context:member
  package: excel!
  fullName: context
  summary: Der Anforderungskontext, der mit dem Objekt verknüpft ist. Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: freezePanes
  uid: excel!Excel.Worksheet#freezePanes:member
  package: excel!
  fullName: freezePanes
  summary: >-
    Ruft ein Objekt ab, das zum Bearbeiten von fixierten Bereichen auf dem Arbeitsblatt verwendet werden kann.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
    return:
      type: <xref uid="excel!Excel.WorksheetFreezePanes:class" />
- name: id
  uid: excel!Excel.Worksheet#id:member
  package: excel!
  fullName: id
  summary: >-
    Gibt einen Wert zurück, der das Arbeitsblatt in einer bestimmten Arbeitsmappe eindeutig identifiziert. Der Wert des Bezeichners bleibt unverändert, auch wenn das Arbeitsblatt umbenannt oder verschoben wird.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: name
  uid: excel!Excel.Worksheet#name:member
  package: excel!
  fullName: name
  summary: >-
    Der Anzeigename des Arbeitsblatts.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: names
  uid: excel!Excel.Worksheet#names:member
  package: excel!
  fullName: names
  summary: >-
    Auflistung von Namen im Bereich des aktuellen Arbeitsblatts.


    \[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type: <xref uid="excel!Excel.NamedItemCollection:class" />
- name: onActivated
  uid: excel!Excel.Worksheet#onActivated:member
  package: excel!
  fullName: onActivated
  summary: >-
    Tritt auf, wenn das Arbeitsblatt aktiviert wird.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetActivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onActivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The activated worksheet ID is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onChanged
  uid: excel!Excel.Worksheet#onChanged:member
  package: excel!
  fullName: onChanged
  summary: >-
    Tritt auf, wenn Daten in einem bestimmten Arbeitsblatt geändert werden.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-worksheet.yaml\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onChanged.add(onChange);\n    await context.sync();\n\n    console.log(\"Added a worksheet-level data-changed event handler.\");\n});\n```"
- name: onDeactivated
  uid: excel!Excel.Worksheet#onDeactivated:member
  package: excel!
  fullName: onDeactivated
  summary: >-
    Tritt auf, wenn das Arbeitsblatt deaktiviert wird.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetDeactivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onDeactivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The deactivated worksheet is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onSelectionChanged
  uid: excel!Excel.Worksheet#onSelectionChanged:member
  package: excel!
  fullName: onSelectionChanged
  summary: >-
    Tritt auf, wenn sich die Auswahl in einem bestimmten Arbeitsblatt ändert.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.WorksheetSelectionChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onSelectionChanged.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The selected range has changed to: \" + event.address);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: pivotTables
  uid: excel!Excel.Worksheet#pivotTables:member
  package: excel!
  fullName: pivotTables
  summary: >-
    Die Sammlung von PivotTables, die Teil des Arbeitsblatts sind.


    \[[API-Gruppe: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type: <xref uid="excel!Excel.PivotTableCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-get-pivottables.yaml\nawait Excel.run(async (context) => {\n  // Get the names of all the PivotTables in the current worksheet.\n  const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;\n  pivotTables.load(\"name\");\n  await context.sync();\n\n  // Display the names in the console.\n  console.log(\"PivotTables in the current worksheet:\")\n  pivotTables.items.forEach((pivotTable) => {\n    console.log(`\\t${pivotTable.name}`);\n  });\n});\n```"
- name: position
  uid: excel!Excel.Worksheet#position:member
  package: excel!
  fullName: position
  summary: >-
    Die nullbasiert Position des Arbeitsblatts in der Arbeitsmappe.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'position: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: protection
  uid: excel!Excel.Worksheet#protection:member
  package: excel!
  fullName: protection
  summary: >-
    Gibt das Arbeitsblattschutz-Objekt für ein Arbeitsblatt zurück.


    \[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type: <xref uid="excel!Excel.WorksheetProtection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function(ctx) {\n  // get a reference to Sheet1\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n\n  // Protect inserting or deleting rows in Sheet1\n  sheet.protection.protect({\n    allowInsertRows: false,\n    allowDeleteRows: false\n  });\n\n  return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Unprotecting a worksheet with unprotect() will remove all \n// WorksheetProtectionOptions options applied to a worksheet.\n// To remove only a subset of WorksheetProtectionOptions use the \n// protect() method and set the options you wish to remove to true.\nExcel.run(function(ctx) {\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n  sheet.protection.protect({\n    allowInsertRows: false, // Protect row insertion\n    allowDeleteRows: true // Unprotect row deletion\n  });\n});\n```"
- name: standardHeight
  uid: excel!Excel.Worksheet#standardHeight:member
  package: excel!
  fullName: standardHeight
  summary: >-
    Gibt die Standardhöhe (Standard) aller Zeilen in der Arbeitsmappe in Punkt zurück.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type: number
- name: standardWidth
  uid: excel!Excel.Worksheet#standardWidth:member
  package: excel!
  fullName: standardWidth
  summary: >-
    Gibt die Standardbreite aller Spalten im Arbeitsblatt an. Eine Einheit der Spaltenbreite entspricht der Breite eines Zeichens im Format Normal. Für proportionale Schriftarten wird die Breite des Zeichens 0 (Null) verwendet.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'standardWidth: number;'
    return:
      type: number
- name: tabColor
  uid: excel!Excel.Worksheet#tabColor:member
  package: excel!
  fullName: tabColor
  summary: >-
    Die Registerkarten Farbe des Arbeitsblatts. Wenn das Arbeitsblatt unsichtbar ist, wird beim Abrufen der Registerkarten Farbe der Wert NULL. Wenn das Arbeitsblatt zwar sichtbar ist, die Registerkarten Farbe jedoch auf automatisch festgelegt ist, wird eine leere Zeichenfolge zurückgegeben. Andernfalls wird die Eigenschaft auf eine Farbe festgelegt, in der Form " \# 123456" beim Festlegen der Farbe, verwenden Sie eine leere Zeichenfolge, um eine "Auto"-Farbe oder eine reale Farbe anders festzulegen.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'tabColor: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/tab-color.yaml\nawait Excel.run(async (context) => {\n    const activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n});\n```"
- name: tables
  uid: excel!Excel.Worksheet#tables:member
  package: excel!
  fullName: tables
  summary: >-
    Gibt die Sammlung von Tabellen zurück, die Teil des Arbeitsblatts sind.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type: <xref uid="excel!Excel.TableCollection:class" />
- name: visibility
  uid: excel!Excel.Worksheet#visibility:member
  package: excel!
  fullName: visibility
  summary: >-
    Die Sichtbarkeit des Arbeitsblatts.


    \[[API-Gruppe: ExcelApi 1,1 zum Lesen der Sichtbarkeit; 1,2 zum festlegen.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type: <xref uid="excel!Excel.SheetVisibility:enum" /> | "Visible" | "Hidden" | "VeryHidden"
methods:
- name: activate()
  uid: excel!Excel.Worksheet#activate:member(1)
  package: excel!
  fullName: activate()
  summary: >-
    Aktivieren Sie das Arbeitsblatt in der Excel-Benutzeroberfläche.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'activate(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: calculate(markAllDirty)
  uid: excel!Excel.Worksheet#calculate:member(1)
  package: excel!
  fullName: calculate(markAllDirty)
  summary: >-
    Berechnet alle Zellen auf einem Arbeitsblatt.


    \[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    parameters:
    - id: markAllDirty
      description: True, um alle als verschmutzt zu markieren.
      type: boolean
    return:
      type: void
      description: ''
- name: copy(positionType, relativeTo)
  uid: excel!Excel.Worksheet#copy:member(1)
  package: excel!
  fullName: copy(positionType, relativeTo)
  summary: >-
    Kopiert ein Arbeitsblatt und platziert es an der angegebenen Position.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    parameters:
    - id: positionType
      description: Der Speicherort in der Arbeitsmappe, an dem das neu erstellte Arbeitsblatt platziert werden soll. Der Standardwert ist "None", wodurch das Arbeitsblatt am Anfang des Arbeitsblatts eingefügt wird.
      type: <xref uid="excel!Excel.WorksheetPositionType:enum" />
    - id: relativeTo
      description: Das vorhandene Arbeitsblatt, das die Position des neu erstellten Arbeitsblatts bestimmt. Dies ist nur erforderlich, wenn " `positionType` before" oder "After" ist.
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: >-
        Das neu erstellte Arbeitsblatt.


        #### <a name="examples"></a>Beispiele


        ```typescript

        // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/worksheet-copy.yaml

        await Excel.run(async (context) => {

            let myWorkbook = context.workbook;
            let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
            let copiedSheet = sampleSheet.copy("End")

            sampleSheet.load("name");
            copiedSheet.load("name");

            await context.sync();

            console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
        });

        ```
- name: copy(positionTypeString, relativeTo)
  uid: excel!Excel.Worksheet#copy:member(2)
  package: excel!
  fullName: copy(positionTypeString, relativeTo)
  summary: >-
    Kopiert ein Arbeitsblatt und platziert es an der angegebenen Position.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    parameters:
    - id: positionTypeString
      description: Der Speicherort in der Arbeitsmappe, an dem das neu erstellte Arbeitsblatt platziert werden soll. Der Standardwert ist "None", wodurch das Arbeitsblatt am Anfang des Arbeitsblatts eingefügt wird.
      type: "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: Das vorhandene Arbeitsblatt, das die Position des neu erstellten Arbeitsblatts bestimmt. Dies ist nur erforderlich, wenn " `positionType` before" oder "After" ist.
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: Das neu erstellte Arbeitsblatt.
- name: delete()
  uid: excel!Excel.Worksheet#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    Löscht das Arbeitsblatt aus der Arbeitsmappe. Beachten Sie Folgendes: Wenn die Sichtbarkeit des Arbeitsblatts auf "VeryHidden" festgelegt ist, schlägt der Löschvorgang mit einer `InvalidOperation` Ausnahme fehl. Sie sollten zunächst seine Sichtbarkeit in "ausgeblendet" oder "sichtbar" ändern, bevor Sie ihn löschen.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCell(row, column)
  uid: excel!Excel.Worksheet#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: >-
    Ruft das Bereichsobjekt ab, das die einzelne Zelle basierend auf Zeilen- und Spaltenanzahl enthält. Die Zelle kann außerhalb der Grenzen des übergeordneten Bereichs liegen, solange Sie innerhalb des Arbeitsblatt Rasters bleibt.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    parameters:
    - id: row
      description: Die Zeilenanzahl der abzurufenden Zelle. Nullindiziert.
      type: number
    - id: column
      description: Die Spaltenzahl der abzurufenden Zelle. Nullindiziert.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getNext(visibleOnly)
  uid: excel!Excel.Worksheet#getNext:member(1)
  package: excel!
  fullName: getNext(visibleOnly)
  summary: >-
    Ruft das Arbeitsblatt ab, das diesem folgt. Wenn keine Arbeitsblätter folgen, wird durch diese Methode ein Fehler ausgelöst.


    \[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: getNextOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getNextOrNullObject:member(1)
  package: excel!
  fullName: getNextOrNullObject(visibleOnly)
  summary: >-
    Ruft das Arbeitsblatt ab, das diesem folgt. Wenn keine Arbeitsblätter folgen, wird diese Methode ein NULL-Objekt zurückgegeben.


    \[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getPrevious(visibleOnly)
  uid: excel!Excel.Worksheet#getPrevious:member(1)
  package: excel!
  fullName: getPrevious(visibleOnly)
  summary: >-
    Ruft das Arbeitsblatt ab, das diesem vorangestellt ist. Wenn keine vorherigen Arbeitsblätter vorhanden sind, wird durch diese Methode ein Fehler ausgelöst.


    \[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    console.log(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: getPreviousOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getPreviousOrNullObject:member(1)
  package: excel!
  fullName: getPreviousOrNullObject(visibleOnly)
  summary: >-
    Ruft das Arbeitsblatt ab, das diesem vorangestellt ist. Wenn keine vorherigen Arbeitsblätter vorhanden sind, gibt diese Methode eine NULL-Objet zurück.


    \[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getRange(address)
  uid: excel!Excel.Worksheet#getRange:member(1)
  package: excel!
  fullName: getRange(address)
  summary: >-
    Ruft das Range-Objekt ab, das einen einzelnen rechteckigen Zellenblock darstellt, der durch die Adresse oder den Namen angegeben wird.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    parameters:
    - id: address
      description: 'Optional. Die Zeichenfolge, die die Adresse oder den Namen des Bereichs darstellt. Beispielsweise "a1: B2". Wenn nichts angegeben ist, wird der gesamte Arbeitsblattbereich zurückgegeben.'
      type: string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  uid: excel!Excel.Worksheet#getRangeByIndexes:member(1)
  package: excel!
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  summary: >-
    Ruft das Bereichsobjekt, beginnend an einem bestimmten Zeilen- und Spaltenindex, das eine bestimmte Anzahl von Zeilen und Spalten umfasst.


    \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
    parameters:
    - id: startRow
      description: Start Zeile (Null indiziert).
      type: number
    - id: startColumn
      description: Start Spalte (Null indiziert).
      type: number
    - id: rowCount
      description: Die Anzahl der Zeilen, die in den Bereich eingeschlossen werden sollen.
      type: number
    - id: columnCount
      description: Die Anzahl der Spalten, die in den Bereich eingeschlossen werden sollen.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: >-
    Der verwendete Bereich ist der kleinste Bereich, der mindestens eine der Zellen umfasst, die einen Wert enthalten oder denen eine Formatierung zugewiesen wurde. Wenn das gesamte Arbeitsblatt leer ist, gibt diese Funktion die obere linke Zelle zurück (d. h., es wird *kein* Fehler ausgelöst).


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 'Optional. Bei true werden nur Zellen mit Werten als verwendete Zellen berücksichtigt (wobei die Formatierung ignoriert wird). \[API-Gruppe: ExcelApi 1,2\]'
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: >-
    Der verwendete Bereich ist der kleinste Bereich, der mindestens eine der Zellen umfasst, die einen Wert enthalten oder denen eine Formatierung zugewiesen wurde. Wenn das gesamte Arbeitsblatt leer ist, gibt diese Funktion ein NULL-Objekt zurück.


    \[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: Optional. Betrachtet nur Zellen mit Werten als verwendet.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.Worksheet#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
    parameters:
    - id: options
      description: Enthält Optionen für die Eigenschaften des zu ladenden Objekts.
      type: <xref uid="excel!Excel.Interfaces.WorksheetLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Worksheet#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
    parameters:
    - id: propertyNames
      description: Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Worksheet#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Worksheet;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und `propertyNamesAndPaths.expand` ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.Worksheet#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Legt mehrere Eigenschaften eines Objekts gleichzeitig fest. Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.
  remarks: >-
    Diese Methode hat die folgende zusätzliche Signatur:


    `set(properties: Excel.Worksheet): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Ein JavaScript-Objekt mit Eigenschaften, die isomorphically für die Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.
      type: <xref uid="excel!Excel.Interfaces.WorksheetUpdateData:interface" />
    - id: options
      description: Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Worksheet#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Legt mehrere Eigenschaften für das Objekt gleichzeitig basierend auf einem vorhandenen geladenen Objekt fest.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Worksheet): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.Worksheet#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Überschreibt die JavaScript `toJSON()` -Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird. `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Excel. Worksheet-Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als `Excel.Interfaces.WorksheetData`<!-- -->), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.WorksheetData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 25a9790a3c09568d308b056beeda98606b8dab20
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49342626"
