### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TableRow:class'
    summary: |-
      <span data-ttu-id="f1c87-101">Stellt eine Zeile in einer Tabelle dar.</span><span class="sxs-lookup"><span data-stu-id="f1c87-101">Represents a row in a table.</span></span>

      <span data-ttu-id="f1c87-102">Beachten Sie, dass im Gegensatz zu Bereichen oder Spalten, die angepasst werden, wenn neue Zeilen/Spalten vor Ihnen hinzugefügt werden, ein TableRow-Objekt den physikalischen Speicherort der Tabellenzeile darstellt, jedoch nicht die Daten.</span><span class="sxs-lookup"><span data-stu-id="f1c87-102">Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them, a TableRow object represent the physical location of the table row, but not the data.</span></span> <span data-ttu-id="f1c87-103">Das heißt, wenn die Daten sortiert werden oder wenn neue Zeilen hinzugefügt werden, zeigt eine Tabellenzeile weiterhin den Index an, für den Sie erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="f1c87-103">That is, if the data is sorted or if new rows are added, a table row will continue to point at the index for which it was created.</span></span>

      <span data-ttu-id="f1c87-104">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f1c87-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.TableRow
    fullName: Excel.TableRow
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TableRow#context:member'
      - 'excel!Excel.TableRow#delete:member(1)'
      - 'excel!Excel.TableRow#getRange:member(1)'
      - 'excel!Excel.TableRow#index:member'
      - 'excel!Excel.TableRow#load:member(1)'
      - 'excel!Excel.TableRow#load:member(2)'
      - 'excel!Excel.TableRow#load:member(3)'
      - 'excel!Excel.TableRow#set:member(1)'
      - 'excel!Excel.TableRow#set:member(2)'
      - 'excel!Excel.TableRow#toJSON:member(1)'
      - 'excel!Excel.TableRow#values:member'
  - uid: 'excel!Excel.TableRow#context:member'
    summary: '<span data-ttu-id="f1c87-105">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="f1c87-105">The request context associated with the object.</span></span> <span data-ttu-id="f1c87-106">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="f1c87-106">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TableRow#delete:member(1)'
    summary: |-
      <span data-ttu-id="f1c87-107">Löscht die Zeile aus der Tabelle.</span><span class="sxs-lookup"><span data-stu-id="f1c87-107">Deletes the row from the table.</span></span>

      <span data-ttu-id="f1c87-108">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f1c87-108">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f1c87-109">Beispiele</span><span class="sxs-lookup"><span data-stu-id="f1c87-109">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);
              row.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.TableRow#getRange:member(1)'
    summary: |-
      <span data-ttu-id="f1c87-110">Ruft das Bereichsobjekt ab, das mit der gesamten Zeile verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="f1c87-110">Returns the range object associated with the entire row.</span></span>

      <span data-ttu-id="f1c87-111">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f1c87-111">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f1c87-112">Beispiele</span><span class="sxs-lookup"><span data-stu-id="f1c87-112">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(0);
              var rowRange = row.getRange();
              rowRange.load('address');
              return ctx.sync().then(function() {
                  console.log(rowRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.TableRow#index:member'
    summary: |-
      <span data-ttu-id="f1c87-113">Gibt die Indexnummer der Zeile in der Zeilenauflistung der Tabelle zurück.</span><span class="sxs-lookup"><span data-stu-id="f1c87-113">Returns the index number of the row within the rows collection of the table.</span></span> <span data-ttu-id="f1c87-114">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="f1c87-114">Zero-indexed.</span></span> <span data-ttu-id="f1c87-115">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="f1c87-115">Read-only.</span></span>

      <span data-ttu-id="f1c87-116">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f1c87-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: index
    fullName: index
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly index: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.TableRow#load:member(1)'
    summary: <span data-ttu-id="f1c87-117">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="f1c87-117">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f1c87-118">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="f1c87-118">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.TableRowLoadOptions): Excel.TableRow;'
      return:
        type:
          - 'excel!Excel.TableRow:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="f1c87-119">Enthält Optionen für die Eigenschaften des zu ladenden Objekts.</span><span class="sxs-lookup"><span data-stu-id="f1c87-119">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.TableRowLoadOptions:interface'
  - uid: 'excel!Excel.TableRow#load:member(2)'
    summary: <span data-ttu-id="f1c87-120">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="f1c87-120">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f1c87-121">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="f1c87-121">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableRow;'
      return:
        type:
          - 'excel!Excel.TableRow:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f1c87-122">Beispiele</span><span class="sxs-lookup"><span data-stu-id="f1c87-122">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var row = ctx.workbook.tables.getItem(tableName).rows.getItem(0);
              row.load('index');
              return ctx.sync().then(function() {
                  console.log(row.index);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              var newValues = [["New", "Values", "For", "New", "Row"]];
              var tableName = 'Table1';
              var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);
              row.values = newValues;
              row.load('values');
              return ctx.sync().then(function() {
                  console.log(row.values);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="f1c87-123">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="f1c87-123">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TableRow#load:member(3)'
    summary: <span data-ttu-id="f1c87-124">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="f1c87-124">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f1c87-125">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="f1c87-125">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.TableRow;
      return:
        type:
          - 'excel!Excel.TableRow:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="f1c87-126">`propertyNamesAndPaths.select`ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften `propertyNamesAndPaths.expand` angibt, und ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="f1c87-126">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.TableRow#set:member(1)'
    summary: '<span data-ttu-id="f1c87-127">Legt mehrere Eigenschaften eines Objekts gleichzeitig fest.</span><span class="sxs-lookup"><span data-stu-id="f1c87-127">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="f1c87-128">Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.</span><span class="sxs-lookup"><span data-stu-id="f1c87-128">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="f1c87-129">Diese Methode hat die folgende zusätzliche Signatur:</span><span class="sxs-lookup"><span data-stu-id="f1c87-129">This method has the following additional signature:</span></span>

      `set(properties: Excel.TableRow): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.TableRowUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="f1c87-130">Ein JavaScript-Objekt mit Eigenschaften, die isomorphically für die Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="f1c87-130">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - 'excel!Excel.Interfaces.TableRowUpdateData:interface'
        - id: options
          description: '<span data-ttu-id="f1c87-131">Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.</span><span class="sxs-lookup"><span data-stu-id="f1c87-131">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.TableRow#set:member(2)'
    summary: '<span data-ttu-id="f1c87-132">Legt mehrere Eigenschaften für das Objekt gleichzeitig basierend auf einem vorhandenen geladenen Objekt fest.</span><span class="sxs-lookup"><span data-stu-id="f1c87-132">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.TableRow): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.TableRow:class'
  - uid: 'excel!Excel.TableRow#toJSON:member(1)'
    summary: '<span data-ttu-id="f1c87-133">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="f1c87-133">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="f1c87-134">.</span><span class="sxs-lookup"><span data-stu-id="f1c87-134"></span></span> <span data-ttu-id="f1c87-135">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="f1c87-135"></span></span><!-- --><span data-ttu-id="f1c87-136">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Excel. TableRow-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.TableRowData`</span><span class="sxs-lookup"><span data-stu-id="f1c87-136">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.TableRow object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableRowData`</span></span><!-- --><span data-ttu-id="f1c87-137">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="f1c87-137">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableRowData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TableRowData:interface'
        description: ''
  - uid: 'excel!Excel.TableRow#values:member'
    summary: |-
      <span data-ttu-id="f1c87-138">Stellt die Rohwerte des angegebenen Bereichs dar.</span><span class="sxs-lookup"><span data-stu-id="f1c87-138">Represents the raw values of the specified range.</span></span> <span data-ttu-id="f1c87-139">Die zurückgegebenen Daten können vom Typ Zeichenfolge, Zahl oder ein boolescher Wert sein.</span><span class="sxs-lookup"><span data-stu-id="f1c87-139">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="f1c87-140">Zellen, die einen Fehler enthalten, geben die Fehlerzeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="f1c87-140">Cells that contain an error will return the error string.</span></span>

      <span data-ttu-id="f1c87-141">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f1c87-141">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.TableRow:class'
    name: Excel.TableRow
  - uid: 'excel!Excel.Interfaces.TableRowLoadOptions:interface'
    name: Excel.Interfaces.TableRowLoadOptions
  - uid: 'excel!Excel.Interfaces.TableRowUpdateData:interface'
    name: Interfaces.TableRowUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.TableRowData:interface'
    name: Excel.Interfaces.TableRowData