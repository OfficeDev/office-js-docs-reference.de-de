### YamlMime:TSType
name: Excel.ChartCollection
uid: excel!Excel.ChartCollection:class
package: excel!
fullName: Excel.ChartCollection
summary: >-
  Eine Sammlung aller Diagrammobjekte in einem Arbeitsblatt.


  \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.ChartCollection#context:member
  package: excel!
  fullName: context
  summary: Der Anforderungskontext, der mit dem Objekt verknüpft ist. Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: count
  uid: excel!Excel.ChartCollection#count:member
  package: excel!
  fullName: count
  summary: >-
    Gibt die Anzahl der Diagramme im Arbeitsblatt zurück.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly count: number;'
    return:
      type: number
- name: items
  uid: excel!Excel.ChartCollection#items:member
  package: excel!
  fullName: items
  summary: Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.Chart[];'
    return:
      type: <xref uid="excel!Excel.Chart:class" />[]
- name: onActivated
  uid: excel!Excel.ChartCollection#onActivated:member
  package: excel!
  fullName: onActivated
  summary: >-
    Tritt auf, wenn ein Diagramm aktiviert wird.


    \[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.ChartActivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartActivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onActivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The ID of the active chart is: \" + event.chartId)\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onAdded
  uid: excel!Excel.ChartCollection#onAdded:member
  package: excel!
  fullName: onAdded
  summary: >-
    Tritt ein, wenn dem Arbeitsblatt ein neues Diagramm hinzugefügt wird.


    \[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.ChartAddedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartAddedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onAdded.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"A chart has been added with ID: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onDeactivated
  uid: excel!Excel.ChartCollection#onDeactivated:member
  package: excel!
  fullName: onDeactivated
  summary: >-
    Tritt auf, wenn ein Diagramm deaktiviert wird.


    \[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.ChartDeactivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartDeactivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onDeactivated.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The chart with this ID was deactivated: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onDeleted
  uid: excel!Excel.ChartCollection#onDeleted:member
  package: excel!
  fullName: onDeleted
  summary: >-
    Tritt auf, wenn ein Diagramm gelöscht wird.


    \[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.ChartDeletedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartDeletedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onDeleted.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The chart with this ID was deleted: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
methods:
- name: add(type, sourceData, seriesBy)
  uid: excel!Excel.ChartCollection#add:member(1)
  package: excel!
  fullName: add(type, sourceData, seriesBy)
  summary: >-
    Erstellt ein neues Diagramm.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(type: Excel.ChartType, sourceData: Range, seriesBy?: Excel.ChartSeriesBy): Excel.Chart;'
    parameters:
    - id: type
      description: Stellt die Art des Diagramms dar. Weitere Informationen finden Sie unter Excel. ChartType.
      type: <xref uid="excel!Excel.ChartType:enum" />
    - id: sourceData
      description: Das den Quelldaten entsprechende Range-Objekt.
      type: <xref uid="excel!Excel.Range:class" />
    - id: seriesBy
      description: Optional. Gibt an, wie Spalten oder Zeilen als Datenreihen im Diagramm verwendet werden. Weitere Informationen finden Sie unter Excel. ChartSeriesBy.
      type: <xref uid="excel!Excel.ChartSeriesBy:enum" />
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Add a chart of chartType \"ColumnClustered\" on worksheet \"Charts\" \n// with sourceData from Range \"A1:B4\" and seriresBy is set to be \"auto\".\nExcel.run(function (ctx) { \n    var rangeSelection = \"A1:B4\";\n    var range = ctx.workbook.worksheets.getItem(sheetName)\n        .getRange(rangeSelection);\n    var chart = ctx.workbook.worksheets.getItem(sheetName)\n        .charts.add(\"ColumnClustered\", range, \"auto\");    return ctx.sync().then(function() {\n            console.log(\"New Chart Added\");\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: add(typeString, sourceData, seriesBy)
  uid: excel!Excel.ChartCollection#add:member(2)
  package: excel!
  fullName: add(typeString, sourceData, seriesBy)
  summary: >-
    Erstellt ein neues Diagramm.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(typeString: "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel", sourceData: Range, seriesBy?: "Auto" | "Columns" | "Rows"): Excel.Chart;'
    parameters:
    - id: typeString
      description: Stellt die Art des Diagramms dar. Weitere Informationen finden Sie unter Excel. ChartType.
      type: "\"Invalid\" | \"ColumnClustered\" | \"ColumnStacked\" | \"ColumnStacked100\" | \"3DColumnClustered\" | \"3DColumnStacked\" | \"3DColumnStacked100\" | \"BarClustered\" | \"BarStacked\" | \"BarStacked100\" | \"3DBarClustered\" | \"3DBarStacked\" | \"3DBarStacked100\" | \"LineStacked\" | \"LineStacked100\" | \"LineMarkers\" | \"LineMarkersStacked\" | \"LineMarkersStacked100\" | \"PieOfPie\" | \"PieExploded\" | \"3DPieExploded\" | \"BarOfPie\" | \"XYScatterSmooth\" | \"XYScatterSmoothNoMarkers\" | \"XYScatterLines\" | \"XYScatterLinesNoMarkers\" | \"AreaStacked\" | \"AreaStacked100\" | \"3DAreaStacked\" | \"3DAreaStacked100\" | \"DoughnutExploded\" | \"RadarMarkers\" | \"RadarFilled\" | \"Surface\" | \"SurfaceWireframe\" | \"SurfaceTopView\" | \"SurfaceTopViewWireframe\" | \"Bubble\" | \"Bubble3DEffect\" | \"StockHLC\" | \"StockOHLC\" | \"StockVHLC\" | \"StockVOHLC\" | \"CylinderColClustered\" | \"CylinderColStacked\" | \"CylinderColStacked100\" | \"CylinderBarClustered\" | \"CylinderBarStacked\" | \"CylinderBarStacked100\" | \"CylinderCol\" | \"ConeColClustered\" | \"ConeColStacked\" | \"ConeColStacked100\" | \"ConeBarClustered\" | \"ConeBarStacked\" | \"ConeBarStacked100\" | \"ConeCol\" | \"PyramidColClustered\" | \"PyramidColStacked\" | \"PyramidColStacked100\" | \"PyramidBarClustered\" | \"PyramidBarStacked\" | \"PyramidBarStacked100\" | \"PyramidCol\" | \"3DColumn\" | \"Line\" | \"3DLine\" | \"3DPie\" | \"Pie\" | \"XYScatter\" | \"3DArea\" | \"Area\" | \"Doughnut\" | \"Radar\" | \"Histogram\" | \"Boxwhisker\" | \"Pareto\" | \"RegionMap\" | \"Treemap\" | \"Waterfall\" | \"Sunburst\" | \"Funnel\""
    - id: sourceData
      description: Das den Quelldaten entsprechende Range-Objekt.
      type: <xref uid="excel!Excel.Range:class" />
    - id: seriesBy
      description: Optional. Gibt an, wie Spalten oder Zeilen als Datenreihen im Diagramm verwendet werden. Weitere Informationen finden Sie unter Excel. ChartSeriesBy.
      type: "\"Auto\" | \"Columns\" | \"Rows\""
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: ''
- name: getCount()
  uid: excel!Excel.ChartCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: >-
    Gibt die Anzahl der Diagramme im Arbeitsblatt zurück.


    \[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: ''
- name: getItem(name)
  uid: excel!Excel.ChartCollection#getItem:member(1)
  package: excel!
  fullName: getItem(name)
  summary: >-
    Ruft ein Diagramm über seinen Namen ab. Wenn mehrere Diagramme mit demselben Namen vorhanden sind, wird das erste zurückgegeben.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(name: string): Excel.Chart;'
    parameters:
    - id: name
      description: Der Name des abzurufenden Diagramms.
      type: string
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Get the number of charts\nExcel.run(function (ctx) { \n    var charts = ctx.workbook.worksheets.getItem(\"Sheet1\").charts;\n    charts.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"charts: Count= \" + charts.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItemAt(index)
  uid: excel!Excel.ChartCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    Ruft ein Diagramm anhand seiner Position in der Sammlung ab.


    \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.Chart;'
    parameters:
    - id: index
      description: Index-Wert des abzurufenden Objekts. Nullindiziert.
      type: number
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.count - 1;\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItemAt(lastPosition);\n    return ctx.sync().then(function() {\n            console.log(chart.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItemOrNullObject(name)
  uid: excel!Excel.ChartCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(name)
  summary: >-
    Ruft ein Diagramm über seinen Namen ab. Wenn mehrere Diagramme mit demselben Namen vorhanden sind, wird das erste zurückgegeben. Wenn das Diagramm nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.


    \[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(name: string): Excel.Chart;'
    parameters:
    - id: name
      description: Der Name des abzurufenden Diagramms.
      type: string
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.ChartCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ChartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ChartCollection;'
    parameters:
    - id: options
      description: Enthält Optionen für die Eigenschaften des zu ladenden Objekts.
      type: <xref uid="excel!Excel.Interfaces.ChartCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.ChartCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ChartCollection;'
    parameters:
    - id: propertyNames
      description: Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var charts = ctx.workbook.worksheets.getItem(\"Sheet1\").charts;\n    charts.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < charts.items.length; i++) {\n            console.log(charts.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.ChartCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.ChartCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und `propertyNamesAndPaths.expand` ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.ChartCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Überschreibt die JavaScript `toJSON()` -Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird. `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche `Excel.ChartCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als `Excel.Interfaces.ChartCollectionData`<!-- -->), die ein "Items"-Array mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ChartCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ChartCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: a2b66417c74aaee604df41f63f61b55196594abf
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49162447"
