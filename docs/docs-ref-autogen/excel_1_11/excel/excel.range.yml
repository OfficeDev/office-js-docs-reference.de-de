### YamlMime:TSType
name: Excel.Range
uid: excel!Excel.Range:class
package: excel!
fullName: Excel.Range
summary: >-
  [Bereich](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-core-concepts#ranges) stellt eine Gruppe von zusammenhängenden Zellen dar, z. B. eine Zelle, eine Zeile, eine Spalte, einen Block von Zellen usw. Um mehr darüber zu erfahren, wie Bereiche in der gesamten API verwendet werden, beginnen Sie mit [Bereichen in der Excel JavaScript-API.](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-core-concepts#ranges)<!-- -->.


  \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: address
  uid: excel!Excel.Range#address:member
  package: excel!
  fullName: address
  summary: >-
    Gibt den Bereichsbezug im A1-Format an. Der Adresswert enthält den Blattverweis (z. B. "Sheet1! A1:B4").


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly address: string;'
    return:
      type: string
- name: addressLocal
  uid: excel!Excel.Range#addressLocal:member
  package: excel!
  fullName: addressLocal
  summary: >-
    Stellt den Bereichsverweis für den angegebenen Bereich in der Sprache des Benutzers dar.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly addressLocal: string;'
    return:
      type: string
- name: cellCount
  uid: excel!Excel.Range#cellCount:member
  package: excel!
  fullName: cellCount
  summary: >-
    Gibt die Anzahl der Zellen im Bereich an. Diese API gibt -1 zurück, wenn die Zellenanzahl 2^31-1 (2.147.483.647) überschreitet.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellCount: number;'
    return:
      type: number
- name: columnCount
  uid: excel!Excel.Range#columnCount:member
  package: excel!
  fullName: columnCount
  summary: >-
    Gibt die Gesamtanzahl der Spalten im Bereich an.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnCount: number;'
    return:
      type: number
- name: columnHidden
  uid: excel!Excel.Range#columnHidden:member
  package: excel!
  fullName: columnHidden
  summary: >-
    Stellt dar, ob alle Spalten des aktuellen Bereichs ausgeblendet sind.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'columnHidden: boolean;'
    return:
      type: boolean
- name: columnIndex
  uid: excel!Excel.Range#columnIndex:member
  package: excel!
  fullName: columnIndex
  summary: >-
    Gibt die Spaltennummer der ersten Zelle im Bereich an. Nullindiziert.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnIndex: number;'
    return:
      type: number
- name: conditionalFormats
  uid: excel!Excel.Range#conditionalFormats:member
  package: excel!
  fullName: conditionalFormats
  summary: >-
    Die Auflistung dieser Elemente `ConditionalFormats` überschneidet den Bereich.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
    return:
      type: <xref uid="excel!Excel.ConditionalFormatCollection:class" />
- name: context
  uid: excel!Excel.Range#context:member
  package: excel!
  fullName: context
  summary: Der dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office Hostanwendung verbunden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: dataValidation
  uid: excel!Excel.Range#dataValidation:member
  package: excel!
  fullName: dataValidation
  summary: >-
    Gibt ein Datenüberprüfungsobjekt zurück.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataValidation: Excel.DataValidation;'
    return:
      type: <xref uid="excel!Excel.DataValidation:class" />
- name: format
  uid: excel!Excel.Range#format:member
  package: excel!
  fullName: format
  summary: >-
    Gibt ein Formatobjekt zurück, das die Schriftart des Bereichs, Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften verschachtelt.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly format: Excel.RangeFormat;'
    return:
      type: <xref uid="excel!Excel.RangeFormat:class" />
- name: formulas
  uid: excel!Excel.Range#formulas:member
  package: excel!
  fullName: formulas
  summary: >-
    Stellt die Formel in der A1-Schreibweise dar. Wenn eine Zelle keine Formel aufweist, wird stattdessen ihr Wert zurückgegeben.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulas: any[][];'
    return:
      type: any[][]
- name: formulasLocal
  uid: excel!Excel.Range#formulasLocal:member
  package: excel!
  fullName: formulasLocal
  summary: >-
    Stellt die Formel in der A1-Schreibweise, Sprache des Benutzers und im Gebietsschema der Zahlenformatierung dar. Beispielsweise würde die englische Formel „= SUM(A1, 1.5)“ in Deutsch „= SUMME(A1; 1,5)“ werden. Wenn eine Zelle keine Formel aufweist, wird stattdessen ihr Wert zurückgegeben.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulasLocal: any[][];'
    return:
      type: any[][]
- name: formulasR1C1
  uid: excel!Excel.Range#formulasR1C1:member
  package: excel!
  fullName: formulasR1C1
  summary: >-
    Stellt die Formel in der R1C1-Schreibweise dar. Wenn eine Zelle keine Formel aufweist, wird stattdessen ihr Wert zurückgegeben.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulasR1C1: any[][];'
    return:
      type: any[][]
- name: height
  uid: excel!Excel.Range#height:member
  package: excel!
  fullName: height
  summary: >-
    Gibt den Abstand in Punkt für den Zoom von 100 % vom oberen Rand des Bereichs zum unteren Rand des Bereichs zurück.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly height: number;'
    return:
      type: number
- name: hidden
  uid: excel!Excel.Range#hidden:member
  package: excel!
  fullName: hidden
  summary: >-
    Stellt dar, ob alle Zellen des aktuellen Bereichs ausgeblendet sind.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly hidden: boolean;'
    return:
      type: boolean
- name: hyperlink
  uid: excel!Excel.Range#hyperlink:member
  package: excel!
  fullName: hyperlink
  summary: >-
    Stellt den Hyperlink für den aktuellen Bereich dar.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hyperlink: Excel.RangeHyperlink;'
    return:
      type: <xref uid="excel!Excel.RangeHyperlink:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- name: isEntireColumn
  uid: excel!Excel.Range#isEntireColumn:member
  package: excel!
  fullName: isEntireColumn
  summary: >-
    Gibt an, ob der angegebene Bereich eine ganze Spalte ist.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly isEntireColumn: boolean;'
    return:
      type: boolean
- name: isEntireRow
  uid: excel!Excel.Range#isEntireRow:member
  package: excel!
  fullName: isEntireRow
  summary: >-
    Gibt an, ob der angegebene Bereich eine ganze Zeile ist.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly isEntireRow: boolean;'
    return:
      type: boolean
- name: left
  uid: excel!Excel.Range#left:member
  package: excel!
  fullName: left
  summary: >-
    Gibt den Abstand in Punkt für den Zoom von 100 % vom linken Rand des Arbeitsblatts zum linken Rand des Bereichs zurück.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly left: number;'
    return:
      type: number
- name: linkedDataTypeState
  uid: excel!Excel.Range#linkedDataTypeState:member
  package: excel!
  fullName: linkedDataTypeState
  summary: >-
    Stellt den Datentypstatus der einzelnen Zellen dar.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
    return:
      type: <xref uid="excel!Excel.LinkedDataTypeState:enum" />[][]
- name: numberFormat
  uid: excel!Excel.Range#numberFormat:member
  package: excel!
  fullName: numberFormat
  summary: >-
    Stellt den Zahlenformatcode Excel für den angegebenen Bereich dar.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'numberFormat: any[][];'
    return:
      type: any[][]
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// The example below sets number-format, values and formulas on a grid that contains 2x3 grid.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:G7\";\n    var numberFormat = [[null, \"d-mmm\"], [null, \"d-mmm\"], [null, null]]\n    var values = [[\"Today\", 42147], [\"Tomorrow\", \"5/24\"], [\"Difference in days\", null]];\n    var formulas = [[null,null], [null,null], [null,\"=G6-G5\"]];\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.numberFormat = numberFormat;\n    range.values = values;\n    range.formulas= formulas;\n    range.load('text');\n    return ctx.sync().then(function() {\n        console.log(range.text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: numberFormatLocal
  uid: excel!Excel.Range#numberFormatLocal:member
  package: excel!
  fullName: numberFormatLocal
  summary: >-
    Stellt den Zahlenformatcode Excel für den angegebenen Bereich basierend auf den Spracheinstellungen des Benutzers dar. Excel führt beim Abrufen oder Festlegen der Eigenschaft keine Sprach- oder Formatkoersion `numberFormatLocal` durch. Jeder zurückgegebene Text verwendet die lokal formatierten Zeichenfolgen basierend auf der in den Systemeinstellungen angegebenen Sprache.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'numberFormatLocal: any[][];'
    return:
      type: any[][]
- name: rowCount
  uid: excel!Excel.Range#rowCount:member
  package: excel!
  fullName: rowCount
  summary: >-
    Gibt die Anzahl der Zeilen im Bereich zurück.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowCount: number;'
    return:
      type: number
- name: rowHidden
  uid: excel!Excel.Range#rowHidden:member
  package: excel!
  fullName: rowHidden
  summary: >-
    Stellt dar, ob alle Zeilen des aktuellen Bereichs ausgeblendet sind.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rowHidden: boolean;'
    return:
      type: boolean
- name: rowIndex
  uid: excel!Excel.Range#rowIndex:member
  package: excel!
  fullName: rowIndex
  summary: >-
    Gibt die Spaltenanzahl der ersten Zelle im Bereich zurück. Nullindiziert.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type: number
- name: sort
  uid: excel!Excel.Range#sort:member
  package: excel!
  fullName: sort
  summary: >-
    Stellt die Bereichssortierung des aktuellen Bereichs dar.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly sort: Excel.RangeSort;'
    return:
      type: <xref uid="excel!Excel.RangeSort:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml\nasync function sortTopToBottom(criteria: string) {\n    await Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n        const range = sheet.getRange(\"A1:E5\");\n\n        // Find the column header that provides the sort criteria.\n        const header = range.find(criteria, {});\n        header.load(\"columnIndex\");\n        await context.sync();\n\n        range.sort.apply(\n            [\n                {\n                    key: header.columnIndex,\n                    sortOn: Excel.SortOn.value\n                }\n            ],\n            false /*matchCase*/,\n            true /*hasHeaders*/,\n            Excel.SortOrientation.rows\n        );\n        await context.sync();\n    });\n}\n```"
- name: style
  uid: excel!Excel.Range#style:member
  package: excel!
  fullName: style
  summary: >-
    Stellt die Formatvorlage des aktuellen Bereichs dar. Wenn die Formatvorlagen der Zellen inkonsistent sind, `null` wird zurückgegeben. Bei benutzerdefinierten Formatvorlagen wird der Formatvorlagenname zurückgegeben. Bei integrierten Formatvorlagen wird eine Zeichenfolge zurückgegeben, die einen Wert in der `BuiltInStyle` Enumeration darstellt.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml\nawait Excel.run(async (context) => {\n    let worksheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = worksheet.getRange(\"A1:E1\");\n\n    // Apply built-in style. \n    // Styles are in the Home tab ribbon.\n    range.style = Excel.BuiltInStyle.neutral;\n    range.format.horizontalAlignment = \"Right\";\n\n    await context.sync();\n});\n```"
- name: text
  uid: excel!Excel.Range#text:member
  package: excel!
  fullName: text
  summary: >-
    Textwerte des angegebenen Bereichs. Der Textwert hängt nicht von der Zellenbreite ab. Die Ersetzung des Nummernzeichens ( \# ) in der Excel UI wirkt sich nicht auf den von der API zurückgegebenen Textwert aus.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly text: string[][];'
    return:
      type: string[][]
- name: top
  uid: excel!Excel.Range#top:member
  package: excel!
  fullName: top
  summary: >-
    Gibt den Abstand in Punkt für den Zoom von 100 % vom oberen Rand des Arbeitsblatts zum oberen Rand des Bereichs zurück.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly top: number;'
    return:
      type: number
- name: values
  uid: excel!Excel.Range#values:member
  package: excel!
  fullName: values
  summary: >-
    Stellt die Rohwerte des angegebenen Bereichs dar. Bei den zurückgegebenen Daten kann es sich um eine Zeichenfolge, eine Zahl oder einen booleschen Wert handeln. Zellen, die einen Fehler enthalten, geben die Fehlerzeichenfolge zurück. Wenn der zurückgegebene Wert mit einem Pluszeichen ("+"), minus ("-") oder Gleichheitszeichen ("=") beginnt, interpretiert Excel diesen Wert als Formel.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'values: any[][];'
    return:
      type: any[][]
- name: valueTypes
  uid: excel!Excel.Range#valueTypes:member
  package: excel!
  fullName: valueTypes
  summary: >-
    Gibt den Datentyp in jeder Zelle an.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly valueTypes: Excel.RangeValueType[][];'
    return:
      type: <xref uid="excel!Excel.RangeValueType:enum" />[][]
- name: width
  uid: excel!Excel.Range#width:member
  package: excel!
  fullName: width
  summary: >-
    Gibt den Abstand in Punkt für den Zoom von 100 % vom linken Rand des Bereichs zum rechten Rand des Bereichs zurück.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly width: number;'
    return:
      type: number
- name: worksheet
  uid: excel!Excel.Range#worksheet:member
  package: excel!
  fullName: worksheet
  summary: >-
    Das Arbeitsblatt, das den aktuellen Bereich enthält.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
methods:
- name: autoFill(destinationRange, autoFillType)
  uid: excel!Excel.Range#autoFill:member(1)
  package: excel!
  fullName: autoFill(destinationRange, autoFillType)
  summary: >-
    Füllt den Bereich vom aktuellen Bereich bis zum Zielbereich mithilfe der angegebenen AutoFill-Logik. Der Zielbereich kann `null`<!-- -->oder kann die Quelle horizontal oder vertikal erweitern. Nicht zusammenhängenden Bereichen werden nicht unterstützt.


    Weitere Informationen finden Sie unter [Verwenden von AutoFill und Flash Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.


    \[[API-Satz: ExcelApi 1.9, ExcelApi Preview für NULL `destinationRange` <!-- --> ](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'autoFill(destinationRange?: Range | string, autoFillType?: Excel.AutoFillType): void;'
    parameters:
    - id: destinationRange
      description: Der Zielbereich für AutoFill. Wenn der Zielbereich `null`<!-- -->werden die Daten basierend auf den umgebenden Zellen ausgefüllt (dies ist das Verhalten beim Doppelklicken auf den Füllpunkt des Ui-Bereichs).
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: autoFillType
      description: Der Typ von AutoFill. Gibt an, wie der Zielbereich gefüllt werden soll, basierend auf dem Inhalt des aktuellen Bereichs. Der Standardwert ist "FillDefault".
      type: <xref uid="excel!Excel.AutoFillType:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-auto-fill.yaml\nawait Excel.run(async (context) => {\n  const sheet = context.workbook.worksheets.getActiveWorksheet();\n  const sumCell = sheet.getRange(\"P4\");\n  \n  // Copy everything. The formulas will be contextually updated based on their new locations.\n  sumCell.autoFill(\"P4:P7\", Excel.AutoFillType.fillCopy);\n  sumCell.format.autofitColumns();\n  await context.sync();\n});\n```"
- name: autoFill(destinationRange, autoFillTypeString)
  uid: excel!Excel.Range#autoFill:member(2)
  package: excel!
  fullName: autoFill(destinationRange, autoFillTypeString)
  summary: >-
    Füllt den Bereich vom aktuellen Bereich bis zum Zielbereich mithilfe der angegebenen AutoFill-Logik. Der Zielbereich kann `null`<!-- -->oder kann die Quelle horizontal oder vertikal erweitern. Nicht zusammenhängenden Bereichen werden nicht unterstützt.


    Weitere Informationen finden Sie unter [Verwenden von AutoFill und Flash Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.


    \[[API-Satz: ExcelApi 1.9, ExcelApi Preview für NULL `destinationRange` <!-- --> ](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'autoFill(destinationRange?: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
    parameters:
    - id: destinationRange
      description: Der Zielbereich für AutoFill. Wenn der Zielbereich `null`<!-- -->werden die Daten basierend auf den umgebenden Zellen ausgefüllt (dies ist das Verhalten beim Doppelklicken auf den Füllpunkt des Ui-Bereichs).
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: autoFillTypeString
      description: Der Typ von AutoFill. Gibt an, wie der Zielbereich gefüllt werden soll, basierend auf dem Inhalt des aktuellen Bereichs. Der Standardwert ist "FillDefault".
      type: "\"FillDefault\" | \"FillCopy\" | \"FillSeries\" | \"FillFormats\" | \"FillValues\" | \"FillDays\" | \"FillWeekdays\" | \"FillMonths\" | \"FillYears\" | \"LinearTrend\" | \"GrowthTrend\" | \"FlashFill\""
    return:
      type: void
      description: ''
- name: calculate()
  uid: excel!Excel.Range#calculate:member(1)
  package: excel!
  fullName: calculate()
  summary: >-
    Berechnet einen Zellbereich auf einem Arbeitsblatt.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(): void;'
    return:
      type: void
      description: ''
- name: clear(applyTo)
  uid: excel!Excel.Range#clear:member(1)
  package: excel!
  fullName: clear(applyTo)
  summary: >-
    Löscht Bereichswerte, Format, Füllung, Rahmen usw.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
    parameters:
    - id: applyTo
      description: Optional. Bestimmt den Typ der Löschaktion. Weitere Informationen finden Sie `Excel.ClearApplyTo` unter.
      type: <xref uid="excel!Excel.ClearApplyTo:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Below example clears format and contents of the range. \nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.clear();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: clear(applyToString)
  uid: excel!Excel.Range#clear:member(2)
  package: excel!
  fullName: clear(applyToString)
  summary: >-
    Löscht Bereichswerte, Format, Füllung, Rahmen usw.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
    parameters:
    - id: applyToString
      description: Optional. Bestimmt den Typ der Löschaktion. Weitere Informationen finden Sie `Excel.ClearApplyTo` unter.
      type: "\"All\" | \"Formats\" | \"Contents\" | \"Hyperlinks\" | \"RemoveHyperlinks\""
    return:
      type: void
      description: ''
- name: convertDataTypeToText()
  uid: excel!Excel.Range#convertDataTypeToText:member(1)
  package: excel!
  fullName: convertDataTypeToText()
  summary: >-
    Konvertiert die Bereichszellen mit Datentypen in Text.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertDataTypeToText(): void;'
    return:
      type: void
      description: ''
- name: convertToLinkedDataType(serviceID, languageCulture)
  uid: excel!Excel.Range#convertToLinkedDataType:member(1)
  package: excel!
  fullName: convertToLinkedDataType(serviceID, languageCulture)
  summary: >-
    Konvertiert die Bereichszellen in verknüpfte Datentypen im Arbeitsblatt.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
    parameters:
    - id: serviceID
      description: Die Dienst-ID, die zum Abfragen der Daten verwendet wird.
      type: number
    - id: languageCulture
      description: Sprachkultur, nach der der Dienst abgefragt werden soll.
      type: string
    return:
      type: void
      description: ''
- name: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  uid: excel!Excel.Range#copyFrom:member(1)
  package: excel!
  fullName: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  summary: >-
    Kopiert Zelldaten oder Formatierungen aus dem Quellbereich oder `RangeAreas` in den aktuellen Bereich. Der Zielbereich kann eine andere Größe als der Quellbereich haben oder `RangeAreas`<!-- -->. Das Ziel wird automatisch erweitert, wenn es kleiner als die Quelle ist.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
    parameters:
    - id: sourceRange
      description: Der Quellbereich oder `RangeAreas` aus dem kopiert werden soll. Wenn die Quelle `RangeAreas` mehrere Bereiche aufweist, muss ihr Formular erstellt werden können, indem vollständige Zeilen oder Spalten aus einem rechteckigen Bereich entfernt werden.
      type: <xref uid="excel!Excel.Range:class" /> | <xref uid="excel!Excel.RangeAreas:class" /> | string
    - id: copyType
      description: Der Typ der Zu kopierenden Zelldaten oder Formatierungen. Der Standardwert ist "Alle".
      type: <xref uid="excel!Excel.RangeCopyType:enum" />
    - id: skipBlanks
      description: True, wenn leere Zellen im Quellbereich übersprungen werden sollen. Der Standardwert ist „false“.
      type: boolean
    - id: transpose
      description: True, wenn die Zellen im Zielbereich transponieren. Der Standardwert ist „false“.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-copyfrom.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    // Place a label in front of the copied data.\n    sheet.getRange(\"F2\").values = [[\"Copied Formula\"]];\n\n    // Copy a range preserving the formulas.\n    // Note: non-formula values are copied over as is.\n    sheet.getRange(\"G2\").copyFrom(\"A1:E1\", Excel.RangeCopyType.formulas);\n    await context.sync();\n});\n```"
- name: copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)
  uid: excel!Excel.Range#copyFrom:member(2)
  package: excel!
  fullName: copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)
  summary: >-
    Kopiert Zelldaten oder Formatierungen aus dem Quellbereich oder `RangeAreas` in den aktuellen Bereich. Der Zielbereich kann eine andere Größe als der Quellbereich haben oder `RangeAreas`<!-- -->. Das Ziel wird automatisch erweitert, wenn es kleiner als die Quelle ist.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
    parameters:
    - id: sourceRange
      description: Der Quellbereich oder `RangeAreas` aus dem kopiert werden soll. Wenn die Quelle `RangeAreas` mehrere Bereiche aufweist, muss ihr Formular erstellt werden können, indem vollständige Zeilen oder Spalten aus einem rechteckigen Bereich entfernt werden.
      type: <xref uid="excel!Excel.Range:class" /> | <xref uid="excel!Excel.RangeAreas:class" /> | string
    - id: copyTypeString
      description: Der Typ der Zu kopierenden Zelldaten oder Formatierungen. Der Standardwert ist "Alle".
      type: "\"All\" | \"Formulas\" | \"Values\" | \"Formats\""
    - id: skipBlanks
      description: True, wenn leere Zellen im Quellbereich übersprungen werden sollen. Der Standardwert ist „false“.
      type: boolean
    - id: transpose
      description: True, wenn die Zellen im Zielbereich transponieren. Der Standardwert ist „false“.
      type: boolean
    return:
      type: void
      description: ''
- name: delete(shift)
  uid: excel!Excel.Range#delete:member(1)
  package: excel!
  fullName: delete(shift)
  summary: >-
    Löscht die dem Bereich zugeordneten Zellen.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shift: Excel.DeleteShiftDirection): void;'
    parameters:
    - id: shift
      description: Gibt an, wohin die Zellen verschoben werden. Weitere Informationen finden Sie `Excel.DeleteShiftDirection` unter.
      type: <xref uid="excel!Excel.DeleteShiftDirection:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.delete(\"Left\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: delete(shiftString)
  uid: excel!Excel.Range#delete:member(2)
  package: excel!
  fullName: delete(shiftString)
  summary: >-
    Löscht die dem Bereich zugeordneten Zellen.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shiftString: "Up" | "Left"): void;'
    parameters:
    - id: shiftString
      description: Gibt an, wohin die Zellen verschoben werden. Weitere Informationen finden Sie `Excel.DeleteShiftDirection` unter.
      type: "\"Up\" | \"Left\""
    return:
      type: void
      description: ''
- name: find(text, criteria)
  uid: excel!Excel.Range#find:member(1)
  package: excel!
  fullName: find(text, criteria)
  summary: >-
    Sucht die angegebene Zeichenfolge anhand der angegebenen Kriterien. Wenn der aktuelle Bereich größer als eine einzelne Zelle ist, wird die Suche auf diesen Bereich beschränkt, andernfalls wird die Suche das gesamte Blatt abdecken, das nach dieser Zelle beginnt.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
    parameters:
    - id: text
      description: Die zu suchde Zeichenfolge.
      type: string
    - id: criteria
      description: Zusätzliche Suchkriterien, einschließlich der Suchrichtung und ob die Suche mit der gesamten Zelle übereinstimmen muss oder groß-/kleinschreibung beachtet werden muss.
      type: <xref uid="excel!Excel.SearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "Das `Range` Objekt, das die erste Zelle darstellt, die einen Wert enthält, der dem Suchtext und den Kriterien entspricht.\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-find.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const table = sheet.tables.getItem(\"ExpensesTable\");\n    const searchRange = table.getRange();\n\n    // NOTE: If no match is found, an ItemNotFound error\n    // is thrown when Range.find is evaluated.\n    const foundRange = searchRange.find($(\"#searchText\").text(), {\n        completeMatch: isCompleteMatchToggle,\n        matchCase: isMatchCaseToggle,\n        searchDirection: searchDirectionToggle\n    });\n    \n    foundRange.load(\"address\");\n    await context.sync();\n\n\n    console.log(foundRange.address);\n});\n```"
- name: findOrNullObject(text, criteria)
  uid: excel!Excel.Range#findOrNullObject:member(1)
  package: excel!
  fullName: findOrNullObject(text, criteria)
  summary: >-
    Sucht die angegebene Zeichenfolge anhand der angegebenen Kriterien. Wenn der aktuelle Bereich größer als eine einzelne Zelle ist, wird die Suche auf diesen Bereich beschränkt, andernfalls wird die Suche das gesamte Blatt abdecken, das nach dieser Zelle beginnt. Wenn keine Übereinstimmungen vorhanden sind, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf `true`<!-- -->. Weitere Informationen finden Sie unter [*OrNullObject-Methoden und -Eigenschaften.](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
    parameters:
    - id: text
      description: Die zu suchde Zeichenfolge.
      type: string
    - id: criteria
      description: Zusätzliche Suchkriterien, einschließlich der Suchrichtung und ob die Suche mit der gesamten Zelle übereinstimmen muss oder groß-/kleinschreibung beachtet werden muss.
      type: <xref uid="excel!Excel.SearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "Die, `Range` die mit den Suchkriterien übereinstimmten.\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-find.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const table = sheet.tables.getItem(\"ExpensesTable\");\n    const searchRange = table.getRange();\n    const foundRange = searchRange.findOrNullObject($(\"#searchText\").text(), {\n        completeMatch: isCompleteMatchToggle,\n        matchCase: isMatchCaseToggle,\n        searchDirection: searchDirectionToggle\n    });\n    \n    foundRange.load(\"address\");\n    await context.sync();\n\n    if (foundRange.isNullObject) {\n        console.log(\"Text not found\");\n    } else {\n        console.log(foundRange.address);\n    }\n});\n```"
- name: flashFill()
  uid: excel!Excel.Range#flashFill:member(1)
  package: excel!
  fullName: flashFill()
  summary: >-
    Führt eine Blitzfüllung für den aktuellen Bereich aus. Flash Fill füllt Daten automatisch aus, wenn ein Muster erfasst wird. Daher muss es sich bei dem Bereich um einen Einzelnen-Spaltenbereich mit Daten um ihn herum befinden, um ein Muster zu finden.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'flashFill(): void;'
    return:
      type: void
      description: ''
- name: getAbsoluteResizedRange(numRows, numColumns)
  uid: excel!Excel.Range#getAbsoluteResizedRange:member(1)
  package: excel!
  fullName: getAbsoluteResizedRange(numRows, numColumns)
  summary: >-
    Ruft ein `Range` Objekt mit derselben zelle oben links wie das aktuelle `Range` Objekt ab, jedoch mit der angegebenen Anzahl von Zeilen und Spalten.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
    parameters:
    - id: numRows
      description: Die Anzahl der Zeilen der neuen Bereichsgröße.
      type: number
    - id: numColumns
      description: Die Anzahl der Spalten der neuen Bereichsgröße.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getBoundingRect(anotherRange)
  uid: excel!Excel.Range#getBoundingRect:member(1)
  package: excel!
  fullName: getBoundingRect(anotherRange)
  summary: >-
    Ruft das kleinste Bereichsobjekt ab, das die angegebenen Bereiche umfasst. Beispielsweise ist `GetBoundingRect` "B2:C5" und "D10:E15" "B2:E15".


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: Das Bereichsobjekt, die Adresse oder der Bereichsname.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:G6\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var range = range.getBoundingRect(\"G4:H8\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // Prints Sheet1!D4:H8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCell(row, column)
  uid: excel!Excel.Range#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: >-
    Ruft das Bereichsobjekt ab, das die einzelne Zelle basierend auf Zeilen- und Spaltenanzahl enthält. Die Zelle kann sich außerhalb des übergeordneten Bereichs befinden, solange sie im Arbeitsblattraster bleibt. Die zurückgegebene Zelle befindet sich relativ zur obersten linken Zelle des Bereichs.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    parameters:
    - id: row
      description: Zeilenanzahl der abzurufenden Zelle. Nullindiziert.
      type: number
    - id: column
      description: Spaltenanzahl der abzurufenden Zelle. Nullindiziert.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var cell = range.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCellProperties(cellPropertiesLoadOptions)
  uid: excel!Excel.Range#getCellProperties:member(1)
  package: excel!
  fullName: getCellProperties(cellPropertiesLoadOptions)
  summary: >-
    Gibt ein 2D-Array zurück, das die Daten für die Schriftart, die Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften jeder Zelle kapselt.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
    parameters:
    - id: cellPropertiesLoadOptions
      description: Ein Objekt, das darstellt, welche Zelleigenschaften geladen werden sollen.
      type: <xref uid="excel!Excel.CellPropertiesLoadOptions:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="excel!Excel.CellProperties:interface" />[][]&gt;
      description: >-
        Ein 2D-Array, in dem jedes Element die angeforderten Eigenschaften der entsprechenden Zelle darstellt.


        #### <a name="examples"></a>Beispiele


        ```typescript

        // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

        await Excel.run(async (context) => {
            const cell = context.workbook.getActiveCell();

            // Define the cell properties to get by setting the matching LoadOptions to true.
            const propertiesToGet = cell.getCellProperties({
                address: true,
                format: {
                    fill: {
                        color: true
                    },
                    font: {
                        color: true
                    }
                },
                style: true
            });

            // Sync to get the data from the workbook.
            await context.sync();
            const cellProperties = propertiesToGet.value[0][0];
            console.log(
                `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
        });

        ```
- name: getColumn(column)
  uid: excel!Excel.Range#getColumn:member(1)
  package: excel!
  fullName: getColumn(column)
  summary: >-
    Ruft eine Spalte ab, die im Bereich enthalten ist.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumn(column: number): Excel.Range;'
    parameters:
    - id: column
      description: Spaltenanzahl des abzurufenden Bereichs. Nullindiziert.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet19\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!B1:B8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getColumnProperties(columnPropertiesLoadOptions)
  uid: excel!Excel.Range#getColumnProperties:member(1)
  package: excel!
  fullName: getColumnProperties(columnPropertiesLoadOptions)
  summary: >-
    Gibt ein eindimensionales Array zurück, das die Daten für die Schriftart, die Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften jeder Spalte kapselt. Für Eigenschaften, die innerhalb einer bestimmten Spalte nicht für alle Zellen konsistent sind, wird NULL zurückgegeben.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
    parameters:
    - id: columnPropertiesLoadOptions
      description: Ein Objekt, das darstellt, welche Spalteneigenschaften geladen werden sollen.
      type: <xref uid="excel!Excel.ColumnPropertiesLoadOptions:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="excel!Excel.ColumnProperties:interface" />[]&gt;
      description: Ein Array, in dem jedes Element die angeforderten Eigenschaften der entsprechenden Spalte darstellt.
- name: getColumnsAfter(count)
  uid: excel!Excel.Range#getColumnsAfter:member(1)
  package: excel!
  fullName: getColumnsAfter(count)
  summary: >-
    Ruft eine bestimmte Anzahl von Spalten rechts vom aktuellen `Range` Objekt ab.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsAfter(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getColumnsBefore(count)
  uid: excel!Excel.Range#getColumnsBefore:member(1)
  package: excel!
  fullName: getColumnsBefore(count)
  summary: >-
    Ruft eine bestimmte Anzahl von Spalten links vom aktuellen `Range` Objekt ab.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsBefore(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getEntireColumn()
  uid: excel!Excel.Range#getEntireColumn:member(1)
  package: excel!
  fullName: getEntireColumn()
  summary: >-
    Ruft ein Objekt ab, das die gesamte Spalte des Bereichs darstellt (wenn der aktuelle Bereich beispielsweise die Zellen "B4:E11" darstellt, handelt es sich um einen Bereich, der `getEntireColumn` die Spalten "B:E" darstellt).


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireColumn(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Note: the grid properties of the Range (values, numberFormat, formulas) \n// contains null since the Range in question is unbounded.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeEC = range.getEntireColumn();\n    rangeEC.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeEC.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getEntireRow()
  uid: excel!Excel.Range#getEntireRow:member(1)
  package: excel!
  fullName: getEntireRow()
  summary: >-
    Ruft ein Objekt ab, das die gesamte Zeile des Bereichs darstellt (wenn der aktuelle Bereich beispielsweise die Zellen "B4:E11" darstellt, handelt es sich um einen Bereich, der `GetEntireRow` die Zeilen "4:11" darstellt).


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireRow(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Gets an object that represents the entire row of the range \n// (for example, if the current range represents cells \"B4:E11\", \n// its GetEntireRow is a range that represents rows \"4:11\").\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeER = range.getEntireRow();\n    rangeER.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeER.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getImage()
  uid: excel!Excel.Range#getImage:member(1)
  package: excel!
  fullName: getImage()
  summary: >-
    Rendert den Bereich als base64-codiertes PNG-Bild. *Wichtig**: Diese API wird in Excel für Mac derzeit nicht unterstützt. Besuchen Sie [OfficeDev/office-js Problem \# 235,](https://github.com/OfficeDev/office-js/issues/235) um den aktuellen Status zu finden.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(): OfficeExtension.ClientResult<string>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: ''
- name: getIntersection(anotherRange)
  uid: excel!Excel.Range#getIntersection:member(1)
  package: excel!
  fullName: getIntersection(anotherRange)
  summary: >-
    Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection(\"D4:G6\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!D4:F6\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getIntersectionOrNullObject(anotherRange)
  uid: excel!Excel.Range#getIntersectionOrNullObject:member(1)
  package: excel!
  fullName: getIntersectionOrNullObject(anotherRange)
  summary: >-
    Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt. Wenn keine Schnittmenge gefunden wird, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf `true`<!-- -->. Weitere Informationen finden Sie unter [*OrNullObject-Methoden und -Eigenschaften.](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[API-Satz: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
- name: getLastCell()
  uid: excel!Excel.Range#getLastCell:member(1)
  package: excel!
  fullName: getLastCell()
  summary: >-
    Ruft die letzte Zelle im Bereich ab. Beispielsweise lautet die letzte Zelle des Bereichs „B2: D5“ „D5“.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastCell(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getLastColumn()
  uid: excel!Excel.Range#getLastColumn:member(1)
  package: excel!
  fullName: getLastColumn()
  summary: >-
    Ruft die letzte Spalte im Bereich ab. Beispielsweise lautet die letzte Spalte von „B2:D5“ „D2:D5“.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastColumn(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F1:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getLastRow()
  uid: excel!Excel.Range#getLastRow:member(1)
  package: excel!
  fullName: getLastRow()
  summary: >-
    Ruft die letzte Zeile im Bereich ab. Beispielsweise lautet die letzte Zelle des Bereichs "B2: D5" "B5:D5".


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastRow(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A8:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getOffsetRange(rowOffset, columnOffset)
  uid: excel!Excel.Range#getOffsetRange:member(1)
  package: excel!
  fullName: getOffsetRange(rowOffset, columnOffset)
  summary: >-
    Ruft ein Objekt ab, das einen Bereich darstellt, der aus dem angegebenen Bereich versetzt ist. Die Dimension des zurückgegebenen Bereichs entspricht diesem Bereich. Wenn der resultierende Bereich außerhalb des Arbeitsblatt-Rasters erzwungen wird, wird ein Fehler ausgelöst.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
    parameters:
    - id: rowOffset
      description: Die Anzahl an Zeilen (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.
      type: number
    - id: columnOffset
      description: Die Anzahl an Spalten (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:F6\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!H3:J5\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getResizedRange(deltaRows, deltaColumns)
  uid: excel!Excel.Range#getResizedRange:member(1)
  package: excel!
  fullName: getResizedRange(deltaRows, deltaColumns)
  summary: >-
    Ruft ein `Range` Objekt ab, das dem aktuellen `Range` Objekt ähnelt, dessen untere rechte Ecke jedoch um eine Bestimmte Anzahl von Zeilen und Spalten erweitert (oder gekürzt) wird.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
    parameters:
    - id: deltaRows
      description: Die Anzahl von Zeilen, um die die untere rechte Ecke relativ zum aktuellen Bereich zu erweitern ist. Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verkleinern.
      type: number
    - id: deltaColumns
      description: Die Anzahl der Spalten, um die die untere rechte Ecke relativ zum aktuellen Bereich erweitert werden soll. Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verkleinern.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRow(row)
  uid: excel!Excel.Range#getRow:member(1)
  package: excel!
  fullName: getRow(row)
  summary: >-
    Ruft eine Zelle ab, die im Bereich enthalten ist.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRow(row: number): Excel.Range;'
    parameters:
    - id: row
      description: Zeilenanzahl des abzurufenden Bereichs. Nullindiziert.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A2:F2\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRowProperties(rowPropertiesLoadOptions)
  uid: excel!Excel.Range#getRowProperties:member(1)
  package: excel!
  fullName: getRowProperties(rowPropertiesLoadOptions)
  summary: >-
    Gibt ein eindimensionales Array zurück, das die Daten für die Schriftart, die Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften jeder Zeile kapselt. Für Eigenschaften, die nicht in jeder Zelle innerhalb einer bestimmten Zeile konsistent sind, `null` wird zurückgegeben.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
    parameters:
    - id: rowPropertiesLoadOptions
      description: Ein Objekt, das darstellt, welche Zeileneigenschaften geladen werden sollen.
      type: <xref uid="excel!Excel.RowPropertiesLoadOptions:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="excel!Excel.RowProperties:interface" />[]&gt;
      description: Ein Array, in dem jedes Element die angeforderten Eigenschaften der entsprechenden Zeile darstellt.
- name: getRowsAbove(count)
  uid: excel!Excel.Range#getRowsAbove:member(1)
  package: excel!
  fullName: getRowsAbove(count)
  summary: >-
    Ruft eine bestimmte Anzahl von Zeilen über dem aktuellen `Range` Objekt ab.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsAbove(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRowsBelow(count)
  uid: excel!Excel.Range#getRowsBelow:member(1)
  package: excel!
  fullName: getRowsBelow(count)
  summary: >-
    Ruft eine bestimmte Anzahl von Zeilen unterhalb des aktuellen `Range` Objekts ab.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsBelow(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getSpecialCells(cellType, cellValueType)
  uid: excel!Excel.Range#getSpecialCells:member(1)
  package: excel!
  fullName: getSpecialCells(cellType, cellValueType)
  summary: >-
    Ruft das Objekt ab, das `RangeAreas` aus einem oder mehreren rechteckigen Bereichen besteht und alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen. Wenn keine speziellen Zellen gefunden werden, wird ein `ItemNotFound` Fehler ausgelöst.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
    parameters:
    - id: cellType
      description: Der Typ der einzuschließenden Zellen.
      type: <xref uid="excel!Excel.SpecialCellType:enum" />
    - id: cellValueType
      description: Wenn `cellType` entweder `constants` oder `formulas`<!-- -->wird dieses Argument verwendet, um zu bestimmen, welche Zelltypen in das Ergebnis einbezogen werden sollen. Diese Werte können kombiniert werden, um mehr als einen Typ zurückzugeben. Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.
      type: <xref uid="excel!Excel.SpecialCellValueType:enum" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml\nawait Excel.run(async (context) => {\n\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const usedRange = sheet.getUsedRange();\n\n    // Find the ranges with either text or logical (boolean) values.\n    const formulaRanges = usedRange.getSpecialCells(\"Constants\", \"LogicalText\");\n    formulaRanges.format.fill.color = \"orange\";\n\n    return context.sync();\n});\n```"
- name: getSpecialCells(cellTypeString, cellValueType)
  uid: excel!Excel.Range#getSpecialCells:member(2)
  package: excel!
  fullName: getSpecialCells(cellTypeString, cellValueType)
  summary: >-
    Ruft das Objekt ab, das `RangeAreas` aus einem oder mehreren rechteckigen Bereichen besteht und alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen. Wenn keine speziellen Zellen gefunden werden, wird ein `ItemNotFound` Fehler ausgelöst.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
    parameters:
    - id: cellTypeString
      description: Der Typ der einzuschließenden Zellen.
      type: "\"ConditionalFormats\" | \"DataValidations\" | \"Blanks\" | \"Constants\" | \"Formulas\" | \"SameConditionalFormat\" | \"SameDataValidation\" | \"Visible\""
    - id: cellValueType
      description: Wenn `cellType` entweder `constants` oder `formulas`<!-- -->wird dieses Argument verwendet, um zu bestimmen, welche Zelltypen in das Ergebnis einbezogen werden sollen. Diese Werte können kombiniert werden, um mehr als einen Typ zurückzugeben. Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.
      type: "\"All\" | \"Errors\" | \"ErrorsLogical\" | \"ErrorsNumbers\" | \"ErrorsText\" | \"ErrorsLogicalNumber\" | \"ErrorsLogicalText\" | \"ErrorsNumberText\" | \"Logical\" | \"LogicalNumbers\" | \"LogicalText\" | \"LogicalNumbersText\" | \"Numbers\" | \"NumbersText\" | \"Text\""
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getSpecialCellsOrNullObject(cellType, cellValueType)
  uid: excel!Excel.Range#getSpecialCellsOrNullObject:member(1)
  package: excel!
  fullName: getSpecialCellsOrNullObject(cellType, cellValueType)
  summary: >-
    Ruft das Objekt ab, das `RangeAreas` aus einem oder mehreren Bereichen besteht und alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen. Wenn keine speziellen Zellen gefunden werden, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf `true`<!-- -->. Weitere Informationen finden Sie unter [*OrNullObject-Methoden und -Eigenschaften.](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
    parameters:
    - id: cellType
      description: Der Typ der einzuschließenden Zellen.
      type: <xref uid="excel!Excel.SpecialCellType:enum" />
    - id: cellValueType
      description: Wenn `cellType` entweder `constants` oder `formulas`<!-- -->wird dieses Argument verwendet, um zu bestimmen, welche Zelltypen in das Ergebnis einbezogen werden sollen. Diese Werte können kombiniert werden, um mehr als einen Typ zurückzugeben. Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.
      type: <xref uid="excel!Excel.SpecialCellValueType:enum" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getSpecialCellsOrNullObject(cellTypeString, cellValueType)
  uid: excel!Excel.Range#getSpecialCellsOrNullObject:member(2)
  package: excel!
  fullName: getSpecialCellsOrNullObject(cellTypeString, cellValueType)
  summary: >-
    Ruft das Objekt ab, das `RangeAreas` aus einem oder mehreren Bereichen besteht und alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen. Wenn keine speziellen Zellen gefunden werden, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf `true`<!-- -->. Weitere Informationen finden Sie unter [*OrNullObject-Methoden und -Eigenschaften.](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
    parameters:
    - id: cellTypeString
      description: Der Typ der einzuschließenden Zellen.
      type: "\"ConditionalFormats\" | \"DataValidations\" | \"Blanks\" | \"Constants\" | \"Formulas\" | \"SameConditionalFormat\" | \"SameDataValidation\" | \"Visible\""
    - id: cellValueType
      description: Wenn `cellType` entweder `constants` oder `formulas`<!-- -->wird dieses Argument verwendet, um zu bestimmen, welche Zelltypen in das Ergebnis einbezogen werden sollen. Diese Werte können kombiniert werden, um mehr als einen Typ zurückzugeben. Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.
      type: "\"All\" | \"Errors\" | \"ErrorsLogical\" | \"ErrorsNumbers\" | \"ErrorsText\" | \"ErrorsLogicalNumber\" | \"ErrorsLogicalText\" | \"ErrorsNumberText\" | \"Logical\" | \"LogicalNumbers\" | \"LogicalText\" | \"LogicalNumbersText\" | \"Numbers\" | \"NumbersText\" | \"Text\""
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getSurroundingRegion()
  uid: excel!Excel.Range#getSurroundingRegion:member(1)
  package: excel!
  fullName: getSurroundingRegion()
  summary: >-
    Gibt ein `Range` Objekt zurück, das den umgebenden Bereich für die obere linke Zelle in diesem Bereich darstellt. Eine umgebende Region ist ein Bereich, der von einer Kombination von leeren Zeilen und leeren Spalten relativ zu diesem Bereich begrenzt wird.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSurroundingRegion(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getTables(fullyContained)
  uid: excel!Excel.Range#getTables:member(1)
  package: excel!
  fullName: getTables(fullyContained)
  summary: >-
    Ruft eine bereichsbezogene Sammlung von Tabellen ab, die sich mit dem Bereich überschneidet.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
    parameters:
    - id: fullyContained
      description: Wenn `true`<!-- -->gibt nur Tabellen zurück, die vollständig innerhalb der Bereichsgrenzen enthalten sind. Der Standardwert ist `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="excel!Excel.TableScopedCollection:class" />
      description: ''
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Range#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: >-
    Gibt den verwendeten Bereich des angegebenen Bereichsobjekts zurück. Wenn innerhalb des Bereichs keine verwendeten Zellen vorhanden sind, löst diese Funktion einen `ItemNotFound` Fehler aus.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 'Betrachtet nur Zellen mit Werten als verwendet. \[Api-Satz: ExcelApi 1.2\]'
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Range#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: >-
    Gibt den verwendeten Bereich des angegebenen Bereichsobjekts zurück. Wenn innerhalb des Bereichs keine verwendeten Zellen vorhanden sind, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf `true`<!-- -->. Weitere Informationen finden Sie unter [*OrNullObject-Methoden und -Eigenschaften.](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[API-Satz: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: Betrachtet nur Zellen mit Werten als verwendet.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/used-range.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(\n        true /* valuesOnly */\n    );\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n        console.log(\"Need Data to Make Chart\");\n        console.log(\"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\");\n    } else {\n        const chart = sheet.charts.add(\n            Excel.ChartType.columnClustered,\n            dataRange,\n            \"Columns\"\n        );\n        chart.setPosition(\"A15\", \"F30\");\n        chart.title.text = \"Quarterly sales chart\";\n        chart.legend.position = \"Right\";\n        chart.legend.format.fill.setSolidColor(\"white\");\n        chart.dataLabels.format.font.size = 15;\n        chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n});\n```"
- name: getVisibleView()
  uid: excel!Excel.Range#getVisibleView:member(1)
  package: excel!
  fullName: getVisibleView()
  summary: >-
    Stellt die sichtbaren Zeilen des aktuellen Bereichs dar.


    \[[API-Satz: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getVisibleView(): Excel.RangeView;'
    return:
      type: <xref uid="excel!Excel.RangeView:class" />
      description: ''
- name: group(groupOption)
  uid: excel!Excel.Range#group:member(1)
  package: excel!
  fullName: group(groupOption)
  summary: >-
    Gruppiert Spalten und Zeilen für eine Gliederung.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'group(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: Gibt an, wie der Bereich nach Zeilen oder Spalten gruppiert werden kann. Ein `InvalidArgument` Fehler wird ausgelöst, wenn die Gruppenoption von der Eigenschaft des Bereichs abweicht `isEntireRow` `isEntireColumn` (d. h. `range.isEntireRow` "true" und `groupOption` "ByColumns" `range.isEntireColumn` oder "True" und `groupOption` "ByRows") ist.
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml\nExcel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    \n    // Group the larger, main level. Note that the outline controls\n    // will be on row 10, meaning 4-9 will collapse and expand.\n    sheet.getRange(\"4:9\").group(Excel.GroupOption.byRows);\n\n    // Group the smaller, sublevels. Note that the outline controls\n    // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.\n    sheet.getRange(\"4:5\").group(Excel.GroupOption.byRows);\n    sheet.getRange(\"7:8\").group(Excel.GroupOption.byRows);\n    await context.sync();\n});\n```"
- name: group(groupOptionString)
  uid: excel!Excel.Range#group:member(2)
  package: excel!
  fullName: group(groupOptionString)
  summary: >-
    Gruppiert Spalten und Zeilen für eine Gliederung.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'group(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: Gibt an, wie der Bereich nach Zeilen oder Spalten gruppiert werden kann. Ein `InvalidArgument` Fehler wird ausgelöst, wenn die Gruppenoption von der Eigenschaft des Bereichs abweicht `isEntireRow` `isEntireColumn` (d. h. `range.isEntireRow` "true" und `groupOption` "ByColumns" `range.isEntireColumn` oder "True" und `groupOption` "ByRows") ist.
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: hideGroupDetails(groupOption)
  uid: excel!Excel.Range#hideGroupDetails:member(1)
  package: excel!
  fullName: hideGroupDetails(groupOption)
  summary: >-
    Blendet die Details der Zeilen- oder Spaltengruppe aus.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hideGroupDetails(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: Gibt an, ob die Details gruppierter Zeilen oder gruppierter Spalten ausgeblendet werden sollen.
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: hideGroupDetails(groupOptionString)
  uid: excel!Excel.Range#hideGroupDetails:member(2)
  package: excel!
  fullName: hideGroupDetails(groupOptionString)
  summary: >-
    Blendet die Details der Zeilen- oder Spaltengruppe aus.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hideGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: Gibt an, ob die Details gruppierter Zeilen oder gruppierter Spalten ausgeblendet werden sollen.
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: insert(shift)
  uid: excel!Excel.Range#insert:member(1)
  package: excel!
  fullName: insert(shift)
  summary: >-
    Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues `Range` Objekt im nun leeren Bereich zurück.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
    parameters:
    - id: shift
      description: Gibt an, wohin die Zellen verschoben werden. Weitere Informationen finden Sie `Excel.InsertShiftDirection` unter.
      type: <xref uid="excel!Excel.InsertShiftDirection:enum" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.insert();\n    return ctx.sync(); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insert(shiftString)
  uid: excel!Excel.Range#insert:member(2)
  package: excel!
  fullName: insert(shiftString)
  summary: >-
    Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues `Range` Objekt im nun leeren Bereich zurück.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
    parameters:
    - id: shiftString
      description: Gibt an, wohin die Zellen verschoben werden. Weitere Informationen finden Sie `Excel.InsertShiftDirection` unter.
      type: "\"Down\" | \"Right\""
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.Range#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
    parameters:
    - id: options
      description: Stellt Optionen bereit, für welche Eigenschaften des Objekts geladen werden soll.
      type: <xref uid="excel!Excel.Interfaces.RangeLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Range#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Range;'
    parameters:
    - id: propertyNames
      description: Eine durch Trennzeichen getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\"; \n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Range#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Range;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` ist eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und `propertyNamesAndPaths.expand` eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: merge(across)
  uid: excel!Excel.Range#merge:member(1)
  package: excel!
  fullName: merge(across)
  summary: >-
    Führt die Zellen des Bereichs in eine Region im Arbeitsblatt zusammen.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'merge(across?: boolean): void;'
    parameters:
    - id: across
      description: Optional. Legen Sie `true` fest, dass Zellen in jeder Zeile des angegebenen Bereichs als separate verbundene Zellen zusammengeführt werden. Der Standardwert ist `false`<!-- -->.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.merge(true);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/85-preview-apis/range-merged-ranges.yaml\nawait Excel.run(async (context) => {\n  // Retrieve the worksheet and the table in that worksheet.\n  const sheet = context.workbook.worksheets.getActiveWorksheet();\n  const tableRange = sheet.getRange(\"B2:E6\");\n\n  // Create a merged range in the first row of the table.\n  const chartTitle = tableRange.getRow(0);\n  chartTitle.merge(true);\n\n  // Format the merged range.\n  chartTitle.format.horizontalAlignment = \"Center\";\n\n  await context.sync();\n});\n```"
- name: moveTo(destinationRange)
  uid: excel!Excel.Range#moveTo:member(1)
  package: excel!
  fullName: moveTo(destinationRange)
  summary: >-
    Verschiebt Zellwerte, Formatierungen und Formeln aus dem aktuellen Bereich in den Zielbereich und ersetzt dabei die alten Informationen in diesen Zellen. Der Zielbereich wird automatisch erweitert, wenn er kleiner als der aktuelle Bereich ist. Alle Zellen im Zielbereich, die sich außerhalb des Ursprünglichen Bereichs befinden, werden nicht geändert.


    \[[API-Satz: ExcelApi 1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'moveTo(destinationRange: Range | string): void;'
    parameters:
    - id: destinationRange
      description: destinationRange Gibt den Bereich an, in den die Informationen in diesem Bereich verschoben werden.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-copyfrom.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    // Place a label in front of the moved data.\n    sheet.getRange(\"F12\").values = [[\"Moved Range:\"]];\n\n    // Move the range from A1:E1 to G12:K12.\n    sheet.getRange(\"A1:E1\").moveTo(\"G12\");\n    await context.sync();\n});\n```"
- name: removeDuplicates(columns, includesHeader)
  uid: excel!Excel.Range#removeDuplicates:member(1)
  package: excel!
  fullName: removeDuplicates(columns, includesHeader)
  summary: >-
    Entfernt doppelte Werte aus dem durch die Spalten angegebenen Bereich.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
    parameters:
    - id: columns
      description: Die Spalten innerhalb des Bereichs, die Duplikate enthalten können. Es muss mindestens eine Spalte angegeben werden. Nullindiziert.
      type: number[]
    - id: includesHeader
      description: True, wenn die Eingabedaten den Header enthalten. Der Standardwert ist „false“.
      type: boolean
    return:
      type: <xref uid="excel!Excel.RemoveDuplicatesResult:class" />
      description: "Das resultierende Objekt, das die Anzahl der entfernten Zeilen und die Anzahl der verbleibenden eindeutigen Zeilen enthält.\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-remove-duplicates.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:D11\");\n\n    const deleteResult = range.removeDuplicates([0],true);    \n    deleteResult.load();    \n    await context.sync();\n\n    console.log(deleteResult.removed + \" entries with duplicate names removed.\");\n    console.log(deleteResult.uniqueRemaining + \" entries with unique names remain in the range.\");\n});\n```"
- name: replaceAll(text, replacement, criteria)
  uid: excel!Excel.Range#replaceAll:member(1)
  package: excel!
  fullName: replaceAll(text, replacement, criteria)
  summary: >-
    Sucht und ersetzt die angegebene Zeichenfolge auf der Grundlage der im aktuellen Bereich angegebenen Kriterien.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
    parameters:
    - id: text
      description: Zu suchende Zeichenfolge.
      type: string
    - id: replacement
      description: Die Zeichenfolge, die die ursprüngliche Zeichenfolge ersetzt.
      type: string
    - id: criteria
      description: Zusätzliche Ersetzungskriterien.
      type: <xref uid="excel!Excel.ReplaceCriteria:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: Die Anzahl der durchgeführten Ersetzungen.
- name: select()
  uid: excel!Excel.Range#select:member(1)
  package: excel!
  fullName: select()
  summary: >-
    Wählt den angegebenen Bereich in der Excel-Benutzeroberfläche aus.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.select();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: set(properties, options)
  uid: excel!Excel.Range#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Legt mehrere Eigenschaften eines Objekts gleichzeitig fest. Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.
  remarks: "Diese Methode hat die folgende zusätzliche Signatur:\n\n`set(properties: Excel.Range): void`\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/multiple-property-set.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const range = sheet.getRange(\"B2:E2\");\n    range.set({\n        format: {\n            fill: {\n                color: \"#4472C4\"\n            },\n            font: {\n                name: \"Verdana\",\n                color: \"white\"\n            }\n        }\n    })\n    range.format.autofitColumns();\n    await context.sync();\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/multiple-property-set.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const sourceRange = sheet.getRange(\"B2:E2\");\n    sourceRange.load(\"format/fill/color, format/font/name, format/font/color\");\n    await context.sync();\n\n    // Set properties based on the loaded and synced \n    // source range.\n    const targetRange = sheet.getRange(\"B7:E7\");\n    targetRange.set(sourceRange); \n    targetRange.format.autofitColumns();\n    await context.sync();\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Ein JavaScript-Objekt mit Eigenschaften, die isomorph zu den Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.
      type: <xref uid="excel!Excel.Interfaces.RangeUpdateData:interface" />
    - id: options
      description: Bietet eine Option zum Unterdrücken von Fehlern, wenn das Eigenschaftenobjekt versucht, schreibgeschützte Eigenschaften festzulegen.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Range#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Legt mehrere Eigenschaften für das Objekt gleichzeitig fest, basierend auf einem vorhandenen geladenen Objekt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Range): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Range:class" />
    return:
      type: void
      description: ''
- name: setCellProperties(cellPropertiesData)
  uid: excel!Excel.Range#setCellProperties:member(1)
  package: excel!
  fullName: setCellProperties(cellPropertiesData)
  summary: >-
    Aktualisiert den Bereich basierend auf einem 2D-Array von Zelleigenschaften, das Elemente wie Schriftart, Füllung, Rahmen und Ausrichtung kapselt.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
    parameters:
    - id: cellPropertiesData
      description: Ein 2D-Array, das angibt, welche Eigenschaften in jeder Zelle festgelegt werden sollen.
      type: <xref uid="excel!Excel.SettableCellProperties:interface" />[][]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Creating the SettableCellProperties objects to use for the range.\n    // In your add-in, these should be created once, outside the function.\n    const topHeaderProps: Excel.SettableCellProperties = {\n        // The style property takes a string matching the name of an Excel style.\n        // Built-in style names are listed in the `BuiltInStyle` enum.\n        // Note that a style will overwrite any formatting,\n        // so do not use the format property with the style property.\n        style: \"Heading1\"\n    };\n\n    const headerProps: Excel.SettableCellProperties = {\n        // Any subproperties of format that are not set will not be changed when these cell properties are set.\n        format: {\n            fill: {\n                color: \"Blue\"\n            },\n            font: {\n                color: \"White\",\n                bold: true\n            }\n        }\n    };\n\n    const nonApplicableProps: Excel.SettableCellProperties = {\n        format: {\n            fill: {\n                pattern: Excel.FillPattern.gray25\n            },\n            font: {\n                color: \"Gray\",\n                italic: true\n            }\n        }\n    };\n\n    const matchupScoreProps: Excel.SettableCellProperties = {\n        format: {\n            borders: {\n                bottom: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                left: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                right: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                top: {\n                    style: Excel.BorderLineStyle.continuous\n                }\n            }\n        }\n    };\n\n    const range = sheet.getRange(\"A1:E5\");\n\n    // You can use empty JSON objects to avoid changing a cell's properties.\n    range.setCellProperties([\n        [topHeaderProps, {}, {}, {}, {}],\n        [{}, {}, headerProps, headerProps, headerProps],\n        [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]\n    ]);\n\n    sheet.getUsedRange().format.autofitColumns();\n    await context.sync();\n});\n```"
- name: setColumnProperties(columnPropertiesData)
  uid: excel!Excel.Range#setColumnProperties:member(1)
  package: excel!
  fullName: setColumnProperties(columnPropertiesData)
  summary: >-
    Aktualisiert den Bereich basierend auf einem eindimensionalen Array von Spalteneigenschaften, das Elemente wie Schriftart, Füllung, Rahmen und Ausrichtung kapselt.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
    parameters:
    - id: columnPropertiesData
      description: Ein Array, das darstellt, welche Eigenschaften in den einzelnen Spalten festgelegt werden sollen.
      type: <xref uid="excel!Excel.SettableColumnProperties:interface" />[]
    return:
      type: void
      description: ''
- name: setDirty()
  uid: excel!Excel.Range#setDirty:member(1)
  package: excel!
  fullName: setDirty()
  summary: >-
    Legt für einen Bereich Neuberechnung bei der nächsten auszuführenden Neuberechnung fest.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDirty(): void;'
    return:
      type: void
      description: ''
- name: setRowProperties(rowPropertiesData)
  uid: excel!Excel.Range#setRowProperties:member(1)
  package: excel!
  fullName: setRowProperties(rowPropertiesData)
  summary: >-
    Aktualisiert den Bereich basierend auf einem eindimensionalen Array von Zeileneigenschaften, das Elemente wie Schriftart, Füllung, Rahmen und Ausrichtung kapselt.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
    parameters:
    - id: rowPropertiesData
      description: Ein Array, das darstellt, welche Eigenschaften in jeder Zeile festgelegt werden sollen.
      type: <xref uid="excel!Excel.SettableRowProperties:interface" />[]
    return:
      type: void
      description: ''
- name: showCard()
  uid: excel!Excel.Range#showCard:member(1)
  package: excel!
  fullName: showCard()
  summary: >-
    Zeigt die Karte für eine aktive Zelle an, wenn sie einen hohen Wertinhalt hat.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showCard(): void;'
    return:
      type: void
      description: ''
- name: showGroupDetails(groupOption)
  uid: excel!Excel.Range#showGroupDetails:member(1)
  package: excel!
  fullName: showGroupDetails(groupOption)
  summary: >-
    Zeigt die Details der Zeilen- oder Spaltengruppe an.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGroupDetails(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: Gibt an, ob die Details gruppierter Zeilen oder gruppierter Spalten angezeigt werden sollen.
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: showGroupDetails(groupOptionString)
  uid: excel!Excel.Range#showGroupDetails:member(2)
  package: excel!
  fullName: showGroupDetails(groupOptionString)
  summary: >-
    Zeigt die Details der Zeilen- oder Spaltengruppe an.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: Gibt an, ob die Details gruppierter Zeilen oder gruppierter Spalten angezeigt werden sollen.
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.Range#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Überschreibt die `toJSON()` JavaScript-Methode, um eine hilfreichere Ausgabe bereitzustellen, wenn ein API-Objekt an `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->ruft wiederum die Methode des Objekts auf, `toJSON` das an das Objekt übergeben wird.) Während die ursprüngliche Excel. Range-Objekt ist ein API-Objekt, die `toJSON` Methode gibt ein einfaches JavaScript-Objekt zurück (typisiert als`Excel.Interfaces.RangeData`<!-- -->), die flache Kopien aller geladenen untergeordneten Eigenschaften des ursprünglichen Objekts enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.RangeData:interface" />
      description: ''
- name: track()
  uid: excel!Excel.Range#track:member(1)
  package: excel!
  fullName: track()
  summary: Nachverfolgung des Objekts zwecks automatischer Anpassung auf der Grundlage der umgebenden Änderungen im Dokument. Dieser Aufruf ist eine Abkürzung für `context.trackedObjects.add(thisObject)`<!-- -->. Wenn Sie dieses Objekt über `.sync` Aufrufe und außerhalb der sequenziellen Ausführung eines ".run"-Batches verwenden und beim Festlegen einer Eigenschaft oder Aufrufen einer Methode für das Objekt den Fehler "InvalidObjectPath" erhalten, mussten Sie das Objekt der Nachverfolgungsobjektauflistung hinzugefügt haben, als das Objekt zum ersten Mal erstellt wurde.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: ungroup(groupOption)
  uid: excel!Excel.Range#ungroup:member(1)
  package: excel!
  fullName: ungroup(groupOption)
  summary: >-
    Hebt die Gruppierung von Spalten und Zeilen für eine Gliederung auf.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ungroup(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: Gibt an, wie die Gruppierung des Bereichs durch Zeilen oder Spalten aufgehoben werden kann.
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml\nExcel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    \n    // This removes two levels of groups from the \"A1-R10\" range.\n    // Any groups at the same level on the same dimension will be removed by a single call.\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byRows);\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byRows);\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byColumns);\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byColumns);\n    await context.sync();\n});\n```"
- name: ungroup(groupOptionString)
  uid: excel!Excel.Range#ungroup:member(2)
  package: excel!
  fullName: ungroup(groupOptionString)
  summary: >-
    Hebt die Gruppierung von Spalten und Zeilen für eine Gliederung auf.


    \[[API-Satz: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ungroup(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: Gibt an, wie die Gruppierung des Bereichs durch Zeilen oder Spalten aufgehoben werden kann.
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: unmerge()
  uid: excel!Excel.Range#unmerge:member(1)
  package: excel!
  fullName: unmerge()
  summary: >-
    Hebt den Zellverbund des Bereichs in einzelne Zellen auf.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'unmerge(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: untrack()
  uid: excel!Excel.Range#untrack:member(1)
  package: excel!
  fullName: untrack()
  summary: Gibt den diesem Objekt zugewiesenen Arbeitsspeicher frei, wenn das Objekt zuvor nachverfolgt wurde. Dieser Aufruf ist eine Abkürzung für `context.trackedObjects.remove(thisObject)`<!-- -->. Viele nachverfolgte Objekte verlangsamen die Ausführung der Hostanwendung, also achten Sie darauf, alle hinzugefügten Objekte nach abgeschlossener Verwendung freizugeben. Sie müssen aufrufen, `context.sync()` bevor die Speicherfreigabe wirksam wird.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nExcel.run(async (context) => {\n    const largeRange = context.workbook.getSelectedRange();\n    largeRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n\n    for (let i = 0; i < largeRange.rowCount; i++) {\n        for (let j = 0; j < largeRange.columnCount; j++) {\n            let cell = largeRange.getCell(i, j);\n            cell.values = [[i *j]];\n\n            // call untrack() to release the range from memory\n            cell.untrack();\n        }\n    }\n\n    await context.sync();\n});\n```"
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 15f010d2ad11d359fcdec3224be1405e99d687bb
  ms.sourcegitcommit: a0029cf9da418726672be2ce2474b6e2aedea2be
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 06/30/2021
  ms.locfileid: "53204070"
