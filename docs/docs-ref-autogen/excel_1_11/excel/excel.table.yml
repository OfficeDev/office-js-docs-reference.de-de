### YamlMime:TSType
name: Excel.Table
uid: excel!Excel.Table:class
package: excel!
fullName: Excel.Table
summary: >-
  Stellt eine Excel-Tabelle dar. Weitere Informationen zum Tabellenobjektmodell finden Sie unter Arbeiten mit Tabellen [mithilfe der Excel-JavaScript-API.](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables)<!-- -->.


  \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: autoFilter
  uid: excel!Excel.Table#autoFilter:member
  package: excel!
  fullName: autoFilter
  summary: >-
    Represents the `AutoFilter` object of the table.


    \[[API-Satz: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly autoFilter: Excel.AutoFilter;'
    return:
      type: <xref uid="excel!Excel.AutoFilter:class" />
- name: columns
  uid: excel!Excel.Table#columns:member
  package: excel!
  fullName: columns
  summary: >-
    Stellt eine Auflistung aller Spalten in der Tabelle dar.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columns: Excel.TableColumnCollection;'
    return:
      type: <xref uid="excel!Excel.TableColumnCollection:class" />
- name: context
  uid: excel!Excel.Table#context:member
  package: excel!
  fullName: context
  summary: Der Dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: highlightFirstColumn
  uid: excel!Excel.Table#highlightFirstColumn:member
  package: excel!
  fullName: highlightFirstColumn
  summary: >-
    Gibt an, ob die erste Spalte spezielle Formatierungen enthält.


    \[[API-Satz: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'highlightFirstColumn: boolean;'
    return:
      type: boolean
- name: highlightLastColumn
  uid: excel!Excel.Table#highlightLastColumn:member
  package: excel!
  fullName: highlightLastColumn
  summary: >-
    Gibt an, ob die letzte Spalte spezielle Formatierungen enthält.


    \[[API-Satz: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'highlightLastColumn: boolean;'
    return:
      type: boolean
- name: id
  uid: excel!Excel.Table#id:member
  package: excel!
  fullName: id
  summary: >-
    Gibt einen Wert zurück, der das Arbeitsblatt in einer bestimmten Arbeitsmappe eindeutig identifiziert. Der Wert des Bezeichners bleibt unverändert, auch wenn die Tabelle umbenannt wird.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: legacyId
  uid: excel!Excel.Table#legacyId:member
  package: excel!
  fullName: legacyId
  summary: >-
    Gibt eine numerische ID zurück.


    \[[API-Satz: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly legacyId: string;'
    return:
      type: string
- name: name
  uid: excel!Excel.Table#name:member
  package: excel!
  fullName: name
  summary: >-
    Der Name der Tabelle.


    Der Satzname der Tabelle muss den Im Artikel Umbenennen einer Excel-Tabelle angegebenen [Richtlinien](https://support.office.com/article/Rename-an-Excel-table-FBF49A4F-82A3-43EB-8BA2-44D21233B114) entsprechen.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: onChanged
  uid: excel!Excel.Table#onChanged:member
  package: excel!
  fullName: onChanged
  summary: >-
    Tritt auf, wenn sich Daten in Zellen in einer bestimmten Tabelle ändern.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.TableChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml\nawait Excel.run(async (context) => {\n    let table = context.workbook.tables.getItemAt(0);\n    table.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event\");\n});\n```"
- name: onSelectionChanged
  uid: excel!Excel.Table#onSelectionChanged:member
  package: excel!
  fullName: onSelectionChanged
  summary: >-
    Tritt auf, wenn sich die Auswahl in einer bestimmten Tabelle ändert.


    \[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.TableSelectionChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.TableSelectionChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-table-changed.yaml\nawait Excel.run(async (context) => {\n    let table = context.workbook.tables.getItemAt(0);\n    table.onSelectionChanged.add(onSelectionChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for table onSelectionChanged event\");\n});\n```"
- name: rows
  uid: excel!Excel.Table#rows:member
  package: excel!
  fullName: rows
  summary: >-
    Stellt eine Auflistung aller Zeilen in der Tabelle dar.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rows: Excel.TableRowCollection;'
    return:
      type: <xref uid="excel!Excel.TableRowCollection:class" />
- name: showBandedColumns
  uid: excel!Excel.Table#showBandedColumns:member
  package: excel!
  fullName: showBandedColumns
  summary: >-
    Gibt an, ob die Spalten eine gebänderte Formatierung anzeigen, bei der ungerade Spalten anders hervorgehoben werden als gleichmäßige Spalten, um das Lesen der Tabelle zu vereinfachen.


    \[[API-Satz: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showBandedColumns: boolean;'
    return:
      type: boolean
- name: showBandedRows
  uid: excel!Excel.Table#showBandedRows:member
  package: excel!
  fullName: showBandedRows
  summary: >-
    Gibt an, ob in den Zeilen eine gebänderte Formatierung angezeigt wird, bei der ungerade Zeilen anders hervorgehoben werden als gleichmäßige Zeilen, um das Lesen der Tabelle zu vereinfachen.


    \[[API-Satz: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showBandedRows: boolean;'
    return:
      type: boolean
- name: showFilterButton
  uid: excel!Excel.Table#showFilterButton:member
  package: excel!
  fullName: showFilterButton
  summary: >-
    Gibt an, ob die Filterschaltflächen am oberen Rand jeder Spaltenüberschrift angezeigt werden. Diese Einstellung ist nur zulässig, wenn die Tabelle eine Kopfzeile enthält.


    \[[API-Satz: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showFilterButton: boolean;'
    return:
      type: boolean
- name: showHeaders
  uid: excel!Excel.Table#showHeaders:member
  package: excel!
  fullName: showHeaders
  summary: >-
    Gibt an, ob die Kopfzeile sichtbar ist. Dieser Wert kann festgelegt werden, um die Kopfzeile anzuzeigen, oder sie zu entfernen.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showHeaders: boolean;'
    return:
      type: boolean
- name: showTotals
  uid: excel!Excel.Table#showTotals:member
  package: excel!
  fullName: showTotals
  summary: >-
    Gibt an, ob die gesamte Zeile sichtbar ist. Dieser Wert kann so festgelegt werden, dass die Ergebniszeile angezeigt oder ausgeblendet wird.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showTotals: boolean;'
    return:
      type: boolean
- name: sort
  uid: excel!Excel.Table#sort:member
  package: excel!
  fullName: sort
  summary: >-
    Stellt die Sortierung für die Tabelle dar.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly sort: Excel.TableSort;'
    return:
      type: <xref uid="excel!Excel.TableSort:class" />
- name: style
  uid: excel!Excel.Table#style:member
  package: excel!
  fullName: style
  summary: >-
    Konstantenwert, der die Tabellenformatvorlage darstellt. Mögliche Werte sind: "TableStyleLight1" über "TableStyleLight21", "TableStyleMedium1" über "TableStyleMedium28", "TableStyleDark1" bis "TableStyleDark11". Es kann ebenfalls eine in der Arbeitsmappe vorhandene benutzerdefinierte Formatierung angegeben werden.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Set table style. \nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.name = 'Table1-Renamed';\n    table.showTotals = false;\n    table.style = 'TableStyleMedium2';\n    table.load('tableStyle');\n    return ctx.sync().then(function() {\n            console.log(table.style);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: worksheet
  uid: excel!Excel.Table#worksheet:member
  package: excel!
  fullName: worksheet
  summary: >-
    Das Arbeitsblatt, das die aktuelle Tabelle enthält.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
methods:
- name: clearFilters()
  uid: excel!Excel.Table#clearFilters:member(1)
  package: excel!
  fullName: clearFilters()
  summary: >-
    Löscht alle Filter, die derzeit in der Tabelle verwendet werden.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearFilters(): void;'
    return:
      type: void
      description: ''
- name: convertToRange()
  uid: excel!Excel.Table#convertToRange:member(1)
  package: excel!
  fullName: convertToRange()
  summary: >-
    Wandelt die Tabelle in einen normalen Bereich von Zellen um. Alle Daten werden beibehalten.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.convertToRange();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: delete()
  uid: excel!Excel.Table#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    Löscht die Tabelle.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getDataBodyRange()
  uid: excel!Excel.Table#getDataBodyRange:member(1)
  package: excel!
  fullName: getDataBodyRange()
  summary: >-
    Ruft das Bereichsobjekt ab, das mit dem Datenteil der Tabelle verknüpft ist.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataBodyRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableDataRange = table.getDataBodyRange();\n    tableDataRange.load('address')\n    return ctx.sync().then(function() {\n            console.log(tableDataRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getHeaderRowRange()
  uid: excel!Excel.Table#getHeaderRowRange:member(1)
  package: excel!
  fullName: getHeaderRowRange()
  summary: >-
    Ruft das Bereichsobjekt ab, das mit der Überschriftenzeile der Tabelle verknüpft ist.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHeaderRowRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableHeaderRange = table.getHeaderRowRange();\n    tableHeaderRange.load('address');\n    return ctx.sync().then(function() {\n        console.log(tableHeaderRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRange()
  uid: excel!Excel.Table#getRange:member(1)
  package: excel!
  fullName: getRange()
  summary: >-
    Ruft das Bereichsobjekt ab, das mit der gesamten Tabelle verknüpft ist.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableRange = table.getRange();\n    tableRange.load('address');    \n    return ctx.sync().then(function() {\n            console.log(tableRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getTotalRowRange()
  uid: excel!Excel.Table#getTotalRowRange:member(1)
  package: excel!
  fullName: getTotalRowRange()
  summary: >-
    Ruft das Bereichsobjekt ab, das mit der Ergebniszeile der Tabelle verknüpft ist.


    \[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTotalRowRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    var tableTotalsRange = table.getTotalRowRange();\n    tableTotalsRange.load('address');    \n    return ctx.sync().then(function() {\n            console.log(tableTotalsRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(options)
  uid: excel!Excel.Table#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.TableLoadOptions): Excel.Table;'
    parameters:
    - id: options
      description: Stellt Optionen für die Eigenschaften des zu ladenden Objekts zur Verfügung.
      type: <xref uid="excel!Excel.Interfaces.TableLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Table:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Table#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Table;'
    parameters:
    - id: propertyNames
      description: Eine durch Trennzeichen getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Table:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Get a table by name. \nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.load('index')\n    return ctx.sync().then(function() {\n            console.log(table.index);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get a table by index.\nExcel.run(function (ctx) { \n    var index = 0;\n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('id')\n    return ctx.sync().then(function() {\n            console.log(table.id);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Table#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Table;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` ist eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und eine durch Kommas getrennte Zeichenfolge, die die zu ladenden `propertyNamesAndPaths.expand` Navigationseigenschaften angibt.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Table:class" />
      description: ''
- name: reapplyFilters()
  uid: excel!Excel.Table#reapplyFilters:member(1)
  package: excel!
  fullName: reapplyFilters()
  summary: >-
    Wendet alle Filter erneut an, die derzeit in der Tabelle vorhanden sind.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'reapplyFilters(): void;'
    return:
      type: void
      description: ''
- name: set(properties, options)
  uid: excel!Excel.Table#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Legt mehrere Eigenschaften eines Objekts gleichzeitig fest. Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.
  remarks: >-
    Diese Methode verfügt über die folgende zusätzliche Signatur:


    `set(properties: Excel.Table): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.TableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Ein JavaScript-Objekt mit Eigenschaften, die isomorph zu den Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.
      type: <xref uid="excel!Excel.Interfaces.TableUpdateData:interface" />
    - id: options
      description: Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften zu setzen.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Table#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Legt mehrere Eigenschaften für das Objekt gleichzeitig fest, basierend auf einem vorhandenen geladenen Objekt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Table): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Table:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.Table#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: 'Überschreibt die JavaScript-Methode, um eine nützlichere Ausgabe zu `toJSON()` bieten, wenn ein API-Objekt an übergeben wird `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->ruft wiederum die Methode `toJSON` des Objekts auf, das an das Objekt übergeben wird.) Während das ursprüngliche Excel.Table-Objekt ein API-Objekt ist, gibt die Methode ein `toJSON` einfaches JavaScript-Objekt zurück (Typ: `Excel.Interfaces.TableData`<!-- -->), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.TableData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 068b4dbdeed3f6809e268c502d3f268aa516bac0
  ms.sourcegitcommit: ce09743deb2fc2a879cd63f96c8ff11ec84a42b2
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 04/02/2021
  ms.locfileid: "51567413"
