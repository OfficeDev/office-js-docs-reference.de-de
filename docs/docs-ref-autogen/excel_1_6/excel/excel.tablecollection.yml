### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TableCollection:class'
    summary: |-
      <span data-ttu-id="c1b7e-101">Stellt eine Auflistung aller Tabellen dar, die Teil der Arbeitsmappe oder des Arbeitsblatts in Abhängigkeit davon dar, wie diese abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-101">Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.</span></span>

      <span data-ttu-id="c1b7e-102">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c1b7e-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.TableCollection
    fullName: Excel.TableCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TableCollection#add:member(1)'
      - 'excel!Excel.TableCollection#context:member'
      - 'excel!Excel.TableCollection#count:member'
      - 'excel!Excel.TableCollection#getCount:member(1)'
      - 'excel!Excel.TableCollection#getItem:member(1)'
      - 'excel!Excel.TableCollection#getItemAt:member(1)'
      - 'excel!Excel.TableCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.TableCollection#items:member'
      - 'excel!Excel.TableCollection#load:member(1)'
      - 'excel!Excel.TableCollection#load:member(2)'
      - 'excel!Excel.TableCollection#load:member(3)'
      - 'excel!Excel.TableCollection#toJSON:member(1)'
  - uid: 'excel!Excel.TableCollection#add:member(1)'
    summary: "<span data-ttu-id=\"c1b7e-p101\">Erstellt eine neue Tabelle. Das Bereichsobjekt oder die Quelladresse bestimmt das Arbeitsblatt, unter dem die Tabelle hinzugefügt wird. Wenn die Tabelle nicht hinzugefügt werden kann (z.\_B. weil die Adresse ungültig ist oder sich die Tabelle mit einer anderen Tabelle überlappen würde), wird ein Fehler ausgelöst.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c1b7e-p101\">Create a new table. The range object or source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.</span></span>\n\n<span data-ttu-id=\"c1b7e-106\">\\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"c1b7e-106\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'add(address, hasHeaders)'
    fullName: 'add(address, hasHeaders)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(address: Range | string, hasHeaders: boolean): Excel.Table;'
      return:
        type:
          - 'excel!Excel.Table:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c1b7e-107">Beispiele</span><span class="sxs-lookup"><span data-stu-id="c1b7e-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var table = ctx.workbook.tables.add('Sheet1!A1:E7', true);
              table.load('name');
              return ctx.sync().then(function() {
                  console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="c1b7e-108">Ein Range-Objekt oder eine Zeichenfolgenadresse oder der Name des Bereichs, der die Datenquelle darstellt.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-108">A Range object, or a string address or name of the range representing the data source.</span></span> <span data-ttu-id="c1b7e-109">Wenn die Adresse keinen Arbeitsblattnamen enthält, wird das aktuell aktive Blatt verwendet.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-109">If the address does not contain a sheet name, the currently-active sheet is used.</span></span> <span data-ttu-id="c1b7e-110">\[API-Gruppe: ExcelApi 1,1/1,3.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-110">\[Api set: ExcelApi 1.1 / 1.3.</span></span> <span data-ttu-id="c1b7e-111">Vor ExcelApi 1,3 muss dieser Parameter eine Zeichenfolge sein.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-111">Prior to ExcelApi 1.3, this parameter must be a string.</span></span> <span data-ttu-id="c1b7e-112">Beginnend mit der Excel-API 1,3 kann dieser Parameter ein Range-Objekt oder eine Zeichenfolge sein.\]</span><span class="sxs-lookup"><span data-stu-id="c1b7e-112">Starting with Excel Api 1.3, this parameter may be a Range object or a string.\]</span></span>'
          type:
            - 'excel!Excel.TableCollection#add~0:complex'
        - id: hasHeaders
          description: '<span data-ttu-id="c1b7e-p103">Boolescher Wert, der angibt, ob die importierten Daten Spaltenüberschriften besitzen. Wenn die Quelle keine Überschriften enthält (d. h. wenn diese Eigenschaft auf falsch festgelegt ist), generiert Excel automatisch eine Überschriftenänderung der Daten nach einer Zeile.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-p103">Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.TableCollection#context:member'
    summary: '<span data-ttu-id="c1b7e-116">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-116">The request context associated with the object.</span></span> <span data-ttu-id="c1b7e-117">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-117">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TableCollection#count:member'
    summary: |-
      <span data-ttu-id="c1b7e-118">Gibt die Anzahl der Tabellen in der Arbeitsmappe zurück.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-118">Returns the number of tables in the workbook.</span></span> <span data-ttu-id="c1b7e-119">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-119">Read-only.</span></span>

      <span data-ttu-id="c1b7e-120">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c1b7e-120">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.TableCollection#getCount:member(1)'
    summary: |-
      <span data-ttu-id="c1b7e-121">Ruft die Anzahl von Tabellen in der Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-121">Gets the number of tables in the collection.</span></span>

      <span data-ttu-id="c1b7e-122">\[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c1b7e-122">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.TableCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.TableCollection#getItem:member(1)'
    summary: |-
      <span data-ttu-id="c1b7e-123">Ruft eine Tabelle anhand des Namens oder der ID ab.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-123">Gets a table by Name or ID.</span></span>

      <span data-ttu-id="c1b7e-124">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c1b7e-124">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Table;'
      return:
        type:
          - 'excel!Excel.Table:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c1b7e-125">Beispiele</span><span class="sxs-lookup"><span data-stu-id="c1b7e-125">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: key
          description: <span data-ttu-id="c1b7e-126">Name oder ID der abzurufenden Tabelle.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-126">Name or ID of the table to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.TableCollection#getItemAt:member(1)'
    summary: |-
      <span data-ttu-id="c1b7e-127">Ruft eine Tabelle anhand ihrer Position in der Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-127">Gets a table based on its position in the collection.</span></span>

      <span data-ttu-id="c1b7e-128">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c1b7e-128">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Table;'
      return:
        type:
          - 'excel!Excel.Table:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c1b7e-129">Beispiele</span><span class="sxs-lookup"><span data-stu-id="c1b7e-129">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var table = ctx.workbook.tables.getItemAt(0);
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="c1b7e-130">Index-Wert des abzurufenden Objekts.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-130">Index value of the object to be retrieved.</span></span> <span data-ttu-id="c1b7e-131">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-131">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.TableCollection#getItemOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="c1b7e-132">Ruft eine Tabelle anhand des Namens oder der ID ab.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-132">Gets a table by Name or ID.</span></span> <span data-ttu-id="c1b7e-133">Wenn die Tabelle nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-133">If the table does not exist, will return a null object.</span></span>

      <span data-ttu-id="c1b7e-134">\[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c1b7e-134">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Table;'
      return:
        type:
          - 'excel!Excel.Table:class'
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="c1b7e-135">Name oder ID der abzurufenden Tabelle.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-135">Name or ID of the table to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.TableCollection#items:member'
    summary: <span data-ttu-id="c1b7e-136">Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-136">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Table[];'
      return:
        type:
          - 'excel!Excel.TableCollection#items~0:complex'
  - uid: 'excel!Excel.TableCollection#load:member(1)'
    summary: <span data-ttu-id="c1b7e-137">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-137">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="c1b7e-138">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-138">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="c1b7e-139">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="c1b7e-139">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="c1b7e-140">`load(option?: string | string[]): Excel.TableCollection`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-140">`load(option?: string | string[]): Excel.TableCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="c1b7e-141">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-141">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="c1b7e-142">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection`Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-142">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection` - Only available on collection types.</span></span> <span data-ttu-id="c1b7e-143">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-143">It is similar to the preceding signature.</span></span> <span data-ttu-id="c1b7e-144">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-144">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="c1b7e-145">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-145">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="c1b7e-146">Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-146">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.TableCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.TableCollection#load~0:complex'
  - uid: 'excel!Excel.TableCollection#load:member(2)'
    summary: <span data-ttu-id="c1b7e-147">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-147">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="c1b7e-148">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-148">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c1b7e-149">Beispiele</span><span class="sxs-lookup"><span data-stu-id="c1b7e-149">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              tables.load();
              return ctx.sync().then(function() {
                  console.log("tables Count: " + tables.count);
                  for (var i = 0; i < tables.items.length; i++)
                  {
                      console.log(tables.items[i].name);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Get the number of tables
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              tables.load('count');
              return ctx.sync().then(function() {
                  console.log(tables.count);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="c1b7e-150">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-150">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TableCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.TableCollection#toJSON:member(1)'
    summary: '<span data-ttu-id="c1b7e-151">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="c1b7e-151">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="c1b7e-152">.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-152"></span></span> <span data-ttu-id="c1b7e-153">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="c1b7e-153"></span></span><!-- --><span data-ttu-id="c1b7e-154">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche `Excel.TableCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.TableCollectionData`</span><span class="sxs-lookup"><span data-stu-id="c1b7e-154">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.TableCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableCollectionData`</span></span><!-- --><span data-ttu-id="c1b7e-155">), die ein "Items"-Array mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.</span><span class="sxs-lookup"><span data-stu-id="c1b7e-155">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TableCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Table:class'
    name: Excel.Table
  - uid: 'excel!Excel.TableCollection#add~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.TableCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.TableCollection#items~0:complex'
    name: 'Excel.Table[]'
    fullName: 'Excel.Table[]'
    spec.typeScript:
      - uid: 'excel!Excel.Table:class'
        name: Excel.Table
        fullName: Excel.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.TableCollection#load~0:complex'
    name: Excel.Interfaces.TableCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.TableCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.TableCollectionLoadOptions:interface'
        name: Excel.Interfaces.TableCollectionLoadOptions
        fullName: Excel.Interfaces.TableCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.TableCollectionData:interface'
    name: Excel.Interfaces.TableCollectionData