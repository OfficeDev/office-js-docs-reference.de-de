### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    summary: |-
      <span data-ttu-id="97dfa-101">Stellt eine Auflistung aller bedingten Formate dar, die den Bereich überlappen.</span><span class="sxs-lookup"><span data-stu-id="97dfa-101">Represents a collection of all the conditional formats that are overlap the range.</span></span>

      <span data-ttu-id="97dfa-102">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="97dfa-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormatCollection#add:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#add:member(2)'
      - 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#context:member'
      - 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#items:member'
      - 'excel!Excel.ConditionalFormatCollection#load:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#load:member(2)'
      - 'excel!Excel.ConditionalFormatCollection#load:member(3)'
      - 'excel!Excel.ConditionalFormatCollection#toJSON:member(1)'
  - uid: 'excel!Excel.ConditionalFormatCollection#add:member(1)'
    summary: |-
      <span data-ttu-id="97dfa-103">Fügt der Auflistung ein neues bedingtes Format an der ersten/obersten Priorität hinzu.</span><span class="sxs-lookup"><span data-stu-id="97dfa-103">Adds a new conditional format to the collection at the first/top priority.</span></span>

      <span data-ttu-id="97dfa-104">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="97dfa-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(type)
    fullName: add(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="97dfa-105">Beispiele</span><span class="sxs-lookup"><span data-stu-id="97dfa-105">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = "YellowThreeArrows";
              return ctx.sync().then(function () {
                  console.log("Added new yellow three arrow icon set.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
      parameters:
        - id: type
          description: <span data-ttu-id="97dfa-106">Der Typ des hinzuzufügenden bedingten Formats.</span><span class="sxs-lookup"><span data-stu-id="97dfa-106">The type of conditional format being added.</span></span> <span data-ttu-id="97dfa-107">Weitere Informationen finden Sie unter Excel. ConditionalFormatType.</span><span class="sxs-lookup"><span data-stu-id="97dfa-107">See Excel.ConditionalFormatType for details.</span></span>
          type:
            - 'excel!Excel.ConditionalFormatType:enum'
  - uid: 'excel!Excel.ConditionalFormatCollection#add:member(2)'
    summary: |-
      <span data-ttu-id="97dfa-108">Fügt der Auflistung ein neues bedingtes Format an der ersten/obersten Priorität hinzu.</span><span class="sxs-lookup"><span data-stu-id="97dfa-108">Adds a new conditional format to the collection at the first/top priority.</span></span>

      <span data-ttu-id="97dfa-109">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="97dfa-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(typeString)
    fullName: add(typeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: typeString
          description: <span data-ttu-id="97dfa-110">Der Typ des hinzuzufügenden bedingten Formats.</span><span class="sxs-lookup"><span data-stu-id="97dfa-110">The type of conditional format being added.</span></span> <span data-ttu-id="97dfa-111">Weitere Informationen finden Sie unter Excel. ConditionalFormatType.</span><span class="sxs-lookup"><span data-stu-id="97dfa-111">See Excel.ConditionalFormatType for details.</span></span>
          type:
            - '"Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'
  - uid: 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
    summary: |-
      <span data-ttu-id="97dfa-112">Löscht alle bedingten Formate, die im aktuellen angegebenen Bereich aktiv sind.</span><span class="sxs-lookup"><span data-stu-id="97dfa-112">Clears all conditional formats active on the current specified range.</span></span>

      <span data-ttu-id="97dfa-113">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="97dfa-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clearAll()
    fullName: clearAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAll(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="97dfa-114">Beispiele</span><span class="sxs-lookup"><span data-stu-id="97dfa-114">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.clearAll();
              return ctx.sync().then(function () {
                  console.log("Cleared all conditional formats from this range.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange();
              range.conditionalFormats.clearAll();

              await context.sync();

              $(".conditional-formats").hide();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormatCollection#context:member'
    summary: '<span data-ttu-id="97dfa-115">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="97dfa-115">The request context associated with the object.</span></span> <span data-ttu-id="97dfa-116">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="97dfa-116">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
    summary: |-
      <span data-ttu-id="97dfa-117">Gibt die Anzahl der bedingten Formate in der Arbeitsmappe zurück.</span><span class="sxs-lookup"><span data-stu-id="97dfa-117">Returns the number of conditional formats in the workbook.</span></span> <span data-ttu-id="97dfa-118">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="97dfa-118">Read-only.</span></span>

      <span data-ttu-id="97dfa-119">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="97dfa-119">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection#getCount~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="97dfa-120">Beispiele</span><span class="sxs-lookup"><span data-stu-id="97dfa-120">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;
              var cfCount = range.conditionalFormats.getCount(); 

              return ctx.sync().then(function () {
                  console.log("Count: " + cfCount.value);
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
    summary: |-
      <span data-ttu-id="97dfa-121">Gibt ein bedingtes Format für die angegebene ID zurück.</span><span class="sxs-lookup"><span data-stu-id="97dfa-121">Returns a conditional format for the given ID.</span></span>

      <span data-ttu-id="97dfa-122">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="97dfa-122">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: |-
          <span data-ttu-id="97dfa-123">Bedingtes Format-Objekt.</span><span class="sxs-lookup"><span data-stu-id="97dfa-123">Conditional Format object.</span></span>

          #### <a name="examples"></a><span data-ttu-id="97dfa-124">Beispiele</span><span class="sxs-lookup"><span data-stu-id="97dfa-124">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="97dfa-125">Die ID des bedingten Formats.</span><span class="sxs-lookup"><span data-stu-id="97dfa-125">The id of the conditional format.</span></span>
          type:
            - string
  - uid: 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
    summary: |-
      <span data-ttu-id="97dfa-126">Gibt ein bedingtes Format am angegebenen Index zurück.</span><span class="sxs-lookup"><span data-stu-id="97dfa-126">Returns a conditional format at the given index.</span></span>

      <span data-ttu-id="97dfa-127">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="97dfa-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="97dfa-128">Beispiele</span><span class="sxs-lookup"><span data-stu-id="97dfa-128">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
      parameters:
        - id: index
          description: '<span data-ttu-id="97dfa-129">Index der bedingten Formate, die abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="97dfa-129">Index of the conditional formats to be retrieved.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.ConditionalFormatCollection#items:member'
    summary: <span data-ttu-id="97dfa-130">Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="97dfa-130">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.ConditionalFormat[];'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection#items~0:complex'
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(1)'
    summary: <span data-ttu-id="97dfa-131">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="97dfa-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="97dfa-132">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="97dfa-132">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="97dfa-133">Enthält Optionen für die Eigenschaften des zu ladenden Objekts.</span><span class="sxs-lookup"><span data-stu-id="97dfa-133">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.ConditionalFormatCollection#load~0:complex'
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(2)'
    summary: <span data-ttu-id="97dfa-134">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="97dfa-134">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="97dfa-135">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="97dfa-135">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="97dfa-136">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="97dfa-136">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(3)'
    summary: <span data-ttu-id="97dfa-137">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="97dfa-137">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="97dfa-138">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="97dfa-138">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="97dfa-139">`propertyNamesAndPaths.select`ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften `propertyNamesAndPaths.expand` angibt, und ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="97dfa-139">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.ConditionalFormatCollection#toJSON:member(1)'
    summary: '<span data-ttu-id="97dfa-140">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="97dfa-140">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="97dfa-141">.</span><span class="sxs-lookup"><span data-stu-id="97dfa-141"></span></span> <span data-ttu-id="97dfa-142">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="97dfa-142"></span></span><!-- --><span data-ttu-id="97dfa-143">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche `Excel.ConditionalFormatCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.ConditionalFormatCollectionData`</span><span class="sxs-lookup"><span data-stu-id="97dfa-143">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.ConditionalFormatCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatCollectionData`</span></span><!-- --><span data-ttu-id="97dfa-144">), die ein "Items"-Array mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.</span><span class="sxs-lookup"><span data-stu-id="97dfa-144">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.ConditionalFormatCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.ConditionalFormat:class'
    name: Excel.ConditionalFormat
  - uid: 'excel!Excel.ConditionalFormatType:enum'
    name: Excel.ConditionalFormatType
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.ConditionalFormatCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ConditionalFormatCollection#items~0:complex'
    name: 'Excel.ConditionalFormat[]'
    fullName: 'Excel.ConditionalFormat[]'
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalFormat:class'
        name: Excel.ConditionalFormat
        fullName: Excel.ConditionalFormat
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.ConditionalFormatCollection#load~0:complex'
    name: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.ConditionalFormatCollectionLoadOptions:interface'
        name: Excel.Interfaces.ConditionalFormatCollectionLoadOptions
        fullName: Excel.Interfaces.ConditionalFormatCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.ConditionalFormatCollectionData:interface'
    name: Excel.Interfaces.ConditionalFormatCollectionData