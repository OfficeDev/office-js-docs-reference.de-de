### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TableRowCollection:class'
    summary: |-
      Stellt eine Auflistung aller Zeilen dar, die Teil der Tabelle sind.

      Beachten Sie, dass im Gegensatz zu Bereichen oder Spalten, die angepasst werden, wenn neue Zeilen/Spalten vor Ihnen hinzugefügt werden, ein TableRow-Objekt den physikalischen Speicherort der Tabellenzeile darstellt, jedoch nicht die Daten. Das heißt, wenn die Daten sortiert werden oder wenn neue Zeilen hinzugefügt werden, zeigt eine Tabellenzeile weiterhin den Index an, für den Sie erstellt wurde.

      \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.TableRowCollection
    fullName: Excel.TableRowCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TableRowCollection#add:member(1)'
      - 'excel!Excel.TableRowCollection#context:member'
      - 'excel!Excel.TableRowCollection#count:member'
      - 'excel!Excel.TableRowCollection#getCount:member(1)'
      - 'excel!Excel.TableRowCollection#getItemAt:member(1)'
      - 'excel!Excel.TableRowCollection#items:member'
      - 'excel!Excel.TableRowCollection#load:member(1)'
      - 'excel!Excel.TableRowCollection#load:member(2)'
      - 'excel!Excel.TableRowCollection#load:member(3)'
      - 'excel!Excel.TableRowCollection#toJSON:member(1)'
  - uid: 'excel!Excel.TableRowCollection#add:member(1)'
    summary: |-
      Fügt der Tabelle mindestens eine Zeile hinzu. Das Rückgabeobjekt ist die oberste Zeile der neu hinzugefügten Zeilen.

      Beachten Sie, dass im Gegensatz zu Bereichen oder Spalten, die angepasst werden, wenn neue Zeilen/Spalten vor Ihnen hinzugefügt werden, ein TableRow-Objekt den physikalischen Speicherort der Tabellenzeile darstellt, jedoch nicht die Daten. Das heißt, wenn die Daten sortiert werden oder wenn neue Zeilen hinzugefügt werden, zeigt eine Tabellenzeile weiterhin den Index an, für den Sie erstellt wurde.

      \[[API-Satz: ExcelApi 1,1 zum Hinzufügen einer einzelnen Zeile; 1,4 ermöglicht das Hinzufügen mehrerer Zeilen.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'add(index, values)'
    fullName: 'add(index, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number): Excel.TableRow;'
      return:
        type:
          - 'excel!Excel.TableRow:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              var values = [["Sample", "Values", "For", "New", "Row"]];
              var row = tables.getItem("Table1").rows.add(null, values);
              row.load('index');
              return ctx.sync().then(function() {
                  console.log(row.index);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Optional. Gibt die relative Position der neuen Zeile an. Bei NULL oder -1 erfolgt die Erweiterung am Ende. Alle Zeilen unterhalb der eingefügten Zeile werden nach unten verschoben. Nullindiziert.
          type:
            - number
        - id: values
          description: Optional. Ein 2-dimensionales Array von unformatierten Werten der Tabellenzeile.
          type:
            - 'excel!Excel.TableRowCollection#add~0:complex'
  - uid: 'excel!Excel.TableRowCollection#context:member'
    summary: 'Der Anforderungskontext, der mit dem Objekt verknüpft ist. Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TableRowCollection#count:member'
    summary: |-
      Gibt die Anzahl der Zeilen in der Tabelle zurück. Schreibgeschützt.

      \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.TableRowCollection#getCount:member(1)'
    summary: |-
      Ruft die Anzahl der Zeilen in der Tabelle ab.

      \[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.TableRowCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.TableRowCollection#getItemAt:member(1)'
    summary: |-
      Ruft eine Zeile anhand ihrer Position in der Auflistung ab.

      Beachten Sie, dass im Gegensatz zu Bereichen oder Spalten, die angepasst werden, wenn neue Zeilen/Spalten vor Ihnen hinzugefügt werden, ein TableRow-Objekt den physikalischen Speicherort der Tabellenzeile darstellt, jedoch nicht die Daten. Das heißt, wenn die Daten sortiert werden oder wenn neue Zeilen hinzugefügt werden, zeigt eine Tabellenzeile weiterhin den Index an, für den Sie erstellt wurde.

      \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.TableRow;'
      return:
        type:
          - 'excel!Excel.TableRow:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Excel.run(function (ctx) { 
              var tablerow = ctx.workbook.tables.getItem('Table1').rows.getItemAt(0);
              tablerow.load('name');
              return ctx.sync().then(function() {
                      console.log(tablerow.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Index-Wert des abzurufenden Objekts. Nullindiziert.
          type:
            - number
  - uid: 'excel!Excel.TableRowCollection#items:member'
    summary: Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.TableRow[];'
      return:
        type:
          - 'excel!Excel.TableRowCollection#items~0:complex'
  - uid: 'excel!Excel.TableRowCollection#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.TableRowCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableRowCollection;'
      return:
        type:
          - 'excel!Excel.TableRowCollection:class'
        description: ''
      parameters:
        - id: options
          description: Enthält Optionen für die Eigenschaften des zu ladenden Objekts.
          type:
            - 'excel!Excel.TableRowCollection#load~0:complex'
  - uid: 'excel!Excel.TableRowCollection#load:member(2)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableRowCollection;'
      return:
        type:
          - 'excel!Excel.TableRowCollection:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Excel.run(function (ctx) { 
              var tablerows = ctx.workbook.tables.getItem('Table1').rows;
              tablerows.load('items');
              return ctx.sync().then(function() {
                  console.log("tablerows Count: " + tablerows.count);
                  for (var i = 0; i < tablerows.items.length; i++) {
                      console.log(tablerows.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // In the example, we'll select the top 100 rows of the table.
          Excel.run(function (ctx) { 
              var table = ctx.workbook.tables.getItem("Table1");
              var tableRows = table.rows.load({"select" : "index, values","top": 100, "skip": 0 })
              return ctx.sync().then(function() {
                  for (var i = 0; i < tableRows.items.length; i++) {
                      console.log(tableRows.items[i].index);
                      console.log(tableRows.items[i].values);
                  }
              });
          }).catch(function(error) {
                  console.log("Error: " + error);
                  if (error instanceof OfficeExtension.Error) {
                      console.log("Debug info: " + JSON.stringify(error.debugInfo));
                  }
          });
          ```
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TableRowCollection#load:member(3)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableRowCollection;'
      return:
        type:
          - 'excel!Excel.TableRowCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften `propertyNamesAndPaths.expand` angibt, und ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.TableRowCollection#toJSON:member(1)'
    summary: 'Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche `Excel.TableRowCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.TableRowCollectionData`<!-- -->), die ein "Items"-Array mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableRowCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TableRowCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.TableRow:class'
    name: Excel.TableRow
  - uid: 'excel!Excel.TableRowCollection#add~0:complex'
    name: Array<Array<boolean | string | number>> | boolean | string | number
    fullName: Array<Array<boolean | string | number>> | boolean | string | number
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <
        fullName: <
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <boolean | string | number>> | boolean | string | number
        fullName: <boolean | string | number>> | boolean | string | number
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.TableRowCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.TableRowCollection#items~0:complex'
    name: 'Excel.TableRow[]'
    fullName: 'Excel.TableRow[]'
    spec.typeScript:
      - uid: 'excel!Excel.TableRow:class'
        name: Excel.TableRow
        fullName: Excel.TableRow
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.TableRowCollection:class'
    name: Excel.TableRowCollection
  - uid: 'excel!Excel.TableRowCollection#load~0:complex'
    name: Excel.Interfaces.TableRowCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.TableRowCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.TableRowCollectionLoadOptions:interface'
        name: Excel.Interfaces.TableRowCollectionLoadOptions
        fullName: Excel.Interfaces.TableRowCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.TableRowCollectionData:interface'
    name: Excel.Interfaces.TableRowCollectionData