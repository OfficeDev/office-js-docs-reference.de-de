### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.PageContentCollection
    summary: |-
      Stellt den Inhalt einer Seite als eine Auflistung von PageContent-Objekten dar.

      \[[API-Satz: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.PageContentCollection
    fullName: OneNote.PageContentCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.PageContentCollection.context
      - onenote.OneNote.PageContentCollection.count
      - onenote.OneNote.PageContentCollection.getItem
      - onenote.OneNote.PageContentCollection.getItemAt
      - onenote.OneNote.PageContentCollection.items
      - onenote.OneNote.PageContentCollection.load
      - onenote.OneNote.PageContentCollection.load_1
      - onenote.OneNote.PageContentCollection.load_2
      - onenote.OneNote.PageContentCollection.toJSON
      - onenote.OneNote.PageContentCollection.track
      - onenote.OneNote.PageContentCollection.untrack
  - uid: onenote.OneNote.PageContentCollection.context
    summary: Der dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: onenote.OneNote.PageContentCollection.count
    summary: |-
      Gibt die Anzahl der Seiteninhalten in der Auflistung zurück. Schreibgeschützt.

      \[[API-Satz: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.PageContentCollection.getItem
    summary: |-
      Ruft ein PageContent-Objekt nach ID oder dem Index in der Auflistung ab. Schreibgeschützt.

      \[[API-Satz: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getItem(index)
    fullName: getItem(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: number | string): OneNote.PageContent;'
      return:
        type:
          - onenote.OneNote.PageContent
        description: ''
      parameters:
        - id: index
          description: Die ID des PageContent-Objekts oder die Indexposition des PageContent-Objekts in der Auflistung.
          type:
            - number | string
  - uid: onenote.OneNote.PageContentCollection.getItemAt
    summary: |-
      Ruft einen Seiteninhalt anhand seiner Position in der Auflistung ab.

      \[[API-Satz: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): OneNote.PageContent;'
      return:
        type:
          - onenote.OneNote.PageContent
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          OneNote.run(function (context) {

              var page = context.application.getActivePage();
              var pageContents = page.contents;
              var firstPageContent = pageContents.getItemAt(0);
              firstPageContent.load('type');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("The first page content item is of type: " + firstPageContent.type);
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Index-Wert des abzurufenden Objekts. Nullindiziert.
          type:
            - number
  - uid: onenote.OneNote.PageContentCollection.items
    summary: Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: OneNote.PageContent[];'
      return:
        type:
          - 'OneNote.PageContent[]'
  - uid: onenote.OneNote.PageContentCollection.load
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.
    remarks: |-
      Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:

      `load(option?: string | string[]): OneNote.PageContentCollection`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.

      `load(option?: { select?: string; expand?: string; }): OneNote.PageContentCollection`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.PageContentCollection`-Nur verfügbar für Sammlungstypen. Sie ähnelt der vorherigen Signatur. Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können. Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind. Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.PageContentCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions): OneNote.PageContentCollection;'
      return:
        type:
          - onenote.OneNote.PageContentCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OneNote.Interfaces.PageContentCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions
  - uid: onenote.OneNote.PageContentCollection.load_1
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.PageContentCollection;'
      return:
        type:
          - onenote.OneNote.PageContentCollection
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Queue a command to load the type of each pageContent.
              pageContents.load("type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      $.each(pageContents.items, function(index, pageContent) {
                          console.log("PageContent type: " + pageContent.type);
                      });
                  });
          })                
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
             var page = context.application.getActivePage();
             var pageContents = page.contents;
             pageContents.load('type');
             var outlines = ;
             return context.sync()
                 .then(function () {      
                        $.each(pageContents.items, function (index, pageContent) {
                               console.log(pageContent.type);
                               if (pageContent.type === 'Outline') {
                                     outlines.push(pageContent);
                               }
                        });
                        $.each(outlines, function (index, outline) {
                               outline.load("id,paragraphs,paragraphs/type");
                        });
                        return context.sync();
                 })
                 .then(function () {
                        $.each(outlines, function (index, outline) {
                               console.log("An outline was found with id : " + outline.id);
                        });
                        return Promise.resolve(outlines);
                 });
          });
          ```
      parameters:
        - id: propertyNames
          description: 'Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.PageContentCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): OneNote.PageContentCollection;'
      return:
        type:
          - onenote.OneNote.PageContentCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: onenote.OneNote.PageContentCollection.toJSON
    summary: 'ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API-Objekt an`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->Ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche `OneNote.PageContentCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`OneNote.Interfaces.PageContentCollectionData`<!-- -->), die ein Array "Items" mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.PageContentCollectionData;'
      return:
        type:
          - onenote.OneNote.Interfaces.PageContentCollectionData
        description: ''
  - uid: onenote.OneNote.PageContentCollection.track
    summary: 'Nachverfolgung des Objekts zwecks automatischer Anpassung auf der Grundlage der umgebenden Änderungen im Dokument. Dieser Aufruf ist eine Kurzschreibweise für context.trackedObjects.add(thisObject). Wenn Sie dieses Objekt übergreifend für ".sync"-Aufrufe und außerhalb der sequenziellen Ausführung eines ".run"-Stapels verwenden und beim Festlegen einer Eigenschaft oder Aufrufen einer Methode für das Objekt ein "InvalidObjectPath"-Fehler zurückgegeben wird, hätte das Objekt der nachverfolgten Objektsammlung hinzugefügt werden müssen, in der das Objekt ursprünglich erstellt wurde.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.PageContentCollection;'
      return:
        type:
          - onenote.OneNote.PageContentCollection
        description: ''
  - uid: onenote.OneNote.PageContentCollection.untrack
    summary: 'Gibt den diesem Objekt zugewiesenen Arbeitsspeicher frei, wenn das Objekt zuvor nachverfolgt wurde. Dieser Aufruf stellt eine Kurzschreibweise für context.trackedObjects.remove(thisObject) dar. Viele nachverfolgte Objekte verlangsamen die Ausführung der Hostanwendung, also achten Sie darauf, alle hinzugefügten Objekte nach abgeschlossener Verwendung freizugeben. Sie müssen "context.sync()" aufrufen, damit die Freigabe des Arbeitsspeichers wirksam wird.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.PageContentCollection;'
      return:
        type:
          - onenote.OneNote.PageContentCollection
        description: ''