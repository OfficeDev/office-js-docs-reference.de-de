### YamlMime:TSType
name: OneNote.Application
uid: onenote!OneNote.Application:class
package: onenote!
fullName: OneNote.Application
summary: >-
  Stellt das Objekt der obersten Ebene dar, das alle global adressierbaren OneNote-Objekte enthält, z. B. Notizbücher, das aktive Notizbuch und den aktiven Abschnitt.


  \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: onenote!OneNote.Application#context:member
  package: onenote!
  fullName: context
  summary: Der Dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="onenote!OneNote.RequestContext:class" />
- name: notebooks
  uid: onenote!OneNote.Application#notebooks:member
  package: onenote!
  fullName: notebooks
  summary: >-
    Ruft die Auflistung von Notizbüchern ab, die in der OneNote-Anwendungsinstanz geöffnet sind. In OneNote im Web ist immer nur ein Notizbuch in der Anwendungsinstanz geöffnet. Schreibgeschützt.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly notebooks: OneNote.NotebookCollection;'
    return:
      type: <xref uid="onenote!OneNote.NotebookCollection:class" />
methods:
- name: getActiveNotebook()
  uid: onenote!OneNote.Application#getActiveNotebook:member(1)
  package: onenote!
  fullName: getActiveNotebook()
  summary: >-
    Ruft das aktive Notizbuch ab, falls vorhanden. Wenn kein Notizbuch aktiv ist, wird ItemNotFound ausgelöst.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveNotebook(): OneNote.Notebook;'
    return:
      type: <xref uid="onenote!OneNote.Notebook:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the active notebook.\n    var notebook = context.application.getActiveNotebook();\n            \n    // Queue a command to load the notebook. \n    // For best performance, request specific properties.           \n    notebook.load('id,name');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // Show some properties.\n            console.log(\"Notebook name: \" + notebook.name);\n            console.log(\"Notebook ID: \" + notebook.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getActiveNotebookOrNull()
  uid: onenote!OneNote.Application#getActiveNotebookOrNull:member(1)
  package: onenote!
  fullName: getActiveNotebookOrNull()
  summary: >-
    Ruft das aktive Notizbuch ab, falls vorhanden. Wenn kein Notizbuch aktiv ist, wird null zurückgegeben.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveNotebookOrNull(): OneNote.Notebook;'
    return:
      type: <xref uid="onenote!OneNote.Notebook:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the active notebook.\n    var notebook = context.application.getActiveNotebookOrNull();\n\n    // Queue a command to load the notebook. \n    // For best performance, request specific properties.           \n    notebook.load('id,name');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // check if active notebook is set.\n            if (!notebook.isNull) {\n                console.log(\"Notebook name: \" + notebook.name);\n                console.log(\"Notebook ID: \" + notebook.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getActiveOutline()
  uid: onenote!OneNote.Application#getActiveOutline:member(1)
  package: onenote!
  fullName: getActiveOutline()
  summary: >-
    Ruft die aktive Gliederung ab, falls vorhanden. Wenn keine Gliederung aktiv ist, wird ItemNotFound ausgelöst.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveOutline(): OneNote.Outline;'
    return:
      type: <xref uid="onenote!OneNote.Outline:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n\n    // get active outline.\n    var outline = context.application.getActiveOutline();\n\n    // Queue a command to load the id of the outline.         \n    outline.load('id');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Show some properties.\n            console.log(\"outline id: \" + outline.id);\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getActiveOutlineOrNull()
  uid: onenote!OneNote.Application#getActiveOutlineOrNull:member(1)
  package: onenote!
  fullName: getActiveOutlineOrNull()
  summary: >-
    Ruft die aktive Gliederung ab, falls vorhanden, andernfalls wird null zurückgegeben.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveOutlineOrNull(): OneNote.Outline;'
    return:
      type: <xref uid="onenote!OneNote.Outline:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n\n    // get active outline.\n    var outline = context.application.getActiveOutlineOrNull();\n\n    // Queue a command to load the id of the outline.         \n    outline.load('id');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            if (!outline.isNull) {\n                console.log(\"outline id: \" + outline.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getActivePage()
  uid: onenote!OneNote.Application#getActivePage:member(1)
  package: onenote!
  fullName: getActivePage()
  summary: >-
    Ruft die aktive Seite ab, falls vorhanden. Wenn keine Seite aktiv ist, wird ItemNotFound ausgelöst.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActivePage(): OneNote.Page;'
    return:
      type: <xref uid="onenote!OneNote.Page:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the active page.\n    var page = context.application.getActivePage();\n            \n    // Queue a command to load the page. \n    // For best performance, request specific properties.           \n    page.load('id,title');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // Show some properties.\n            console.log(\"Page title: \" + page.title);\n            console.log(\"Page ID: \" + page.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getActivePageOrNull()
  uid: onenote!OneNote.Application#getActivePageOrNull:member(1)
  package: onenote!
  fullName: getActivePageOrNull()
  summary: >-
    Ruft die aktive Seite ab, falls vorhanden. Wenn keine Seite aktiv ist, wird null zurückgegeben.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActivePageOrNull(): OneNote.Page;'
    return:
      type: <xref uid="onenote!OneNote.Page:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the active page.\n    var page = context.application.getActivePageOrNull();\n\n    // Queue a command to load the page. \n    // For best performance, request specific properties.           \n    page.load('id,title');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            \n            if (!page.isNull) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Page ID: \" + page.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getActiveParagraph()
  uid: onenote!OneNote.Application#getActiveParagraph:member(1)
  package: onenote!
  fullName: getActiveParagraph()
  summary: >-
    Ruft den aktiven Absatz ab, wenn einer vorhanden ist, Wenn kein Absatz aktiv ist, wird ItemNotFound ausgelöst.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveParagraph(): OneNote.Paragraph;'
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
      description: ''
- name: getActiveParagraphOrNull()
  uid: onenote!OneNote.Application#getActiveParagraphOrNull:member(1)
  package: onenote!
  fullName: getActiveParagraphOrNull()
  summary: >-
    Ruft den aktiven Absatz ab, falls vorhanden, andernfalls gibt null zurück.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveParagraphOrNull(): OneNote.Paragraph;'
    return:
      type: <xref uid="onenote!OneNote.Paragraph:class" />
      description: ''
- name: getActiveSection()
  uid: onenote!OneNote.Application#getActiveSection:member(1)
  package: onenote!
  fullName: getActiveSection()
  summary: >-
    Ruft den aktiven Abschnitt ab, falls vorhanden. Wenn kein Abschnitt aktiv ist, wird ItemNotFound ausgelöst.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveSection(): OneNote.Section;'
    return:
      type: <xref uid="onenote!OneNote.Section:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the active section.\n    var section = context.application.getActiveSection();\n            \n    // Queue a command to load the section. \n    // For best performance, request specific properties.           \n    section.load('id,name');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // Show some properties.\n            console.log(\"Section name: \" + section.name);\n            console.log(\"Section ID: \" + section.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getActiveSectionOrNull()
  uid: onenote!OneNote.Application#getActiveSectionOrNull:member(1)
  package: onenote!
  fullName: getActiveSectionOrNull()
  summary: >-
    Ruft den aktiven Abschnitt ab, falls vorhanden. Wenn kein Abschnitt aktiv ist, wird null zurückgegeben.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveSectionOrNull(): OneNote.Section;'
    return:
      type: <xref uid="onenote!OneNote.Section:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the active section.\n    var section = context.application.getActiveSectionOrNull();\n\n    // Queue a command to load the section. \n    // For best performance, request specific properties.           \n    section.load('id,name');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            if (!section.isNull) {\n                // Show some properties.\n                console.log(\"Section name: \" + section.name);\n                console.log(\"Section ID: \" + section.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getWindowSize()
  uid: onenote!OneNote.Application#getWindowSize:member(1)
  package: onenote!
  fullName: getWindowSize()
  summary: ''
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWindowSize(): OfficeExtension.ClientResult<number[]>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number[]&gt;
      description: ''
- name: insertHtmlAtCurrentPosition(html)
  uid: onenote!OneNote.Application#insertHtmlAtCurrentPosition:member(1)
  package: onenote!
  fullName: insertHtmlAtCurrentPosition(html)
  summary: ''
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insertHtmlAtCurrentPosition(html: string): void;'
    parameters:
    - id: html
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: isViewingDeletedNotes()
  uid: onenote!OneNote.Application#isViewingDeletedNotes:member(1)
  package: onenote!
  fullName: isViewingDeletedNotes()
  summary: ''
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'isViewingDeletedNotes(): OfficeExtension.ClientResult<boolean>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;boolean&gt;
      description: ''
- name: load(option)
  uid: onenote!OneNote.Application#load:member(1)
  package: onenote!
  fullName: load(option)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.
  remarks: >-
    Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:


    `load(option?: string | string[]): OneNote.Application` - Bei der Option handelt es sich um eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.


    `load(option?: { select?: string; expand?: string; }): OneNote.Application` - Dabei ist option.select eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und options.expand ist eine durch Trennzeichen getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Application` - Nur für Auflistungstypen verfügbar. Sie ähnelt der vorherigen Signatur. Option.top gibt die maximale Anzahl von Auflistungselementen an, die in das Ergebnis eingeschlossen werden können. Option.skip gibt die Anzahl der Elemente an, die übersprungen und nicht in das Ergebnis einbezogen werden sollen. Wenn option.top angegeben ist, wird das Ergebnisset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(option?: OneNote.Interfaces.ApplicationLoadOptions): OneNote.Application;'
    parameters:
    - id: option
      description: ''
      type: <xref uid="onenote!OneNote.Interfaces.ApplicationLoadOptions:interface" />
    return:
      type: <xref uid="onenote!OneNote.Application:class" />
      description: ''
- name: load(propertyNames)
  uid: onenote!OneNote.Application#load:member(2)
  package: onenote!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): OneNote.Application;'
    parameters:
    - id: propertyNames
      description: Eine durch Trennzeichen getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: <xref uid="onenote!OneNote.Application:class" />
      description: ''
- name: load(option)
  uid: onenote!OneNote.Application#load:member(3)
  package: onenote!
  fullName: load(option)
  summary: ''
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(option?: {
                  select?: string;
                  expand?: string;
              }): OneNote.Application;
    parameters:
    - id: option
      description: ''
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="onenote!OneNote.Application:class" />
      description: ''
- name: navigateToPage(page)
  uid: onenote!OneNote.Application#navigateToPage:member(1)
  package: onenote!
  fullName: navigateToPage(page)
  summary: >-
    Öffnet die angegebene Seite in der Anwendungsinstanz.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'navigateToPage(page: OneNote.Page): void;'
    parameters:
    - id: page
      description: Die zu öffnende Seite.
      type: <xref uid="onenote!OneNote.Page:class" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n            \n    // Queue a command to load the pages. \n    // For best performance, request specific properties.           \n    pages.load('id');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // This example loads the first page in the section.\n            var page = pages.items[0];\n                        \n            // Open the page in the application.                    \n            context.application.navigateToPage(page);\n                    \n            // Run the queued command.\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: navigateToPageWithClientUrl(url)
  uid: onenote!OneNote.Application#navigateToPageWithClientUrl:member(1)
  package: onenote!
  fullName: navigateToPageWithClientUrl(url)
  summary: >-
    Ruft die angegebene Seite ab und öffnet sie in der Anwendungsinstanz.


    \[[API-Satz: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'navigateToPageWithClientUrl(url: string): OneNote.Page;'
    parameters:
    - id: url
      description: Die Client-URL der zu öffnenden Seite.
      type: string
    return:
      type: <xref uid="onenote!OneNote.Page:class" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages. \n    // For best performance, request specific properties.           \n    pages.load('clientUrl');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // This example loads the first page in the section.\n            var page = pages.items[0];\n\n            // Open the page in the application.                    \n            context.application.navigateToPageWithClientUrl(page.clientUrl);\n\n            // Run the queued command.\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: toJSON()
  uid: onenote!OneNote.Application#toJSON:member(1)
  package: onenote!
  fullName: toJSON()
  summary: 'Überschreibt die JavaScript-Methode, um eine nützlichere Ausgabe zu `toJSON()` bieten, wenn ein API-Objekt an übergeben wird `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->ruft wiederum die Methode `toJSON` des Objekts auf, das an das Objekt übergeben wird.) Während das ursprüngliche OneNote.Application-Objekt ein API-Objekt ist, gibt die Methode ein `toJSON` einfaches JavaScript-Objekt zurück (Typ: `OneNote.Interfaces.ApplicationData`<!-- -->), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): OneNote.Interfaces.ApplicationData;'
    return:
      type: <xref uid="onenote!OneNote.Interfaces.ApplicationData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 3d9b1bbc84b9eff7743316b64599f253b7afca1a
  ms.sourcegitcommit: 276e655472f82435a4b1227fbbb2feb687b659c0
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 03/08/2021
  ms.locfileid: "50538121"
