### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.Notebook:class'
    summary: |-
      Stellt eine Seite in einem OneNote-Notizbuch dar. Notizbücher können Abschnittsgruppen und Abschnitte enthalten.

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.Notebook
    fullName: OneNote.Notebook
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.Notebook#addSection:member(1)'
      - 'onenote!OneNote.Notebook#addSectionGroup:member(1)'
      - 'onenote!OneNote.Notebook#baseUrl:member'
      - 'onenote!OneNote.Notebook#clientUrl:member'
      - 'onenote!OneNote.Notebook#context:member'
      - 'onenote!OneNote.Notebook#getRestApiId:member(1)'
      - 'onenote!OneNote.Notebook#id:member'
      - 'onenote!OneNote.Notebook#isVirtual:member'
      - 'onenote!OneNote.Notebook#load:member(1)'
      - 'onenote!OneNote.Notebook#load:member(2)'
      - 'onenote!OneNote.Notebook#load:member(3)'
      - 'onenote!OneNote.Notebook#name:member'
      - 'onenote!OneNote.Notebook#sectionGroups:member'
      - 'onenote!OneNote.Notebook#sections:member'
      - 'onenote!OneNote.Notebook#toJSON:member(1)'
      - 'onenote!OneNote.Notebook#track:member(1)'
      - 'onenote!OneNote.Notebook#untrack:member(1)'
  - uid: 'onenote!OneNote.Notebook#addSection:member(1)'
    summary: |-
      Fügt einen neuen Abschnitt am Ende des Notizbuchs hinzu.

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: addSection(name)
    fullName: addSection(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSection(name: string): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          OneNote.run(function (context) {

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();

              // Queue a command to add a new section. 
              var section = notebook.addSection("Sample section");
              
              // Queue a command to load the new section. This example reads the name property later.
              section.load("name");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      console.log("New section name is " + section.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: name
          description: Der Name des neuen Abschnitts.
          type:
            - string
  - uid: 'onenote!OneNote.Notebook#addSectionGroup:member(1)'
    summary: |-
      Fügt eine neue Abschnittsgruppe am Ende des Notizbuchs hinzu.

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: addSectionGroup(name)
    fullName: addSectionGroup(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSectionGroup(name: string): OneNote.SectionGroup;'
      return:
        type:
          - 'onenote!OneNote.SectionGroup:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          OneNote.run(function (context) {

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();

              // Queue a command to add a new section group.
              var sectionGroup = notebook.addSectionGroup("Sample section group");

              // Queue a command to load the new section group.
              sectionGroup.load();

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      console.log("New section group name is " + sectionGroup.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: name
          description: Der Name des neuen Abschnitts.
          type:
            - string
  - uid: 'onenote!OneNote.Notebook#baseUrl:member'
    summary: |-
      Die URL der Website, auf der sich dieses Notizbuch befindet. Schreibgeschützt

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: baseUrl
    fullName: baseUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly baseUrl: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#clientUrl:member'
    summary: |-
      Die Client-URL des Notizbuchs. Schreibgeschützt

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: clientUrl
    fullName: clientUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly clientUrl: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#context:member'
    summary: 'Der Anforderungskontext, der mit dem Objekt verknüpft ist. Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.Notebook#getRestApiId:member(1)'
    summary: |-
      Ruft die Rest-API-ID ab.

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getRestApiId()
    fullName: getRestApiId()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRestApiId(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'onenote!OneNote.Notebook#getRestApiId~0:complex'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          OneNote.run(function(ctx){
              // Get the current notebook.         
              var notebook = ctx.application.getActiveNotebook();
              var restApiId = notebook.getRestApiId();

              return ctx.sync().
                  then(function(){
                      console.log("The REST API ID is " + restApiId.value);
                      // Note that the REST API ID isn't all you need to interact with the OneNote REST API. 
                      // This is only required for SharePoint notebooks. baseUrl will be null for OneDrive notebooks.
                      // For SharePoint notebooks, the notebook baseUrl should be used to talk to the OneNote REST API
                      // according to the OneNote Development Blog.
                      // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/
                  });
          });
          ```
  - uid: 'onenote!OneNote.Notebook#id:member'
    summary: |-
      Ruft die ID des Notizbuchs ab. Schreibgeschützt.

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#isVirtual:member'
    summary: |-
      True, wenn das Notizbuch nicht vom Benutzer erstellt wird (d. h. "falsch platzierte Abschnitte"). Schreibgeschützt

      \[[API-Gruppe: OneNoteApi 1,2](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: isVirtual
    fullName: isVirtual
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isVirtual: boolean;'
      return:
        type:
          - boolean
  - uid: 'onenote!OneNote.Notebook#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.
    remarks: |-
      Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:

      `load(option?: string | string[]): OneNote.Notebook`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.

      `load(option?: { select?: string; expand?: string; }): OneNote.Notebook`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Notebook`Nur verfügbar für Sammlungstypen. Sie ähnelt der vorherigen Signatur. Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können. Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind. Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.NotebookLoadOptions): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.Interfaces.NotebookLoadOptions:interface'
  - uid: 'onenote!OneNote.Notebook#load:member(2)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('baseUrl');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Base url: " + notebook.baseUrl);
                      // This is only required for SharePoint notebooks, and will be null for OneDrive notebooks.
                      // This baseUrl should be used to talk to OneNote REST APIs according to the OneNote Development Blog.
                      // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('id');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Notebook ID: " + notebook.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('name');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Notebook name: " + notebook.name);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the section groups in the notebook. 
              var sectionGroups = context.application.getActiveNotebook().sectionGroups;

              // Queue a command to load the sectionGroups. 
              sectionGroups.load("name");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      $.each(sectionGroups.items, function(index, sectionGroup) {
                          console.log("Section group name: " + sectionGroup.name);
                      });
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();
              
              // Queue a command to get immediate child sections of the notebook. 
              var childSections = notebook.sections;

              // Queue a command to load the childSections. 
              context.load(childSections);

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      $.each(childSections.items, function(index, childSection) {
                          console.log("Immediate child section name: " + childSection.name);
                      });            
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });   
          ```
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.Notebook#load:member(3)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: 'Dabei ist propertyNamesAndPaths. Select eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'onenote!OneNote.Notebook#name:member'
    summary: |-
      Ruft den Namen des Notizbuchs ab. Schreibgeschützt.

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#sectionGroups:member'
    summary: |-
      Die Abschnittsgruppen im Notizbuch. Schreibgeschützt

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: sectionGroups
    fullName: sectionGroups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sectionGroups: OneNote.SectionGroupCollection;'
      return:
        type:
          - 'onenote!OneNote.SectionGroupCollection:class'
  - uid: 'onenote!OneNote.Notebook#sections:member'
    summary: |-
      Die Abschnitte des Notizbuchs. Schreibgeschützt

      \[[API-Gruppe: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: sections
    fullName: sections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sections: OneNote.SectionCollection;'
      return:
        type:
          - 'onenote!OneNote.SectionCollection:class'
  - uid: 'onenote!OneNote.Notebook#toJSON:member(1)'
    summary: 'Überschreibt die JavaScript `toJSON()` -Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche OneNote. Notebook-Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`OneNote.Interfaces.NotebookData`<!-- -->), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.NotebookData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.NotebookData:interface'
        description: ''
  - uid: 'onenote!OneNote.Notebook#track:member(1)'
    summary: 'Nachverfolgung des Objekts zwecks automatischer Anpassung auf der Grundlage der umgebenden Änderungen im Dokument. Dieser Aufruf ist eine Kurzschreibweise für context.trackedObjects.add(thisObject). Wenn Sie dieses Objekt übergreifend für ".sync"-Aufrufe und außerhalb der sequenziellen Ausführung eines ".run"-Stapels verwenden und beim Festlegen einer Eigenschaft oder Aufrufen einer Methode für das Objekt ein "InvalidObjectPath"-Fehler zurückgegeben wird, hätte das Objekt der nachverfolgten Objektsammlung hinzugefügt werden müssen, in der das Objekt ursprünglich erstellt wurde.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
  - uid: 'onenote!OneNote.Notebook#untrack:member(1)'
    summary: 'Gibt den diesem Objekt zugewiesenen Arbeitsspeicher frei, wenn das Objekt zuvor nachverfolgt wurde. Dieser Aufruf stellt eine Kurzschreibweise für context.trackedObjects.remove(thisObject) dar. Viele nachverfolgte Objekte verlangsamen die Ausführung der Hostanwendung, also achten Sie darauf, alle hinzugefügten Objekte nach abgeschlossener Verwendung freizugeben. Sie müssen "context.sync()" aufrufen, damit die Freigabe des Arbeitsspeichers wirksam wird.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.Section:class'
    name: OneNote.Section
  - uid: 'onenote!OneNote.SectionGroup:class'
    name: OneNote.SectionGroup
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.Notebook#getRestApiId~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'onenote!OneNote.Notebook:class'
    name: OneNote.Notebook
  - uid: 'onenote!OneNote.Interfaces.NotebookLoadOptions:interface'
    name: OneNote.Interfaces.NotebookLoadOptions
  - uid: 'onenote!OneNote.SectionGroupCollection:class'
    name: OneNote.SectionGroupCollection
  - uid: 'onenote!OneNote.SectionCollection:class'
    name: OneNote.SectionCollection
  - uid: 'onenote!OneNote.Interfaces.NotebookData:interface'
    name: OneNote.Interfaces.NotebookData