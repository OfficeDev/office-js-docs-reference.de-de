### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.ParagraphCollection
    summary: |-
      <span data-ttu-id="77405-101">Stellt eine Auflistung von Paragraph-Objekten dar.</span><span class="sxs-lookup"><span data-stu-id="77405-101">Represents a collection of Paragraph objects.</span></span>

      <span data-ttu-id="77405-102">\[[API-Satz: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="77405-102">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: OneNote.ParagraphCollection
    fullName: OneNote.ParagraphCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.ParagraphCollection.context
      - onenote.OneNote.ParagraphCollection.count
      - onenote.OneNote.ParagraphCollection.getItem
      - onenote.OneNote.ParagraphCollection.getItemAt
      - onenote.OneNote.ParagraphCollection.items
      - onenote.OneNote.ParagraphCollection.load
      - onenote.OneNote.ParagraphCollection.load_1
      - onenote.OneNote.ParagraphCollection.load_2
      - onenote.OneNote.ParagraphCollection.toJSON
      - onenote.OneNote.ParagraphCollection.track
      - onenote.OneNote.ParagraphCollection.untrack
  - uid: onenote.OneNote.ParagraphCollection.context
    summary: <span data-ttu-id="77405-103">Der dem Objekt zugeordnete Anforderungskontext.</span><span class="sxs-lookup"><span data-stu-id="77405-103">The request context associated with the object.</span></span> <span data-ttu-id="77405-104">Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="77405-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: onenote.OneNote.ParagraphCollection.count
    summary: |-
      <span data-ttu-id="77405-105">Gibt die Anzahl von Absätzen auf der Seite zurück.</span><span class="sxs-lookup"><span data-stu-id="77405-105">Returns the number of paragraphs in the page.</span></span> <span data-ttu-id="77405-106">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="77405-106">Read-only.</span></span>

      <span data-ttu-id="77405-107">\[[API-Satz: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="77405-107">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.ParagraphCollection.getItem
    summary: |-
      <span data-ttu-id="77405-108">Ruft ein Paragraph-Objekt nach ID oder dem Index in der Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="77405-108">Gets a Paragraph object by ID or by its index in the collection.</span></span> <span data-ttu-id="77405-109">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="77405-109">Read-only.</span></span>

      <span data-ttu-id="77405-110">\[[API-Satz: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="77405-110">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getItem(index)
    fullName: getItem(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: number | string): OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
        description: ''
      parameters:
        - id: index
          description: '<span data-ttu-id="77405-111">Die ID des Paragraph-Objekts oder die Indexposition des Paragraph-Objekts in der Auflistung.</span><span class="sxs-lookup"><span data-stu-id="77405-111">The ID of the Paragraph object, or the index location of the Paragraph object in the collection.</span></span>'
          type:
            - number | string
  - uid: onenote.OneNote.ParagraphCollection.getItemAt
    summary: |-
      <span data-ttu-id="77405-112">Ruft einen Absatz anhand seiner Position in der Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="77405-112">Gets a paragraph on its position in the collection.</span></span>

      <span data-ttu-id="77405-113">\[[API-Satz: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="77405-113">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
        description: |-


          #### <a name="examples"></a><span data-ttu-id="77405-114">Beispiele</span><span class="sxs-lookup"><span data-stu-id="77405-114">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;

              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the type and richText.text property of this paragraph.
              firstParagraph.load("id,type");


              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Write text from paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="77405-115">Index-Wert des abzurufenden Objekts.</span><span class="sxs-lookup"><span data-stu-id="77405-115">Index value of the object to be retrieved.</span></span> <span data-ttu-id="77405-116">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="77405-116">Zero-indexed.</span></span>
          type:
            - number
  - uid: onenote.OneNote.ParagraphCollection.items
    summary: <span data-ttu-id="77405-117">Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="77405-117">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: OneNote.Paragraph[];'
      return:
        type:
          - 'OneNote.Paragraph[]'
  - uid: onenote.OneNote.ParagraphCollection.load
    summary: <span data-ttu-id="77405-118">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="77405-118">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="77405-119">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="77405-119">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="77405-120">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="77405-120">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="77405-121">`load(option?: string | string[]): OneNote.ParagraphCollection`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="77405-121">`load(option?: string | string[]): OneNote.ParagraphCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="77405-122">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="77405-122">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="77405-123">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection`-Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="77405-123">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection` - Only available on collection types.</span></span> <span data-ttu-id="77405-124">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="77405-124">It is similar to the preceding signature.</span></span> <span data-ttu-id="77405-125">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können.</span><span class="sxs-lookup"><span data-stu-id="77405-125">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="77405-126">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="77405-126">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="77405-127">Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.</span><span class="sxs-lookup"><span data-stu-id="77405-127">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions
  - uid: onenote.OneNote.ParagraphCollection.load_1
    summary: <span data-ttu-id="77405-128">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="77405-128">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="77405-129">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="77405-129">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="77405-130">Beispiele</span><span class="sxs-lookup"><span data-stu-id="77405-130">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItem(0);
              var paragraphs = pageContent.outline.paragraphs;
              
              // Queue a command to load the id and type of each paragraph.
              paragraphs.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      var firstParagraph = paragraphs.items[0];
                      // Write text from first paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its outline's paragraphs.
              var outlinePageContents = ;
              var paragraphs = ;
              var richTextParagraphs = ;
              // Queue a command to load the id and type of each page content in the outline.
              pageContents.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Load all page contents of type Outline
                      $.each(pageContents.items, function(index, pageContent) {
                          if(pageContent.type == 'Outline')
                          {
                              pageContent.load('outline,outline/paragraphs,outline/paragraphs/type');
                              outlinePageContents.push(pageContent);
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Load all rich text paragraphs across outlines
                      $.each(outlinePageContents, function(index, outlinePageContent) {
                          var outline = outlinePageContent.outline;
                          paragraphs = paragraphs.concat(outline.paragraphs.items);
                      });
                      $.each(paragraphs, function(index, paragraph) {
                          if(paragraph.type == 'RichText')
                          {
                              richTextParagraphs.push(paragraph);
                              paragraph.load("id,richText/text");
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Display all rich text paragraphs to the console
                      $.each(richTextParagraphs, function(index, richTextParagraph) {
                          var richText = richTextParagraph.richText;
                          console.log(
                              "Paragraph found with richtext content : " + 
                              richText.text + " and richtext id : " + richText.id);
                      });
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="77405-131">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="77405-131">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.ParagraphCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: onenote.OneNote.ParagraphCollection.toJSON
    summary: '<span data-ttu-id="77405-132">ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API-Objekt an`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="77405-132">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="77405-133">.</span><span class="sxs-lookup"><span data-stu-id="77405-133"></span></span> <span data-ttu-id="77405-134">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="77405-134"></span></span><!-- --><span data-ttu-id="77405-135">Ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche `OneNote.ParagraphCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`OneNote.Interfaces.ParagraphCollectionData`</span><span class="sxs-lookup"><span data-stu-id="77405-135">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `OneNote.ParagraphCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.ParagraphCollectionData`</span></span><!-- --><span data-ttu-id="77405-136">), die ein Array "Items" mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.</span><span class="sxs-lookup"><span data-stu-id="77405-136">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphCollectionData;'
      return:
        type:
          - onenote.OneNote.Interfaces.ParagraphCollectionData
        description: ''
  - uid: onenote.OneNote.ParagraphCollection.track
    summary: '<span data-ttu-id="77405-137">Nachverfolgung des Objekts zwecks automatischer Anpassung auf der Grundlage der umgebenden Änderungen im Dokument.</span><span class="sxs-lookup"><span data-stu-id="77405-137">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="77405-138">Dieser Aufruf ist eine Kurzschreibweise für context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="77405-138">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="77405-139">Wenn Sie dieses Objekt übergreifend für ".sync"-Aufrufe und außerhalb der sequenziellen Ausführung eines ".run"-Stapels verwenden und beim Festlegen einer Eigenschaft oder Aufrufen einer Methode für das Objekt ein "InvalidObjectPath"-Fehler zurückgegeben wird, hätte das Objekt der nachverfolgten Objektsammlung hinzugefügt werden müssen, in der das Objekt ursprünglich erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="77405-139">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: ''
  - uid: onenote.OneNote.ParagraphCollection.untrack
    summary: '<span data-ttu-id="77405-140">Gibt den diesem Objekt zugewiesenen Arbeitsspeicher frei, wenn das Objekt zuvor nachverfolgt wurde.</span><span class="sxs-lookup"><span data-stu-id="77405-140">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="77405-141">Dieser Aufruf stellt eine Kurzschreibweise für context.trackedObjects.remove(thisObject) dar.</span><span class="sxs-lookup"><span data-stu-id="77405-141">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="77405-142">Viele nachverfolgte Objekte verlangsamen die Ausführung der Hostanwendung, also achten Sie darauf, alle hinzugefügten Objekte nach abgeschlossener Verwendung freizugeben.</span><span class="sxs-lookup"><span data-stu-id="77405-142">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="77405-143">Sie müssen "context.sync()" aufrufen, damit die Freigabe des Arbeitsspeichers wirksam wird.</span><span class="sxs-lookup"><span data-stu-id="77405-143">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: ''