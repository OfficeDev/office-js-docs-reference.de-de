### YamlMime:UniversalReference
ms.openlocfilehash: c97558f3f40b4daa824c3cd7dd2feaea1d8164d2
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/28/2018
ms.locfileid: "24045272"
items:
- uid: excel.Excel.TextConditionalFormat
  summary: >-
    <span data-ttu-id="31f97-101">Stellt ein bestimmtes bedingtes Textformat dar.</span><span class="sxs-lookup"><span data-stu-id="31f97-101">Represents a specific text conditional format.</span></span>


    <span data-ttu-id="31f97-102">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="31f97-102">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.TextConditionalFormat
  fullName: excel.Excel.TextConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TextConditionalFormat.format
  - excel.Excel.TextConditionalFormat.load
  - excel.Excel.TextConditionalFormat.rule
  - excel.Excel.TextConditionalFormat.toJSON
- uid: excel.Excel.TextConditionalFormat.format
  summary: >-
    <span data-ttu-id="31f97-p101">Gibt ein Formatobjekt zurück, das die Schriftart, die Füllung, den Rahmen und andere Eigenschaften bedingter Formate kapselt. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="31f97-p101">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.</span></span>


    <span data-ttu-id="31f97-105">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="31f97-105">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: format
  fullName: excel.Excel.TextConditionalFormat.format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.ConditionalRangeFormat;'
    return:
      type:
      - excel.Excel.ConditionalRangeFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"31f97-106\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"31f97-106\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.TextConditionalFormat.load
  summary: <span data-ttu-id="31f97-107">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="31f97-107">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="31f97-108">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="31f97-108">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="31f97-109">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="31f97-109">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="31f97-110">`load(option?: { select?: string; expand?: string; }): Excel.TextConditionalFormat`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class="sxs-lookup"><span data-stu-id="31f97-110">`load(option?: { select?: string; expand?: string; }): Excel.TextConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="31f97-111">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TextConditionalFormat`-Nur auf Auflistungstypen verfügbar.</span><span class="sxs-lookup"><span data-stu-id="31f97-111">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TextConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="31f97-112">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class="sxs-lookup"><span data-stu-id="31f97-112">It is similar to the preceding signature.</span></span> <span data-ttu-id="31f97-113">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class="sxs-lookup"><span data-stu-id="31f97-113">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="31f97-114">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="31f97-114">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="31f97-115">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class="sxs-lookup"><span data-stu-id="31f97-115">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: excel.Excel.TextConditionalFormat.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="31f97-116">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="31f97-116">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.TextConditionalFormat.rule
  summary: >-
    <span data-ttu-id="31f97-117">Die Regel des bedingten Formats.</span><span class="sxs-lookup"><span data-stu-id="31f97-117">The rule of the conditional format.</span></span>


    <span data-ttu-id="31f97-118">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="31f97-118">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rule
  fullName: excel.Excel.TextConditionalFormat.rule
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rule: Excel.ConditionalTextComparisonRule;'
    return:
      type:
      - excel.Excel.ConditionalTextComparisonRule
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"31f97-119\">Examples</span><span class=\"sxs-lookup\"><span data-stu-id=\"31f97-119\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.TextConditionalFormat.toJSON
  name: toJSON()
  fullName: excel.Excel.TextConditionalFormat.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TextConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.TextConditionalFormatData
      description: ''
