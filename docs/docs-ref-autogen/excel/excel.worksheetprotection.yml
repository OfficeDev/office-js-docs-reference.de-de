### YamlMime:UniversalReference
ms.openlocfilehash: ce9a8d5db3e7c4b05465916ee6d496b3f777ece2
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 01/17/2019
ms.locfileid: "28725046"
items:
- uid: excel.Excel.WorksheetProtection
  summary: >-
    Stellt den Schutz eines Arbeitsblattobjekts dar.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.WorksheetProtection
  fullName: Excel.WorksheetProtection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetProtection.context
  - excel.Excel.WorksheetProtection.load
  - excel.Excel.WorksheetProtection.options
  - excel.Excel.WorksheetProtection.protect
  - excel.Excel.WorksheetProtection.protected
  - excel.Excel.WorksheetProtection.toJSON
  - excel.Excel.WorksheetProtection.unprotect
- uid: excel.Excel.WorksheetProtection.context
  summary: Der Anforderungskontext-zugeordnet. Dadurch wird das Add-in Prozess mit der Office-hostanwendung Prozess verbunden.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.WorksheetProtection.load
  summary: Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.
  remarks: >-
    Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:


    `load(option?: { select?: string; expand?: string; }): Excel.WorksheetProtection`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetProtection`-Nur auf Auflistungstypen verfügbar. Es ist ähnlich wie die jeweils vorhergehende Signatur. Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können. Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen. Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.WorksheetProtection;'
    return:
      type:
      - excel.Excel.WorksheetProtection
      description: ''
    parameters:
    - id: option
      description: Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.
      type:
      - string | string[]
- uid: excel.Excel.WorksheetProtection.options
  summary: >-
    Optionen für den Arbeitsblattschutz. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: options
  fullName: options
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly options: Excel.WorksheetProtectionOptions;'
    return:
      type:
      - excel.Excel.WorksheetProtectionOptions
- uid: excel.Excel.WorksheetProtection.protect
  summary: >-
    Schützt ein Arbeitsblatt. Schlägt fehl, wenn das Arbeitsblatt bereits geschützt ist.


    \[[API-Satz: ExcelApi 1.2 für Optionen; 1.7 Kennwort](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: protect(options, password)
  fullName: protect
  langs:
  - typeScript
  type: method
  syntax:
    content: 'protect(options?: Excel.WorksheetProtectionOptions, password?: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function(ctx) {\n  // get a reference to Sheet1\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n\n  // Protect inserting or deleting rows in Sheet1\n  sheet.protection.protect({\n    allowInsertRows: false,\n    allowDeleteRows: false\n  });\n\n  return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.load(\"protection/protected\");\n\n    await context.sync();\n\n    if (!activeSheet.protection.protected) {\n        activeSheet.protection.protect();\n    }\n});\n```\n```typescript\nlet password = await passwordHandler();\npasswordHelper(password);\nawait Excel.run(async (context) => {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.load(\"protection/protected\");\n\n    await context.sync();\n\n    if (!activeSheet.protection.protected) {\n        activeSheet.protection.protect(null, password);\n    }\n});\n```"
    parameters:
    - id: options
      description: Optional. Schutzoptionen Blatt.
      type:
      - excel.Excel.WorksheetProtectionOptions
    - id: password
      description: Optional. Blatt durch ein Kennwort geschützt.
      type:
      - string
- uid: excel.Excel.WorksheetProtection.protected
  summary: >-
    Gibt an, ob das Arbeitsblatt geschützt ist. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: protected
  fullName: protected
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly protected: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.WorksheetProtection.toJSON
  summary: Überschreibt das JavaScript `toJSON()` Methode, um nützliche Ausgabe zu gewährleisten, wenn ein API-Objekt zu übergeben ist `JSON.stringify()` <!-- -->. (`JSON.stringify`<!-- -->, wiederum die `toJSON` -Methode des Objekts, das es übergeben wird.) Das ursprüngliche Excel.WorksheetProtection-Objekt ist ein API-Objekt der `toJSON` -Methode gibt eine einfache JavaScript-Objekt zurück (als `Excel.Interfaces.WorksheetProtectionData` <!-- -->), die flache Kopien der geladene untergeordnete Eigenschaften aus dem ursprünglichen-Objekt enthält.
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetProtectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetProtectionData
      description: ''
- uid: excel.Excel.WorksheetProtection.unprotect
  summary: >-
    Hebt den Schutz eines Arbeitsblatts auf.


    \[[API-Satz: ExcelApi 1.7 Kennwort](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: unprotect(password)
  fullName: unprotect
  langs:
  - typeScript
  type: method
  syntax:
    content: 'unprotect(password?: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function(ctx) {\n  // get a reference to Sheet1\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n\n  // Remove all protects applied to Sheet1\n  sheet.protection.unprotect();\n\n  return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Unprotecting a worksheet with unprotect() will remove all \n// WorksheetProtectionOptions options applied to a worksheet.\n// To remove only a subset of WorksheetProtectionOptions use the \n// protect() method and set the options you wish to remove to true.\nExcel.run(function(ctx) {\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n  sheet.protection.protect({\n    allowInsertRows: false, // Protect row insertion\n    allowDeleteRows: true // Unprotect row deletion\n  });\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.protection.unprotect();\n});\n```\n```typescript\nlet password = await passwordHandler();\npasswordHelper(password);\nawait Excel.run(async (context) => {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.protection.unprotect(password);\n});\n```"
    parameters:
    - id: password
      description: Blatt durch ein Kennwort geschützt.
      type:
      - string
