### YamlMime:UniversalReference
ms.openlocfilehash: 7153c94e1c02fdfaac2e4c09fa369ba8d6dd5304
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/13/2019
ms.locfileid: "29981878"
items:
- uid: excel.Excel.RangeBorderCollection
  summary: >-
    <span data-ttu-id="5c3b5-101">Stellt die Rahmenobjekte dar, aus denen der Bereichsrahmen besteht.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-101">Represents the border objects that make up the range border.</span></span>


    <span data-ttu-id="5c3b5-102">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5c3b5-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.RangeBorderCollection
  fullName: Excel.RangeBorderCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.RangeBorderCollection.context
  - excel.Excel.RangeBorderCollection.count
  - excel.Excel.RangeBorderCollection.getItem
  - excel.Excel.RangeBorderCollection.getItem_1
  - excel.Excel.RangeBorderCollection.getItemAt
  - excel.Excel.RangeBorderCollection.items
  - excel.Excel.RangeBorderCollection.load
  - excel.Excel.RangeBorderCollection.load_1
  - excel.Excel.RangeBorderCollection.load_2
  - excel.Excel.RangeBorderCollection.toJSON
- uid: excel.Excel.RangeBorderCollection.context
  summary: <span data-ttu-id="5c3b5-103">Der Anforderungskontext-zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-103">The request context associated with the object.</span></span> <span data-ttu-id="5c3b5-104">Dadurch wird das Add-in Prozess mit der Office-hostanwendung Prozess verbunden.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-104">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.RangeBorderCollection.count
  summary: >-
    <span data-ttu-id="5c3b5-p102">Die Anzahl der Rahmen-Objekte in der Auflistung. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-p102">Number of border objects in the collection. Read-only.</span></span>


    <span data-ttu-id="5c3b5-107">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5c3b5-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.RangeBorderCollection.getItem
  summary: >-
    <span data-ttu-id="5c3b5-108">Ruft ein Rahmen-Objekt ab, das den Namen verwendet</span><span class="sxs-lookup"><span data-stu-id="5c3b5-108">Gets a border object using its name.</span></span>


    <span data-ttu-id="5c3b5-109">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5c3b5-109">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(index)
  fullName: getItem(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(index: Excel.BorderIndex): Excel.RangeBorder;'
    return:
      type:
      - excel.Excel.RangeBorder
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"5c3b5-110\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"5c3b5-110\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var borderName = 'EdgeTop';\n    var border = range.format.borders.getItem(borderName);\n    border.load('style');\n    return ctx.sync().then(function() {\n            console.log(border.style);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="5c3b5-111">Der Indexwert des Border-Objekts abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-111">Index value of the border object to be retrieved.</span></span> <span data-ttu-id="5c3b5-112">Einzelheiten finden Sie unter Excel.BorderIndex.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-112">See Excel.BorderIndex for details.</span></span>
      type:
      - excel.Excel.BorderIndex
- uid: excel.Excel.RangeBorderCollection.getItem_1
  summary: >-
    <span data-ttu-id="5c3b5-113">Ruft ein Rahmen-Objekt ab, das den Namen verwendet</span><span class="sxs-lookup"><span data-stu-id="5c3b5-113">Gets a border object using its name.</span></span>


    <span data-ttu-id="5c3b5-114">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5c3b5-114">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(indexString)
  fullName: getItem(indexString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(indexString: "EdgeTop" | "EdgeBottom" | "EdgeLeft" | "EdgeRight" | "InsideVertical" | "InsideHorizontal" | "DiagonalDown" | "DiagonalUp"): Excel.RangeBorder;'
    return:
      type:
      - excel.Excel.RangeBorder
      description: ''
    parameters:
    - id: indexString
      description: <span data-ttu-id="5c3b5-115">Der Indexwert des Border-Objekts abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-115">Index value of the border object to be retrieved.</span></span> <span data-ttu-id="5c3b5-116">Einzelheiten finden Sie unter Excel.BorderIndex.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-116">See Excel.BorderIndex for details.</span></span>
      type:
      - "\"EdgeTop\" | \"EdgeBottom\" | \"EdgeLeft\" | \"EdgeRight\" | \"InsideVertical\" | \"InsideHorizontal\" | \"DiagonalDown\" | \"DiagonalUp\""
- uid: excel.Excel.RangeBorderCollection.getItemAt
  summary: >-
    <span data-ttu-id="5c3b5-117">Ruft ein Rahmen-Objekt ab, das den Namen verwendet</span><span class="sxs-lookup"><span data-stu-id="5c3b5-117">Gets a border object using its index.</span></span>


    <span data-ttu-id="5c3b5-118">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5c3b5-118">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: getItemAt(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.RangeBorder;'
    return:
      type:
      - excel.Excel.RangeBorder
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"5c3b5-119\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"5c3b5-119\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var border = range.format.borders.getItemAt(0);\n    border.load('sideIndex');\n    return ctx.sync().then(function() {\n        console.log(border.sideIndex);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="5c3b5-p105">Index-Wert des abzurufenden Objekts. Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-p105">Index value of the object to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.RangeBorderCollection.items
  summary: <span data-ttu-id="5c3b5-122">Ruft die geladene untergeordnete Elemente in dieser Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-122">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.RangeBorder[];'
    return:
      type:
      - Excel.RangeBorder[]
- uid: excel.Excel.RangeBorderCollection.load
  summary: <span data-ttu-id="5c3b5-123">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-123">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="5c3b5-124">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-124">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="5c3b5-125">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="5c3b5-125">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="5c3b5-126">`load(option?: string | string[]): Excel.RangeBorderCollection`-Wo Option ist eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-126">`load(option?: string | string[]): Excel.RangeBorderCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="5c3b5-127">`load(option?: { select?: string; expand?: string; }): Excel.RangeBorderCollection`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-127">`load(option?: { select?: string; expand?: string; }): Excel.RangeBorderCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="5c3b5-128">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeBorderCollection`-Nur auf Auflistungstypen verfügbar.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-128">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeBorderCollection` - Only available on collection types.</span></span> <span data-ttu-id="5c3b5-129">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-129">It is similar to the preceding signature.</span></span> <span data-ttu-id="5c3b5-130">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-130">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="5c3b5-131">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-131">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="5c3b5-132">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-132">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.RangeBorderCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.RangeBorderCollection;'
    return:
      type:
      - excel.Excel.RangeBorderCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.RangeBorderCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.RangeBorderCollection.load_1
  summary: <span data-ttu-id="5c3b5-133">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-133">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="5c3b5-134">Sie müssen Aufrufen `context.sync()` vor dem Lesen der Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-134">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.RangeBorderCollection;'
    return:
      type:
      - excel.Excel.RangeBorderCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"5c3b5-135\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"5c3b5-135\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var borders = range.format.borders;\n    border.load('items');\n    return ctx.sync().then(function() {\n        console.log(borders.count);\n        for (var i = 0; i < borders.items.length; i++)\n        {\n            console.log(borders.items[i].sideIndex);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// The example below adds grid border around the range.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.format.borders.getItem('InsideHorizontal').style = 'Continuous';\n    range.format.borders.getItem('InsideVertical').style = 'Continuous';\n    range.format.borders.getItem('EdgeBottom').style = 'Continuous';\n    range.format.borders.getItem('EdgeLeft').style = 'Continuous';\n    range.format.borders.getItem('EdgeRight').style = 'Continuous';\n    range.format.borders.getItem('EdgeTop').style = 'Continuous';\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="5c3b5-136">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-136">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.RangeBorderCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.RangeBorderCollection;'
    return:
      type:
      - excel.Excel.RangeBorderCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.RangeBorderCollection.toJSON
  summary: <span data-ttu-id="5c3b5-137">Überschreibt das JavaScript `toJSON()` Methode, um nützliche Ausgabe zu gewährleisten, wenn ein API-Objekt zu übergeben ist `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-137">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="5c3b5-138">(`JSON.stringify`<!-- -->, wiederum die `toJSON` -Methode des Objekts, das es übergeben wird.) Während der ursprünglichen `Excel.RangeBorderCollection` Objekt ist ein API-Objekt der `toJSON` -Methode gibt eine einfache JavaScript-Objekt zurück (als `Excel.Interfaces.RangeBorderCollectionData` <!-- -->), die ein Array "Elemente" mit flache Kopien der geladenen Eigenschaften aus der Auflistung von Elementen enthält.</span><span class="sxs-lookup"><span data-stu-id="5c3b5-138">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.RangeBorderCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeBorderCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeBorderCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.RangeBorderCollectionData
      description: ''
