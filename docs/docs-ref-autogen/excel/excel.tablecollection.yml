### YamlMime:UniversalReference
ms.openlocfilehash: ae79bcc92ce58e340f8a6f6f4b3c91b6c232e12b
ms.sourcegitcommit: b05ee546d9dfbc914c8d1c594d9b206b04780bbc
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 11/22/2018
ms.locfileid: "26645635"
items:
- uid: excel.Excel.TableCollection
  summary: >-
    <span data-ttu-id="365ac-101">Stellt eine Auflistung aller Tabellen dar, die Teil der Arbeitsmappe oder des Arbeitsblatts in Abhängigkeit davon dar, wie diese abgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="365ac-101">Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.</span></span>


    <span data-ttu-id="365ac-102">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="365ac-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.TableCollection
  fullName: Excel.TableCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TableCollection.add
  - excel.Excel.TableCollection.count
  - excel.Excel.TableCollection.getCount
  - excel.Excel.TableCollection.getItem
  - excel.Excel.TableCollection.getItemAt
  - excel.Excel.TableCollection.getItemOrNullObject
  - excel.Excel.TableCollection.items
  - excel.Excel.TableCollection.load
  - excel.Excel.TableCollection.onChanged
  - excel.Excel.TableCollection.toJSON
- uid: excel.Excel.TableCollection.add
  summary: >-
    <span data-ttu-id="365ac-p101">Erstellt eine neue Tabelle. Das Bereichsobjekt oder die Quelladresse bestimmt das Arbeitsblatt, unter dem die Tabelle hinzugefügt wird. Wenn die Tabelle nicht hinzugefügt werden kann (z. B. weil die Adresse ungültig ist oder sich die Tabelle mit einer anderen Tabelle überlappen würde), wird ein Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="365ac-p101">Create a new table. The range object or source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.</span></span>


    <span data-ttu-id="365ac-106">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="365ac-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(address, hasHeaders)
  fullName: add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(address: Range | string, hasHeaders: boolean): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"365ac-107\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.add('Sheet1!A1:E7', true);\n    table.load('name');\n    return ctx.sync().then(function() {\n        console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="365ac-108">Ein Range-Objekt oder ein String Adresse oder Name des Bereichs, die die Datenquelle darstellt.</span><span class="sxs-lookup"><span data-stu-id="365ac-108">A Range object, or a string address or name of the range representing the data source.</span></span> <span data-ttu-id="365ac-109">Wenn die Adresse nicht mit einen Blattnamen enthält, wird das derzeit aktive Blatt verwendet.</span><span class="sxs-lookup"><span data-stu-id="365ac-109">If the address does not contain a sheet name, the currently-active sheet is used.</span></span> <span data-ttu-id="365ac-110">\[API-Satz: ExcelApi 1.1 / 1.3.</span><span class="sxs-lookup"><span data-stu-id="365ac-110">\[Api set: ExcelApi 1.1 / 1.3.</span></span> <span data-ttu-id="365ac-111">Dieser Parameter muss eine Zeichenfolge sein, bevor Sie ExcelApi 1.3.</span><span class="sxs-lookup"><span data-stu-id="365ac-111">Prior to ExcelApi 1.3, this parameter must be a string.</span></span> <span data-ttu-id="365ac-112">Beginnend mit Excel-Api 1.3, kann dieser Parameter ein Range-Objekt oder eine Zeichenfolge sein.\]</span><span class="sxs-lookup"><span data-stu-id="365ac-112">Starting with Excel Api 1.3, this parameter may be a Range object or a string.\]</span></span>'
      type:
      - Range | string
    - id: hasHeaders
      description: <span data-ttu-id="365ac-p103">Boolescher Wert, der angibt, ob die importierten Daten Spaltenüberschriften besitzen. Wenn die Quelle keine Überschriften enthält (d. h. wenn diese Eigenschaft auf falsch festgelegt ist), generiert Excel automatisch eine Überschriftenänderung der Daten nach einer Zeile.</span><span class="sxs-lookup"><span data-stu-id="365ac-p103">Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.</span></span>
      type:
      - boolean
- uid: excel.Excel.TableCollection.count
  summary: >-
    <span data-ttu-id="365ac-p104">Gibt die Anzahl der Tabellen in der Arbeitsmappe zurück. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="365ac-p104">Returns the number of tables in the workbook. Read-only.</span></span>


    <span data-ttu-id="365ac-118">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="365ac-118">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.TableCollection.getCount
  summary: >-
    <span data-ttu-id="365ac-119">Ruft die Anzahl von Tabellen in der Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="365ac-119">Gets the number of tables in the collection.</span></span>


    <span data-ttu-id="365ac-120">\[[API-Satz: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="365ac-120">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.TableCollection.getItem
  summary: >-
    <span data-ttu-id="365ac-121">Ruft eine Tabelle anhand des Namens oder der ID ab.</span><span class="sxs-lookup"><span data-stu-id="365ac-121">Gets a table by Name or ID.</span></span>


    <span data-ttu-id="365ac-122">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="365ac-122">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"365ac-123\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-123\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: key
      description: <span data-ttu-id="365ac-124">Name oder ID der abzurufenden Tabelle.</span><span class="sxs-lookup"><span data-stu-id="365ac-124">Name or ID of the table to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.TableCollection.getItemAt
  summary: >-
    <span data-ttu-id="365ac-125">Ruft eine Tabelle anhand ihrer Position in der Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="365ac-125">Gets a table based on its position in the collection.</span></span>


    <span data-ttu-id="365ac-126">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="365ac-126">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"365ac-127\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-127\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="365ac-p105">Index-Wert des abzurufenden Objekts. Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="365ac-p105">Index value of the object to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.TableCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="365ac-p106">Ruft eine Tabelle anhand des Namens oder der ID ab. Wenn die Tabelle nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="365ac-p106">Gets a table by Name or ID. If the table does not exist, will return a null object.</span></span>


    <span data-ttu-id="365ac-132">\[[API-Satz: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="365ac-132">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="365ac-133">Name oder ID der abzurufenden Tabelle.</span><span class="sxs-lookup"><span data-stu-id="365ac-133">Name or ID of the table to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.TableCollection.items
  summary: <span data-ttu-id="365ac-134">Ruft die geladene untergeordnete Elemente in dieser Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="365ac-134">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Table[];'
    return:
      type:
      - Excel.Table[]
- uid: excel.Excel.TableCollection.load
  summary: <span data-ttu-id="365ac-135">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="365ac-135">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="365ac-136">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="365ac-136">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"365ac-137\">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-137\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"365ac-138\">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-138\">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"365ac-139\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection`-Nur auf Auflistungstypen verfügbar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-139\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"365ac-140\">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-140\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"365ac-141\">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-141\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"365ac-142\">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-142\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"365ac-143\">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-143\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"365ac-144\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-144\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    tables.load();\n    return ctx.sync().then(function() {\n        console.log(\"tables Count: \" + tables.count);\n        for (var i = 0; i < tables.items.length; i++)\n        {\n            console.log(tables.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of tables\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    tables.load('count');\n    return ctx.sync().then(function() {\n        console.log(tables.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="365ac-145">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="365ac-145">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.TableCollection.onChanged
  summary: >-
    <span data-ttu-id="365ac-146">Tritt auf, wenn Daten für eine Tabelle in einer Arbeitsmappe oder einem Arbeitsblatt ändert.</span><span class="sxs-lookup"><span data-stu-id="365ac-146">Occurs when data changes on any table in a workbook, or a worksheet.</span></span>


    <span data-ttu-id="365ac-147">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="365ac-147">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"365ac-148\">Examples</span><span class=\"sxs-lookup\"><span data-stu-id=\"365ac-148\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let tables = context.workbook.tables;\n    tables.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the table collection onChanged event\");\n});\n```"
- uid: excel.Excel.TableCollection.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.TableCollectionData
      description: ''
