### YamlMime:UniversalReference
ms.openlocfilehash: 82074cf5cd8aca31904fec6af7372cf877215825
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/28/2018
ms.locfileid: "24045072"
items:
- uid: excel.Excel.ConditionalFormatCollection
  summary: >-
    <span data-ttu-id="ab21b-101">Stelle eine Sammlung aller bedingte Formate dar, die den Bereich überlappen.</span><span class="sxs-lookup"><span data-stu-id="ab21b-101">Represents a collection of all the conditional formats that are overlap the range.</span></span>


    <span data-ttu-id="ab21b-102">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab21b-102">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.ConditionalFormatCollection
  fullName: excel.Excel.ConditionalFormatCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.ConditionalFormatCollection.add
  - excel.Excel.ConditionalFormatCollection.clearAll
  - excel.Excel.ConditionalFormatCollection.getCount
  - excel.Excel.ConditionalFormatCollection.getItem
  - excel.Excel.ConditionalFormatCollection.getItemAt
  - excel.Excel.ConditionalFormatCollection.items
  - excel.Excel.ConditionalFormatCollection.load
  - excel.Excel.ConditionalFormatCollection.toJSON
- uid: excel.Excel.ConditionalFormatCollection.add
  summary: >-
    <span data-ttu-id="ab21b-103">Fügt ein neues bedingtes Format der Auflistung an die erste oben Priorität.</span><span class="sxs-lookup"><span data-stu-id="ab21b-103">Adds a new conditional format to the collection at the first/top priority.</span></span>


    <span data-ttu-id="ab21b-104">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab21b-104">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(type)
  fullName: excel.Excel.ConditionalFormatCollection.add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ab21b-105\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"ab21b-105\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);\n    conditionalFormat.iconOrNull.style = \"YellowThreeArrows\";\n    return ctx.sync().then(function () {\n        console.log(\"Added new yellow three arrow icon set.\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
    parameters:
    - id: type
      description: <span data-ttu-id="ab21b-106">Der Typ der bedingten Formatierung hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="ab21b-106">The type of conditional format being added.</span></span> <span data-ttu-id="ab21b-107">Einzelheiten finden Sie unter Excel.ConditionalFormatType.</span><span class="sxs-lookup"><span data-stu-id="ab21b-107">See Excel.ConditionalFormatType for details.</span></span>
      type:
      - excel.Excel.ConditionalFormatType
- uid: excel.Excel.ConditionalFormatCollection.clearAll
  summary: >-
    <span data-ttu-id="ab21b-108">Löscht alle bedingten Formate, die im aktuellen angegebenen Bereich aktiv sind.</span><span class="sxs-lookup"><span data-stu-id="ab21b-108">Clears all conditional formats active on the current specified range.</span></span>


    <span data-ttu-id="ab21b-109">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab21b-109">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: clearAll()
  fullName: excel.Excel.ConditionalFormatCollection.clearAll
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearAll(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ab21b-110\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"ab21b-110\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormats = range.conditionalFormats;\n    var conditionalFormat = conditionalFormats.clearAll();\n    return ctx.sync().then(function () {\n        console.log(\"Cleared all conditional formats from this range.\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange();\n    range.conditionalFormats.clearAll();\n\n    await context.sync();\n\n    $(\".conditional-formats\").hide();\n});\n```"
- uid: excel.Excel.ConditionalFormatCollection.getCount
  summary: >-
    <span data-ttu-id="ab21b-p102">Gibt die Anzahl der bedingten Formate in der Arbeitsmappe zurück. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="ab21b-p102">Returns the number of conditional formats in the workbook. Read-only.</span></span>


    <span data-ttu-id="ab21b-113">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab21b-113">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: excel.Excel.ConditionalFormatCollection.getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ab21b-114\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"ab21b-114\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);\n    conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;\n    var cfCount = range.conditionalFormats.getCount(); \n\n    return ctx.sync().then(function () {\n        console.log(\"Count: \" + cfCount.value);\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.ConditionalFormatCollection.getItem
  summary: >-
    <span data-ttu-id="ab21b-115">Gibt ein bedingtes Format für die angegebene ID</span><span class="sxs-lookup"><span data-stu-id="ab21b-115">Returns a conditional format for the given ID.</span></span>


    <span data-ttu-id="ab21b-116">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab21b-116">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(id)
  fullName: excel.Excel.ConditionalFormatCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: >-
        <span data-ttu-id="ab21b-117">Bedingte Format-Objekt.</span><span class="sxs-lookup"><span data-stu-id="ab21b-117">Conditional Format object.</span></span>

        #### <a name="examples"></a><span data-ttu-id="ab21b-118">Beispiele</span><span class="sxs-lookup"><span data-stu-id="ab21b-118">Examples</span></span>


        ```javascript

        Excel.run(function (ctx) {
            var sheetName = "Sheet1";
            var rangeAddress = "A1:C3";
            var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
            var conditionalFormats = range.conditionalFormats;
            var conditionalFormat = conditionalFormats.getItemAt(3);
            return ctx.sync().then(function () {
                console.log("Conditional Format at Item 3 Loaded");
            });
        }).catch(function (error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
        });

        ```
    parameters:
    - id: id
      description: <span data-ttu-id="ab21b-119">Die Id der bedingten Formatierung.</span><span class="sxs-lookup"><span data-stu-id="ab21b-119">The id of the conditional format.</span></span>
      type:
      - string
- uid: excel.Excel.ConditionalFormatCollection.getItemAt
  summary: >-
    <span data-ttu-id="ab21b-120">Gibt ein bedingtes Format am angegebenen Index zurück.</span><span class="sxs-lookup"><span data-stu-id="ab21b-120">Returns a conditional format at the given index.</span></span>


    <span data-ttu-id="ab21b-121">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab21b-121">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: excel.Excel.ConditionalFormatCollection.getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ab21b-122\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"ab21b-122\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormats = range.conditionalFormats;\n    var conditionalFormat = conditionalFormats.getItemAt(3);\n    return ctx.sync().then(function () {\n        console.log(\"Conditional Format at Item 3 Loaded\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    $(\"#conditional-formats li\").remove();\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            let $p = $(\"<p></p>\").text(\n                `${item.cf.type}`)\n            let $li = $(`<li></li>`);\n            $li.append($p);\n            $(\"#conditional-formats\").append($li);\n            $(\".conditional-formats\").show()[0].scrollIntoView();\n        })\n    }\n    else {\n        OfficeHelpers.UI.notify(\"None to display\", \"No conditional formats in workbook\", \"warning\");\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="ab21b-123">Index der abzurufenden bedingte Formate.</span><span class="sxs-lookup"><span data-stu-id="ab21b-123">Index of the conditional formats to be retrieved.</span></span>
      type:
      - number
- uid: excel.Excel.ConditionalFormatCollection.items
  summary: <span data-ttu-id="ab21b-124">Ruft die geladene untergeordnete Elemente in dieser Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="ab21b-124">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: excel.Excel.ConditionalFormatCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.ConditionalFormat[];'
    return:
      type:
      - Excel.ConditionalFormat[]
- uid: excel.Excel.ConditionalFormatCollection.load
  summary: <span data-ttu-id="ab21b-125">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="ab21b-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="ab21b-126">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="ab21b-126">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="ab21b-127">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="ab21b-127">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="ab21b-128">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class="sxs-lookup"><span data-stu-id="ab21b-128">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="ab21b-129">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection`-Nur auf Auflistungstypen verfügbar.</span><span class="sxs-lookup"><span data-stu-id="ab21b-129">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection` - Only available on collection types.</span></span> <span data-ttu-id="ab21b-130">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class="sxs-lookup"><span data-stu-id="ab21b-130">It is similar to the preceding signature.</span></span> <span data-ttu-id="ab21b-131">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class="sxs-lookup"><span data-stu-id="ab21b-131">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="ab21b-132">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ab21b-132">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="ab21b-133">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class="sxs-lookup"><span data-stu-id="ab21b-133">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: excel.Excel.ConditionalFormatCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="ab21b-134">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="ab21b-134">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.ConditionalFormatCollection.toJSON
  name: toJSON()
  fullName: excel.Excel.ConditionalFormatCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.ConditionalFormatCollectionData
      description: ''
