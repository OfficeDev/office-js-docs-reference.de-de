### YamlMime:UniversalReference
ms.openlocfilehash: 8bbd4592bbafb147c6938c71ac2a32bf2e5f1588
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/13/2019
ms.locfileid: "29981094"
items:
- uid: excel.Excel.ConditionalFormatCollection
  summary: >-
    <span data-ttu-id="392ec-101">Stelle eine Sammlung aller bedingte Formate dar, die den Bereich überlappen.</span><span class="sxs-lookup"><span data-stu-id="392ec-101">Represents a collection of all the conditional formats that are overlap the range.</span></span>


    <span data-ttu-id="392ec-102">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="392ec-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.ConditionalFormatCollection
  fullName: Excel.ConditionalFormatCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.ConditionalFormatCollection.add
  - excel.Excel.ConditionalFormatCollection.add_1
  - excel.Excel.ConditionalFormatCollection.clearAll
  - excel.Excel.ConditionalFormatCollection.context
  - excel.Excel.ConditionalFormatCollection.getCount
  - excel.Excel.ConditionalFormatCollection.getItem
  - excel.Excel.ConditionalFormatCollection.getItemAt
  - excel.Excel.ConditionalFormatCollection.items
  - excel.Excel.ConditionalFormatCollection.load
  - excel.Excel.ConditionalFormatCollection.load_1
  - excel.Excel.ConditionalFormatCollection.load_2
  - excel.Excel.ConditionalFormatCollection.toJSON
- uid: excel.Excel.ConditionalFormatCollection.add
  summary: >-
    <span data-ttu-id="392ec-103">Fügt ein neues bedingtes Format der Auflistung an die erste oben Priorität.</span><span class="sxs-lookup"><span data-stu-id="392ec-103">Adds a new conditional format to the collection at the first/top priority.</span></span>


    <span data-ttu-id="392ec-104">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="392ec-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(type)
  fullName: add(type)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"392ec-105\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"392ec-105\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);\n    conditionalFormat.iconOrNull.style = \"YellowThreeArrows\";\n    return ctx.sync().then(function () {\n        console.log(\"Added new yellow three arrow icon set.\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
    parameters:
    - id: type
      description: <span data-ttu-id="392ec-106">Der Typ der bedingten Formatierung hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="392ec-106">The type of conditional format being added.</span></span> <span data-ttu-id="392ec-107">Einzelheiten finden Sie unter Excel.ConditionalFormatType.</span><span class="sxs-lookup"><span data-stu-id="392ec-107">See Excel.ConditionalFormatType for details.</span></span>
      type:
      - excel.Excel.ConditionalFormatType
- uid: excel.Excel.ConditionalFormatCollection.add_1
  summary: >-
    <span data-ttu-id="392ec-108">Fügt ein neues bedingtes Format der Auflistung an die erste oben Priorität.</span><span class="sxs-lookup"><span data-stu-id="392ec-108">Adds a new conditional format to the collection at the first/top priority.</span></span>


    <span data-ttu-id="392ec-109">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="392ec-109">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(typeString)
  fullName: add(typeString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: ''
    parameters:
    - id: typeString
      description: <span data-ttu-id="392ec-110">Der Typ der bedingten Formatierung hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="392ec-110">The type of conditional format being added.</span></span> <span data-ttu-id="392ec-111">Einzelheiten finden Sie unter Excel.ConditionalFormatType.</span><span class="sxs-lookup"><span data-stu-id="392ec-111">See Excel.ConditionalFormatType for details.</span></span>
      type:
      - "\"Custom\" | \"DataBar\" | \"ColorScale\" | \"IconSet\" | \"TopBottom\" | \"PresetCriteria\" | \"ContainsText\" | \"CellValue\""
- uid: excel.Excel.ConditionalFormatCollection.clearAll
  summary: >-
    <span data-ttu-id="392ec-112">Löscht alle bedingten Formate, die im aktuellen angegebenen Bereich aktiv sind.</span><span class="sxs-lookup"><span data-stu-id="392ec-112">Clears all conditional formats active on the current specified range.</span></span>


    <span data-ttu-id="392ec-113">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="392ec-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: clearAll()
  fullName: clearAll()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clearAll(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"392ec-114\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"392ec-114\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormats = range.conditionalFormats;\n    var conditionalFormat = conditionalFormats.clearAll();\n    return ctx.sync().then(function () {\n        console.log(\"Cleared all conditional formats from this range.\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange();\n    range.conditionalFormats.clearAll();\n\n    await context.sync();\n\n    $(\".conditional-formats\").hide();\n});\n```"
- uid: excel.Excel.ConditionalFormatCollection.context
  summary: <span data-ttu-id="392ec-115">Der Anforderungskontext-zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="392ec-115">The request context associated with the object.</span></span> <span data-ttu-id="392ec-116">Dadurch wird das Add-in Prozess mit der Office-hostanwendung Prozess verbunden.</span><span class="sxs-lookup"><span data-stu-id="392ec-116">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.ConditionalFormatCollection.getCount
  summary: >-
    <span data-ttu-id="392ec-p104">Gibt die Anzahl der bedingten Formate in der Arbeitsmappe zurück. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="392ec-p104">Returns the number of conditional formats in the workbook. Read-only.</span></span>


    <span data-ttu-id="392ec-119">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="392ec-119">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"392ec-120\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"392ec-120\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);\n    conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;\n    var cfCount = range.conditionalFormats.getCount(); \n\n    return ctx.sync().then(function () {\n        console.log(\"Count: \" + cfCount.value);\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.ConditionalFormatCollection.getItem
  summary: >-
    <span data-ttu-id="392ec-121">Gibt ein bedingtes Format für die angegebene ID zurück.</span><span class="sxs-lookup"><span data-stu-id="392ec-121">Returns a conditional format for the given ID.</span></span>


    <span data-ttu-id="392ec-122">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="392ec-122">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(id)
  fullName: getItem(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: >-
        <span data-ttu-id="392ec-123">Bedingte Format-Objekt.</span><span class="sxs-lookup"><span data-stu-id="392ec-123">Conditional Format object.</span></span>

        #### <a name="examples"></a><span data-ttu-id="392ec-124">Beispiele</span><span class="sxs-lookup"><span data-stu-id="392ec-124">Examples</span></span>


        ```javascript

        Excel.run(function (ctx) {
            var sheetName = "Sheet1";
            var rangeAddress = "A1:C3";
            var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
            var conditionalFormats = range.conditionalFormats;
            var conditionalFormat = conditionalFormats.getItemAt(3);
            return ctx.sync().then(function () {
                console.log("Conditional Format at Item 3 Loaded");
            });
        }).catch(function (error) {
            console.log("Error: " + error);
            if (error instanceof OfficeExtension.Error) {
                console.log("Debug info: " + JSON.stringify(error.debugInfo));
            }
        });

        ```
    parameters:
    - id: id
      description: <span data-ttu-id="392ec-125">Die Id der bedingten Formatierung.</span><span class="sxs-lookup"><span data-stu-id="392ec-125">The id of the conditional format.</span></span>
      type:
      - string
- uid: excel.Excel.ConditionalFormatCollection.getItemAt
  summary: >-
    <span data-ttu-id="392ec-126">Gibt ein bedingtes Format am angegebenen Index zurück.</span><span class="sxs-lookup"><span data-stu-id="392ec-126">Returns a conditional format at the given index.</span></span>


    <span data-ttu-id="392ec-127">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="392ec-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: getItemAt(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"392ec-128\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"392ec-128\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var conditionalFormats = range.conditionalFormats;\n    var conditionalFormat = conditionalFormats.getItemAt(3);\n    return ctx.sync().then(function () {\n        console.log(\"Conditional Format at Item 3 Loaded\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="392ec-129">Index der abzurufenden bedingte Formate.</span><span class="sxs-lookup"><span data-stu-id="392ec-129">Index of the conditional formats to be retrieved.</span></span>
      type:
      - number
- uid: excel.Excel.ConditionalFormatCollection.items
  summary: <span data-ttu-id="392ec-130">Ruft die geladene untergeordnete Elemente in dieser Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="392ec-130">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.ConditionalFormat[];'
    return:
      type:
      - Excel.ConditionalFormat[]
- uid: excel.Excel.ConditionalFormatCollection.load
  summary: <span data-ttu-id="392ec-131">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="392ec-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="392ec-132">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="392ec-132">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="392ec-133">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="392ec-133">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="392ec-134">`load(option?: string | string[]): Excel.ConditionalFormatCollection`-Wo Option ist eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="392ec-134">`load(option?: string | string[]): Excel.ConditionalFormatCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="392ec-135">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class="sxs-lookup"><span data-stu-id="392ec-135">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="392ec-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection`-Nur auf Auflistungstypen verfügbar.</span><span class="sxs-lookup"><span data-stu-id="392ec-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection` - Only available on collection types.</span></span> <span data-ttu-id="392ec-137">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class="sxs-lookup"><span data-stu-id="392ec-137">It is similar to the preceding signature.</span></span> <span data-ttu-id="392ec-138">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class="sxs-lookup"><span data-stu-id="392ec-138">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="392ec-139">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="392ec-139">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="392ec-140">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class="sxs-lookup"><span data-stu-id="392ec-140">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.ConditionalFormatCollection.load_1
  summary: <span data-ttu-id="392ec-141">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="392ec-141">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="392ec-142">Sie müssen Aufrufen `context.sync()` vor dem Lesen der Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="392ec-142">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
      description: ''
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="392ec-143">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="392ec-143">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.ConditionalFormatCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.ConditionalFormatCollection.toJSON
  summary: <span data-ttu-id="392ec-144">Überschreibt das JavaScript `toJSON()` Methode, um nützliche Ausgabe zu gewährleisten, wenn ein API-Objekt zu übergeben ist `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="392ec-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="392ec-145">(`JSON.stringify`<!-- -->, wiederum die `toJSON` -Methode des Objekts, das es übergeben wird.) Während der ursprünglichen `Excel.ConditionalFormatCollection` Objekt ist ein API-Objekt der `toJSON` -Methode gibt eine einfache JavaScript-Objekt zurück (als `Excel.Interfaces.ConditionalFormatCollectionData` <!-- -->), die ein Array "Elemente" mit flache Kopien der geladenen Eigenschaften aus der Auflistung von Elementen enthält.</span><span class="sxs-lookup"><span data-stu-id="392ec-145">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.ConditionalFormatCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.ConditionalFormatCollectionData
      description: ''
