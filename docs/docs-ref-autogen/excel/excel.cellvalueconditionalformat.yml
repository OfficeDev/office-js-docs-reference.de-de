### YamlMime:UniversalReference
ms.openlocfilehash: 4f2b829dd16c3cff010ca550f88b9148de40208c
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 11/09/2018
ms.locfileid: "26229060"
items:
- uid: excel.Excel.CellValueConditionalFormat
  summary: >-
    <span data-ttu-id="a2b9a-101">Stellt ein bedingtes Format für Zellenwerte dar.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-101">Represents a cell value conditional format.</span></span>


    <span data-ttu-id="a2b9a-102">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a2b9a-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.CellValueConditionalFormat
  fullName: Excel.CellValueConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CellValueConditionalFormat.format
  - excel.Excel.CellValueConditionalFormat.load
  - excel.Excel.CellValueConditionalFormat.rule
  - excel.Excel.CellValueConditionalFormat.toJSON
- uid: excel.Excel.CellValueConditionalFormat.format
  summary: >-
    <span data-ttu-id="a2b9a-103">Gibt ein Formatobjekt, das die Schriftart bedingte Formate, Füllung, Rahmen und andere Eigenschaften zurück.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-103">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.</span></span>


    <span data-ttu-id="a2b9a-104">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a2b9a-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: format
  fullName: format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.ConditionalRangeFormat;'
    return:
      type:
      - excel.Excel.ConditionalRangeFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a2b9a-105\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a2b9a-105\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CellValueConditionalFormat.load
  summary: <span data-ttu-id="a2b9a-106">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-106">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a2b9a-107">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-107">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="a2b9a-108">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="a2b9a-108">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="a2b9a-109">`load(option?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-109">`load(option?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="a2b9a-110">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CellValueConditionalFormat`-Nur auf Auflistungstypen verfügbar.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-110">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CellValueConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="a2b9a-111">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-111">It is similar to the preceding signature.</span></span> <span data-ttu-id="a2b9a-112">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-112">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a2b9a-113">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-113">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a2b9a-114">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-114">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="a2b9a-115">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-115">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.CellValueConditionalFormat.rule
  summary: >-
    <span data-ttu-id="a2b9a-116">Stellt das Regelobjekt in diesem bedingte Format dar.</span><span class="sxs-lookup"><span data-stu-id="a2b9a-116">Represents the Rule object on this conditional format.</span></span>


    <span data-ttu-id="a2b9a-117">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a2b9a-117">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rule
  fullName: rule
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rule: Excel.ConditionalCellValueRule;'
    return:
      type:
      - excel.Excel.ConditionalCellValueRule
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a2b9a-118\">Examples</span><span class=\"sxs-lookup\"><span data-stu-id=\"a2b9a-118\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CellValueConditionalFormat.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CellValueConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.CellValueConditionalFormatData
      description: ''
