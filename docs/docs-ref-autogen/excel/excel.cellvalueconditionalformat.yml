### YamlMime:UniversalReference
ms.openlocfilehash: 4f2b829dd16c3cff010ca550f88b9148de40208c
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 11/09/2018
ms.locfileid: "26229060"
items:
- uid: excel.Excel.CellValueConditionalFormat
  summary: >-
    Stellt ein bedingtes Format für Zellenwerte dar.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.CellValueConditionalFormat
  fullName: Excel.CellValueConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CellValueConditionalFormat.format
  - excel.Excel.CellValueConditionalFormat.load
  - excel.Excel.CellValueConditionalFormat.rule
  - excel.Excel.CellValueConditionalFormat.toJSON
- uid: excel.Excel.CellValueConditionalFormat.format
  summary: >-
    Gibt ein Formatobjekt, das die Schriftart bedingte Formate, Füllung, Rahmen und andere Eigenschaften zurück.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: format
  fullName: format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.ConditionalRangeFormat;'
    return:
      type:
      - excel.Excel.ConditionalRangeFormat
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CellValueConditionalFormat.load
  summary: Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.
  remarks: >-
    Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:


    `load(option?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CellValueConditionalFormat`-Nur auf Auflistungstypen verfügbar. Es ist ähnlich wie die jeweils vorhergehende Signatur. Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können. Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen. Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
      description: ''
    parameters:
    - id: option
      description: Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.
      type:
      - string | string[]
- uid: excel.Excel.CellValueConditionalFormat.rule
  summary: >-
    Stellt das Regelobjekt in diesem bedingte Format dar.


    \[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: rule
  fullName: rule
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rule: Excel.ConditionalCellValueRule;'
    return:
      type:
      - excel.Excel.ConditionalCellValueRule
      description: "\n#### <a name=\"examples\"></a>Examples\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CellValueConditionalFormat.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CellValueConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.CellValueConditionalFormatData
      description: ''
