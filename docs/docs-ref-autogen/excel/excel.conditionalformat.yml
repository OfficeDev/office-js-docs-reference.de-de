### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ConditionalFormat
    summary: |-
      <span data-ttu-id="af1a1-101">Ein Objekt, das den Range, das Format, die Regel und andere Eigenschaften eines bedingten Formats kapselt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-101">An object encapsulating a conditional format's range, format, rule, and other properties.</span></span>

      <span data-ttu-id="af1a1-102">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.ConditionalFormat
    fullName: Excel.ConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.ConditionalFormat.cellValue
      - excel.Excel.ConditionalFormat.cellValueOrNullObject
      - excel.Excel.ConditionalFormat.colorScale
      - excel.Excel.ConditionalFormat.colorScaleOrNullObject
      - excel.Excel.ConditionalFormat.context
      - excel.Excel.ConditionalFormat.custom
      - excel.Excel.ConditionalFormat.customOrNullObject
      - excel.Excel.ConditionalFormat.dataBar
      - excel.Excel.ConditionalFormat.dataBarOrNullObject
      - excel.Excel.ConditionalFormat.delete
      - excel.Excel.ConditionalFormat.getRange
      - excel.Excel.ConditionalFormat.getRangeOrNullObject
      - excel.Excel.ConditionalFormat.getRanges
      - excel.Excel.ConditionalFormat.iconSet
      - excel.Excel.ConditionalFormat.iconSetOrNullObject
      - excel.Excel.ConditionalFormat.id
      - excel.Excel.ConditionalFormat.load
      - excel.Excel.ConditionalFormat.load_1
      - excel.Excel.ConditionalFormat.load_2
      - excel.Excel.ConditionalFormat.preset
      - excel.Excel.ConditionalFormat.presetOrNullObject
      - excel.Excel.ConditionalFormat.priority
      - excel.Excel.ConditionalFormat.set
      - excel.Excel.ConditionalFormat.set_1
      - excel.Excel.ConditionalFormat.stopIfTrue
      - excel.Excel.ConditionalFormat.textComparison
      - excel.Excel.ConditionalFormat.textComparisonOrNullObject
      - excel.Excel.ConditionalFormat.toJSON
      - excel.Excel.ConditionalFormat.topBottom
      - excel.Excel.ConditionalFormat.topBottomOrNullObject
      - excel.Excel.ConditionalFormat.type
  - uid: excel.Excel.ConditionalFormat.cellValue
    summary: |-
      <span data-ttu-id="af1a1-103">Gibt die Eigenschaften des bedingten Formats für Zellenwerte zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen cellvalue-Typ handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-103">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="af1a1-104">Zum Beispiel zum Formatieren aller Zellen zwischen 5 und 10.</span><span class="sxs-lookup"><span data-stu-id="af1a1-104">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="af1a1-105">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-105">Read-only.</span></span>

      <span data-ttu-id="af1a1-106">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-106">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellValue
    fullName: cellValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af1a1-107">Beispiele</span><span class="sxs-lookup"><span data-stu-id="af1a1-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.cellValueOrNullObject
    summary: |-
      <span data-ttu-id="af1a1-108">Gibt die Eigenschaften des bedingten Formats für Zellenwerte zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen cellvalue-Typ handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-108">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="af1a1-109">Zum Beispiel zum Formatieren aller Zellen zwischen 5 und 10.</span><span class="sxs-lookup"><span data-stu-id="af1a1-109">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="af1a1-110">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-110">Read-only.</span></span>

      <span data-ttu-id="af1a1-111">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellValueOrNullObject
    fullName: cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
  - uid: excel.Excel.ConditionalFormat.colorScale
    summary: |-
      <span data-ttu-id="af1a1-112">Gibt die ColorScale-bedingten Formateigenschaften zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen ColorScale-Typ handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-112">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.</span></span> <span data-ttu-id="af1a1-113">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-113">Read-only.</span></span>

      <span data-ttu-id="af1a1-114">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-114">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: colorScale
    fullName: colorScale
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - excel.Excel.ColorScaleConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af1a1-115">Beispiele</span><span class="sxs-lookup"><span data-stu-id="af1a1-115">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.colorScaleOrNullObject
    summary: |-
      <span data-ttu-id="af1a1-116">Gibt die ColorScale-bedingten Formateigenschaften zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen ColorScale-Typ handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-116">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.</span></span> <span data-ttu-id="af1a1-117">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-117">Read-only.</span></span>

      <span data-ttu-id="af1a1-118">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-118">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: colorScaleOrNullObject
    fullName: colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - excel.Excel.ColorScaleConditionalFormat
  - uid: excel.Excel.ConditionalFormat.context
    summary: <span data-ttu-id="af1a1-119">Der dem Objekt zugeordnete Anforderungskontext.</span><span class="sxs-lookup"><span data-stu-id="af1a1-119">The request context associated with the object.</span></span> <span data-ttu-id="af1a1-120">Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="af1a1-120">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel.Excel.ConditionalFormat.custom
    summary: |-
      <span data-ttu-id="af1a1-121">Gibt die benutzerdefinierten bedingten Formateigenschaften zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen benutzerdefinierten Typ handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-121">Returns the custom conditional format properties if the current conditional format is a custom type.</span></span> <span data-ttu-id="af1a1-122">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-122">Read-only.</span></span>

      <span data-ttu-id="af1a1-123">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-123">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type:
          - excel.Excel.CustomConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af1a1-124">Beispiele</span><span class="sxs-lookup"><span data-stu-id="af1a1-124">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.customOrNullObject
    summary: |-
      <span data-ttu-id="af1a1-125">Gibt die benutzerdefinierten bedingten Formateigenschaften zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen benutzerdefinierten Typ handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-125">Returns the custom conditional format properties if the current conditional format is a custom type.</span></span> <span data-ttu-id="af1a1-126">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-126">Read-only.</span></span>

      <span data-ttu-id="af1a1-127">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: customOrNullObject
    fullName: customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type:
          - excel.Excel.CustomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.dataBar
    summary: |-
      <span data-ttu-id="af1a1-128">Gibt die Datenbalken Eigenschaften zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen Datenbalken handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-128">Returns the data bar properties if the current conditional format is a data bar.</span></span> <span data-ttu-id="af1a1-129">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-129">Read-only.</span></span>

      <span data-ttu-id="af1a1-130">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-130">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataBar
    fullName: dataBar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type:
          - excel.Excel.DataBarConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af1a1-131">Beispiele</span><span class="sxs-lookup"><span data-stu-id="af1a1-131">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.dataBarOrNullObject
    summary: |-
      <span data-ttu-id="af1a1-132">Gibt die Datenbalken Eigenschaften zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen Datenbalken handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-132">Returns the data bar properties if the current conditional format is a data bar.</span></span> <span data-ttu-id="af1a1-133">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-133">Read-only.</span></span>

      <span data-ttu-id="af1a1-134">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-134">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataBarOrNullObject
    fullName: dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type:
          - excel.Excel.DataBarConditionalFormat
  - uid: excel.Excel.ConditionalFormat.delete
    summary: |-
      <span data-ttu-id="af1a1-135">Löscht dieses bedingte Format.</span><span class="sxs-lookup"><span data-stu-id="af1a1-135">Deletes this conditional format.</span></span>

      <span data-ttu-id="af1a1-136">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-136">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.ConditionalFormat.getRange
    summary: |-
      <span data-ttu-id="af1a1-137">Gibt den Bereich zurück, auf den das bedingte Format angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="af1a1-137">Returns the range the conditonal format is applied to.</span></span> <span data-ttu-id="af1a1-138">Löst einen Fehler aus, wenn die bedingte Formatierung auf mehrere Bereiche angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="af1a1-138">Throws an error if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="af1a1-139">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-139">Read-only.</span></span>

      <span data-ttu-id="af1a1-140">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-140">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af1a1-141">Beispiele</span><span class="sxs-lookup"><span data-stu-id="af1a1-141">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
  - uid: excel.Excel.ConditionalFormat.getRangeOrNullObject
    summary: |-
      <span data-ttu-id="af1a1-142">Gibt den Bereich zurück, auf den das bedingte-Format angewendet wird, oder ein NULL-Objekt, wenn die bedingte Formatierung auf mehrere Bereiche angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="af1a1-142">Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="af1a1-143">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-143">Read-only.</span></span>

      <span data-ttu-id="af1a1-144">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-144">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.ConditionalFormat.getRanges
    summary: |-
      <span data-ttu-id="af1a1-145">Gibt die RangeAreas zurück, die einen oder mehrere rechteckige Bereiche umfassen und auf die das bedingte Format angewendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="af1a1-145">Returns the RangeAreas, comprising one or more rectangular ranges, the conditonal format is applied to.</span></span> <span data-ttu-id="af1a1-146">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-146">Read-only.</span></span>

      <span data-ttu-id="af1a1-147">\[[API-Satz: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-147">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRanges()
    fullName: getRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
  - uid: excel.Excel.ConditionalFormat.iconSet
    summary: |-
      <span data-ttu-id="af1a1-148">Gibt die Eigenschaften des bedingten Formats Iconset zurück, wenn die aktuelle bedingte Formatierung ein Iconset-Typ ist.</span><span class="sxs-lookup"><span data-stu-id="af1a1-148">Returns the IconSet conditional format properties if the current conditional format is an IconSet type.</span></span> <span data-ttu-id="af1a1-149">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-149">Read-only.</span></span>

      <span data-ttu-id="af1a1-150">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-150">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iconSet
    fullName: iconSet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af1a1-151">Beispiele</span><span class="sxs-lookup"><span data-stu-id="af1a1-151">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.iconSetOrNullObject
    summary: |-
      <span data-ttu-id="af1a1-152">Gibt die Eigenschaften des bedingten Formats Iconset zurück, wenn die aktuelle bedingte Formatierung ein Iconset-Typ ist.</span><span class="sxs-lookup"><span data-stu-id="af1a1-152">Returns the IconSet conditional format properties if the current conditional format is an IconSet type.</span></span> <span data-ttu-id="af1a1-153">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-153">Read-only.</span></span>

      <span data-ttu-id="af1a1-154">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-154">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iconSetOrNullObject
    fullName: iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
  - uid: excel.Excel.ConditionalFormat.id
    summary: |-
      <span data-ttu-id="af1a1-155">Die Priorität des bedingten Formats in der aktuellen ConditionalFormatCollection.</span><span class="sxs-lookup"><span data-stu-id="af1a1-155">The Priority of the Conditional Format within the current ConditionalFormatCollection.</span></span> <span data-ttu-id="af1a1-156">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-156">Read-only.</span></span>

      <span data-ttu-id="af1a1-157">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-157">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.ConditionalFormat.load
    summary: <span data-ttu-id="af1a1-158">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="af1a1-158">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="af1a1-159">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="af1a1-159">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="af1a1-160">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="af1a1-160">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="af1a1-161">`load(option?: string | string[]): Excel.ConditionalFormat`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="af1a1-161">`load(option?: string | string[]): Excel.ConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="af1a1-162">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-162">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="af1a1-163">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`-Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="af1a1-163">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="af1a1-164">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="af1a1-164">It is similar to the preceding signature.</span></span> <span data-ttu-id="af1a1-165">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können.</span><span class="sxs-lookup"><span data-stu-id="af1a1-165">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="af1a1-166">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="af1a1-166">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="af1a1-167">Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.</span><span class="sxs-lookup"><span data-stu-id="af1a1-167">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.ConditionalFormatLoadOptions
  - uid: excel.Excel.ConditionalFormat.load_1
    summary: <span data-ttu-id="af1a1-168">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="af1a1-168">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="af1a1-169">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="af1a1-169">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="af1a1-170">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="af1a1-170">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.ConditionalFormat.load_2
    summary: <span data-ttu-id="af1a1-171">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="af1a1-171">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="af1a1-172">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="af1a1-172">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="af1a1-173">Wobei propertyNamesAndPaths. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-173">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.ConditionalFormat.preset
    summary: |-
      <span data-ttu-id="af1a1-174">Gibt die bedingten Formatierungskriterien zurück.</span><span class="sxs-lookup"><span data-stu-id="af1a1-174">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="af1a1-175">Weitere Informationen finden Sie unter Excel. PresetCriteriaConditionalFormat.</span><span class="sxs-lookup"><span data-stu-id="af1a1-175">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>

      <span data-ttu-id="af1a1-176">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-176">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: preset
    fullName: preset
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - excel.Excel.PresetCriteriaConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af1a1-177">Beispiele</span><span class="sxs-lookup"><span data-stu-id="af1a1-177">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.presetOrNullObject
    summary: |-
      <span data-ttu-id="af1a1-178">Gibt die bedingten Formatierungskriterien zurück.</span><span class="sxs-lookup"><span data-stu-id="af1a1-178">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="af1a1-179">Weitere Informationen finden Sie unter Excel. PresetCriteriaConditionalFormat.</span><span class="sxs-lookup"><span data-stu-id="af1a1-179">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>

      <span data-ttu-id="af1a1-180">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-180">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: presetOrNullObject
    fullName: presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - excel.Excel.PresetCriteriaConditionalFormat
  - uid: excel.Excel.ConditionalFormat.priority
    summary: |-
      <span data-ttu-id="af1a1-181">Die Priorität (oder der Index) innerhalb der bedingten Format Auflistung, in der sich dieses bedingte Format derzeit befindet.</span><span class="sxs-lookup"><span data-stu-id="af1a1-181">The priority (or index) within the conditional format collection that this conditional format currently exists in.</span></span> <span data-ttu-id="af1a1-182">Wenn Sie dies ändern, werden auch die Prioritäten anderer bedingter Formate geändert, um eine zusammenhängende Prioritätsreihenfolge zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="af1a1-182">Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order.</span></span> <span data-ttu-id="af1a1-183">Verwenden Sie eine negative Priorität, um von hinten zu beginnen.</span><span class="sxs-lookup"><span data-stu-id="af1a1-183">Use a negative priority to begin from the back.</span></span> <span data-ttu-id="af1a1-184">Prioritäten, die größer als Grenzen sind, werden auf die maximale (oder minimale) Priorität festgelegt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-184">Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.</span></span> <span data-ttu-id="af1a1-185">Beachten Sie, dass beim Ändern der Priorität eine neue Kopie des Objekts an diesem neuen Prioritäts Speicherort erneut abgerufen werden muss, wenn Sie weitere Änderungen vornehmen möchten.</span><span class="sxs-lookup"><span data-stu-id="af1a1-185">Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it.</span></span> <span data-ttu-id="af1a1-186">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-186">Read-only.</span></span>

      <span data-ttu-id="af1a1-187">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-187">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: priority
    fullName: priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: excel.Excel.ConditionalFormat.set
    summary: '<span data-ttu-id="af1a1-188">Legt mehrere Eigenschaften eines Objekts gleichzeitig fest.</span><span class="sxs-lookup"><span data-stu-id="af1a1-188">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="af1a1-189">Sie können entweder ein plain-Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs weitergeben.</span><span class="sxs-lookup"><span data-stu-id="af1a1-189">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="af1a1-190">Diese Methode hat die folgende zusätzliche Signatur:</span><span class="sxs-lookup"><span data-stu-id="af1a1-190">This method has the following additional signature:</span></span>

      `set(properties: Excel.ConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="af1a1-191">Ein JavaScript-Objekt mit Eigenschaften, die isomorphically strukturiert sind, um die Eigenschaften des Objekts, für das die Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="af1a1-191">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - Interfaces.ConditionalFormatUpdateData
        - id: options
          description: '<span data-ttu-id="af1a1-192">Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.</span><span class="sxs-lookup"><span data-stu-id="af1a1-192">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel.Excel.ConditionalFormat.set_1
    summary: '<span data-ttu-id="af1a1-193">Legt mehrere Eigenschaften für das Objekt auf der Grundlage eines vorhandenen geladenen Objekts zur gleichen Zeit fest.</span><span class="sxs-lookup"><span data-stu-id="af1a1-193">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.ConditionalFormat
  - uid: excel.Excel.ConditionalFormat.stopIfTrue
    summary: |-
      <span data-ttu-id="af1a1-194">Wenn die Bedingungen dieses bedingten Formats erfüllt sind, werden keine Formate niedrigerer Priorität für diese Zelle wirksam.</span><span class="sxs-lookup"><span data-stu-id="af1a1-194">If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.</span></span> <span data-ttu-id="af1a1-195">NULL für Datenbalken, Symbolsätze und colorscales, da kein Konzept von StopIfTrue für diese</span><span class="sxs-lookup"><span data-stu-id="af1a1-195">Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these</span></span>

      <span data-ttu-id="af1a1-196">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-196">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: stopIfTrue
    fullName: stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.ConditionalFormat.textComparison
    summary: |-
      <span data-ttu-id="af1a1-197">Gibt die spezifischen bedingten Formateigenschaften für Text zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen Texttyp handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-197">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="af1a1-198">Zum Beispiel zum Formatieren von Zellen, die mit dem Wort "Text" übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="af1a1-198">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="af1a1-199">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-199">Read-only.</span></span>

      <span data-ttu-id="af1a1-200">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-200">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textComparison
    fullName: textComparison
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type:
          - excel.Excel.TextConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af1a1-201">Beispiele</span><span class="sxs-lookup"><span data-stu-id="af1a1-201">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.textComparisonOrNullObject
    summary: |-
      <span data-ttu-id="af1a1-202">Gibt die spezifischen bedingten Formateigenschaften für Text zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen Texttyp handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-202">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="af1a1-203">Zum Beispiel zum Formatieren von Zellen, die mit dem Wort "Text" übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="af1a1-203">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="af1a1-204">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-204">Read-only.</span></span>

      <span data-ttu-id="af1a1-205">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-205">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textComparisonOrNullObject
    fullName: textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type:
          - excel.Excel.TextConditionalFormat
  - uid: excel.Excel.ConditionalFormat.toJSON
    summary: '<span data-ttu-id="af1a1-206">Überschreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API-Objekt an`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="af1a1-206">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="af1a1-207">.</span><span class="sxs-lookup"><span data-stu-id="af1a1-207"></span></span> <span data-ttu-id="af1a1-208">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="af1a1-208"></span></span><!-- --><span data-ttu-id="af1a1-209">Ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche Excel. ConditionalFormat-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt zurück (typisiert als`Excel.Interfaces.ConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="af1a1-209">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.ConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatData`</span></span><!-- --><span data-ttu-id="af1a1-210">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="af1a1-210">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
      return:
        type:
          - excel.Excel.Interfaces.ConditionalFormatData
        description: ''
  - uid: excel.Excel.ConditionalFormat.topBottom
    summary: |-
      <span data-ttu-id="af1a1-211">Gibt die Eigenschaften des bedingten Formats des oberen/unteren Rands zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen untersten Typ handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-211">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="af1a1-212">Zum Beispiel zum Formatieren der oberen 10% oder unten 10 Elemente.</span><span class="sxs-lookup"><span data-stu-id="af1a1-212">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="af1a1-213">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-213">Read-only.</span></span>

      <span data-ttu-id="af1a1-214">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-214">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: topBottom
    fullName: topBottom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - excel.Excel.TopBottomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.topBottomOrNullObject
    summary: |-
      <span data-ttu-id="af1a1-215">Gibt die Eigenschaften des bedingten Formats des oberen/unteren Rands zurück, wenn es sich bei der aktuellen bedingten Formatierung um einen untersten Typ handelt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-215">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="af1a1-216">Zum Beispiel zum Formatieren der oberen 10% oder unten 10 Elemente.</span><span class="sxs-lookup"><span data-stu-id="af1a1-216">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="af1a1-217">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-217">Read-only.</span></span>

      <span data-ttu-id="af1a1-218">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-218">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: topBottomOrNullObject
    fullName: topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - excel.Excel.TopBottomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.type
    summary: |-
      <span data-ttu-id="af1a1-219">Eine Art bedingtes Format.</span><span class="sxs-lookup"><span data-stu-id="af1a1-219">A type of conditional format.</span></span> <span data-ttu-id="af1a1-220">Es kann jeweils nur eine festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="af1a1-220">Only one can be set at a time.</span></span> <span data-ttu-id="af1a1-221">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="af1a1-221">Read-only.</span></span>

      <span data-ttu-id="af1a1-222">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="af1a1-222">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
      return:
        type:
          - Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af1a1-223">Beispiele</span><span class="sxs-lookup"><span data-stu-id="af1a1-223">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```