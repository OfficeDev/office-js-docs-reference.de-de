### YamlMime:UniversalReference
ms.openlocfilehash: ed066d7937d44f5784c1e0b58ab1cc71e4488322
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/28/2018
ms.locfileid: "24046777"
items:
- uid: excel.Excel.ConditionalFormat
  summary: >-
    <span data-ttu-id="7fbcd-101">Ein Objekt, das den Bereich, das Format, die Regel und andere Eigenschaften eines bedingten Formats kapselt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-101">An object encapsulating a conditional format's range, format, rule, and other properties.</span></span>


    <span data-ttu-id="7fbcd-102">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-102">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.ConditionalFormat
  fullName: excel.Excel.ConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.ConditionalFormat.cellValue
  - excel.Excel.ConditionalFormat.cellValueOrNullObject
  - excel.Excel.ConditionalFormat.colorScale
  - excel.Excel.ConditionalFormat.colorScaleOrNullObject
  - excel.Excel.ConditionalFormat.custom
  - excel.Excel.ConditionalFormat.customOrNullObject
  - excel.Excel.ConditionalFormat.dataBar
  - excel.Excel.ConditionalFormat.dataBarOrNullObject
  - excel.Excel.ConditionalFormat.delete
  - excel.Excel.ConditionalFormat.getRange
  - excel.Excel.ConditionalFormat.getRangeOrNullObject
  - excel.Excel.ConditionalFormat.iconSet
  - excel.Excel.ConditionalFormat.iconSetOrNullObject
  - excel.Excel.ConditionalFormat.id
  - excel.Excel.ConditionalFormat.load
  - excel.Excel.ConditionalFormat.preset
  - excel.Excel.ConditionalFormat.presetOrNullObject
  - excel.Excel.ConditionalFormat.priority
  - excel.Excel.ConditionalFormat.stopIfTrue
  - excel.Excel.ConditionalFormat.textComparison
  - excel.Excel.ConditionalFormat.textComparisonOrNullObject
  - excel.Excel.ConditionalFormat.toJSON
  - excel.Excel.ConditionalFormat.topBottom
  - excel.Excel.ConditionalFormat.topBottomOrNullObject
  - excel.Excel.ConditionalFormat.type
- uid: excel.Excel.ConditionalFormat.cellValue
  summary: >-
    <span data-ttu-id="7fbcd-103">Gibt die Zelle Werteigenschaften bedingtes Format zurück, wenn die aktuelle bedingte Formatierung ein CellValue-Typ ist.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-103">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="7fbcd-104">Beispielsweise alle Zellen zwischen 5 und 10 formatieren.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-104">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="7fbcd-105">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-105">Read-only.</span></span>


    <span data-ttu-id="7fbcd-106">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-106">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellValue
  fullName: excel.Excel.ConditionalFormat.cellValue
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7fbcd-107\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"7fbcd-107\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.cellValueOrNullObject
  summary: >-
    <span data-ttu-id="7fbcd-108">Gibt die Zelle Werteigenschaften bedingtes Format zurück, wenn die aktuelle bedingte Formatierung ein CellValue-Typ ist.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-108">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="7fbcd-109">Beispielsweise alle Zellen zwischen 5 und 10 formatieren.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-109">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="7fbcd-110">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-110">Read-only.</span></span>


    <span data-ttu-id="7fbcd-111">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-111">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellValueOrNullObject
  fullName: excel.Excel.ConditionalFormat.cellValueOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
- uid: excel.Excel.ConditionalFormat.colorScale
  summary: >-
    <span data-ttu-id="7fbcd-p103">Gibt die ColorScale-Eigenschaften des bedingten Formats zurück, wenn das aktuelle bedingte Format einen ColorScale-Typ aufweist. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-p103">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.</span></span>


    <span data-ttu-id="7fbcd-114">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-114">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: colorScale
  fullName: excel.Excel.ConditionalFormat.colorScale
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
    return:
      type:
      - excel.Excel.ColorScaleConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7fbcd-115\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"7fbcd-115\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.colorScaleOrNullObject
  summary: >-
    <span data-ttu-id="7fbcd-p104">Gibt die ColorScale-Eigenschaften des bedingten Formats zurück, wenn das aktuelle bedingte Format einen ColorScale-Typ aufweist. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-p104">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.</span></span>


    <span data-ttu-id="7fbcd-118">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-118">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: colorScaleOrNullObject
  fullName: excel.Excel.ConditionalFormat.colorScaleOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
    return:
      type:
      - excel.Excel.ColorScaleConditionalFormat
- uid: excel.Excel.ConditionalFormat.custom
  summary: >-
    <span data-ttu-id="7fbcd-p105">Gibt die benutzerdefinierten Eigenschaften des bedingten Formats zurück, wenn das aktuelle bedingte Format einen custom-Typ aufweist. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-p105">Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.</span></span>


    <span data-ttu-id="7fbcd-121">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-121">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: custom
  fullName: excel.Excel.ConditionalFormat.custom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly custom: Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7fbcd-122\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"7fbcd-122\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.customOrNullObject
  summary: >-
    <span data-ttu-id="7fbcd-p106">Gibt die benutzerdefinierten Eigenschaften des bedingten Formats zurück, wenn das aktuelle bedingte Format einen custom-Typ aufweist. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-p106">Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.</span></span>


    <span data-ttu-id="7fbcd-125">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-125">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: customOrNullObject
  fullName: excel.Excel.ConditionalFormat.customOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
- uid: excel.Excel.ConditionalFormat.dataBar
  summary: >-
    <span data-ttu-id="7fbcd-p107">Gibt die Datenbalkeneigenschaften zurück, wenn das aktuelle bedingte Format ein Datenbalken ist. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-p107">Returns the data bar properties if the current conditional format is a data bar. Read-only.</span></span>


    <span data-ttu-id="7fbcd-128">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-128">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataBar
  fullName: excel.Excel.ConditionalFormat.dataBar
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
    return:
      type:
      - excel.Excel.DataBarConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7fbcd-129\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"7fbcd-129\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.dataBar);\n    conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.dataBarOrNullObject
  summary: >-
    <span data-ttu-id="7fbcd-p108">Gibt die Datenbalkeneigenschaften zurück, wenn das aktuelle bedingte Format ein Datenbalken ist. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-p108">Returns the data bar properties if the current conditional format is a data bar. Read-only.</span></span>


    <span data-ttu-id="7fbcd-132">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-132">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataBarOrNullObject
  fullName: excel.Excel.ConditionalFormat.dataBarOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
    return:
      type:
      - excel.Excel.DataBarConditionalFormat
- uid: excel.Excel.ConditionalFormat.delete
  summary: >-
    <span data-ttu-id="7fbcd-133">Löscht dieses bedingte Format.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-133">Deletes this conditional format.</span></span>


    <span data-ttu-id="7fbcd-134">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-134">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: excel.Excel.ConditionalFormat.delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.ConditionalFormat.getRange
  summary: >-
    <span data-ttu-id="7fbcd-135">Gibt den Bereich zurück, auf den das bedingte Format angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-135">Returns the range the conditonal format is applied to.</span></span> <span data-ttu-id="7fbcd-136">Löst einen Fehler aus, wenn die bedingte Formatierung auf mehrere Bereiche angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-136">Throws an error if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="7fbcd-137">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-137">Read-only.</span></span>


    <span data-ttu-id="7fbcd-138">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-138">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange()
  fullName: excel.Excel.ConditionalFormat.getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7fbcd-139\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"7fbcd-139\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    $(\"#conditional-formats li\").remove();\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            let $p = $(\"<p></p>\").text(\n                `${item.cf.type}`)\n            let $li = $(`<li></li>`);\n            $li.append($p);\n            $(\"#conditional-formats\").append($li);\n            $(\".conditional-formats\").show()[0].scrollIntoView();\n        })\n    }\n    else {\n        OfficeHelpers.UI.notify(\"None to display\", \"No conditional formats in workbook\", \"warning\");\n    }\n});\n```"
- uid: excel.Excel.ConditionalFormat.getRangeOrNullObject
  summary: >-
    <span data-ttu-id="7fbcd-140">Gibt den Bereich an, auf dem das Format Conditonal angewendet wird, oder ein null-Objekt zurück, wenn die bedingte Formatierung auf mehrere Bereiche angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-140">Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="7fbcd-141">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-141">Read-only.</span></span>


    <span data-ttu-id="7fbcd-142">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-142">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeOrNullObject()
  fullName: excel.Excel.ConditionalFormat.getRangeOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeOrNullObject(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.ConditionalFormat.iconSet
  summary: >-
    <span data-ttu-id="7fbcd-p111">Gibt die IconSet-Eigenschaften des bedingten Formats zurück, wenn das aktuelle bedingte Format einen IconSet-Typ aufweist. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-p111">Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.</span></span>


    <span data-ttu-id="7fbcd-145">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-145">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: iconSet
  fullName: excel.Excel.ConditionalFormat.iconSet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
    return:
      type:
      - excel.Excel.IconSetConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7fbcd-146\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"7fbcd-146\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.iconSet);\n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n\n    /*\n        The iconSetCF.criteria array is automatically prepopulated with\n        criterion elements whose properties have been given default settings.\n        You can't write to each property of a criterion directly. Instead,\n        replace the whole criteria object.\n\n        With a \"three*\" icon set style, such as \"threeTriangles\", the third\n        element in the criteria array (criteria[2]) defines the \"top\" icon;\n        e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n        icon, The first (criteria[0]) defines the \"low\" icon, but it\n        can often be left empty as this method does below, because every\n        cell that does not match the other two criteria always gets the low\n        icon.            \n    */\n    iconSetCF.criteria = [\n        {} as any,\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=700\"\n        },\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=1000\",\n        }\n    ];\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.iconSetOrNullObject
  summary: >-
    <span data-ttu-id="7fbcd-p112">Gibt die IconSet-Eigenschaften des bedingten Formats zurück, wenn das aktuelle bedingte Format einen IconSet-Typ aufweist. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-p112">Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.</span></span>


    <span data-ttu-id="7fbcd-149">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-149">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: iconSetOrNullObject
  fullName: excel.Excel.ConditionalFormat.iconSetOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
    return:
      type:
      - excel.Excel.IconSetConditionalFormat
- uid: excel.Excel.ConditionalFormat.id
  summary: >-
    <span data-ttu-id="7fbcd-150">Die Priorität der bedingten Formatierung in der aktuellen ConditionalFormatCollection.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-150">The Priority of the Conditional Format within the current ConditionalFormatCollection.</span></span> <span data-ttu-id="7fbcd-151">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-151">Read-only.</span></span>


    <span data-ttu-id="7fbcd-152">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-152">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: excel.Excel.ConditionalFormat.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.ConditionalFormat.load
  summary: <span data-ttu-id="7fbcd-153">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-153">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="7fbcd-154">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-154">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="7fbcd-155">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="7fbcd-155">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="7fbcd-156">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-156">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="7fbcd-157">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`-Nur auf Auflistungstypen verfügbar.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-157">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="7fbcd-158">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-158">It is similar to the preceding signature.</span></span> <span data-ttu-id="7fbcd-159">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-159">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="7fbcd-160">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-160">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="7fbcd-161">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-161">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: excel.Excel.ConditionalFormat.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="7fbcd-162">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-162">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.ConditionalFormat.preset
  summary: >-
    <span data-ttu-id="7fbcd-163">Gibt die bedingte Formatierung voreingestellten Kriterien zurück.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-163">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="7fbcd-164">Einzelheiten finden Sie unter Excel.PresetCriteriaConditionalFormat.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-164">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>


    <span data-ttu-id="7fbcd-165">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-165">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: preset
  fullName: excel.Excel.ConditionalFormat.preset
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
    return:
      type:
      - excel.Excel.PresetCriteriaConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7fbcd-166\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"7fbcd-166\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.presetCriteria);\n    conditionalFormat.preset.format.font.color = \"white\";\n    conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.presetOrNullObject
  summary: >-
    <span data-ttu-id="7fbcd-167">Gibt die bedingte Formatierung voreingestellten Kriterien zurück.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-167">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="7fbcd-168">Einzelheiten finden Sie unter Excel.PresetCriteriaConditionalFormat.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-168">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>


    <span data-ttu-id="7fbcd-169">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-169">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: presetOrNullObject
  fullName: excel.Excel.ConditionalFormat.presetOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
    return:
      type:
      - excel.Excel.PresetCriteriaConditionalFormat
- uid: excel.Excel.ConditionalFormat.priority
  summary: >-
    <span data-ttu-id="7fbcd-170">Der Priorität (oder Index) in der bedingten Formatierung-Auflistung, die diese bedingte format derzeit ist in vorhanden.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-170">The priority (or index) within the conditional format collection that this conditional format currently exists in.</span></span> <span data-ttu-id="7fbcd-171">Dies ändern, ändert sich auch andere bedingte Formate Prioritäten, um einen zusammenhängenden Prioritätsreihenfolge zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-171">Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order.</span></span> <span data-ttu-id="7fbcd-172">Verwenden Sie eine negative Priorität auf der Rückseite beginnen.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-172">Use a negative priority to begin from the back.</span></span> <span data-ttu-id="7fbcd-173">Größer als Grenzen Prioritäten werden abrufen und Festlegen der Priorität maximalen (oder minimalen Wenn negativ).</span><span class="sxs-lookup"><span data-stu-id="7fbcd-173">Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.</span></span> <span data-ttu-id="7fbcd-174">Wenn Sie die Priorität ändern, müssen Sie eine neue Kopie des Objekts an diesem Speicherort der neuen Priorität erneut abzurufen, wenn Sie weitere machen möchten ändert sich ebenfalls hinzu.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-174">Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it.</span></span> <span data-ttu-id="7fbcd-175">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-175">Read-only.</span></span>


    <span data-ttu-id="7fbcd-176">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-176">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: priority
  fullName: excel.Excel.ConditionalFormat.priority
  langs:
  - typeScript
  type: property
  syntax:
    content: 'priority: number;'
    return:
      type:
      - number
- uid: excel.Excel.ConditionalFormat.stopIfTrue
  summary: >-
    <span data-ttu-id="7fbcd-177">Wenn die Bedingungen dieses bedingten Formats erfüllt sind, werden keine Formate niedrigerer Priorität für diese Zelle wirksam.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-177">If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.</span></span> <span data-ttu-id="7fbcd-178">Wie es kein Konzept von StopIfTrue für diese gibt Databars, Symbolsätze und Colorscales null</span><span class="sxs-lookup"><span data-stu-id="7fbcd-178">Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these</span></span>


    <span data-ttu-id="7fbcd-179">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-179">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: stopIfTrue
  fullName: excel.Excel.ConditionalFormat.stopIfTrue
  langs:
  - typeScript
  type: property
  syntax:
    content: 'stopIfTrue: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.ConditionalFormat.textComparison
  summary: >-
    <span data-ttu-id="7fbcd-180">Der bestimmten Text erste bedingte Format der Eigenschaften die aktuelle bedingte Formatierung einen Textfeldtyp wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-180">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="7fbcd-181">Beispiel zum Formatieren von Zellen für die Suche nach Übereinstimmungen das Wort "Text".</span><span class="sxs-lookup"><span data-stu-id="7fbcd-181">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="7fbcd-182">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-182">Read-only.</span></span>


    <span data-ttu-id="7fbcd-183">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-183">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: textComparison
  fullName: excel.Excel.ConditionalFormat.textComparison
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly textComparison: Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7fbcd-184\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"7fbcd-184\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.textComparisonOrNullObject
  summary: >-
    <span data-ttu-id="7fbcd-185">Der bestimmten Text erste bedingte Format der Eigenschaften die aktuelle bedingte Formatierung einen Textfeldtyp wird zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-185">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="7fbcd-186">Beispiel zum Formatieren von Zellen für die Suche nach Übereinstimmungen das Wort "Text".</span><span class="sxs-lookup"><span data-stu-id="7fbcd-186">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="7fbcd-187">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-187">Read-only.</span></span>


    <span data-ttu-id="7fbcd-188">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-188">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: textComparisonOrNullObject
  fullName: excel.Excel.ConditionalFormat.textComparisonOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
- uid: excel.Excel.ConditionalFormat.toJSON
  name: toJSON()
  fullName: excel.Excel.ConditionalFormat.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.ConditionalFormatData
      description: ''
- uid: excel.Excel.ConditionalFormat.topBottom
  summary: >-
    <span data-ttu-id="7fbcd-189">Die oben/unten bedingtes Format-Eigenschaften zurückgegeben, wenn die aktuelle bedingte Formatierung ein TopBottom-Typ ist.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-189">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="7fbcd-190">Beispielsweise zum Formatieren der obersten 10 % oder die letzte 10 Elemente.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-190">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="7fbcd-191">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-191">Read-only.</span></span>


    <span data-ttu-id="7fbcd-192">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-192">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: topBottom
  fullName: excel.Excel.ConditionalFormat.topBottom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
    return:
      type:
      - excel.Excel.TopBottomConditionalFormat
- uid: excel.Excel.ConditionalFormat.topBottomOrNullObject
  summary: >-
    <span data-ttu-id="7fbcd-193">Die oben/unten bedingtes Format-Eigenschaften zurückgegeben, wenn die aktuelle bedingte Formatierung ein TopBottom-Typ ist.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-193">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="7fbcd-194">Beispielsweise zum Formatieren der obersten 10 % oder die letzte 10 Elemente.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-194">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="7fbcd-195">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-195">Read-only.</span></span>


    <span data-ttu-id="7fbcd-196">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-196">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: topBottomOrNullObject
  fullName: excel.Excel.ConditionalFormat.topBottomOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
    return:
      type:
      - excel.Excel.TopBottomConditionalFormat
- uid: excel.Excel.ConditionalFormat.type
  summary: >-
    <span data-ttu-id="7fbcd-197">Ein Typ von bedingten Formatierung.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-197">A type of conditional format.</span></span> <span data-ttu-id="7fbcd-198">Zu einem Zeitpunkt kann nur festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-198">Only one can be set at a time.</span></span> <span data-ttu-id="7fbcd-199">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="7fbcd-199">Read-only.</span></span>


    <span data-ttu-id="7fbcd-200">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7fbcd-200">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: type
  fullName: excel.Excel.ConditionalFormat.type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
    return:
      type:
      - Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"7fbcd-201\">Examples</span><span class=\"sxs-lookup\"><span data-stu-id=\"7fbcd-201\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    $(\"#conditional-formats li\").remove();\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            let $p = $(\"<p></p>\").text(\n                `${item.cf.type}`)\n            let $li = $(`<li></li>`);\n            $li.append($p);\n            $(\"#conditional-formats\").append($li);\n            $(\".conditional-formats\").show()[0].scrollIntoView();\n        })\n    }\n    else {\n        OfficeHelpers.UI.notify(\"None to display\", \"No conditional formats in workbook\", \"warning\");\n    }\n});\n```"
