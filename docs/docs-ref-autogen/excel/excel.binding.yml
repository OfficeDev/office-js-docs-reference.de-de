### YamlMime:UniversalReference
ms.openlocfilehash: d868de0bd4b05b310086bcc6cc0d2f7f3080a55e
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/28/2018
ms.locfileid: "24046584"
items:
- uid: excel.Excel.Binding
  summary: >-
    <span data-ttu-id="f0a35-101">Stellt eine Office.js-Bindung dar, die in der Arbeitsmappe definiert wird.</span><span class="sxs-lookup"><span data-stu-id="f0a35-101">Represents an Office.js binding that is defined in the workbook.</span></span>


    <span data-ttu-id="f0a35-102">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f0a35-102">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.Binding
  fullName: excel.Excel.Binding
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Binding.delete
  - excel.Excel.Binding.getRange
  - excel.Excel.Binding.getTable
  - excel.Excel.Binding.getText
  - excel.Excel.Binding.id
  - excel.Excel.Binding.load
  - excel.Excel.Binding.onDataChanged
  - excel.Excel.Binding.onSelectionChanged
  - excel.Excel.Binding.toJSON
  - excel.Excel.Binding.type
- uid: excel.Excel.Binding.delete
  summary: >-
    <span data-ttu-id="f0a35-103">Löscht die Bindung.</span><span class="sxs-lookup"><span data-stu-id="f0a35-103">Deletes the binding.</span></span>


    <span data-ttu-id="f0a35-104">\[[API-Satz: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f0a35-104">\[ [API set: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: excel.Excel.Binding.delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Binding.getRange
  summary: >-
    <span data-ttu-id="f0a35-p101">Gibt den durch die Bindung dargestellten Bereich zurück. Gibt einen Fehler zurück, wenn die Bindung nicht den korrekten Typ aufweist.</span><span class="sxs-lookup"><span data-stu-id="f0a35-p101">Returns the range represented by the binding. Will throw an error if binding is not of the correct type.</span></span>


    <span data-ttu-id="f0a35-107">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f0a35-107">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange()
  fullName: excel.Excel.Binding.getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f0a35-108\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-108\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var binding = ctx.workbook.bindings.getItemAt(0);\n    var range = binding.getRange();\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Binding.getTable
  summary: >-
    <span data-ttu-id="f0a35-p102">Gibt die durch die Bindung dargestellte Tabelle zurück. Gibt einen Fehler zurück, wenn die Bindung nicht den korrekten Typ aufweist.</span><span class="sxs-lookup"><span data-stu-id="f0a35-p102">Returns the table represented by the binding. Will throw an error if binding is not of the correct type.</span></span>


    <span data-ttu-id="f0a35-111">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f0a35-111">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getTable()
  fullName: excel.Excel.Binding.getTable
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTable(): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f0a35-112\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-112\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var binding = ctx.workbook.bindings.getItemAt(0);\n    var table = binding.getTable();\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Binding.getText
  summary: >-
    <span data-ttu-id="f0a35-p103">Gibt den durch die Bindung dargestellten Text zurück. Gibt einen Fehler zurück, wenn die Bindung nicht den korrekten Typ aufweist.</span><span class="sxs-lookup"><span data-stu-id="f0a35-p103">Returns the text represented by the binding. Will throw an error if binding is not of the correct type.</span></span>


    <span data-ttu-id="f0a35-115">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f0a35-115">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getText()
  fullName: excel.Excel.Binding.getText
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getText(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f0a35-116\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-116\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var binding = ctx.workbook.bindings.getItemAt(0);\n    var text = binding.getText();\n    binding.load('text');\n    return ctx.sync().then(function() {\n        console.log(text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Binding.id
  summary: >-
    <span data-ttu-id="f0a35-p104">Stellt die Bindungs-ID dar. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="f0a35-p104">Represents binding identifier. Read-only.</span></span>


    <span data-ttu-id="f0a35-119">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f0a35-119">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: excel.Excel.Binding.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.Binding.load
  summary: <span data-ttu-id="f0a35-120">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="f0a35-120">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f0a35-121">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="f0a35-121">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"f0a35-122\">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-122\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"f0a35-123\">`load(option?: { select?: string; expand?: string; }): Excel.Binding`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-123\">`load(option?: { select?: string; expand?: string; }): Excel.Binding` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"f0a35-124\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding`-Nur auf Auflistungstypen verfügbar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-124\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding` - Only available on collection types.</span></span> <span data-ttu-id=\"f0a35-125\">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-125\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"f0a35-126\">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-126\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"f0a35-127\">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-127\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"f0a35-128\">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-128\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"f0a35-129\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-129\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var binding = ctx.workbook.bindings.getItemAt(0);\n    binding.load('type');\n    return ctx.sync().then(function() {\n        console.log(binding.type);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: excel.Excel.Binding.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="f0a35-130">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="f0a35-130">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Binding.onDataChanged
  summary: >-
    <span data-ttu-id="f0a35-131">Tritt ein, wenn die Daten oder die Formatierung in der Datenbindung geändert werden.</span><span class="sxs-lookup"><span data-stu-id="f0a35-131">Occurs when data or formatting within the binding is changed.</span></span>


    <span data-ttu-id="f0a35-132">\[[API-Satz: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f0a35-132">\[ [API set: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDataChanged
  fullName: excel.Excel.Binding.onDataChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDataChanged: OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f0a35-133\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"f0a35-133\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");    \n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const salesByQuarterBinding = context.workbook.bindings.add(salesTable.getRange(), \"Table\", \"SalesByQuarter\");\n    salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);\n\n    OfficeHelpers.UI.notify(\"The handler is registered.\", \"Change the value in one of the data cells and watch this message banner. (Be sure to complete the edit by pressing Enter or clicking in another cell.)\");\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Binding.onSelectionChanged
  summary: >-
    <span data-ttu-id="f0a35-134">Tritt auf, wenn der ausgewählte Inhalt in der Bindung geändert wird.</span><span class="sxs-lookup"><span data-stu-id="f0a35-134">Occurs when the selected content in the binding is changed.</span></span>


    <span data-ttu-id="f0a35-135">\[[API-Satz: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f0a35-135">\[ [API set: ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onSelectionChanged
  fullName: excel.Excel.Binding.onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>
- uid: excel.Excel.Binding.toJSON
  name: toJSON()
  fullName: excel.Excel.Binding.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.BindingData;'
    return:
      type:
      - excel.Excel.Interfaces.BindingData
      description: ''
- uid: excel.Excel.Binding.type
  summary: >-
    <span data-ttu-id="f0a35-136">Gibt den Typ der Bindung.</span><span class="sxs-lookup"><span data-stu-id="f0a35-136">Returns the type of the binding.</span></span> <span data-ttu-id="f0a35-137">Einzelheiten finden Sie unter Excel.BindingType.</span><span class="sxs-lookup"><span data-stu-id="f0a35-137">See Excel.BindingType for details.</span></span> <span data-ttu-id="f0a35-138">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="f0a35-138">Read-only.</span></span>


    <span data-ttu-id="f0a35-139">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f0a35-139">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: type
  fullName: excel.Excel.Binding.type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: Excel.BindingType | "Range" | "Table" | "Text";'
    return:
      type:
      - Excel.BindingType | "Range" | "Table" | "Text"
