### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Binding
    summary: |-
      <span data-ttu-id="2b3b3-101">Stellt eine Office.js-Bindung dar, die in der Arbeitsmappe definiert wird.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-101">Represents an Office.js binding that is defined in the workbook.</span></span>

      <span data-ttu-id="2b3b3-102">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2b3b3-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Binding
    fullName: Excel.Binding
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.Binding.context
      - excel.Excel.Binding.delete
      - excel.Excel.Binding.getRange
      - excel.Excel.Binding.getTable
      - excel.Excel.Binding.getText
      - excel.Excel.Binding.id
      - excel.Excel.Binding.load
      - excel.Excel.Binding.load_1
      - excel.Excel.Binding.load_2
      - excel.Excel.Binding.onDataChanged
      - excel.Excel.Binding.onSelectionChanged
      - excel.Excel.Binding.toJSON
      - excel.Excel.Binding.type
  - uid: excel.Excel.Binding.context
    summary: <span data-ttu-id="2b3b3-103">Der dem Objekt zugeordnete Anforderungskontext.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-103">The request context associated with the object.</span></span> <span data-ttu-id="2b3b3-104">Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel.Excel.Binding.delete
    summary: |-
      <span data-ttu-id="2b3b3-105">Löscht die Bindung.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-105">Deletes the binding.</span></span>

      <span data-ttu-id="2b3b3-106">\[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2b3b3-106">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Binding.getRange
    summary: |-
      <span data-ttu-id="2b3b3-107">Gibt den durch die Bindung dargestellten Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-107">Returns the range represented by the binding.</span></span> <span data-ttu-id="2b3b3-108">Gibt einen Fehler zurück, wenn die Bindung nicht den korrekten Typ aufweist.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-108">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="2b3b3-109">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2b3b3-109">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="2b3b3-110">Beispiele</span><span class="sxs-lookup"><span data-stu-id="2b3b3-110">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var range = binding.getRange();
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.getTable
    summary: |-
      <span data-ttu-id="2b3b3-111">Gibt die durch die Bindung dargestellte Tabelle zurück.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-111">Returns the table represented by the binding.</span></span> <span data-ttu-id="2b3b3-112">Gibt einen Fehler zurück, wenn die Bindung nicht den korrekten Typ aufweist.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-112">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="2b3b3-113">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2b3b3-113">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTable()
    fullName: getTable()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTable(): Excel.Table;'
      return:
        type:
          - excel.Excel.Table
        description: |-


          #### <a name="examples"></a><span data-ttu-id="2b3b3-114">Beispiele</span><span class="sxs-lookup"><span data-stu-id="2b3b3-114">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var table = binding.getTable();
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.getText
    summary: |-
      <span data-ttu-id="2b3b3-115">Gibt den durch die Bindung dargestellten Text zurück.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-115">Returns the text represented by the binding.</span></span> <span data-ttu-id="2b3b3-116">Gibt einen Fehler zurück, wenn die Bindung nicht den korrekten Typ aufweist.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-116">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="2b3b3-117">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2b3b3-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getText()
    fullName: getText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getText(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="2b3b3-118">Beispiele</span><span class="sxs-lookup"><span data-stu-id="2b3b3-118">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var text = binding.getText();
              binding.load('text');
              return ctx.sync().then(function() {
                  console.log(text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.id
    summary: |-
      <span data-ttu-id="2b3b3-119">Stellt die Bindungs-ID dar.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-119">Represents binding identifier.</span></span> <span data-ttu-id="2b3b3-120">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-120">Read-only.</span></span>

      <span data-ttu-id="2b3b3-121">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2b3b3-121">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Binding.load
    summary: <span data-ttu-id="2b3b3-122">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-122">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="2b3b3-123">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-123">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="2b3b3-124">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="2b3b3-124">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="2b3b3-125">`load(option?: string | string[]): Excel.Binding`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-125">`load(option?: string | string[]): Excel.Binding` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="2b3b3-126">`load(option?: { select?: string; expand?: string; }): Excel.Binding`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-126">`load(option?: { select?: string; expand?: string; }): Excel.Binding` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="2b3b3-127">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding`-Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-127">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding` - Only available on collection types.</span></span> <span data-ttu-id="2b3b3-128">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-128">It is similar to the preceding signature.</span></span> <span data-ttu-id="2b3b3-129">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-129">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="2b3b3-130">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-130">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="2b3b3-131">Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-131">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.BindingLoadOptions): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.BindingLoadOptions
  - uid: excel.Excel.Binding.load_1
    summary: <span data-ttu-id="2b3b3-132">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-132">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="2b3b3-133">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-133">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: |-


          #### <a name="examples"></a><span data-ttu-id="2b3b3-134">Beispiele</span><span class="sxs-lookup"><span data-stu-id="2b3b3-134">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              binding.load('type');
              return ctx.sync().then(function() {
                  console.log(binding.type);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="2b3b3-135">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-135">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.Binding.load_2
    summary: <span data-ttu-id="2b3b3-136">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="2b3b3-137">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-137">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="2b3b3-138">Wobei propertyNamesAndPaths. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-138">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Binding.onDataChanged
    summary: |-
      <span data-ttu-id="2b3b3-139">Tritt ein, wenn die Daten oder die Formatierung in der Datenbindung geändert werden.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-139">Occurs when data or formatting within the binding is changed.</span></span>

      <span data-ttu-id="2b3b3-140">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2b3b3-140">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDataChanged
    fullName: onDataChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDataChanged: OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="2b3b3-141">Beispiele</span><span class="sxs-lookup"><span data-stu-id="2b3b3-141">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");    
              const salesTable = sheet.tables.getItem("SalesTable");
              const salesByQuarterBinding = context.workbook.bindings.add(salesTable.getRange(), "Table", "SalesByQuarter");
              salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);

              console.log("The data changed handler is registered.");

              await context.sync();
          });
          ```
  - uid: excel.Excel.Binding.onSelectionChanged
    summary: |-
      <span data-ttu-id="2b3b3-142">Tritt auf, wenn der ausgewählte Inhalt in der Bindung geändert wird.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-142">Occurs when the selected content in the binding is changed.</span></span>

      <span data-ttu-id="2b3b3-143">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2b3b3-143">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>
  - uid: excel.Excel.Binding.toJSON
    summary: '<span data-ttu-id="2b3b3-144">ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API-Objekt an`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="2b3b3-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="2b3b3-145">.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-145"></span></span> <span data-ttu-id="2b3b3-146">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="2b3b3-146"></span></span><!-- --><span data-ttu-id="2b3b3-147">Ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche Excel. Binding-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt zurück (typisiert als`Excel.Interfaces.BindingData`</span><span class="sxs-lookup"><span data-stu-id="2b3b3-147">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Binding object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingData`</span></span><!-- --><span data-ttu-id="2b3b3-148">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-148">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingData;'
      return:
        type:
          - excel.Excel.Interfaces.BindingData
        description: ''
  - uid: excel.Excel.Binding.type
    summary: |-
      <span data-ttu-id="2b3b3-149">Gibt den Typ der Bindung an.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-149">Returns the type of the binding.</span></span> <span data-ttu-id="2b3b3-150">Weitere Informationen finden Sie unter Excel. BindingType.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-150">See Excel.BindingType for details.</span></span> <span data-ttu-id="2b3b3-151">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="2b3b3-151">Read-only.</span></span>

      <span data-ttu-id="2b3b3-152">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2b3b3-152">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.BindingType | "Range" | "Table" | "Text";'
      return:
        type:
          - Excel.BindingType | "Range" | "Table" | "Text"