### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPart:class'
    summary: |-
      <span data-ttu-id="39c5a-101">Stellt ein benutzerdefiniertes XML-Part-Objekt in einer Arbeitsmappe dar.</span><span class="sxs-lookup"><span data-stu-id="39c5a-101">Represents a custom XML part object in a workbook.</span></span>

      <span data-ttu-id="39c5a-102">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="39c5a-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPart
    fullName: Excel.CustomXmlPart
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPart#context:member'
      - 'excel!Excel.CustomXmlPart#delete:member(1)'
      - 'excel!Excel.CustomXmlPart#getXml:member(1)'
      - 'excel!Excel.CustomXmlPart#id:member'
      - 'excel!Excel.CustomXmlPart#load:member(1)'
      - 'excel!Excel.CustomXmlPart#load:member(2)'
      - 'excel!Excel.CustomXmlPart#load:member(3)'
      - 'excel!Excel.CustomXmlPart#namespaceUri:member'
      - 'excel!Excel.CustomXmlPart#setXml:member(1)'
      - 'excel!Excel.CustomXmlPart#toJSON:member(1)'
  - uid: 'excel!Excel.CustomXmlPart#context:member'
    summary: '<span data-ttu-id="39c5a-103">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="39c5a-103">The request context associated with the object.</span></span> <span data-ttu-id="39c5a-104">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="39c5a-104">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomXmlPart#delete:member(1)'
    summary: |-
      <span data-ttu-id="39c5a-105">Löscht die benutzerdefinierte XML-Komponente.</span><span class="sxs-lookup"><span data-stu-id="39c5a-105">Deletes the custom XML part.</span></span>

      <span data-ttu-id="39c5a-106">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="39c5a-106">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="39c5a-107">Beispiele</span><span class="sxs-lookup"><span data-stu-id="39c5a-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
  - uid: 'excel!Excel.CustomXmlPart#getXml:member(1)'
    summary: |-
      <span data-ttu-id="39c5a-108">Ruft den vollständigen XML-Inhalt der benutzerdefinierten XML-Komponente ab.</span><span class="sxs-lookup"><span data-stu-id="39c5a-108">Gets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="39c5a-109">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="39c5a-109">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getXml()
    fullName: getXml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart#getXml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="39c5a-110">Beispiele</span><span class="sxs-lookup"><span data-stu-id="39c5a-110">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPart#id:member'
    summary: |-
      <span data-ttu-id="39c5a-111">Die ID des benutzerdefinierten XML-Teils.</span><span class="sxs-lookup"><span data-stu-id="39c5a-111">The custom XML part's ID.</span></span> <span data-ttu-id="39c5a-112">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="39c5a-112">Read-only.</span></span>

      <span data-ttu-id="39c5a-113">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="39c5a-113">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="39c5a-114">Beispiele</span><span class="sxs-lookup"><span data-stu-id="39c5a-114">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPart#load:member(1)'
    summary: <span data-ttu-id="39c5a-115">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="39c5a-115">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="39c5a-116">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="39c5a-116">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="39c5a-117">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="39c5a-117">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="39c5a-118">`load(option?: string | string[]): Excel.CustomXmlPart`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="39c5a-118">`load(option?: string | string[]): Excel.CustomXmlPart` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="39c5a-119">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="39c5a-119">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="39c5a-120">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart`Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="39c5a-120">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart` - Only available on collection types.</span></span> <span data-ttu-id="39c5a-121">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="39c5a-121">It is similar to the preceding signature.</span></span> <span data-ttu-id="39c5a-122">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können.</span><span class="sxs-lookup"><span data-stu-id="39c5a-122">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="39c5a-123">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="39c5a-123">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="39c5a-124">Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.</span><span class="sxs-lookup"><span data-stu-id="39c5a-124">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartLoadOptions): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.CustomXmlPartLoadOptions:interface'
  - uid: 'excel!Excel.CustomXmlPart#load:member(2)'
    summary: <span data-ttu-id="39c5a-125">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="39c5a-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="39c5a-126">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="39c5a-126">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="39c5a-127">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="39c5a-127">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CustomXmlPart#load:member(3)'
    summary: <span data-ttu-id="39c5a-128">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="39c5a-128">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="39c5a-129">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="39c5a-129">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="39c5a-130">Dabei ist propertyNamesAndPaths. Select eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="39c5a-130">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.CustomXmlPart#namespaceUri:member'
    summary: |-
      <span data-ttu-id="39c5a-131">Der Namespace-URI des benutzerdefinierten XML-Teils.</span><span class="sxs-lookup"><span data-stu-id="39c5a-131">The custom XML part's namespace URI.</span></span> <span data-ttu-id="39c5a-132">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="39c5a-132">Read-only.</span></span>

      <span data-ttu-id="39c5a-133">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="39c5a-133">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: namespaceUri
    fullName: namespaceUri
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly namespaceUri: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.CustomXmlPart#setXml:member(1)'
    summary: |-
      <span data-ttu-id="39c5a-134">Legt den vollständigen XML-Inhalt der benutzerdefinierten XML-Komponente fest.</span><span class="sxs-lookup"><span data-stu-id="39c5a-134">Sets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="39c5a-135">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="39c5a-135">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setXml(xml)
    fullName: setXml(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setXml(xml: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="39c5a-136">Beispiele</span><span class="sxs-lookup"><span data-stu-id="39c5a-136">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="39c5a-137">XML-Inhalt für das Webpart.</span><span class="sxs-lookup"><span data-stu-id="39c5a-137">XML content for the part.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPart#toJSON:member(1)'
    summary: '<span data-ttu-id="39c5a-138">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="39c5a-138">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="39c5a-139">.</span><span class="sxs-lookup"><span data-stu-id="39c5a-139"></span></span> <span data-ttu-id="39c5a-140">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="39c5a-140"></span></span><!-- --><span data-ttu-id="39c5a-141">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Excel. CustomXMLPart-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.CustomXmlPartData`</span><span class="sxs-lookup"><span data-stu-id="39c5a-141">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.CustomXmlPart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartData`</span></span><!-- --><span data-ttu-id="39c5a-142">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="39c5a-142">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CustomXmlPartData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomXmlPart#getXml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.CustomXmlPart:class'
    name: Excel.CustomXmlPart
  - uid: 'excel!Excel.Interfaces.CustomXmlPartLoadOptions:interface'
    name: Excel.Interfaces.CustomXmlPartLoadOptions
  - uid: 'excel!Excel.Interfaces.CustomXmlPartData:interface'
    name: Excel.Interfaces.CustomXmlPartData