### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Range
    summary: |-
      <span data-ttu-id="63e5b-101">Range stellt eine Gruppe von einer oder mehreren zusammenhängenden Zellen dar, wie eine Zelle, eine Zeile, eine Spalte, ein Zellenblock usw. Weitere Informationen zur Verwendung von Bereichen in der API finden Sie unter [Arbeiten mit Bereichen mithilfe der Excel-JavaScript-API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) und [Arbeiten mit Bereichen mithilfe der Excel-JavaScript-API (erweitert)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span><span class="sxs-lookup"><span data-stu-id="63e5b-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id="63e5b-102">.</span><span class="sxs-lookup"><span data-stu-id="63e5b-102"></span></span>

      <span data-ttu-id="63e5b-103">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Range.address
      - excel.Excel.Range.addressLocal
      - excel.Excel.Range.autoFill
      - excel.Excel.Range.autoFill_1
      - excel.Excel.Range.calculate
      - excel.Excel.Range.cellCount
      - excel.Excel.Range.clear
      - excel.Excel.Range.clear_1
      - excel.Excel.Range.columnCount
      - excel.Excel.Range.columnHidden
      - excel.Excel.Range.columnIndex
      - excel.Excel.Range.conditionalFormats
      - excel.Excel.Range.context
      - excel.Excel.Range.convertDataTypeToText
      - excel.Excel.Range.convertToLinkedDataType
      - excel.Excel.Range.copyFrom
      - excel.Excel.Range.copyFrom_1
      - excel.Excel.Range.dataValidation
      - excel.Excel.Range.delete
      - excel.Excel.Range.delete_1
      - excel.Excel.Range.find
      - excel.Excel.Range.findOrNullObject
      - excel.Excel.Range.flashFill
      - excel.Excel.Range.format
      - excel.Excel.Range.formulas
      - excel.Excel.Range.formulasLocal
      - excel.Excel.Range.formulasR1C1
      - excel.Excel.Range.getAbsoluteResizedRange
      - excel.Excel.Range.getBoundingRect
      - excel.Excel.Range.getCell
      - excel.Excel.Range.getCellProperties
      - excel.Excel.Range.getColumn
      - excel.Excel.Range.getColumnProperties
      - excel.Excel.Range.getColumnsAfter
      - excel.Excel.Range.getColumnsBefore
      - excel.Excel.Range.getEntireColumn
      - excel.Excel.Range.getEntireRow
      - excel.Excel.Range.getImage
      - excel.Excel.Range.getIntersection
      - excel.Excel.Range.getIntersectionOrNullObject
      - excel.Excel.Range.getLastCell
      - excel.Excel.Range.getLastColumn
      - excel.Excel.Range.getLastRow
      - excel.Excel.Range.getOffsetRange
      - excel.Excel.Range.getResizedRange
      - excel.Excel.Range.getRow
      - excel.Excel.Range.getRowProperties
      - excel.Excel.Range.getRowsAbove
      - excel.Excel.Range.getRowsBelow
      - excel.Excel.Range.getSpecialCells
      - excel.Excel.Range.getSpecialCells_1
      - excel.Excel.Range.getSpecialCellsOrNullObject
      - excel.Excel.Range.getSpecialCellsOrNullObject_1
      - excel.Excel.Range.getSpillingToRange
      - excel.Excel.Range.getSpillingToRangeOrNullObject
      - excel.Excel.Range.getSpillParent
      - excel.Excel.Range.getSpillParentOrNullObject
      - excel.Excel.Range.getSurroundingRegion
      - excel.Excel.Range.getTables
      - excel.Excel.Range.getUsedRange
      - excel.Excel.Range.getUsedRangeOrNullObject
      - excel.Excel.Range.getVisibleView
      - excel.Excel.Range.group
      - excel.Excel.Range.group_1
      - excel.Excel.Range.hasSpill
      - excel.Excel.Range.height
      - excel.Excel.Range.hidden
      - excel.Excel.Range.hideGroupDetails
      - excel.Excel.Range.hideGroupDetails_1
      - excel.Excel.Range.hyperlink
      - excel.Excel.Range.insert
      - excel.Excel.Range.insert_1
      - excel.Excel.Range.isEntireColumn
      - excel.Excel.Range.isEntireRow
      - excel.Excel.Range.left
      - excel.Excel.Range.linkedDataTypeState
      - excel.Excel.Range.load
      - excel.Excel.Range.load_1
      - excel.Excel.Range.load_2
      - excel.Excel.Range.merge
      - excel.Excel.Range.numberFormat
      - excel.Excel.Range.numberFormatLocal
      - excel.Excel.Range.removeDuplicates
      - excel.Excel.Range.replaceAll
      - excel.Excel.Range.rowCount
      - excel.Excel.Range.rowHidden
      - excel.Excel.Range.rowIndex
      - excel.Excel.Range.savedAsArray
      - excel.Excel.Range.select
      - excel.Excel.Range.set
      - excel.Excel.Range.set_1
      - excel.Excel.Range.setCellProperties
      - excel.Excel.Range.setColumnProperties
      - excel.Excel.Range.setDirty
      - excel.Excel.Range.setRowProperties
      - excel.Excel.Range.showCard
      - excel.Excel.Range.showGroupDetails
      - excel.Excel.Range.showGroupDetails_1
      - excel.Excel.Range.sort
      - excel.Excel.Range.style
      - excel.Excel.Range.text
      - excel.Excel.Range.toJSON
      - excel.Excel.Range.top
      - excel.Excel.Range.track
      - excel.Excel.Range.ungroup
      - excel.Excel.Range.ungroup_1
      - excel.Excel.Range.unmerge
      - excel.Excel.Range.untrack
      - excel.Excel.Range.values
      - excel.Excel.Range.valueTypes
      - excel.Excel.Range.width
      - excel.Excel.Range.worksheet
  - uid: excel.Excel.Range.address
    summary: |-
      <span data-ttu-id="63e5b-104">Stellt den Bereichsverweis im a1-Format dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="63e5b-105">Der Wert der Adresse enthält die Blatt Referenz (z. b. "Sheet1! A1: B4 ").</span><span class="sxs-lookup"><span data-stu-id="63e5b-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="63e5b-106">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-106">Read-only.</span></span>

      <span data-ttu-id="63e5b-107">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Range.addressLocal
    summary: |-
      <span data-ttu-id="63e5b-108">Stellt den Bereichsbezug für den angegebenen Bereich in der Sprache des Benutzers dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-108">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="63e5b-109">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-109">Read-only.</span></span>

      <span data-ttu-id="63e5b-110">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Range.autoFill
    summary: |-
      <span data-ttu-id="63e5b-111">Füllt den Bereich aus dem aktuellen Bereich zum Zielbereich.</span><span class="sxs-lookup"><span data-stu-id="63e5b-111">Fills range from the current range to the destination range.</span></span> <span data-ttu-id="63e5b-112">Der Zielbereich muss die Quelle entweder horizontal oder vertikal erweitern.</span><span class="sxs-lookup"><span data-stu-id="63e5b-112">The destination range must extend the source either horizontally or vertically.</span></span> <span data-ttu-id="63e5b-113">Nicht zusammenhängende Bereiche werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-113">Discontiguous ranges are not supported.</span></span>

      <span data-ttu-id="63e5b-114">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-114">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillType?: Excel.AutoFillType): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: <span data-ttu-id="63e5b-115">Der Zielbereich zum automatischen Ausfüllen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-115">The destination range to autofill.</span></span>
          type:
            - Range | string
        - id: autoFillType
          description: '<span data-ttu-id="63e5b-116">Der Typ des automatischen Ausfüllens.</span><span class="sxs-lookup"><span data-stu-id="63e5b-116">The type of autofill.</span></span> <span data-ttu-id="63e5b-117">Gibt an, wie der Zielbereich basierend auf dem Inhalt des aktuellen Bereichs gefüllt werden soll.</span><span class="sxs-lookup"><span data-stu-id="63e5b-117">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="63e5b-118">Der Standardwert ist "FillDefault".</span><span class="sxs-lookup"><span data-stu-id="63e5b-118">Default is "FillDefault".</span></span>'
          type:
            - excel.Excel.AutoFillType
  - uid: excel.Excel.Range.autoFill_1
    summary: |-
      <span data-ttu-id="63e5b-119">Füllt den Bereich aus dem aktuellen Bereich zum Zielbereich.</span><span class="sxs-lookup"><span data-stu-id="63e5b-119">Fills range from the current range to the destination range.</span></span> <span data-ttu-id="63e5b-120">Der Zielbereich muss die Quelle entweder horizontal oder vertikal erweitern.</span><span class="sxs-lookup"><span data-stu-id="63e5b-120">The destination range must extend the source either horizontally or vertically.</span></span> <span data-ttu-id="63e5b-121">Nicht zusammenhängende Bereiche werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-121">Discontiguous ranges are not supported.</span></span>

      <span data-ttu-id="63e5b-122">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-122">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillTypeString)'
    fullName: 'autoFill(destinationRange, autoFillTypeString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: <span data-ttu-id="63e5b-123">Der Zielbereich zum automatischen Ausfüllen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-123">The destination range to autofill.</span></span>
          type:
            - Range | string
        - id: autoFillTypeString
          description: '<span data-ttu-id="63e5b-124">Der Typ des automatischen Ausfüllens.</span><span class="sxs-lookup"><span data-stu-id="63e5b-124">The type of autofill.</span></span> <span data-ttu-id="63e5b-125">Gibt an, wie der Zielbereich basierend auf dem Inhalt des aktuellen Bereichs gefüllt werden soll.</span><span class="sxs-lookup"><span data-stu-id="63e5b-125">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="63e5b-126">Der Standardwert ist "FillDefault".</span><span class="sxs-lookup"><span data-stu-id="63e5b-126">Default is "FillDefault".</span></span>'
          type:
            - '"FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"'
  - uid: excel.Excel.Range.calculate
    summary: |-
      <span data-ttu-id="63e5b-127">Berechnet einen Zellbereich auf einem Arbeitsblatt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-127">Calculates a range of cells on a worksheet.</span></span>

      <span data-ttu-id="63e5b-128">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-128">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Range.cellCount
    summary: |-
      <span data-ttu-id="63e5b-129">Anzahl der Zellen im Bereich.</span><span class="sxs-lookup"><span data-stu-id="63e5b-129">Number of cells in the range.</span></span> <span data-ttu-id="63e5b-130">Diese API gibt -1 zurück, wenn die Zellenanzahl 2^31-1 (2.147.483.647) überschreitet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-130">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id="63e5b-131">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-131">Read-only.</span></span>

      <span data-ttu-id="63e5b-132">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-132">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.clear
    summary: |-
      <span data-ttu-id="63e5b-133">Löscht Bereichswerte, Format, Füllung, Rahmen usw.</span><span class="sxs-lookup"><span data-stu-id="63e5b-133">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="63e5b-134">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-134">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-135">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-135">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: <span data-ttu-id="63e5b-136">Optional.</span><span class="sxs-lookup"><span data-stu-id="63e5b-136">Optional.</span></span> <span data-ttu-id="63e5b-137">Bestimmt den Typ der Löschaktion.</span><span class="sxs-lookup"><span data-stu-id="63e5b-137">Determines the type of clear action.</span></span> <span data-ttu-id="63e5b-138">Weitere Informationen finden Sie unter Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="63e5b-138">See Excel.ClearApplyTo for details.</span></span>
          type:
            - excel.Excel.ClearApplyTo
  - uid: excel.Excel.Range.clear_1
    summary: |-
      <span data-ttu-id="63e5b-139">Löscht Bereichswerte, Format, Füllung, Rahmen usw.</span><span class="sxs-lookup"><span data-stu-id="63e5b-139">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="63e5b-140">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-140">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: <span data-ttu-id="63e5b-141">Optional.</span><span class="sxs-lookup"><span data-stu-id="63e5b-141">Optional.</span></span> <span data-ttu-id="63e5b-142">Bestimmt den Typ der Löschaktion.</span><span class="sxs-lookup"><span data-stu-id="63e5b-142">Determines the type of clear action.</span></span> <span data-ttu-id="63e5b-143">Weitere Informationen finden Sie unter Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="63e5b-143">See Excel.ClearApplyTo for details.</span></span>
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: excel.Excel.Range.columnCount
    summary: |-
      <span data-ttu-id="63e5b-144">Stellt die Gesamtanzahl der Spalten im Bereich dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-144">Represents the total number of columns in the range.</span></span> <span data-ttu-id="63e5b-145">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-145">Read-only.</span></span>

      <span data-ttu-id="63e5b-146">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-146">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.columnHidden
    summary: |-
      <span data-ttu-id="63e5b-147">Stellt dar, ob alle Spalten des aktuellen Bereichs ausgeblendet sind.</span><span class="sxs-lookup"><span data-stu-id="63e5b-147">Represents if all columns of the current range are hidden.</span></span>

      <span data-ttu-id="63e5b-148">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-148">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.columnIndex
    summary: |-
      <span data-ttu-id="63e5b-149">Stellt die Spaltenanzahl der ersten Zelle im Bereich dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-149">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="63e5b-150">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="63e5b-150">Zero-indexed.</span></span> <span data-ttu-id="63e5b-151">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-151">Read-only.</span></span>

      <span data-ttu-id="63e5b-152">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-152">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.conditionalFormats
    summary: |-
      <span data-ttu-id="63e5b-153">Auflistung von ConditionalFormats, die den Bereich schneidet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-153">Collection of ConditionalFormats that intersect the range.</span></span> <span data-ttu-id="63e5b-154">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-154">Read-only.</span></span>

      <span data-ttu-id="63e5b-155">\[[API-Gruppe: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-155">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - excel.Excel.ConditionalFormatCollection
  - uid: excel.Excel.Range.context
    summary: '<span data-ttu-id="63e5b-156">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="63e5b-156">The request context associated with the object.</span></span> <span data-ttu-id="63e5b-157">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-157">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Range.convertDataTypeToText
    summary: |-
      <span data-ttu-id="63e5b-158">Konvertiert die Zellen mit Datentypen im Bereich in Text.</span><span class="sxs-lookup"><span data-stu-id="63e5b-158">Converts the range cells with datatypes into text.</span></span>

      <span data-ttu-id="63e5b-159">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-159">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Range.convertToLinkedDataType
    summary: |-
      <span data-ttu-id="63e5b-160">Konvertiert die Zellen eines Bereichs auf dem Arbeitsblatt in den verknüpften Datentyp.</span><span class="sxs-lookup"><span data-stu-id="63e5b-160">Converts the range cells into linked datatype in the worksheet.</span></span>

      <span data-ttu-id="63e5b-161">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-161">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: '<span data-ttu-id="63e5b-162">Die Dienst-ID, die zum Abfragen der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="63e5b-162">The Service ID which will be used to query the data.</span></span>'
          type:
            - number
        - id: languageCulture
          description: '<span data-ttu-id="63e5b-163">Sprach Kultur, für die der Dienst abgefragt werden soll.</span><span class="sxs-lookup"><span data-stu-id="63e5b-163">Language Culture to query the service for.</span></span>'
          type:
            - string
  - uid: excel.Excel.Range.copyFrom
    summary: |-
      <span data-ttu-id="63e5b-164">Kopiert Daten oder Formatierung von Zellen aus dem Quellbereich oder RangeAreas in den aktuellen Bereich.</span><span class="sxs-lookup"><span data-stu-id="63e5b-164">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="63e5b-165">Der Zielbereich kann eine andere Größe als der Quellbereich oder RangeAreas haben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-165">The destination range can be of different size than the source range or RangeAreas.</span></span> <span data-ttu-id="63e5b-166">Das Ziel wird automatisch erweitert, wenn es kleiner als die Quelle ist.</span><span class="sxs-lookup"><span data-stu-id="63e5b-166">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="63e5b-167">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-167">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-168">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-168">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          });
          ```
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="63e5b-169">Der Quellbereich oder RangeAreas, aus dem kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="63e5b-169">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="63e5b-170">Wenn die Quell-RangeAreas mehrere Bereiche enthält, muss Sie im Gliederungsformular erstellt werden, indem vollständige Zeilen oder Spalten aus einem rechteckigen Bereich entfernt werden können.</span><span class="sxs-lookup"><span data-stu-id="63e5b-170">When the source RangeAreas has multiple ranges, it must in the outline form which can be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - Range | RangeAreas | string
        - id: copyType
          description: <span data-ttu-id="63e5b-171">Der Typ der zu kopierende Zellendaten oder-Formatierung.</span><span class="sxs-lookup"><span data-stu-id="63e5b-171">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="63e5b-172">Der Standardwert ist "All".</span><span class="sxs-lookup"><span data-stu-id="63e5b-172">Default is "All".</span></span>
          type:
            - excel.Excel.RangeCopyType
        - id: skipBlanks
          description: '<span data-ttu-id="63e5b-173">True, wenn leere Zellen im Quellbereich übersprungen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-173">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="63e5b-174">Default is „false“.</span><span class="sxs-lookup"><span data-stu-id="63e5b-174">Default is false.</span></span>'
          type:
            - boolean
        - id: transpose
          description: '<span data-ttu-id="63e5b-175">True, wenn die Zellen im Zielbereich transponieren.</span><span class="sxs-lookup"><span data-stu-id="63e5b-175">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="63e5b-176">Default is „false“.</span><span class="sxs-lookup"><span data-stu-id="63e5b-176">Default is false.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Range.copyFrom_1
    summary: |-
      <span data-ttu-id="63e5b-177">Kopiert Daten oder Formatierung von Zellen aus dem Quellbereich oder RangeAreas in den aktuellen Bereich.</span><span class="sxs-lookup"><span data-stu-id="63e5b-177">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="63e5b-178">Der Zielbereich kann eine andere Größe als der Quellbereich oder RangeAreas haben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-178">The destination range can be of different size than the source range or RangeAreas.</span></span> <span data-ttu-id="63e5b-179">Das Ziel wird automatisch erweitert, wenn es kleiner als die Quelle ist.</span><span class="sxs-lookup"><span data-stu-id="63e5b-179">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="63e5b-180">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-180">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="63e5b-181">Der Quellbereich oder RangeAreas, aus dem kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="63e5b-181">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="63e5b-182">Wenn die Quell-RangeAreas mehrere Bereiche enthält, muss Sie im Gliederungsformular erstellt werden, indem vollständige Zeilen oder Spalten aus einem rechteckigen Bereich entfernt werden können.</span><span class="sxs-lookup"><span data-stu-id="63e5b-182">When the source RangeAreas has multiple ranges, it must in the outline form which can be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - Range | RangeAreas | string
        - id: copyTypeString
          description: <span data-ttu-id="63e5b-183">Der Typ der zu kopierende Zellendaten oder-Formatierung.</span><span class="sxs-lookup"><span data-stu-id="63e5b-183">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="63e5b-184">Der Standardwert ist "All".</span><span class="sxs-lookup"><span data-stu-id="63e5b-184">Default is "All".</span></span>
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: '<span data-ttu-id="63e5b-185">True, wenn leere Zellen im Quellbereich übersprungen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-185">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="63e5b-186">Default is „false“.</span><span class="sxs-lookup"><span data-stu-id="63e5b-186">Default is false.</span></span>'
          type:
            - boolean
        - id: transpose
          description: '<span data-ttu-id="63e5b-187">True, wenn die Zellen im Zielbereich transponieren.</span><span class="sxs-lookup"><span data-stu-id="63e5b-187">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="63e5b-188">Default is „false“.</span><span class="sxs-lookup"><span data-stu-id="63e5b-188">Default is false.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Range.dataValidation
    summary: |-
      <span data-ttu-id="63e5b-189">Gibt ein Datenüberprüfungsobjekt zurück.</span><span class="sxs-lookup"><span data-stu-id="63e5b-189">Returns a data validation object.</span></span>

      <span data-ttu-id="63e5b-190">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-190">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
  - uid: excel.Excel.Range.delete
    summary: |-
      <span data-ttu-id="63e5b-191">Löscht die dem Bereich zugeordneten Zellen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-191">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="63e5b-192">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-192">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: '<span data-ttu-id="63e5b-193">Gibt an, wohin die Zellen verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-193">Specifies which way to shift the cells.</span></span> <span data-ttu-id="63e5b-194">Weitere Informationen finden Sie unter Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="63e5b-194">See Excel.DeleteShiftDirection for details.</span></span>'
          type:
            - excel.Excel.DeleteShiftDirection
  - uid: excel.Excel.Range.delete_1
    summary: |-
      <span data-ttu-id="63e5b-195">Löscht die dem Bereich zugeordneten Zellen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-195">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="63e5b-196">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-196">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-197">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-197">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shiftString
          description: '<span data-ttu-id="63e5b-198">Gibt an, wohin die Zellen verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-198">Specifies which way to shift the cells.</span></span> <span data-ttu-id="63e5b-199">Weitere Informationen finden Sie unter Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="63e5b-199">See Excel.DeleteShiftDirection for details.</span></span>'
          type:
            - '"Up" | "Left"'
  - uid: excel.Excel.Range.find
    summary: |-
      <span data-ttu-id="63e5b-200">Sucht die angegebene Zeichenfolge anhand der angegebenen Kriterien.</span><span class="sxs-lookup"><span data-stu-id="63e5b-200">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="63e5b-201">Wenn der aktuelle Bereich größer als eine einzelne Zelle ist, wird die Suche auf diesen Bereich eingegrenzt, sonst wird das gesamte Blatt, das nach dieser Zelle beginnt, von der Suche abgedeckt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-201">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span>

      <span data-ttu-id="63e5b-202">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-202">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-
          <span data-ttu-id="63e5b-203">Der Bereich, der mit den Suchkriterien übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-203">The Range which matched the search criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="63e5b-204">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-204">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();

              // NOTE: If no match is found, an ItemNotFound error
              // is thrown when Range.find is evaluated.
              const foundRange = searchRange.find($("#searchText").text(), {
                  completeMatch: completeMatch,
                  matchCase: matchCase,
                  searchDirection: searchDirection
              });
              
              foundRange.load("address");
              await context.sync();


              console.log(foundRange.address);
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="63e5b-205">Die zu findende Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63e5b-205">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="63e5b-206">Zusätzliche Suchkriterien, einschließlich der Suchrichtung und der Frage, ob die Suche mit der gesamten Zelle übereinstimmen muss, oder ob die Groß-/Kleinschreibung beachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="63e5b-206">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - excel.Excel.SearchCriteria
  - uid: excel.Excel.Range.findOrNullObject
    summary: |-
      <span data-ttu-id="63e5b-207">Sucht die angegebene Zeichenfolge anhand der angegebenen Kriterien.</span><span class="sxs-lookup"><span data-stu-id="63e5b-207">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="63e5b-208">Wenn der aktuelle Bereich größer als eine einzelne Zelle ist, wird die Suche auf diesen Bereich eingegrenzt, sonst wird das gesamte Blatt, das nach dieser Zelle beginnt, von der Suche abgedeckt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-208">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span> <span data-ttu-id="63e5b-209">Wenn keine Übereinstimmungen vorhanden sind, wird mit dieser Funktion ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-209">If there are no matches, this function will return a null object.</span></span>

      <span data-ttu-id="63e5b-210">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-210">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-
          <span data-ttu-id="63e5b-211">Der Bereich, der mit den Suchkriterien übereinstimmt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-211">The Range which matched the search criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="63e5b-212">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-212">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();
              const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: completeMatch,
                  matchCase: matchCase,
                  searchDirection: searchDirection
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="63e5b-213">Die zu findende Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="63e5b-213">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="63e5b-214">Zusätzliche Suchkriterien, einschließlich der Suchrichtung und der Frage, ob die Suche mit der gesamten Zelle übereinstimmen muss, oder ob die Groß-/Kleinschreibung beachtet werden soll.</span><span class="sxs-lookup"><span data-stu-id="63e5b-214">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - excel.Excel.SearchCriteria
  - uid: excel.Excel.Range.flashFill
    summary: |-
      <span data-ttu-id="63e5b-215">Führt die Blitzvorschau für den aktuellen Bereich aus. Die Blitzvorschau füllt Daten automatisch auf, wenn sie ein Muster erkennt, daher muss der Bereich einspaltig sein und Daten enthalten, um ein Muster erkennen zu können.</span><span class="sxs-lookup"><span data-stu-id="63e5b-215">Does FlashFill to current range.Flash Fill will automatically fills data when it senses a pattern, so the range must be single column range and have data around in order to find pattern.</span></span>

      <span data-ttu-id="63e5b-216">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-216">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Range.format
    summary: |-
      <span data-ttu-id="63e5b-217">Gibt ein Formatobjekt zurück, das die Schriftart des Bereichs, Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften verschachtelt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-217">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="63e5b-218">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-218">Read-only.</span></span>

      <span data-ttu-id="63e5b-219">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-219">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - excel.Excel.RangeFormat
  - uid: excel.Excel.Range.formulas
    summary: |-
      <span data-ttu-id="63e5b-220">Stellt die Formel in der A1-Schreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-220">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="63e5b-221">Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-221">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="63e5b-222">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-222">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="63e5b-223">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-223">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.formulasLocal
    summary: |-
      <span data-ttu-id="63e5b-224">Stellt die Formel in der A1-Schreibweise, Sprache des Benutzers und im Gebietsschema der Zahlenformatierung dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-224">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="63e5b-225">Beispielsweise würde die englische Formel „= SUM(A1, 1.5)“ in Deutsch „= SUMME(A1; 1,5)“ werden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-225">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="63e5b-226">Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-226">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="63e5b-227">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-227">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="63e5b-228">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-228">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.formulasR1C1
    summary: |-
      <span data-ttu-id="63e5b-229">Stellt die Formel in der R1C1-Schreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-229">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="63e5b-230">Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-230">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="63e5b-231">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-231">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="63e5b-232">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-232">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.getAbsoluteResizedRange
    summary: |-
      <span data-ttu-id="63e5b-233">Ruft ein Bereichsobjekt ab, das die gleiche Zelle oben links aufweist wie das aktuelle Bereichsobjekt, jedoch über eine angegebene Anzahl von Reihen uns Spalten verfügt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-233">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>

      <span data-ttu-id="63e5b-234">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-234">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: numRows
          description: <span data-ttu-id="63e5b-235">Die Anzahl der Zeilen der neuen Bereichsgröße.</span><span class="sxs-lookup"><span data-stu-id="63e5b-235">The number of rows of the new range size.</span></span>
          type:
            - number
        - id: numColumns
          description: <span data-ttu-id="63e5b-236">Die Anzahl der Spalten der neuen Bereichsgröße.</span><span class="sxs-lookup"><span data-stu-id="63e5b-236">The number of columns of the new range size.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.getBoundingRect
    summary: |-
      <span data-ttu-id="63e5b-237">Ruft das kleinste Bereichsobjekt ab, das die angegebenen Bereiche umfasst.</span><span class="sxs-lookup"><span data-stu-id="63e5b-237">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id="63e5b-238">Beispielsweise das GetBoundingRect von "B2:C5" und "D10:E15" lautet "B2:E15".</span><span class="sxs-lookup"><span data-stu-id="63e5b-238">For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>

      <span data-ttu-id="63e5b-239">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-239">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-240">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-240">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="63e5b-241">Das Bereichsobjekt oder die Adresse oder der Bereichsname.</span><span class="sxs-lookup"><span data-stu-id="63e5b-241">The range object or address or range name.</span></span>
          type:
            - Range | string
  - uid: excel.Excel.Range.getCell
    summary: |-
      <span data-ttu-id="63e5b-242">Ruft das Bereichsobjekt ab, das die einzelne Zelle basierend auf Zeilen- und Spaltenanzahl enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-242">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="63e5b-243">Die Zelle kann außerhalb der Grenzen des übergeordneten Bereichs liegen, solange Sie innerhalb des Arbeitsblatt Rasters bleibt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-243">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="63e5b-244">Die zurückgegebene Zelle befindet sich relativ zur obersten linken Zelle des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="63e5b-244">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="63e5b-245">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-245">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-246">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-246">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="63e5b-247">Zeilenanzahl der abzurufenden Zelle.</span><span class="sxs-lookup"><span data-stu-id="63e5b-247">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="63e5b-248">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="63e5b-248">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="63e5b-249">Spaltenanzahl der abzurufenden Zelle.</span><span class="sxs-lookup"><span data-stu-id="63e5b-249">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="63e5b-250">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="63e5b-250">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.getCellProperties
    summary: |-
      <span data-ttu-id="63e5b-251">Gibt ein 2D-Array zurück, das die Daten für die Schriftart, die Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften jeder Zelle kapselt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-251">Returns a 2D array, encapsulating the data for each cell's font, fill, borders, alignment, and other properties.</span></span>

      <span data-ttu-id="63e5b-252">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-252">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCellProperties(cellPropertiesLoadOptions)
    fullName: getCellProperties(cellPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<CellProperties[][]>'
        description: |-
          <span data-ttu-id="63e5b-253">Ein 2D-Array, in dem jedes Element die angeforderten Eigenschaften der entsprechenden Zelle darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-253">A 2D array where each item represents the requested properties of the corresponding cell.</span></span>

          #### <a name="examples"></a><span data-ttu-id="63e5b-254">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-254">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const cell = context.workbook.getActiveCell();

              // Define the cell properties to get by setting the matching LoadOptions to true.
              const propertiesToGet = cell.getCellProperties({
                  address: true,
                  format: {
                      fill: {
                          color: true
                      },
                      font: {
                          color: true
                      }
                  },
                  style: true
              });

              // Sync to get the data from the workbook.
              await context.sync();
              const cellProperties = propertiesToGet.value[0][0];
              console.log(
                  `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
          });
          ```
      parameters:
        - id: cellPropertiesLoadOptions
          description: '<span data-ttu-id="63e5b-255">Ein Objekt, das die zu ladenden Zelleneigenschaften darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-255">An object that represents which cell properties to load.</span></span>'
          type:
            - excel.Excel.CellPropertiesLoadOptions
  - uid: excel.Excel.Range.getColumn
    summary: |-
      <span data-ttu-id="63e5b-256">Ruft eine Spalte ab, die im Bereich enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="63e5b-256">Gets a column contained in the range.</span></span>

      <span data-ttu-id="63e5b-257">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-257">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-258">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-258">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="63e5b-259">Spaltenanzahl des abzurufenden Bereichs.</span><span class="sxs-lookup"><span data-stu-id="63e5b-259">Column number of the range to be retrieved.</span></span> <span data-ttu-id="63e5b-260">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="63e5b-260">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.getColumnProperties
    summary: |-
      <span data-ttu-id="63e5b-261">Gibt ein eindimensionales Array zurück, das die Daten für die Schriftart, die Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften jeder Spalte kapselt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-261">Returns a single-dimensional array, encapsulating the data for each column's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="63e5b-262">Für Eigenschaften, die innerhalb einer bestimmten Spalte nicht für alle Zellen konsistent sind, wird NULL zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-262">For properties that are not consistent across each cell within a given column, null will be returned.</span></span>

      <span data-ttu-id="63e5b-263">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-263">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnProperties(columnPropertiesLoadOptions)
    fullName: getColumnProperties(columnPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<ColumnProperties[]>'
        description: '<span data-ttu-id="63e5b-264">Ein Array, in dem jedes Element die angeforderten Eigenschaften der entsprechenden Spalte darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-264">An array where each item represents the requested properties of the corresponding column.</span></span>'
      parameters:
        - id: columnPropertiesLoadOptions
          description: '<span data-ttu-id="63e5b-265">Ein Objekt, das die zu ladenden Spalteneigenschaften darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-265">An object that represents which column properties to load.</span></span>'
          type:
            - excel.Excel.ColumnPropertiesLoadOptions
  - uid: excel.Excel.Range.getColumnsAfter
    summary: |-
      <span data-ttu-id="63e5b-266">Ruft eine bestimmte Anzahl von Spalten rechts vom aktuellen Bereichsobjekt ab.</span><span class="sxs-lookup"><span data-stu-id="63e5b-266">Gets a certain number of columns to the right of the current Range object.</span></span>

      <span data-ttu-id="63e5b-267">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-267">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="63e5b-p138">Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p138">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getColumnsBefore
    summary: |-
      <span data-ttu-id="63e5b-273">Ruft eine bestimmte Anzahl von Spalten links vom aktuellen Bereichsobjekt ab.</span><span class="sxs-lookup"><span data-stu-id="63e5b-273">Gets a certain number of columns to the left of the current Range object.</span></span>

      <span data-ttu-id="63e5b-274">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-274">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="63e5b-p139">Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p139">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getEntireColumn
    summary: |-
      <span data-ttu-id="63e5b-280">Ruft ein Objekt ab, das die gesamte Spalte des Bereichs darstellt (beispielsweise, wenn der aktuelle Bereich die Zellen "B4: e11" darstellt `getEntireColumn` , sein Wert ist ein Bereich, der die Spalten "B:E" darstellt).</span><span class="sxs-lookup"><span data-stu-id="63e5b-280">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="63e5b-281">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-281">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-282">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-282">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getEntireRow
    summary: |-
      <span data-ttu-id="63e5b-283">Ruft ein Objekt ab, das die gesamte Zeile des Bereichs darstellt (beispielsweise, wenn der aktuelle Bereich die Zellen "B4: e11" darstellt `GetEntireRow` , sein Wert ist ein Bereich, der die Zeilen "4:11") darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-283">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="63e5b-284">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-284">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-285">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-285">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getImage
    summary: |-
      <span data-ttu-id="63e5b-286">Rendert den Bereich als Base64-codiertes PNG-Bild.</span><span class="sxs-lookup"><span data-stu-id="63e5b-286">Renders the range as a base64-encoded png image.</span></span>

      <span data-ttu-id="63e5b-287">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-287">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
  - uid: excel.Excel.Range.getIntersection
    summary: |-
      <span data-ttu-id="63e5b-288">Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-288">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="63e5b-289">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-289">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-290">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-290">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: '<span data-ttu-id="63e5b-291">Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="63e5b-291">The range object or range address that will be used to determine the intersection of ranges.</span></span>'
          type:
            - Range | string
  - uid: excel.Excel.Range.getIntersectionOrNullObject
    summary: |-
      <span data-ttu-id="63e5b-292">Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-292">Gets the range object that represents the rectangular intersection of the given ranges.</span></span> <span data-ttu-id="63e5b-293">Wenn keine Schnittmenge gefunden wird, wird ein null-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-293">If no intersection is found, will return a null object.</span></span>

      <span data-ttu-id="63e5b-294">\[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-294">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-295">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-295">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: '<span data-ttu-id="63e5b-296">Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="63e5b-296">The range object or range address that will be used to determine the intersection of ranges.</span></span>'
          type:
            - Range | string
  - uid: excel.Excel.Range.getLastCell
    summary: |-
      <span data-ttu-id="63e5b-297">Ruft die letzte Zelle im Bereich ab.</span><span class="sxs-lookup"><span data-stu-id="63e5b-297">Gets the last cell within the range.</span></span> <span data-ttu-id="63e5b-298">Beispielsweise lautet die letzte Zelle des Bereichs „B2: D5“ „D5“.</span><span class="sxs-lookup"><span data-stu-id="63e5b-298">For example, the last cell of "B2:D5" is "D5".</span></span>

      <span data-ttu-id="63e5b-299">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-299">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-300">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-300">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getLastColumn
    summary: |-
      <span data-ttu-id="63e5b-301">Ruft die letzte Spalte im Bereich ab.</span><span class="sxs-lookup"><span data-stu-id="63e5b-301">Gets the last column within the range.</span></span> <span data-ttu-id="63e5b-302">Beispielsweise lautet die letzte Spalte von „B2:D5“ „D2:D5“.</span><span class="sxs-lookup"><span data-stu-id="63e5b-302">For example, the last column of "B2:D5" is "D2:D5".</span></span>

      <span data-ttu-id="63e5b-303">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-303">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-304">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-304">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getLastRow
    summary: |-
      <span data-ttu-id="63e5b-305">Ruft die letzte Zeile im Bereich ab.</span><span class="sxs-lookup"><span data-stu-id="63e5b-305">Gets the last row within the range.</span></span> <span data-ttu-id="63e5b-306">Beispielsweise lautet die letzte Zelle des Bereichs "B2: D5" "B5:D5".</span><span class="sxs-lookup"><span data-stu-id="63e5b-306">For example, the last row of "B2:D5" is "B5:D5".</span></span>

      <span data-ttu-id="63e5b-307">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-307">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-308">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-308">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.getOffsetRange
    summary: |-
      <span data-ttu-id="63e5b-p144">Ruft ein Objekt ab, das einen Bereich darstellt, der aus dem angegebenen Bereich versetzt ist. Die Dimension des zurückgegebenen Bereichs entspricht diesem Bereich. Wenn der resultierende Bereich außerhalb des Arbeitsblatt-Rasters erzwungen wird, wird ein Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p144">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="63e5b-312">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-312">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-313">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-313">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="63e5b-p145">Die Anzahl an Zeilen (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p145">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="63e5b-p146">Die Anzahl an Spalten (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p146">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getResizedRange
    summary: |-
      <span data-ttu-id="63e5b-318">Ruft ein Range-Objekt ähnlich dem aktuellen Range-Objekt ab, dessen untere rechte Ecke jedoch um eine bestimmte Anzahl von Zeilen und Spalten erweitert (oder verkleinert) ist.</span><span class="sxs-lookup"><span data-stu-id="63e5b-318">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>

      <span data-ttu-id="63e5b-319">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-319">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: deltaRows
          description: '<span data-ttu-id="63e5b-p147">Die Anzahl von Zeilen, um die die untere rechte Ecke relativ zum aktuellen Bereich zu erweitern ist. Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verkleinern.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p147">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
        - id: deltaColumns
          description: '<span data-ttu-id="63e5b-322">Die Anzahl der Spalten, um die die untere rechte Ecke relativ zum aktuellen Bereich erweitert werden soll.</span><span class="sxs-lookup"><span data-stu-id="63e5b-322">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="63e5b-323">Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verkleinern.</span><span class="sxs-lookup"><span data-stu-id="63e5b-323">Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getRow
    summary: |-
      <span data-ttu-id="63e5b-324">Ruft eine Zelle ab, die im Bereich enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="63e5b-324">Gets a row contained in the range.</span></span>

      <span data-ttu-id="63e5b-325">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-325">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-326">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-326">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="63e5b-327">Zeilenanzahl des abzurufenden Bereichs.</span><span class="sxs-lookup"><span data-stu-id="63e5b-327">Row number of the range to be retrieved.</span></span> <span data-ttu-id="63e5b-328">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="63e5b-328">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.Range.getRowProperties
    summary: |-
      <span data-ttu-id="63e5b-329">Gibt ein eindimensionales Array zurück, das die Daten für die Schriftart, die Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften jeder Zeile kapselt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-329">Returns a single-dimensional array, encapsulating the data for each row's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="63e5b-330">Für Eigenschaften, die innerhalb einer bestimmten Zeile nicht für alle Zellen konsistent sind, wird NULL zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-330">For properties that are not consistent across each cell within a given row, null will be returned.</span></span>

      <span data-ttu-id="63e5b-331">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-331">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowProperties(rowPropertiesLoadOptions)
    fullName: getRowProperties(rowPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<RowProperties[]>'
        description: '<span data-ttu-id="63e5b-332">Ein Array, in dem jedes Element die angeforderten Eigenschaften der entsprechenden Zeile darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-332">An array where each item represents the requested properties of the corresponding row.</span></span>'
      parameters:
        - id: rowPropertiesLoadOptions
          description: '<span data-ttu-id="63e5b-333">Ein Objekt, das die zu ladenden Zeileneigenschaften darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-333">An object that represents which row properties to load.</span></span>'
          type:
            - excel.Excel.RowPropertiesLoadOptions
  - uid: excel.Excel.Range.getRowsAbove
    summary: |-
      <span data-ttu-id="63e5b-334">Ruft eine bestimmte Anzahl von Zeilen oberhalb vom aktuellen Bereichsobjekt ab.</span><span class="sxs-lookup"><span data-stu-id="63e5b-334">Gets a certain number of rows above the current Range object.</span></span>

      <span data-ttu-id="63e5b-335">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-335">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="63e5b-p151">Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p151">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getRowsBelow
    summary: |-
      <span data-ttu-id="63e5b-341">Ruft eine bestimmte Anzahl von Zeilen unterhalb vom aktuellen Bereichsobjekt ab.</span><span class="sxs-lookup"><span data-stu-id="63e5b-341">Gets a certain number of rows below the current Range object.</span></span>

      <span data-ttu-id="63e5b-342">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-342">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="63e5b-p152">Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p152">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel.Excel.Range.getSpecialCells
    summary: |-
      <span data-ttu-id="63e5b-348">Ruft das RangeAreas-Objekt ab, das aus einem oder mehreren rechteckigen Bereichen besteht und alle Zellen darstellt, die mit dem angegebenen Typ und Wert übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-348">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="63e5b-349">Wenn keine speziellen Zellen gefunden werden, wird ein ItemNotFound-Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="63e5b-349">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="63e5b-350">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-350">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-351">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-351">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with either text or logical (boolean) values.
              const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
              formulaRanges.format.fill.color = "orange";

              return context.sync();
          });
          ```
      parameters:
        - id: cellType
          description: <span data-ttu-id="63e5b-352">Der Typ der einzuschließenden Zellen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-352">The type of cells to include.</span></span>
          type:
            - excel.Excel.SpecialCellType
        - id: cellValueType
          description: '<span data-ttu-id="63e5b-353">Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Arten von Zellen in das Ergebnis einbezogen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-353">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="63e5b-354">Diese Werte können miteinander kombiniert werden, um mehr als einen Typ zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-354">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="63e5b-355">Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-355">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - excel.Excel.SpecialCellValueType
  - uid: excel.Excel.Range.getSpecialCells_1
    summary: |-
      <span data-ttu-id="63e5b-356">Ruft das RangeAreas-Objekt ab, das aus einem oder mehreren rechteckigen Bereichen besteht und alle Zellen darstellt, die mit dem angegebenen Typ und Wert übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-356">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="63e5b-357">Wenn keine speziellen Zellen gefunden werden, wird ein ItemNotFound-Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="63e5b-357">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="63e5b-358">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-358">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="63e5b-359">Der Typ der einzuschließenden Zellen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-359">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="63e5b-360">Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Arten von Zellen in das Ergebnis einbezogen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-360">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="63e5b-361">Diese Werte können miteinander kombiniert werden, um mehr als einen Typ zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-361">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="63e5b-362">Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-362">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: excel.Excel.Range.getSpecialCellsOrNullObject
    summary: |-
      <span data-ttu-id="63e5b-363">Ruft das RangeAreas-Objekt ab, das aus einem oder mehreren Bereichen besteht, die alle Zellen darstellen, die mit dem angegebenen Typ und Wert übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-363">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="63e5b-364">Wenn keine speziellen Zellen gefunden werden, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-364">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="63e5b-365">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-365">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
      parameters:
        - id: cellType
          description: <span data-ttu-id="63e5b-366">Der Typ der einzuschließenden Zellen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-366">The type of cells to include.</span></span>
          type:
            - excel.Excel.SpecialCellType
        - id: cellValueType
          description: '<span data-ttu-id="63e5b-367">Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Arten von Zellen in das Ergebnis einbezogen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-367">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="63e5b-368">Diese Werte können miteinander kombiniert werden, um mehr als einen Typ zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-368">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="63e5b-369">Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-369">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - excel.Excel.SpecialCellValueType
  - uid: excel.Excel.Range.getSpecialCellsOrNullObject_1
    summary: |-
      <span data-ttu-id="63e5b-370">Ruft das RangeAreas-Objekt ab, das aus einem oder mehreren Bereichen besteht, die alle Zellen darstellen, die mit dem angegebenen Typ und Wert übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-370">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="63e5b-371">Wenn keine speziellen Zellen gefunden werden, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-371">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="63e5b-372">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-372">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="63e5b-373">Der Typ der einzuschließenden Zellen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-373">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="63e5b-374">Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Arten von Zellen in das Ergebnis einbezogen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-374">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="63e5b-375">Diese Werte können miteinander kombiniert werden, um mehr als einen Typ zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-375">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="63e5b-376">Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-376">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: excel.Excel.Range.getSpillingToRange
    summary: |-
      <span data-ttu-id="63e5b-377">Ruft beim Aufruf für eine Ankerzelle das Bereichsobjekt ab, das den Überlaufbereich enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-377">Gets the range object containing the spill range when called on an anchor cell.</span></span> <span data-ttu-id="63e5b-378">Schlägt bei Anwendung auf einen Bereich mit mehr als einer Zelle fehl.</span><span class="sxs-lookup"><span data-stu-id="63e5b-378">Fails if applied to a range with more than one cell.</span></span> <span data-ttu-id="63e5b-379">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-379">Read-only.</span></span>

      <span data-ttu-id="63e5b-380">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-380">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillingToRange()
    fullName: getSpillingToRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillingToRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.Range.getSpillingToRangeOrNullObject
    summary: |-
      <span data-ttu-id="63e5b-381">Ruft beim Aufruf für eine Ankerzelle das Bereichsobjekt ab, das den Überlaufbereich enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-381">Gets the range object containing the spill range when called on an anchor cell.</span></span> <span data-ttu-id="63e5b-382">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-382">Read-only.</span></span> <span data-ttu-id="63e5b-383">Wenn es sich bei dem Bereich nicht um eine Ankerzelle oder keinen verschüttenbereich handelt, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-383">If the range is not an anchor cell or spill range can't be found, a null object will be returned.</span></span>

      <span data-ttu-id="63e5b-384">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-384">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillingToRangeOrNullObject()
    fullName: getSpillingToRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillingToRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.Range.getSpillParent
    summary: |-
      <span data-ttu-id="63e5b-385">Ruft das Bereichsobjekt ab, das die Ankerzelle für eine Zelle enthält, in die ein Überlauf erfolgen kann.</span><span class="sxs-lookup"><span data-stu-id="63e5b-385">Gets the range object containing the anchor cell for a cell getting spilled into.</span></span> <span data-ttu-id="63e5b-386">Schlägt bei Anwendung auf einen Bereich mit mehr als einer Zelle fehl.</span><span class="sxs-lookup"><span data-stu-id="63e5b-386">Fails if applied to a range with more than one cell.</span></span> <span data-ttu-id="63e5b-387">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-387">Read-only.</span></span>

      <span data-ttu-id="63e5b-388">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-388">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillParent()
    fullName: getSpillParent()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillParent(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.Range.getSpillParentOrNullObject
    summary: |-
      <span data-ttu-id="63e5b-389">Ruft das Bereichsobjekt ab, das die Ankerzelle für eine Zelle enthält, in die ein Überlauf erfolgen kann.</span><span class="sxs-lookup"><span data-stu-id="63e5b-389">Gets the range object containing the anchor cell for a cell getting spilled into.</span></span> <span data-ttu-id="63e5b-390">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-390">Read-only.</span></span> <span data-ttu-id="63e5b-391">Wenn es sich nicht um eine Spill-Zelle oder mehr als einmal Zellen geben, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-391">If it is not a spill cell or more than once cells are give, a null object will be returned.</span></span>

      <span data-ttu-id="63e5b-392">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-392">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getSpillParentOrNullObject()
    fullName: getSpillParentOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillParentOrNullObject(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.Range.getSurroundingRegion
    summary: |-
      <span data-ttu-id="63e5b-393">Gibt ein Bereichsobjekt zurück, das die umgebenden Region für die Zelle oben links in diesem Bereich darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-393">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id="63e5b-394">Eine umgebende Region ist ein Bereich, der von einer Kombination von leeren Zeilen und leeren Spalten relativ zu diesem Bereich begrenzt wird.</span><span class="sxs-lookup"><span data-stu-id="63e5b-394">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>

      <span data-ttu-id="63e5b-395">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-395">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.Range.getTables
    summary: |-
      <span data-ttu-id="63e5b-396">Ruft eine bereichsbezogene Sammlung von Tabellen ab, die sich mit dem Bereich überschneidet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-396">Gets a scoped collection of tables that overlap with the range.</span></span>

      <span data-ttu-id="63e5b-397">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-397">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - excel.Excel.TableScopedCollection
        description: ''
      parameters:
        - id: fullyContained
          description: '<span data-ttu-id="63e5b-398">Wenn true, werden nur Tabellen zurückgegeben, die vollständig innerhalb der Bereichsgrenzen enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="63e5b-398">If true, returns only tables that are fully contained within the range bounds.</span></span> <span data-ttu-id="63e5b-399">Der Standardwert ist false.</span><span class="sxs-lookup"><span data-stu-id="63e5b-399">The default value is false.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Range.getUsedRange
    summary: |-
      <span data-ttu-id="63e5b-p167">Gibt den verwendeten Bereich des angegebenen Bereichsobjekts zurück. Wenn keine verwendeten Zellen innerhalb des Bereichs vorhanden sind, löst diese Funktion einen „ItemNotFound“-Fehler aus.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p167">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="63e5b-402">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-402">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-403">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-403">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeUR = range.getUsedRange();
              rangeUR.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeUR.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="63e5b-404">Betrachtet nur Zellen mit Werten als verwendet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-404">Considers only cells with values as used cells.</span></span> <span data-ttu-id="63e5b-405">\[API-Gruppe: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-405">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Range.getUsedRangeOrNullObject
    summary: |-
      <span data-ttu-id="63e5b-p169">Gibt den verwendeten Bereich des angegebenen Bereichsobjekts zurück. Wenn keine verwendeten Zellen innerhalb des Bereichs vorhanden sind, gibt diese Funktion ein NULL-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p169">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>

      <span data-ttu-id="63e5b-408">\[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-408">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-409">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-409">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="63e5b-410">Betrachtet nur Zellen mit Werten als verwendet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-410">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel.Excel.Range.getVisibleView
    summary: |-
      <span data-ttu-id="63e5b-411">Stellt die sichtbaren Zeilen des aktuellen Bereichs dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-411">Represents the visible rows of the current range.</span></span>

      <span data-ttu-id="63e5b-412">\[[API-Gruppe: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-412">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - excel.Excel.RangeView
        description: ''
  - uid: excel.Excel.Range.group
    summary: |-
      <span data-ttu-id="63e5b-413">Gruppiert Spalten und Zeilen für eine Gliederung.</span><span class="sxs-lookup"><span data-stu-id="63e5b-413">Groups columns and rows for an outline.</span></span>

      <span data-ttu-id="63e5b-414">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-414">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: '<span data-ttu-id="63e5b-415">Gibt an, wie der Bereich nach Zeilen oder Spalten gruppiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="63e5b-415">Specifies how the range can be grouped by rows or columns.</span></span> <span data-ttu-id="63e5b-416">Ein `InvalidArgument` `isEntireRow` Fehler wird ausgelöst, `isEntireColumn` `range.isEntireRow` wenn die Group-Option sich von dem Bereich oder der Eigenschaft unterscheidet (also `groupOption` ist true und "ByColumns `range.isEntireColumn` " oder " `groupOption` true" und "ByRows").</span><span class="sxs-lookup"><span data-stu-id="63e5b-416">An `InvalidArgument` error is thrown when the group option differs from the range''s `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow` is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").</span></span>'
          type:
            - excel.Excel.GroupOption
  - uid: excel.Excel.Range.group_1
    summary: |-
      <span data-ttu-id="63e5b-417">Gruppiert Spalten und Zeilen für eine Gliederung.</span><span class="sxs-lookup"><span data-stu-id="63e5b-417">Groups columns and rows for an outline.</span></span>

      <span data-ttu-id="63e5b-418">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-418">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: group(groupOptionString)
    fullName: group(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: '<span data-ttu-id="63e5b-419">Gibt an, wie der Bereich nach Zeilen oder Spalten gruppiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="63e5b-419">Specifies how the range can be grouped by rows or columns.</span></span> <span data-ttu-id="63e5b-420">Ein `InvalidArgument` `isEntireRow` Fehler wird ausgelöst, `isEntireColumn` `range.isEntireRow` wenn die Group-Option sich von dem Bereich oder der Eigenschaft unterscheidet (also `groupOption` ist true und "ByColumns `range.isEntireColumn` " oder " `groupOption` true" und "ByRows").</span><span class="sxs-lookup"><span data-stu-id="63e5b-420">An `InvalidArgument` error is thrown when the group option differs from the range''s `isEntireRow` or `isEntireColumn` property (i.e., `range.isEntireRow` is true and `groupOption` is "ByColumns" or `range.isEntireColumn` is true and `groupOption` is "ByRows").</span></span>'
          type:
            - '"ByRows" | "ByColumns"'
  - uid: excel.Excel.Range.hasSpill
    summary: |-
      <span data-ttu-id="63e5b-421">Stellt dar, ob alle Zellen einen Überlaufrahmen aufweisen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-421">Represents if all cells have a spill border.</span></span> <span data-ttu-id="63e5b-422">Gibt true zurück, wenn alle Zellen einen Überlauf Rahmen haben, oder false, wenn alle Zellen keinen Überlauf Rahmen haben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-422">Returns true if all cells have a spill border, or false if all cells do not have a spill border.</span></span> <span data-ttu-id="63e5b-423">Gibt NULL zurück, wenn Zellen mit und ohne Spill-Rahmen innerhalb des Bereichs vorhanden sind.</span><span class="sxs-lookup"><span data-stu-id="63e5b-423">Returns null if there are cells both with and without spill borders within the range.</span></span>

      <span data-ttu-id="63e5b-424">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-424">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: hasSpill
    fullName: hasSpill
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hasSpill: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.height
    summary: |-
      <span data-ttu-id="63e5b-425">Liefert den Abstand in Punkten, für 100 % Zoom, vom oberen Rand des Bereichs bis zum unteren Rand des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="63e5b-425">Returns the distance in points, for 100% zoom, from top edge of the range to bottom edge of the range.</span></span> <span data-ttu-id="63e5b-426">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-426">Read-only.</span></span>

      <span data-ttu-id="63e5b-427">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-427">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly height: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.hidden
    summary: |-
      <span data-ttu-id="63e5b-428">Stellt dar, ob alle Zellen des aktuellen Bereichs ausgeblendet sind.</span><span class="sxs-lookup"><span data-stu-id="63e5b-428">Represents if all cells of the current range are hidden.</span></span> <span data-ttu-id="63e5b-429">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-429">Read-only.</span></span>

      <span data-ttu-id="63e5b-430">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-430">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.hideGroupDetails
    summary: |-
      <span data-ttu-id="63e5b-431">Details der Zeilen-oder Spaltengruppe ausblenden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-431">Hide details of the row or column group.</span></span>

      <span data-ttu-id="63e5b-432">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-432">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: '<span data-ttu-id="63e5b-433">Gibt an, ob Details von gruppierten Zeilen oder gruppierten Spalten ausgeblendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-433">Specifies whether to hide details of grouped rows or grouped columns.</span></span>'
          type:
            - excel.Excel.GroupOption
  - uid: excel.Excel.Range.hideGroupDetails_1
    summary: |-
      <span data-ttu-id="63e5b-434">Details der Zeilen-oder Spaltengruppe ausblenden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-434">Hide details of the row or column group.</span></span>

      <span data-ttu-id="63e5b-435">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-435">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: hideGroupDetails(groupOptionString)
    fullName: hideGroupDetails(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: '<span data-ttu-id="63e5b-436">Gibt an, ob Details von gruppierten Zeilen oder gruppierten Spalten ausgeblendet werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-436">Specifies whether to hide details of grouped rows or grouped columns.</span></span>'
          type:
            - '"ByRows" | "ByColumns"'
  - uid: excel.Excel.Range.hyperlink
    summary: |-
      <span data-ttu-id="63e5b-437">Stellt den Hyperlink für den aktuellen Bereich dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-437">Represents the hyperlink for the current range.</span></span>

      <span data-ttu-id="63e5b-438">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-438">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - excel.Excel.RangeHyperlink
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-439">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-439">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: excel.Excel.Range.insert
    summary: |-
      <span data-ttu-id="63e5b-p175">Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues Bereichsobjekt in dem nun leeren Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p175">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="63e5b-442">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-442">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-443">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-443">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: '<span data-ttu-id="63e5b-444">Gibt an, wohin die Zellen verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-444">Specifies which way to shift the cells.</span></span> <span data-ttu-id="63e5b-445">Weitere Informationen finden Sie unter Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="63e5b-445">See Excel.InsertShiftDirection for details.</span></span>'
          type:
            - excel.Excel.InsertShiftDirection
  - uid: excel.Excel.Range.insert_1
    summary: |-
      <span data-ttu-id="63e5b-p177">Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues Bereichsobjekt in dem nun leeren Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="63e5b-p177">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="63e5b-448">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-448">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: shiftString
          description: '<span data-ttu-id="63e5b-449">Gibt an, wohin die Zellen verschoben werden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-449">Specifies which way to shift the cells.</span></span> <span data-ttu-id="63e5b-450">Weitere Informationen finden Sie unter Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="63e5b-450">See Excel.InsertShiftDirection for details.</span></span>'
          type:
            - '"Down" | "Right"'
  - uid: excel.Excel.Range.isEntireColumn
    summary: |-
      <span data-ttu-id="63e5b-451">Gibt an, ob der angegebene Bereich eine ganze Spalte ist.</span><span class="sxs-lookup"><span data-stu-id="63e5b-451">Represents if the current range is an entire column.</span></span> <span data-ttu-id="63e5b-452">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-452">Read-only.</span></span>

      <span data-ttu-id="63e5b-453">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-453">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.isEntireRow
    summary: |-
      <span data-ttu-id="63e5b-454">Gibt an, ob der angegebene Bereich eine ganze Zeile ist.</span><span class="sxs-lookup"><span data-stu-id="63e5b-454">Represents if the current range is an entire row.</span></span> <span data-ttu-id="63e5b-455">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-455">Read-only.</span></span>

      <span data-ttu-id="63e5b-456">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-456">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.left
    summary: |-
      <span data-ttu-id="63e5b-457">Gibt den Abstand in Punkten zurück, bei 100 % Zoom, vom linken Rand des Arbeitsblattes bis zum linken Rand des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="63e5b-457">Returns the distance in points, for 100% zoom, from left edge of the worksheet to left edge of the range.</span></span> <span data-ttu-id="63e5b-458">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-458">Read-only.</span></span>

      <span data-ttu-id="63e5b-459">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-459">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly left: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.linkedDataTypeState
    summary: |-
      <span data-ttu-id="63e5b-460">Stellt den Datentypstatus der einzelnen Zellen dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-460">Represents the data type state of each cell.</span></span> <span data-ttu-id="63e5b-461">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-461">Read-only.</span></span>

      <span data-ttu-id="63e5b-462">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-462">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
      return:
        type:
          - 'Excel.LinkedDataTypeState[][]'
  - uid: excel.Excel.Range.load
    summary: <span data-ttu-id="63e5b-463">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-463">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="63e5b-464">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-464">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="63e5b-465">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="63e5b-465">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="63e5b-466">`load(option?: string | string[]): Excel.Range`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-466">`load(option?: string | string[]): Excel.Range` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="63e5b-467">`load(option?: { select?: string; expand?: string; }): Excel.Range`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-467">`load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="63e5b-468">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-468">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types.</span></span> <span data-ttu-id="63e5b-469">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="63e5b-469">It is similar to the preceding signature.</span></span> <span data-ttu-id="63e5b-470">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können.</span><span class="sxs-lookup"><span data-stu-id="63e5b-470">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="63e5b-471">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="63e5b-471">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="63e5b-472">Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.</span><span class="sxs-lookup"><span data-stu-id="63e5b-472">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.RangeLoadOptions
  - uid: excel.Excel.Range.load_1
    summary: <span data-ttu-id="63e5b-473">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-473">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="63e5b-474">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-474">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-475">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-475">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="63e5b-476">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-476">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.Range.load_2
    summary: <span data-ttu-id="63e5b-477">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-477">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="63e5b-478">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-478">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="63e5b-479">Dabei ist propertyNamesAndPaths. Select eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-479">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Range.merge
    summary: |-
      <span data-ttu-id="63e5b-480">Führt die Zellen des Bereichs in einen Bereich im Arbeitsblatt zusammen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-480">Merge the range cells into one region in the worksheet.</span></span>

      <span data-ttu-id="63e5b-481">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-481">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-482">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-482">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: <span data-ttu-id="63e5b-483">Optional.</span><span class="sxs-lookup"><span data-stu-id="63e5b-483">Optional.</span></span> <span data-ttu-id="63e5b-484">Mit „true“ werden Zellen in allen Zeilen des angegebenen Bereichs als einzelne zusammengeführte Zellen zusammengeführt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-484">Set true to merge cells in each row of the specified range as separate merged cells.</span></span> <span data-ttu-id="63e5b-485">Der Standardwert lautet „false“.</span><span class="sxs-lookup"><span data-stu-id="63e5b-485">The default value is false.</span></span>
          type:
            - boolean
  - uid: excel.Excel.Range.numberFormat
    summary: |-
      <span data-ttu-id="63e5b-486">Stellt den Zahlenformatcode für Excel für den angegebenen Bereich dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-486">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="63e5b-487">Beim Festlegen des Zahlenformats für einen Bereich kann das value-Argument entweder ein einzelner Wert (Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-487">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="63e5b-488">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-488">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="63e5b-489">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-489">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.numberFormatLocal
    summary: |-
      <span data-ttu-id="63e5b-490">Stellt basierend auf den Spracheinstellungen des Benutzers den Zahlenformatcode für Excel für den angegebenen Bereich dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-490">Represents Excel's number format code for the given range, based on the language settings of the user.</span></span> <span data-ttu-id="63e5b-491">Wenn das Zahlenformat für einen Bereich lokal festgesetzt wird, kann das value-Argument entweder ein einzelner Wert (Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-491">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="63e5b-492">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-492">If the argument is a single value, it will be applied to all cells in the range.</span></span> <span data-ttu-id="63e5b-493">Excel führt beim Abruf oder Festlegen der `numberFormatLocal` Eigenschaft keine sprach-oder Formatumwandlung durch.</span><span class="sxs-lookup"><span data-stu-id="63e5b-493">Excel does not perform any language or format coercion when getting or setting the `numberFormatLocal` property.</span></span> <span data-ttu-id="63e5b-494">Jeder zurückgegebene Text verwendet die lokal formatierten Zeichenfolgen basierend auf der in den Systemeinstellungen angegebenen Sprache.</span><span class="sxs-lookup"><span data-stu-id="63e5b-494">Any returned text uses the locally-formatted strings based on the language specified in the system settings.</span></span>

      <span data-ttu-id="63e5b-495">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-495">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.removeDuplicates
    summary: |-
      <span data-ttu-id="63e5b-496">Entfernt doppelte Werte aus dem durch die Spalten angegebenen Bereich.</span><span class="sxs-lookup"><span data-stu-id="63e5b-496">Removes duplicate values from the range specified by the columns.</span></span>

      <span data-ttu-id="63e5b-497">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-497">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
      return:
        type:
          - excel.Excel.RemoveDuplicatesResult
        description: |-
          <span data-ttu-id="63e5b-498">Das resultierende Objekt, das die Anzahl der entfernten Zeilen und die Anzahl der verbleibenden eindeutigen Zeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-498">The resulting object that contains the number of rows removed and the number of remaining unique rows.</span></span>

          #### <a name="examples"></a><span data-ttu-id="63e5b-499">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-499">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:D11");

              const deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          });
          ```
      parameters:
        - id: columns
          description: '<span data-ttu-id="63e5b-500">Die Spalten innerhalb des Bereichs, die Duplikate enthalten können.</span><span class="sxs-lookup"><span data-stu-id="63e5b-500">The columns inside the range that may contain duplicates.</span></span> <span data-ttu-id="63e5b-501">Es muss mindestens eine Spalte angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-501">At least one column needs to be specified.</span></span> <span data-ttu-id="63e5b-502">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="63e5b-502">Zero-indexed.</span></span>'
          type:
            - 'number[]'
        - id: includesHeader
          description: '<span data-ttu-id="63e5b-503">True, wenn die Eingabedaten Kopfzeile enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-503">True if the input data contains header.</span></span> <span data-ttu-id="63e5b-504">Default is „false“.</span><span class="sxs-lookup"><span data-stu-id="63e5b-504">Default is false.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.Range.replaceAll
    summary: |-
      <span data-ttu-id="63e5b-505">Sucht und ersetzt die angegebene Zeichenfolge auf der Grundlage der im aktuellen Bereich angegebenen Kriterien.</span><span class="sxs-lookup"><span data-stu-id="63e5b-505">Finds and replaces the given string based on the criteria specified within the current range.</span></span>

      <span data-ttu-id="63e5b-506">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-506">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: <span data-ttu-id="63e5b-507">Die Anzahl der durchgeführten ersetzen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-507">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: '<span data-ttu-id="63e5b-508">Zeichenfolge, die gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="63e5b-508">String to find.</span></span>'
          type:
            - string
        - id: replacement
          description: '<span data-ttu-id="63e5b-509">Zeichenfolge, durch die das Original ersetzt wird.</span><span class="sxs-lookup"><span data-stu-id="63e5b-509">String to replace the original with.</span></span>'
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="63e5b-510">Zusätzliche Ersetzungskriterien.</span><span class="sxs-lookup"><span data-stu-id="63e5b-510">Additional Replace Criteria.</span></span>
          type:
            - excel.Excel.ReplaceCriteria
  - uid: excel.Excel.Range.rowCount
    summary: |-
      <span data-ttu-id="63e5b-511">Gibt die Anzahl der Zeilen im Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="63e5b-511">Returns the total number of rows in the range.</span></span> <span data-ttu-id="63e5b-512">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-512">Read-only.</span></span>

      <span data-ttu-id="63e5b-513">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-513">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.rowHidden
    summary: |-
      <span data-ttu-id="63e5b-514">Stellt dar, ob alle Zeilen des aktuellen Bereichs ausgeblendet sind.</span><span class="sxs-lookup"><span data-stu-id="63e5b-514">Represents if all rows of the current range are hidden.</span></span>

      <span data-ttu-id="63e5b-515">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-515">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.rowIndex
    summary: |-
      <span data-ttu-id="63e5b-516">Gibt die Spaltenanzahl der ersten Zelle im Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="63e5b-516">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="63e5b-517">Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="63e5b-517">Zero-indexed.</span></span> <span data-ttu-id="63e5b-518">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-518">Read-only.</span></span>

      <span data-ttu-id="63e5b-519">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-519">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.savedAsArray
    summary: |-
      <span data-ttu-id="63e5b-520">Stellt dar, ob alle Zellen als Arrayformel gespeichert würden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-520">Represents if ALL the cells would be saved as an array formula.</span></span> <span data-ttu-id="63e5b-521">Gibt true zurück, wenn alle Zellen als Array gespeichert würden, oder false, wenn alle Zellen nicht als Arrayformel gespeichert würden.</span><span class="sxs-lookup"><span data-stu-id="63e5b-521">Returns true if ALL cells would be saved as an array, or false if ALL cells would NOT be saved as an array formula.</span></span> <span data-ttu-id="63e5b-522">Gibt NULL zurück, wenn eine Mischung aus Zellen vorhanden ist, die nicht als Arrayformel gespeichert werden würde und würde.</span><span class="sxs-lookup"><span data-stu-id="63e5b-522">Returns null if there is a mixture of cells that would and would not be saved as an array formula.</span></span>

      <span data-ttu-id="63e5b-523">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-523">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: savedAsArray
    fullName: savedAsArray
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly savedAsArray: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.Range.select
    summary: |-
      <span data-ttu-id="63e5b-524">Wählt den angegebenen Bereich in der Excel-Benutzeroberfläche aus.</span><span class="sxs-lookup"><span data-stu-id="63e5b-524">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="63e5b-525">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-525">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-526">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-526">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.set
    summary: '<span data-ttu-id="63e5b-527">Legt mehrere Eigenschaften eines Objekts gleichzeitig fest.</span><span class="sxs-lookup"><span data-stu-id="63e5b-527">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="63e5b-528">Sie können entweder ein einfaches Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs übergeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-528">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="63e5b-529">Diese Methode hat die folgende zusätzliche Signatur:</span><span class="sxs-lookup"><span data-stu-id="63e5b-529">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="63e5b-530">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-530">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: '<span data-ttu-id="63e5b-531">Ein JavaScript-Objekt mit Eigenschaften, die isomorphically für die Eigenschaften des Objekts strukturiert sind, für das die Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="63e5b-531">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>'
          type:
            - Interfaces.RangeUpdateData
        - id: options
          description: '<span data-ttu-id="63e5b-532">Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-532">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>'
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.Range.set_1
    summary: '<span data-ttu-id="63e5b-533">Legt mehrere Eigenschaften für das Objekt gleichzeitig basierend auf einem vorhandenen geladenen Objekt fest.</span><span class="sxs-lookup"><span data-stu-id="63e5b-533">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Range
  - uid: excel.Excel.Range.setCellProperties
    summary: |-
      <span data-ttu-id="63e5b-534">Aktualisiert den Bereich auf der Grundlage eines 2D-Arrays von Zelleigenschaften, das Dinge wie die Schriftart, die Füllung, Rahmen, die Ausrichtung usw. enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-534">Updates the range based on a 2D array of cell properties , encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="63e5b-535">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-535">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setCellProperties(cellPropertiesData)
    fullName: setCellProperties(cellPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-536">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-536">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              const topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              const headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              const nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              const matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              const range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          });
          ```
      parameters:
        - id: cellPropertiesData
          description: '<span data-ttu-id="63e5b-537">Ein 2D-Array, das angibt, welche Eigenschaften in jeder Zelle festgelegt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-537">A 2D array that represents which properties to set in each cell.</span></span>'
          type:
            - 'SettableCellProperties[][]'
  - uid: excel.Excel.Range.setColumnProperties
    summary: |-
      <span data-ttu-id="63e5b-538">Aktualisiert den Bereich auf der Grundlage eines eindimensionalen Arrays von Spalteneigenschaften, das Dinge wie die Schriftart, die Füllung, Rahmen, die Ausrichtung usw. enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-538">Updates the range based on a single-dimensional array of column properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="63e5b-539">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-539">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setColumnProperties(columnPropertiesData)
    fullName: setColumnProperties(columnPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnPropertiesData
          description: '<span data-ttu-id="63e5b-540">Ein Array, das angibt, welche Eigenschaften in jeder Spalte festgelegt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-540">An array that represents which properties to set in each column.</span></span>'
          type:
            - 'SettableColumnProperties[]'
  - uid: excel.Excel.Range.setDirty
    summary: |-
      <span data-ttu-id="63e5b-541">Legt für einen Bereich Neuberechnung bei der nächsten auszuführenden Neuberechnung fest.</span><span class="sxs-lookup"><span data-stu-id="63e5b-541">Set a range to be recalculated when the next recalculation occurs.</span></span>

      <span data-ttu-id="63e5b-542">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-542">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Range.setRowProperties
    summary: |-
      <span data-ttu-id="63e5b-543">Aktualisiert den Bereich auf der Grundlage eines eindimensionalen Arrays von Zeileneigenschaften, das Dinge wie die Schriftart, die Füllung, Rahmen, die Ausrichtung usw. enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-543">Updates the range based on a single-dimensional array of row properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="63e5b-544">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-544">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setRowProperties(rowPropertiesData)
    fullName: setRowProperties(rowPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowPropertiesData
          description: '<span data-ttu-id="63e5b-545">Ein Array, das angibt, welche Eigenschaften in jeder Zeile festgelegt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-545">An array that represents which properties to set in each row.</span></span>'
          type:
            - 'SettableRowProperties[]'
  - uid: excel.Excel.Range.showCard
    summary: |-
      <span data-ttu-id="63e5b-546">Zeigt die Karte für eine aktive Zelle an, wenn sie einen hohen Wertinhalt hat.</span><span class="sxs-lookup"><span data-stu-id="63e5b-546">Displays the card for an active cell if it has rich value content.</span></span>

      <span data-ttu-id="63e5b-547">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-547">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Range.showGroupDetails
    summary: |-
      <span data-ttu-id="63e5b-548">Details der Zeilen-oder Spaltengruppe anzeigen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-548">Show details of the row or column group.</span></span>

      <span data-ttu-id="63e5b-549">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-549">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: '<span data-ttu-id="63e5b-550">Gibt an, ob Details zu gruppierten Zeilen oder gruppierten Spalten angezeigt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-550">Specifies whether to show details of grouped rows or grouped columns.</span></span>'
          type:
            - excel.Excel.GroupOption
  - uid: excel.Excel.Range.showGroupDetails_1
    summary: |-
      <span data-ttu-id="63e5b-551">Details der Zeilen-oder Spaltengruppe anzeigen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-551">Show details of the row or column group.</span></span>

      <span data-ttu-id="63e5b-552">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-552">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: showGroupDetails(groupOptionString)
    fullName: showGroupDetails(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: '<span data-ttu-id="63e5b-553">Gibt an, ob Details zu gruppierten Zeilen oder gruppierten Spalten angezeigt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="63e5b-553">Specifies whether to show details of grouped rows or grouped columns.</span></span>'
          type:
            - '"ByRows" | "ByColumns"'
  - uid: excel.Excel.Range.sort
    summary: |-
      <span data-ttu-id="63e5b-554">Stellt die Bereichssortierung des aktuellen Bereichs dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-554">Represents the range sort of the current range.</span></span> <span data-ttu-id="63e5b-555">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-555">Read-only.</span></span>

      <span data-ttu-id="63e5b-556">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-556">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - excel.Excel.RangeSort
  - uid: excel.Excel.Range.style
    summary: |-
      <span data-ttu-id="63e5b-557">Stellt die Formatvorlage des aktuellen Bereichs dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-557">Represents the style of the current range.</span></span> <span data-ttu-id="63e5b-558">Wenn die Formatvorlagen der Zellen inkonsistent sind, wird NULL zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-558">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id="63e5b-559">Für benutzerdefinierte Formatvorlagen wird der Name der Formatvorlage zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-559">For custom styles, the style name will be returned.</span></span> <span data-ttu-id="63e5b-560">Für integrierte Formatvorlagen wird eine Zeichenfolge zurückgegeben, die einen Wert in der Builtin-Enumeration darstellt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-560">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>

      <span data-ttu-id="63e5b-561">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-561">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-562">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-562">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          });
          ```
  - uid: excel.Excel.Range.text
    summary: |-
      <span data-ttu-id="63e5b-563">Textwerte des angegebenen Bereichs.</span><span class="sxs-lookup"><span data-stu-id="63e5b-563">Text values of the specified range.</span></span> <span data-ttu-id="63e5b-564">Der Textwert hängt nicht von der Zellenbreite ab.</span><span class="sxs-lookup"><span data-stu-id="63e5b-564">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="63e5b-565">Die \# Zeichenersetzung, die in der Excel-Benutzeroberfläche geschieht, wirkt sich nicht auf den von der API zurückgegebenen Textwert aus.</span><span class="sxs-lookup"><span data-stu-id="63e5b-565">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="63e5b-566">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-566">Read-only.</span></span>

      <span data-ttu-id="63e5b-567">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-567">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: excel.Excel.Range.toJSON
    summary: '<span data-ttu-id="63e5b-568">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="63e5b-568">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="63e5b-569">.</span><span class="sxs-lookup"><span data-stu-id="63e5b-569"></span></span> <span data-ttu-id="63e5b-570">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="63e5b-570"></span></span><!-- --><span data-ttu-id="63e5b-571">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche Excel. Range-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="63e5b-571">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="63e5b-572">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-572">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - excel.Excel.Interfaces.RangeData
        description: ''
  - uid: excel.Excel.Range.top
    summary: |-
      <span data-ttu-id="63e5b-573">Gibt den Abstand in Punkten zurück, bei 100 % Zoom, vom oberen Rand des Arbeitsblattes bis zum oberen Rand des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="63e5b-573">Returns the distance in points, for 100% zoom, from top edge of the worksheet to top edge of the range.</span></span> <span data-ttu-id="63e5b-574">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-574">Read-only.</span></span>

      <span data-ttu-id="63e5b-575">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-575">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly top: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.track
    summary: '<span data-ttu-id="63e5b-576">Nachverfolgung des Objekts zwecks automatischer Anpassung auf der Grundlage der umgebenden Änderungen im Dokument.</span><span class="sxs-lookup"><span data-stu-id="63e5b-576">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="63e5b-577">Dieser Aufruf ist eine Kurzschreibweise für context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="63e5b-577">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="63e5b-578">Wenn Sie dieses Objekt übergreifend für ".sync"-Aufrufe und außerhalb der sequenziellen Ausführung eines ".run"-Stapels verwenden und beim Festlegen einer Eigenschaft oder Aufrufen einer Methode für das Objekt ein "InvalidObjectPath"-Fehler zurückgegeben wird, hätte das Objekt der nachverfolgten Objektsammlung hinzugefügt werden müssen, in der das Objekt ursprünglich erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="63e5b-578">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.Range.ungroup
    summary: |-
      <span data-ttu-id="63e5b-579">Aufheben der Gruppierung von Spalten und Zeilen für eine Gliederung.</span><span class="sxs-lookup"><span data-stu-id="63e5b-579">Ungroups columns and rows for an outline.</span></span>

      <span data-ttu-id="63e5b-580">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-580">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: Excel.GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: '<span data-ttu-id="63e5b-581">Gibt an, wie der Bereich von Zeilen oder Spalten aufheben kann.</span><span class="sxs-lookup"><span data-stu-id="63e5b-581">Specifies how the range can be ungrouped by rows or columns.</span></span>'
          type:
            - excel.Excel.GroupOption
  - uid: excel.Excel.Range.ungroup_1
    summary: |-
      <span data-ttu-id="63e5b-582">Aufheben der Gruppierung von Spalten und Zeilen für eine Gliederung.</span><span class="sxs-lookup"><span data-stu-id="63e5b-582">Ungroups columns and rows for an outline.</span></span>

      <span data-ttu-id="63e5b-583">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-583">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: ungroup(groupOptionString)
    fullName: ungroup(groupOptionString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOptionString: "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOptionString
          description: '<span data-ttu-id="63e5b-584">Gibt an, wie der Bereich von Zeilen oder Spalten aufheben kann.</span><span class="sxs-lookup"><span data-stu-id="63e5b-584">Specifies how the range can be ungrouped by rows or columns.</span></span>'
          type:
            - '"ByRows" | "ByColumns"'
  - uid: excel.Excel.Range.unmerge
    summary: |-
      <span data-ttu-id="63e5b-585">Hebt den Zellverbund des Bereichs in einzelne Zellen auf.</span><span class="sxs-lookup"><span data-stu-id="63e5b-585">Unmerge the range cells into separate cells.</span></span>

      <span data-ttu-id="63e5b-586">\[[API-Gruppe: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-586">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-587">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-587">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Range.untrack
    summary: '<span data-ttu-id="63e5b-588">Gibt den diesem Objekt zugewiesenen Arbeitsspeicher frei, wenn das Objekt zuvor nachverfolgt wurde.</span><span class="sxs-lookup"><span data-stu-id="63e5b-588">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="63e5b-589">Dieser Aufruf stellt eine Kurzschreibweise für context.trackedObjects.remove(thisObject) dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-589">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="63e5b-590">Viele nachverfolgte Objekte verlangsamen die Ausführung der Hostanwendung, also achten Sie darauf, alle hinzugefügten Objekte nach abgeschlossener Verwendung freizugeben.</span><span class="sxs-lookup"><span data-stu-id="63e5b-590">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="63e5b-591">Sie müssen "context.sync()" aufrufen, damit die Freigabe des Arbeitsspeichers wirksam wird.</span><span class="sxs-lookup"><span data-stu-id="63e5b-591">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="63e5b-592">Beispiele</span><span class="sxs-lookup"><span data-stu-id="63e5b-592">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: excel.Excel.Range.values
    summary: |-
      <span data-ttu-id="63e5b-593">Stellt die Rohwerte des angegebenen Bereichs dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-593">Represents the raw values of the specified range.</span></span> <span data-ttu-id="63e5b-594">Die zurückgegebenen Daten können vom Typ Zeichenfolge, Zahl oder ein boolescher Wert sein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-594">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="63e5b-595">Zellen, die einen Fehler enthalten, geben die Fehlerzeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="63e5b-595">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="63e5b-596">Beim Festlegen von Werten auf einen Bereich kann das value-Argument entweder ein einzelner Wert (String, Number oder Boolean) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="63e5b-596">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="63e5b-597">Wenn es sich bei dem Argument um einen einzelnen Wert handelt, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="63e5b-597">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="63e5b-598">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-598">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel.Excel.Range.valueTypes
    summary: |-
      <span data-ttu-id="63e5b-599">Stellt den Datentyp in jeder Zelle dar.</span><span class="sxs-lookup"><span data-stu-id="63e5b-599">Represents the type of data of each cell.</span></span> <span data-ttu-id="63e5b-600">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-600">Read-only.</span></span>

      <span data-ttu-id="63e5b-601">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-601">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'Excel.RangeValueType[][]'
  - uid: excel.Excel.Range.width
    summary: |-
      <span data-ttu-id="63e5b-602">Gibt den Abstand in Punkten zurück, für 100 % Zoom, vom linken Rand des Bereichs bis zum rechten Rand des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="63e5b-602">Returns the distance in points, for 100% zoom, from left edge of the range to right edge of the range.</span></span> <span data-ttu-id="63e5b-603">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-603">Read-only.</span></span>

      <span data-ttu-id="63e5b-604">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-604">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly width: number;'
      return:
        type:
          - number
  - uid: excel.Excel.Range.worksheet
    summary: |-
      <span data-ttu-id="63e5b-605">Das Arbeitsblatt, das den aktuellen Bereich enthält.</span><span class="sxs-lookup"><span data-stu-id="63e5b-605">The worksheet containing the current range.</span></span> <span data-ttu-id="63e5b-606">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="63e5b-606">Read-only.</span></span>

      <span data-ttu-id="63e5b-607">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="63e5b-607">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet