### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.WorksheetCollection:class'
    summary: |-
      Stellt eine Auflistung der Arbeitsblattobjekte dar, die Teil der Arbeitsmappe sind.

      \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.WorksheetCollection
    fullName: Excel.WorksheetCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.WorksheetCollection#add:member(1)'
      - 'excel!Excel.WorksheetCollection#addFromBase64:member(1)'
      - 'excel!Excel.WorksheetCollection#addFromBase64:member(2)'
      - 'excel!Excel.WorksheetCollection#context:member'
      - 'excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)'
      - 'excel!Excel.WorksheetCollection#getCount:member(1)'
      - 'excel!Excel.WorksheetCollection#getFirst:member(1)'
      - 'excel!Excel.WorksheetCollection#getItem:member(1)'
      - 'excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.WorksheetCollection#getLast:member(1)'
      - 'excel!Excel.WorksheetCollection#items:member'
      - 'excel!Excel.WorksheetCollection#load:member(1)'
      - 'excel!Excel.WorksheetCollection#load:member(2)'
      - 'excel!Excel.WorksheetCollection#load:member(3)'
      - 'excel!Excel.WorksheetCollection#onActivated:member'
      - 'excel!Excel.WorksheetCollection#onAdded:member'
      - 'excel!Excel.WorksheetCollection#onCalculated:member'
      - 'excel!Excel.WorksheetCollection#onChanged:member'
      - 'excel!Excel.WorksheetCollection#onColumnSorted:member'
      - 'excel!Excel.WorksheetCollection#onDeactivated:member'
      - 'excel!Excel.WorksheetCollection#onDeleted:member'
      - 'excel!Excel.WorksheetCollection#onFiltered:member'
      - 'excel!Excel.WorksheetCollection#onFormatChanged:member'
      - 'excel!Excel.WorksheetCollection#onRowHiddenChanged:member'
      - 'excel!Excel.WorksheetCollection#onRowSorted:member'
      - 'excel!Excel.WorksheetCollection#onSelectionChanged:member'
      - 'excel!Excel.WorksheetCollection#onSingleClicked:member'
      - 'excel!Excel.WorksheetCollection#toJSON:member(1)'
  - uid: 'excel!Excel.WorksheetCollection#add:member(1)'
    summary: |-
      Fügt der Arbeitsmappe ein neues Arbeitsblatt hinzu. Das Arbeitsblatt wird automatisch am Ende der vorhandenen Arbeitsblättern hinzugefügt. Wenn Sie das neu hinzugefügte Arbeitsblatt aktivieren möchten, rufen Sie „.activate()“ dazu auf.

      \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name?: string): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sample Name';
              var worksheet = ctx.workbook.worksheets.add(wSheetName);
              worksheet.load('name');
              return ctx.sync().then(function() {
                  console.log(worksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: name
          description: 'Optional. Der Name des hinzuzufügenden Arbeitsblatts. Falls angegeben, sollte der Name eindeutig sein. Falls nicht angegeben, bestimmt Excel den Namen des neuen Arbeitsblatts.'
          type:
            - string
  - uid: 'excel!Excel.WorksheetCollection#addFromBase64:member(1)'
    summary: |-
      Fügt die angegebenen Arbeitsblätter einer Arbeitsmappe in die aktuelle Arbeitsmappe ein.

      * Hinweis * *: Diese API wird derzeit nur für Office unter Windows und Mac unterstützt.

      \[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    isPreview: true
    name: 'addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)'
    fullName: 'addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#addFromBase64~0:complex'
        description: |-
          Ein Array von IDs, die jedem neu eingefügten Arbeitsblatt entsprechen.

          #### <a name="examples"></a>Beispiele

          ```javascript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/85-preview-apis/workbook-insert-external-worksheets.yaml
          const myFile = <HTMLInputElement>document.getElementById("file");
          const reader = new FileReader();

          reader.onload = (event) => {
              Excel.run((context) => {
                  // strip off the metadata before the base64-encoded string
                  const startIndex = reader.result.toString().indexOf("base64,");
                  const workbookContents = reader.result.toString().substr(startIndex + 7);

                  const sheets = context.workbook.worksheets;
                  sheets.addFromBase64(
                      workbookContents,
                      null, // get all the worksheets 
                      Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets
                      );
                  return context.sync();
              });
          };

          // read in the file as a data URL so we can parse the base64-encoded string
          reader.readAsDataURL(myFile.files[0]);
          ```
      parameters:
        - id: base64File
          description: 'Erforderlich. Die Base64-codierte Zeichenfolge, die die Datei der Quellarbeitsmappe darstellt.'
          type:
            - string
        - id: sheetNamesToInsert
          description: Optional. Die Namen der einzufügenden einzelnen Arbeitsblätter. Standardmäßig werden alle Arbeitsblätter aus der Quellarbeitsmappe eingefügt.
          type:
            - 'string[]'
        - id: positionType
          description: Optional. Wo in der aktuellen Arbeitsmappe die neuen Arbeitsblätter eingefügt werden. Weitere Informationen finden Sie unter Excel. WorksheetPositionType. Der Standardwert ist "Start".
          type:
            - 'excel!Excel.WorksheetPositionType:enum'
        - id: relativeTo
          description: 'Optional. Das Arbeitsblatt in der aktuellen Arbeitsmappe, auf das für den Parameter PositionType verwiesen wird. Der Standardwert ist NULL, und basierend auf dem PositionType werden Arbeitsblätter am Anfang oder Ende der aktuellen Arbeitsmappe eingefügt.'
          type:
            - 'excel!Excel.WorksheetCollection#addFromBase64~1:complex'
  - uid: 'excel!Excel.WorksheetCollection#addFromBase64:member(2)'
    summary: |-
      Fügt die angegebenen Arbeitsblätter einer Arbeitsmappe in die aktuelle Arbeitsmappe ein.

      * Hinweis * *: Diese API wird derzeit nur für Office unter Windows und Mac unterstützt.

      \[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)'
    fullName: 'addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#addFromBase64~2:complex'
        description: 'Ein Array von IDs, die jedem neu eingefügten Arbeitsblatt entsprechen.'
      parameters:
        - id: base64File
          description: 'Erforderlich. Die Base64-codierte Zeichenfolge, die die Datei der Quellarbeitsmappe darstellt.'
          type:
            - string
        - id: sheetNamesToInsert
          description: Optional. Die Namen der einzufügenden einzelnen Arbeitsblätter. Standardmäßig werden alle Arbeitsblätter aus der Quellarbeitsmappe eingefügt.
          type:
            - 'string[]'
        - id: positionTypeString
          description: Optional. Wo in der aktuellen Arbeitsmappe die neuen Arbeitsblätter eingefügt werden. Weitere Informationen finden Sie unter Excel. WorksheetPositionType. Der Standardwert ist "Start".
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: 'Optional. Das Arbeitsblatt in der aktuellen Arbeitsmappe, auf das für den Parameter PositionType verwiesen wird. Der Standardwert ist NULL, und basierend auf dem PositionType werden Arbeitsblätter am Anfang oder Ende der aktuellen Arbeitsmappe eingefügt.'
          type:
            - 'excel!Excel.WorksheetCollection#addFromBase64~3:complex'
  - uid: 'excel!Excel.WorksheetCollection#context:member'
    summary: 'Der Anforderungskontext, der mit dem Objekt verknüpft ist. Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)'
    summary: |-
      Ruft das derzeit aktive Arbeitsblatt in der Arbeitsmappe ab.

      \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getActiveWorksheet()
    fullName: getActiveWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveWorksheet(): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Excel.run(function (ctx) {  
              var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();
              activeWorksheet.load('name');
              return ctx.sync().then(function() {
                      console.log(activeWorksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.WorksheetCollection#getCount:member(1)'
    summary: |-
      Ruft die Anzahl von Arbeitsblättern in der Auflistung ab.

      \[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount(visibleOnly)
    fullName: getCount(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#getCount~0:complex'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.'
          type:
            - boolean
  - uid: 'excel!Excel.WorksheetCollection#getFirst:member(1)'
    summary: |-
      Ruft das erste Arbeitsblatt in der Sammlung ab.

      \[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getFirst(visibleOnly)
    fullName: getFirst(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: 'Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.'
          type:
            - boolean
  - uid: 'excel!Excel.WorksheetCollection#getItem:member(1)'
    summary: |-
      Ruft das Arbeitsblattobjekt mithilfe des Namens oder der ID ab.

      \[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: key
          description: Der Name oder die ID des Arbeitsblatts.
          type:
            - string
  - uid: 'excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)'
    summary: |-
      Ruft das Arbeitsblattobjekt mithilfe des Namens oder der ID ab. Wenn das Arbeitsblatt nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.

      \[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: key
          description: Der Name oder die ID des Arbeitsblatts.
          type:
            - string
  - uid: 'excel!Excel.WorksheetCollection#getLast:member(1)'
    summary: |-
      Ruft das letzte Arbeitsblatt in der Sammlung ab.

      \[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getLast(visibleOnly)
    fullName: getLast(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: 'Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.'
          type:
            - boolean
  - uid: 'excel!Excel.WorksheetCollection#items:member'
    summary: Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Worksheet[];'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#items~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
        description: ''
      parameters:
        - id: options
          description: Enthält Optionen für die Eigenschaften des zu ladenden Objekts.
          type:
            - 'excel!Excel.WorksheetCollection#load~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#load:member(2)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Excel.run(function (ctx) { 
              var worksheets = ctx.workbook.worksheets;
              worksheets.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < worksheets.items.length; i++)
                  {
                      console.log(worksheets.items[i].name);
                      console.log(worksheets.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.WorksheetCollection#load:member(3)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und `propertyNamesAndPaths.expand` ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.WorksheetCollection#onActivated:member'
    summary: |-
      Tritt auf, wenn ein beliebiges Arbeitsblatt in der Arbeitsmappe aktiviert wird.

      \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onActivated~0:complex'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onActivated.add(onActivate);

              await context.sync();
              console.log("A handler has been registered for the OnActivate event.");
          });
          ```
  - uid: 'excel!Excel.WorksheetCollection#onAdded:member'
    summary: |-
      Tritt ein, wenn der Arbeitsmappe ein neues Arbeitsblatt hinzugefügt wird.

      \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onAdded
    fullName: onAdded
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onAdded~0:complex'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets;
              sheet.onAdded.add(onWorksheetAdd);

              await context.sync();
              console.log("A handler has been registered for the OnAdded event.");
          });
          ```
  - uid: 'excel!Excel.WorksheetCollection#onCalculated:member'
    summary: |-
      Tritt auf, wenn ein beliebiges Arbeitsblatt in der Arbeitsmappe berechnet wird.

      \[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onCalculated~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onChanged:member'
    summary: |-
      Tritt ein, wenn eines der Arbeitsblätter in der Arbeitsmappe geändert wird.

      \[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onChanged~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onColumnSorted:member'
    summary: |-
      Tritt auf, wenn eine oder mehrere Spalten sortiert wurden. Dies geschieht, wenn Spalten von links nach rechts sortiert werden.

      \[[API-Gruppe: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onColumnSorted
    fullName: onColumnSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onColumnSorted: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onColumnSorted~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onDeactivated:member'
    summary: |-
      Tritt auf, wenn ein beliebiges Arbeitsblatt in der Arbeitsmappe deaktiviert wird.

      \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onDeactivated~0:complex'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/30-events/events-workbook-and-worksheet-collection.yaml
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onDeactivated.add(onDeactivate);

              await context.sync();
              console.log("A handler has been registered for the OnDeactivate event.");
          });
          ```
  - uid: 'excel!Excel.WorksheetCollection#onDeleted:member'
    summary: |-
      Tritt ein, wenn ein Arbeitsblatt aus der Arbeitsmappe gelöscht wird.

      \[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onDeleted
    fullName: onDeleted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onDeleted~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onFiltered:member'
    summary: |-
      Tritt ein, wenn ein Filter eines beliebigen Arbeitsblatts in der Arbeitsmappe angewendet wird.

      \[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    isPreview: true
    name: onFiltered
    fullName: onFiltered
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onFiltered~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onFormatChanged:member'
    summary: |-
      Tritt ein, wenn sich eins der Arbeitsblätter in der Arbeitsmappe geändert hat.

      \[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onFormatChanged
    fullName: onFormatChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onFormatChanged~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onRowHiddenChanged:member'
    summary: |-
      Tritt auf, wenn sich der ausgeblendete Status einer oder mehrerer Zeilen in einem bestimmten Arbeitsblatt geändert hat.

      \[[API-Gruppe: ExcelApi 1,11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onRowHiddenChanged
    fullName: onRowHiddenChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowHiddenChanged: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onRowHiddenChanged~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onRowSorted:member'
    summary: |-
      Tritt auf, wenn eine oder mehrere Zeilen sortiert wurden. Dies geschieht, wenn Zeilen von oben nach unten sortiert werden.

      \[[API-Gruppe: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onRowSorted
    fullName: onRowSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowSorted: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onRowSorted~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onSelectionChanged:member'
    summary: |-
      Tritt ein, wenn sich die Auswahl auf einem beliebigen Arbeitsblatt ändert.

      \[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onSelectionChanged~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#onSingleClicked:member'
    summary: |-
      Tritt auf, wenn der Linksklick-/abgegriffene Vorgang in der Worksheet-Auflistung erfolgt. Dieses Ereignis wird nicht ausgelöst, wenn in den folgenden Fällen darauf geklickt wird:-der Benutzer zieht die Maus für Mehrfachauswahl. -Der Benutzer wählt eine Zelle im Modus aus, wenn Zellen Argumente für Formelverweise ausgewählt sind.

      \[[API-Gruppe: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: onSingleClicked
    fullName: onSingleClicked
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSingleClicked: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#onSingleClicked~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#toJSON:member(1)'
    summary: 'Überschreibt die JavaScript `toJSON()` -Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche `Excel.WorksheetCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.WorksheetCollectionData`<!-- -->), die ein "Items"-Array mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetCollectionData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.WorksheetCollection#addFromBase64~0:complex'
    name: 'OfficeExtension.ClientResult<string[]>'
    fullName: 'OfficeExtension.ClientResult<string[]>'
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: '<string[]>'
        fullName: '<string[]>'
  - uid: 'excel!Excel.WorksheetPositionType:enum'
    name: Excel.WorksheetPositionType
  - uid: 'excel!Excel.WorksheetCollection#addFromBase64~1:complex'
    name: Worksheet | string
    fullName: Excel.Worksheet | string
    spec.typeScript:
      - uid: 'excel!Excel.Worksheet:class'
        name: Worksheet
        fullName: Excel.Worksheet
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.WorksheetCollection#addFromBase64~2:complex'
    name: 'OfficeExtension.ClientResult<string[]>'
    fullName: 'OfficeExtension.ClientResult<string[]>'
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: '<string[]>'
        fullName: '<string[]>'
  - uid: 'excel!Excel.WorksheetCollection#addFromBase64~3:complex'
    name: Worksheet | string
    fullName: Excel.Worksheet | string
    spec.typeScript:
      - uid: 'excel!Excel.Worksheet:class'
        name: Worksheet
        fullName: Excel.Worksheet
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.WorksheetCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.WorksheetCollection#items~0:complex'
    name: 'Excel.Worksheet[]'
    fullName: 'Excel.Worksheet[]'
    spec.typeScript:
      - uid: 'excel!Excel.Worksheet:class'
        name: Excel.Worksheet
        fullName: Excel.Worksheet
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.WorksheetCollection:class'
    name: Excel.WorksheetCollection
  - uid: 'excel!Excel.WorksheetCollection#load~0:complex'
    name: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.WorksheetCollectionLoadOptions:interface'
        name: Excel.Interfaces.WorksheetCollectionLoadOptions
        fullName: Excel.Interfaces.WorksheetCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.WorksheetCollection#onActivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetActivatedEventArgs:interface'
        name: Excel.WorksheetActivatedEventArgs
        fullName: Excel.WorksheetActivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onAdded~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetAddedEventArgs:interface'
        name: Excel.WorksheetAddedEventArgs
        fullName: Excel.WorksheetAddedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onCalculated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetCalculatedEventArgs:interface'
        name: Excel.WorksheetCalculatedEventArgs
        fullName: Excel.WorksheetCalculatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetChangedEventArgs:interface'
        name: Excel.WorksheetChangedEventArgs
        fullName: Excel.WorksheetChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onColumnSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetColumnSortedEventArgs:interface'
        name: Excel.WorksheetColumnSortedEventArgs
        fullName: Excel.WorksheetColumnSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onDeactivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeactivatedEventArgs:interface'
        name: Excel.WorksheetDeactivatedEventArgs
        fullName: Excel.WorksheetDeactivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onDeleted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeletedEventArgs:interface'
        name: Excel.WorksheetDeletedEventArgs
        fullName: Excel.WorksheetDeletedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onFiltered~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFilteredEventArgs:interface'
        name: Excel.WorksheetFilteredEventArgs
        fullName: Excel.WorksheetFilteredEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onFormatChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFormatChangedEventArgs:interface'
        name: Excel.WorksheetFormatChangedEventArgs
        fullName: Excel.WorksheetFormatChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onRowHiddenChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetRowHiddenChangedEventArgs:interface'
        name: Excel.WorksheetRowHiddenChangedEventArgs
        fullName: Excel.WorksheetRowHiddenChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onRowSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetRowSortedEventArgs:interface'
        name: Excel.WorksheetRowSortedEventArgs
        fullName: Excel.WorksheetRowSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSelectionChangedEventArgs:interface'
        name: Excel.WorksheetSelectionChangedEventArgs
        fullName: Excel.WorksheetSelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.WorksheetCollection#onSingleClicked~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    spec.typeScript:
      - uid: 'office!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSingleClickedEventArgs:interface'
        name: Excel.WorksheetSingleClickedEventArgs
        fullName: Excel.WorksheetSingleClickedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Interfaces.WorksheetCollectionData:interface'
    name: Excel.Interfaces.WorksheetCollectionData