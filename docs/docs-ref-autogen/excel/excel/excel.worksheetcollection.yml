### YamlMime:UniversalReference
items:
  - uid: excel.Excel.WorksheetCollection
    summary: |-
      <span data-ttu-id="d8909-101">Stellt eine Auflistung der Arbeitsblattobjekte dar, die Teil der Arbeitsmappe sind.</span><span class="sxs-lookup"><span data-stu-id="d8909-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>

      <span data-ttu-id="d8909-102">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.WorksheetCollection
    fullName: Excel.WorksheetCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.WorksheetCollection.add
      - excel.Excel.WorksheetCollection.addFromBase64
      - excel.Excel.WorksheetCollection.addFromBase64_1
      - excel.Excel.WorksheetCollection.context
      - excel.Excel.WorksheetCollection.getActiveWorksheet
      - excel.Excel.WorksheetCollection.getCount
      - excel.Excel.WorksheetCollection.getFirst
      - excel.Excel.WorksheetCollection.getItem
      - excel.Excel.WorksheetCollection.getItemOrNullObject
      - excel.Excel.WorksheetCollection.getLast
      - excel.Excel.WorksheetCollection.items
      - excel.Excel.WorksheetCollection.load
      - excel.Excel.WorksheetCollection.load_1
      - excel.Excel.WorksheetCollection.load_2
      - excel.Excel.WorksheetCollection.onActivated
      - excel.Excel.WorksheetCollection.onAdded
      - excel.Excel.WorksheetCollection.onCalculated
      - excel.Excel.WorksheetCollection.onChanged
      - excel.Excel.WorksheetCollection.onColumnSorted
      - excel.Excel.WorksheetCollection.onDeactivated
      - excel.Excel.WorksheetCollection.onDeleted
      - excel.Excel.WorksheetCollection.onFiltered
      - excel.Excel.WorksheetCollection.onFormatChanged
      - excel.Excel.WorksheetCollection.onRowHiddenChanged
      - excel.Excel.WorksheetCollection.onRowSorted
      - excel.Excel.WorksheetCollection.onSelectionChanged
      - excel.Excel.WorksheetCollection.onSingleClicked
      - excel.Excel.WorksheetCollection.toJSON
  - uid: excel.Excel.WorksheetCollection.add
    summary: |-
      <span data-ttu-id="d8909-p101">Fügt der Arbeitsmappe ein neues Arbeitsblatt hinzu. Das Arbeitsblatt wird automatisch am Ende der vorhandenen Arbeitsblättern hinzugefügt. Wenn Sie das neu hinzugefügte Arbeitsblatt aktivieren möchten, rufen Sie „.activate()“ dazu auf.</span><span class="sxs-lookup"><span data-stu-id="d8909-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>

      <span data-ttu-id="d8909-106">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name?: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d8909-107">Beispiele</span><span class="sxs-lookup"><span data-stu-id="d8909-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sample Name';
              var worksheet = ctx.workbook.worksheets.add(wSheetName);
              worksheet.load('name');
              return ctx.sync().then(function() {
                  console.log(worksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: name
          description: '<span data-ttu-id="d8909-p102">Optional. Der Name des hinzuzufügenden Arbeitsblatts. Falls angegeben, sollte der Name eindeutig sein. Falls nicht angegeben, bestimmt Excel den Namen des neuen Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="d8909-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>'
          type:
            - string
  - uid: excel.Excel.WorksheetCollection.addFromBase64
    summary: |-
      <span data-ttu-id="d8909-112">Fügt die angegebenen Arbeitsblätter einer Arbeitsmappe in die aktuelle Arbeitsmappe ein.</span><span class="sxs-lookup"><span data-stu-id="d8909-112">Inserts the specified worksheets of a workbook into the current workbook.</span></span>

      <span data-ttu-id="d8909-113">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-113">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)'
    fullName: 'addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<string[]>'
        description: |-
          <span data-ttu-id="d8909-114">Ein Array von IDs, die jedem neu eingefügten Arbeitsblatt entsprechen.</span><span class="sxs-lookup"><span data-stu-id="d8909-114">An array of ids corresponding to each newly inserted worksheet.</span></span>

          #### <a name="examples"></a><span data-ttu-id="d8909-115">Beispiele</span><span class="sxs-lookup"><span data-stu-id="d8909-115">Examples</span></span>

          ```javascript
          const myFile = <HTMLInputElement>document.getElementById("file");
          const reader = new FileReader();

          reader.onload = (event) => {
              Excel.run((context) => {
                  // strip off the metadata before the base64-encoded string
                  const startIndex = reader.result.toString().indexOf("base64,");
                  const workbookContents = reader.result.toString().substr(startIndex + 7);

                  const sheets = context.workbook.worksheets;
                  sheets.addFromBase64(
                      workbookContents,
                      null, // get all the worksheets 
                      Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets
                      );
                  return context.sync();
              });
          };

          // read in the file as a data URL so we can parse the base64-encoded string
          reader.readAsDataURL(myFile.files[0]);
          ```
      parameters:
        - id: base64File
          description: '<span data-ttu-id="d8909-116">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="d8909-116">Required.</span></span> <span data-ttu-id="d8909-117">Die Base64-codierte Zeichenfolge, die die Datei der Quellarbeitsmappe darstellt.</span><span class="sxs-lookup"><span data-stu-id="d8909-117">The base64-encoded string representing the source workbook file.</span></span>'
          type:
            - string
        - id: sheetNamesToInsert
          description: '<span data-ttu-id="d8909-118">Optional.</span><span class="sxs-lookup"><span data-stu-id="d8909-118">Optional.</span></span> <span data-ttu-id="d8909-119">Die Namen der einzufügenden einzelnen Arbeitsblätter.</span><span class="sxs-lookup"><span data-stu-id="d8909-119">The names of individual worksheets to insert.</span></span> <span data-ttu-id="d8909-120">Standardmäßig werden alle Arbeitsblätter aus der Quellarbeitsmappe eingefügt.</span><span class="sxs-lookup"><span data-stu-id="d8909-120">By default, all the worksheets from the source workbook are inserted.</span></span>'
          type:
            - 'string[]'
        - id: positionType
          description: <span data-ttu-id="d8909-121">Optional.</span><span class="sxs-lookup"><span data-stu-id="d8909-121">Optional.</span></span> <span data-ttu-id="d8909-122">Wo in der aktuellen Arbeitsmappe die neuen Arbeitsblätter eingefügt werden.</span><span class="sxs-lookup"><span data-stu-id="d8909-122">Where in the current workbook the new worksheets will be inserted.</span></span> <span data-ttu-id="d8909-123">Weitere Informationen finden Sie unter Excel. WorksheetPositionType.</span><span class="sxs-lookup"><span data-stu-id="d8909-123">See Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="d8909-124">Der Standardwert ist "Start".</span><span class="sxs-lookup"><span data-stu-id="d8909-124">Default is "Start".</span></span>
          type:
            - excel.Excel.WorksheetPositionType
        - id: relativeTo
          description: '<span data-ttu-id="d8909-125">Optional.</span><span class="sxs-lookup"><span data-stu-id="d8909-125">Optional.</span></span> <span data-ttu-id="d8909-126">Das Arbeitsblatt in der aktuellen Arbeitsmappe, auf das für den Parameter PositionType verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-126">The worksheet in the current workbook that is referenced for the positionType parameter.</span></span> <span data-ttu-id="d8909-127">Der Standardwert ist NULL, und basierend auf dem PositionType werden Arbeitsblätter am Anfang oder Ende der aktuellen Arbeitsmappe eingefügt.</span><span class="sxs-lookup"><span data-stu-id="d8909-127">Default is null and, based on positionType, it will insert worksheets at the start or end of the current workbook.</span></span>'
          type:
            - Worksheet | string
  - uid: excel.Excel.WorksheetCollection.addFromBase64_1
    summary: |-
      <span data-ttu-id="d8909-128">Fügt die angegebenen Arbeitsblätter einer Arbeitsmappe in die aktuelle Arbeitsmappe ein.</span><span class="sxs-lookup"><span data-stu-id="d8909-128">Inserts the specified worksheets of a workbook into the current workbook.</span></span>

      <span data-ttu-id="d8909-129">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-129">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)'
    fullName: 'addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<string[]>'
        description: '<span data-ttu-id="d8909-130">Ein Array von IDs, die jedem neu eingefügten Arbeitsblatt entsprechen.</span><span class="sxs-lookup"><span data-stu-id="d8909-130">An array of ids corresponding to each newly inserted worksheet.</span></span>'
      parameters:
        - id: base64File
          description: '<span data-ttu-id="d8909-131">Erforderlich.</span><span class="sxs-lookup"><span data-stu-id="d8909-131">Required.</span></span> <span data-ttu-id="d8909-132">Die Base64-codierte Zeichenfolge, die die Datei der Quellarbeitsmappe darstellt.</span><span class="sxs-lookup"><span data-stu-id="d8909-132">The base64-encoded string representing the source workbook file.</span></span>'
          type:
            - string
        - id: sheetNamesToInsert
          description: '<span data-ttu-id="d8909-133">Optional.</span><span class="sxs-lookup"><span data-stu-id="d8909-133">Optional.</span></span> <span data-ttu-id="d8909-134">Die Namen der einzufügenden einzelnen Arbeitsblätter.</span><span class="sxs-lookup"><span data-stu-id="d8909-134">The names of individual worksheets to insert.</span></span> <span data-ttu-id="d8909-135">Standardmäßig werden alle Arbeitsblätter aus der Quellarbeitsmappe eingefügt.</span><span class="sxs-lookup"><span data-stu-id="d8909-135">By default, all the worksheets from the source workbook are inserted.</span></span>'
          type:
            - 'string[]'
        - id: positionTypeString
          description: <span data-ttu-id="d8909-136">Optional.</span><span class="sxs-lookup"><span data-stu-id="d8909-136">Optional.</span></span> <span data-ttu-id="d8909-137">Wo in der aktuellen Arbeitsmappe die neuen Arbeitsblätter eingefügt werden.</span><span class="sxs-lookup"><span data-stu-id="d8909-137">Where in the current workbook the new worksheets will be inserted.</span></span> <span data-ttu-id="d8909-138">Weitere Informationen finden Sie unter Excel. WorksheetPositionType.</span><span class="sxs-lookup"><span data-stu-id="d8909-138">See Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="d8909-139">Der Standardwert ist "Start".</span><span class="sxs-lookup"><span data-stu-id="d8909-139">Default is "Start".</span></span>
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: '<span data-ttu-id="d8909-140">Optional.</span><span class="sxs-lookup"><span data-stu-id="d8909-140">Optional.</span></span> <span data-ttu-id="d8909-141">Das Arbeitsblatt in der aktuellen Arbeitsmappe, auf das für den Parameter PositionType verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-141">The worksheet in the current workbook that is referenced for the positionType parameter.</span></span> <span data-ttu-id="d8909-142">Der Standardwert ist NULL, und basierend auf dem PositionType werden Arbeitsblätter am Anfang oder Ende der aktuellen Arbeitsmappe eingefügt.</span><span class="sxs-lookup"><span data-stu-id="d8909-142">Default is null and, based on positionType, it will insert worksheets at the start or end of the current workbook.</span></span>'
          type:
            - Worksheet | string
  - uid: excel.Excel.WorksheetCollection.context
    summary: '<span data-ttu-id="d8909-143">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="d8909-143">The request context associated with the object.</span></span> <span data-ttu-id="d8909-144">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="d8909-144">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.WorksheetCollection.getActiveWorksheet
    summary: |-
      <span data-ttu-id="d8909-145">Ruft das derzeit aktive Arbeitsblatt in der Arbeitsmappe ab.</span><span class="sxs-lookup"><span data-stu-id="d8909-145">Gets the currently active worksheet in the workbook.</span></span>

      <span data-ttu-id="d8909-146">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-146">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getActiveWorksheet()
    fullName: getActiveWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveWorksheet(): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d8909-147">Beispiele</span><span class="sxs-lookup"><span data-stu-id="d8909-147">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {  
              var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();
              activeWorksheet.load('name');
              return ctx.sync().then(function() {
                      console.log(activeWorksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.WorksheetCollection.getCount
    summary: |-
      <span data-ttu-id="d8909-148">Ruft die Anzahl von Arbeitsblättern in der Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="d8909-148">Gets the number of worksheets in the collection.</span></span>

      <span data-ttu-id="d8909-149">\[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-149">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount(visibleOnly)
    fullName: getCount(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="d8909-150">Optional.</span><span class="sxs-lookup"><span data-stu-id="d8909-150">Optional.</span></span> <span data-ttu-id="d8909-151">Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.</span><span class="sxs-lookup"><span data-stu-id="d8909-151">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.WorksheetCollection.getFirst
    summary: |-
      <span data-ttu-id="d8909-152">Ruft das erste Arbeitsblatt in der Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="d8909-152">Gets the first worksheet in the collection.</span></span>

      <span data-ttu-id="d8909-153">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-153">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getFirst(visibleOnly)
    fullName: getFirst(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d8909-154">Beispiele</span><span class="sxs-lookup"><span data-stu-id="d8909-154">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="d8909-155">Optional.</span><span class="sxs-lookup"><span data-stu-id="d8909-155">Optional.</span></span> <span data-ttu-id="d8909-156">Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.</span><span class="sxs-lookup"><span data-stu-id="d8909-156">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.WorksheetCollection.getItem
    summary: |-
      <span data-ttu-id="d8909-157">Ruft das Arbeitsblattobjekt mithilfe des Namens oder der ID ab.</span><span class="sxs-lookup"><span data-stu-id="d8909-157">Gets a worksheet object using its Name or ID.</span></span>

      <span data-ttu-id="d8909-158">\[[API-Gruppe: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-158">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="d8909-159">Der Name oder die ID des Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="d8909-159">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: excel.Excel.WorksheetCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="d8909-160">Ruft das Arbeitsblattobjekt mithilfe des Namens oder der ID ab.</span><span class="sxs-lookup"><span data-stu-id="d8909-160">Gets a worksheet object using its Name or ID.</span></span> <span data-ttu-id="d8909-161">Wenn das Arbeitsblatt nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="d8909-161">If the worksheet does not exist, will return a null object.</span></span>

      <span data-ttu-id="d8909-162">\[[API-Gruppe: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-162">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="d8909-163">Der Name oder die ID des Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="d8909-163">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: excel.Excel.WorksheetCollection.getLast
    summary: |-
      <span data-ttu-id="d8909-164">Ruft das letzte Arbeitsblatt in der Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="d8909-164">Gets the last worksheet in the collection.</span></span>

      <span data-ttu-id="d8909-165">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-165">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLast(visibleOnly)
    fullName: getLast(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d8909-166">Beispiele</span><span class="sxs-lookup"><span data-stu-id="d8909-166">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="d8909-167">Optional.</span><span class="sxs-lookup"><span data-stu-id="d8909-167">Optional.</span></span> <span data-ttu-id="d8909-168">Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.</span><span class="sxs-lookup"><span data-stu-id="d8909-168">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.WorksheetCollection.items
    summary: <span data-ttu-id="d8909-169">Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="d8909-169">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Worksheet[];'
      return:
        type:
          - 'Excel.Worksheet[]'
  - uid: excel.Excel.WorksheetCollection.load
    summary: <span data-ttu-id="d8909-170">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="d8909-170">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d8909-171">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="d8909-171">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="d8909-172">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="d8909-172">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="d8909-173">`load(option?: string | string[]): Excel.WorksheetCollection`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="d8909-173">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="d8909-174">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="d8909-174">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="d8909-175">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="d8909-175">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="d8909-176">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="d8909-176">It is similar to the preceding signature.</span></span> <span data-ttu-id="d8909-177">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können.</span><span class="sxs-lookup"><span data-stu-id="d8909-177">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="d8909-178">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="d8909-178">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="d8909-179">Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.</span><span class="sxs-lookup"><span data-stu-id="d8909-179">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.WorksheetCollection.load_1
    summary: <span data-ttu-id="d8909-180">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="d8909-180">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d8909-181">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="d8909-181">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d8909-182">Beispiele</span><span class="sxs-lookup"><span data-stu-id="d8909-182">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var worksheets = ctx.workbook.worksheets;
              worksheets.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < worksheets.items.length; i++)
                  {
                      console.log(worksheets.items[i].name);
                      console.log(worksheets.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="d8909-183">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="d8909-183">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.WorksheetCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.WorksheetCollection.onActivated
    summary: |-
      <span data-ttu-id="d8909-184">Tritt auf, wenn ein beliebiges Arbeitsblatt in der Arbeitsmappe aktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-184">Occurs when any worksheet in the workbook is activated.</span></span>

      <span data-ttu-id="d8909-185">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-185">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d8909-186">Beispiele</span><span class="sxs-lookup"><span data-stu-id="d8909-186">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onActivated.add(onActivate);

              await context.sync();
              console.log("A handler has been registered for the OnActivate event.");
          });
          ```
  - uid: excel.Excel.WorksheetCollection.onAdded
    summary: |-
      <span data-ttu-id="d8909-187">Tritt ein, wenn der Arbeitsmappe ein neues Arbeitsblatt hinzugefügt wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-187">Occurs when a new worksheet is added to the workbook.</span></span>

      <span data-ttu-id="d8909-188">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-188">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onAdded
    fullName: onAdded
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d8909-189">Beispiele</span><span class="sxs-lookup"><span data-stu-id="d8909-189">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets;
              sheet.onAdded.add(onWorksheetAdd);

              await context.sync();
              console.log("A handler has been registered for the OnAdded event.");
          });
          ```
  - uid: excel.Excel.WorksheetCollection.onCalculated
    summary: |-
      <span data-ttu-id="d8909-190">Tritt auf, wenn ein beliebiges Arbeitsblatt in der Arbeitsmappe berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-190">Occurs when any worksheet in the workbook is calculated.</span></span>

      <span data-ttu-id="d8909-191">\[[API-Gruppe: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-191">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onChanged
    summary: |-
      <span data-ttu-id="d8909-192">Tritt ein, wenn eines der Arbeitsblätter in der Arbeitsmappe geändert wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-192">Occurs when any worksheet in the workbook is changed.</span></span>

      <span data-ttu-id="d8909-193">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-193">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onColumnSorted
    summary: |-
      <span data-ttu-id="d8909-194">Tritt ein, wenn nach Spalten sortiert wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-194">Occurs when sorting on columns.</span></span>

      <span data-ttu-id="d8909-195">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-195">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onColumnSorted
    fullName: onColumnSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onColumnSorted: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onDeactivated
    summary: |-
      <span data-ttu-id="d8909-196">Tritt auf, wenn ein beliebiges Arbeitsblatt in der Arbeitsmappe deaktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-196">Occurs when any worksheet in the workbook is deactivated.</span></span>

      <span data-ttu-id="d8909-197">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-197">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d8909-198">Beispiele</span><span class="sxs-lookup"><span data-stu-id="d8909-198">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let sheets = context.workbook.worksheets;
              sheets.onDeactivated.add(onDeactivate);

              await context.sync();
              console.log("A handler has been registered for the OnDeactivate event.");
          });
          ```
  - uid: excel.Excel.WorksheetCollection.onDeleted
    summary: |-
      <span data-ttu-id="d8909-199">Tritt ein, wenn ein Arbeitsblatt aus der Arbeitsmappe gelöscht wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-199">Occurs when a worksheet is deleted from the workbook.</span></span>

      <span data-ttu-id="d8909-200">\[[API-Gruppe: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-200">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDeleted
    fullName: onDeleted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onFiltered
    summary: |-
      <span data-ttu-id="d8909-201">Tritt ein, wenn ein Filter eines beliebigen Arbeitsblatts in der Arbeitsmappe angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-201">Occurs when any worksheet's filter is applied in the workbook.</span></span>

      <span data-ttu-id="d8909-202">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-202">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onFiltered
    fullName: onFiltered
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
  - uid: excel.Excel.WorksheetCollection.onFormatChanged
    summary: |-
      <span data-ttu-id="d8909-203">Tritt ein, wenn sich eins der Arbeitsblätter in der Arbeitsmappe geändert hat.</span><span class="sxs-lookup"><span data-stu-id="d8909-203">Occurs when any worksheet in the workbook has format changed.</span></span>

      <span data-ttu-id="d8909-204">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-204">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onFormatChanged
    fullName: onFormatChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onRowHiddenChanged
    summary: |-
      <span data-ttu-id="d8909-205">Tritt auf, wenn in einem Arbeitsblatt in der Arbeitsmappe der Zeilen ausgeblendete Status geändert wurde.</span><span class="sxs-lookup"><span data-stu-id="d8909-205">Occurs when any worksheet in the workbook has row hidden state changed.</span></span>

      <span data-ttu-id="d8909-206">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-206">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowHiddenChanged
    fullName: onRowHiddenChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowHiddenChanged: OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetRowHiddenChangedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onRowSorted
    summary: |-
      <span data-ttu-id="d8909-207">Tritt ein, wenn nach Zeilen sortiert wird.</span><span class="sxs-lookup"><span data-stu-id="d8909-207">Occurs when sorting on rows.</span></span>

      <span data-ttu-id="d8909-208">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-208">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onRowSorted
    fullName: onRowSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowSorted: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onSelectionChanged
    summary: |-
      <span data-ttu-id="d8909-209">Tritt ein, wenn sich die Auswahl auf einem beliebigen Arbeitsblatt ändert.</span><span class="sxs-lookup"><span data-stu-id="d8909-209">Occurs when the selection changes on any worksheet.</span></span>

      <span data-ttu-id="d8909-210">\[[API-Gruppe: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-210">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
  - uid: excel.Excel.WorksheetCollection.onSingleClicked
    summary: |-
      <span data-ttu-id="d8909-211">Tritt auf, wenn der Linksklick-/abgegriffene Vorgang in der Worksheet-Auflistung erfolgt.</span><span class="sxs-lookup"><span data-stu-id="d8909-211">Occurs when left-clicked/tapped operation happens in the worksheet collection.</span></span> <span data-ttu-id="d8909-212">Dieses Ereignis wird nicht ausgelöst, wenn in den folgenden Fällen darauf geklickt wird:-der Benutzer zieht die Maus für Mehrfachauswahl.</span><span class="sxs-lookup"><span data-stu-id="d8909-212">This event will not be fired when clicking in the following cases: - The user drags the mouse for multi-selection.</span></span> <span data-ttu-id="d8909-213">-Der Benutzer wählt eine Zelle im Modus aus, wenn Zellen Argumente für Formelverweise ausgewählt sind.</span><span class="sxs-lookup"><span data-stu-id="d8909-213">- The user selects a cell in the mode when cell arguments are selected for formula references.</span></span>

      <span data-ttu-id="d8909-214">\[[API-Gruppe: ExcelApi Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d8909-214">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: onSingleClicked
    fullName: onSingleClicked
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSingleClicked: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
  - uid: excel.Excel.WorksheetCollection.toJSON
    summary: '<span data-ttu-id="d8909-215">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="d8909-215">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="d8909-216">.</span><span class="sxs-lookup"><span data-stu-id="d8909-216"></span></span> <span data-ttu-id="d8909-217">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="d8909-217"></span></span><!-- --><span data-ttu-id="d8909-218">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche `Excel.WorksheetCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.WorksheetCollectionData`</span><span class="sxs-lookup"><span data-stu-id="d8909-218">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`</span></span><!-- --><span data-ttu-id="d8909-219">), die ein "Items"-Array mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.</span><span class="sxs-lookup"><span data-stu-id="d8909-219">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetCollectionData
        description: ''