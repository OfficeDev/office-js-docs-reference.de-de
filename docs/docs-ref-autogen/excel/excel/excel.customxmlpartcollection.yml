### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPartCollection
    summary: |-
      <span data-ttu-id="8bdfe-101">Eine Auflistung von benutzerdefinierten XML-Komponenten.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-101">A collection of custom XML parts.</span></span>

      <span data-ttu-id="8bdfe-102">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bdfe-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPartCollection
    fullName: Excel.CustomXmlPartCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.CustomXmlPartCollection.add
      - excel.Excel.CustomXmlPartCollection.context
      - excel.Excel.CustomXmlPartCollection.getByNamespace
      - excel.Excel.CustomXmlPartCollection.getCount
      - excel.Excel.CustomXmlPartCollection.getItem
      - excel.Excel.CustomXmlPartCollection.getItemOrNullObject
      - excel.Excel.CustomXmlPartCollection.items
      - excel.Excel.CustomXmlPartCollection.load
      - excel.Excel.CustomXmlPartCollection.load_1
      - excel.Excel.CustomXmlPartCollection.load_2
      - excel.Excel.CustomXmlPartCollection.toJSON
  - uid: excel.Excel.CustomXmlPartCollection.add
    summary: |-
      <span data-ttu-id="8bdfe-103">Fügt der Arbeitsmappe eine neue benutzerdefinierte XML-Komponente hinzu.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-103">Adds a new custom XML part to the workbook.</span></span>

      <span data-ttu-id="8bdfe-104">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bdfe-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(xml)
    fullName: add(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(xml: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8bdfe-105">Beispiele</span><span class="sxs-lookup"><span data-stu-id="8bdfe-105">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="8bdfe-106">XML-Inhalt.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-106">XML content.</span></span> <span data-ttu-id="8bdfe-107">Es muss sich um ein gültiges XML-Fragment handeln.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-107">Must be a valid XML fragment.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.context
    summary: '<span data-ttu-id="8bdfe-108">Der Anforderungskontext, der mit dem Objekt verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-108">The request context associated with the object.</span></span> <span data-ttu-id="8bdfe-109">Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-109">This connects the add-in''s process to the Office host application''s process.</span></span>'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.CustomXmlPartCollection.getByNamespace
    summary: |-
      <span data-ttu-id="8bdfe-110">Ruft eine neue bereichsbezogene Sammlung von benutzerdefinierten XML-Komponenten ab, deren Namespaces dem angegebenen Namespace entsprechen.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-110">Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.</span></span>

      <span data-ttu-id="8bdfe-111">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bdfe-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getByNamespace(namespaceUri)
    fullName: getByNamespace(namespaceUri)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByNamespace(namespaceUri: string): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8bdfe-112">Beispiele</span><span class="sxs-lookup"><span data-stu-id="8bdfe-112">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
      parameters:
        - id: namespaceUri
          description: '<span data-ttu-id="8bdfe-113">Hierbei muss es sich um einen vollqualifizierten Schema-URI handeln. Beispiel: "http://schemas.contoso.com/review/1.0".</span><span class="sxs-lookup"><span data-stu-id="8bdfe-113">This must be a fully qualified schema URI; for example, "http://schemas.contoso.com/review/1.0".</span></span>'
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.getCount
    summary: |-
      <span data-ttu-id="8bdfe-114">Ruft die Anzahl von CustomXml-Komponenten in der Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-114">Gets the number of CustomXml parts in the collection.</span></span>

      <span data-ttu-id="8bdfe-115">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bdfe-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.CustomXmlPartCollection.getItem
    summary: |-
      <span data-ttu-id="8bdfe-116">Ruft eine benutzerdefinierte XML-Komponente basierend auf ihrer ID ab.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-116">Gets a custom XML part based on its ID.</span></span>

      <span data-ttu-id="8bdfe-117">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bdfe-117">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8bdfe-118">Beispiele</span><span class="sxs-lookup"><span data-stu-id="8bdfe-118">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: '<span data-ttu-id="8bdfe-119">ID des Objekts, das abgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-119">ID of the object to be retrieved.</span></span>'
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="8bdfe-120">Ruft eine benutzerdefinierte XML-Komponente basierend auf ihrer ID ab.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-120">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="8bdfe-121">Wenn das CustomXMLPart-Objekt nicht vorhanden ist, wird die IsNull-Eigenschaft des Rückgabe Objekts auf true festgelegt.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-121">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>

      <span data-ttu-id="8bdfe-122">\[[API-Gruppe: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8bdfe-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: '<span data-ttu-id="8bdfe-123">ID des Objekts, das abgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-123">ID of the object to be retrieved.</span></span>'
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.items
    summary: <span data-ttu-id="8bdfe-124">Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-124">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel.Excel.CustomXmlPartCollection.load
    summary: <span data-ttu-id="8bdfe-125">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8bdfe-126">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-126">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="8bdfe-127">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="8bdfe-127">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="8bdfe-128">`load(option?: string | string[]): Excel.CustomXmlPartCollection`-Wobei Option eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-128">`load(option?: string | string[]): Excel.CustomXmlPartCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="8bdfe-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection`-Bei Option. Select handelt es sich um eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="8bdfe-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection`Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection` - Only available on collection types.</span></span> <span data-ttu-id="8bdfe-131">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-131">It is similar to the preceding signature.</span></span> <span data-ttu-id="8bdfe-132">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis einbezogen werden können.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-132">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="8bdfe-133">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-133">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="8bdfe-134">Wenn Option. Top angegeben ist, wird das Resultset gestartet, nachdem die angegebene Anzahl von Elementen übersprungen wurde.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-134">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.CustomXmlPartCollection.load_1
    summary: <span data-ttu-id="8bdfe-135">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-135">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8bdfe-136">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-136">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="8bdfe-137">Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-137">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPartCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.CustomXmlPartCollection.toJSON
    summary: '<span data-ttu-id="8bdfe-138">Überschreibt die `toJSON()` JavaScript-Methode, um hilfreichere Ausgaben bereitzustellen, wenn ein API-Objekt an übergeben wird.`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="8bdfe-138">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="8bdfe-139">.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-139"></span></span> <span data-ttu-id="8bdfe-140">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="8bdfe-140"></span></span><!-- --><span data-ttu-id="8bdfe-141">wiederum ruft die `toJSON` Methode des Objekts auf, das an Sie übergeben wird.) Während das ursprüngliche `Excel.CustomXmlPartCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.CustomXmlPartCollectionData`</span><span class="sxs-lookup"><span data-stu-id="8bdfe-141">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartCollectionData`</span></span><!-- --><span data-ttu-id="8bdfe-142">), die ein "Items"-Array mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.</span><span class="sxs-lookup"><span data-stu-id="8bdfe-142">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartCollectionData
        description: ''