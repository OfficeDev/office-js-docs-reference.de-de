### YamlMime:UniversalReference
ms.openlocfilehash: 5e0280f5447cf834bac9145d1da6baa1d7b1bd3e
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/28/2018
ms.locfileid: "24046207"
items:
- uid: excel.Excel.CustomConditionalFormat
  summary: >-
    <span data-ttu-id="a2756-101">Stellt einen benutzerdefinierten bedingten Formattyp dar.</span><span class="sxs-lookup"><span data-stu-id="a2756-101">Represents a custom conditional format type.</span></span>


    <span data-ttu-id="a2756-102">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a2756-102">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.CustomConditionalFormat
  fullName: excel.Excel.CustomConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CustomConditionalFormat.format
  - excel.Excel.CustomConditionalFormat.load
  - excel.Excel.CustomConditionalFormat.rule
  - excel.Excel.CustomConditionalFormat.toJSON
- uid: excel.Excel.CustomConditionalFormat.format
  summary: >-
    <span data-ttu-id="a2756-p101">Gibt ein Formatobjekt zurück, das die Schriftart, die Füllung, den Rahmen und andere Eigenschaften bedingter Formate kapselt. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a2756-p101">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.</span></span>


    <span data-ttu-id="a2756-105">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a2756-105">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: format
  fullName: excel.Excel.CustomConditionalFormat.format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.ConditionalRangeFormat;'
    return:
      type:
      - excel.Excel.ConditionalRangeFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a2756-106\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a2756-106\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomConditionalFormat.load
  summary: <span data-ttu-id="a2756-107">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="a2756-107">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a2756-108">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="a2756-108">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="a2756-109">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="a2756-109">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="a2756-110">`load(option?: { select?: string; expand?: string; }): Excel.CustomConditionalFormat`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class="sxs-lookup"><span data-stu-id="a2756-110">`load(option?: { select?: string; expand?: string; }): Excel.CustomConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="a2756-111">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomConditionalFormat`-Nur auf Auflistungstypen verfügbar.</span><span class="sxs-lookup"><span data-stu-id="a2756-111">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="a2756-112">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class="sxs-lookup"><span data-stu-id="a2756-112">It is similar to the preceding signature.</span></span> <span data-ttu-id="a2756-113">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class="sxs-lookup"><span data-stu-id="a2756-113">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a2756-114">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a2756-114">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a2756-115">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class="sxs-lookup"><span data-stu-id="a2756-115">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: excel.Excel.CustomConditionalFormat.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="a2756-116">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="a2756-116">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.CustomConditionalFormat.rule
  summary: >-
    <span data-ttu-id="a2756-p104">Stellt das Regelobjekt in diesem bedingte Format dar. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a2756-p104">Represents the Rule object on this conditional format. Read-only.</span></span>


    <span data-ttu-id="a2756-119">\[[API-Satz: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a2756-119">\[ [API set: ExcelApi 1.6](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rule
  fullName: excel.Excel.CustomConditionalFormat.rule
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rule: Excel.ConditionalFormatRule;'
    return:
      type:
      - excel.Excel.ConditionalFormatRule
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a2756-120\">Examples</span><span class=\"sxs-lookup\"><span data-stu-id=\"a2756-120\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheet = ctx.workbook.worksheets.getActiveWorksheet();\n    var range = sheet.getRange(\"A1:A5\");\n    range.values = [[1], [20], [\"\"], [5], [\"test\"]];\n    var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    var cfCustom = cf.customOrNullObject;\n    cfCustom.rule.formula = \"=ISBLANK(A1)\";\n    cfCustom.format.fill.color = \"#00FF00\";\n    return ctx.sync().then(function () {\n        console.log(\"Added new custom conditional format highlighting all blank cells.\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.CustomConditionalFormat.toJSON
  name: toJSON()
  fullName: excel.Excel.CustomConditionalFormat.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CustomConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.CustomConditionalFormatData
      description: ''
