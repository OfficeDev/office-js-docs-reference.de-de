### YamlMime:UniversalReference
ms.openlocfilehash: 199ac82dede1eefade22e13ef663b5aadc98e999
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/20/2018
ms.locfileid: "24046855"
items:
- uid: excel.Excel.ChartCollection
  summary: >-
    <span data-ttu-id="98d77-101">Eine Sammlung aller Diagrammobjekte in einem Arbeitsblatt.</span><span class="sxs-lookup"><span data-stu-id="98d77-101">A collection of all the chart objects on a worksheet.</span></span>


    <span data-ttu-id="98d77-102">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="98d77-102">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.ChartCollection
  fullName: excel.Excel.ChartCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.ChartCollection.add
  - excel.Excel.ChartCollection.count
  - excel.Excel.ChartCollection.getCount
  - excel.Excel.ChartCollection.getItem
  - excel.Excel.ChartCollection.getItemAt
  - excel.Excel.ChartCollection.getItemOrNullObject
  - excel.Excel.ChartCollection.items
  - excel.Excel.ChartCollection.load
  - excel.Excel.ChartCollection.toJSON
- uid: excel.Excel.ChartCollection.add
  summary: >-
    <span data-ttu-id="98d77-103">Erstellt ein neues Diagramm.</span><span class="sxs-lookup"><span data-stu-id="98d77-103">Creates a new chart.</span></span>


    <span data-ttu-id="98d77-104">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="98d77-104">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(type, sourceData, seriesBy)
  fullName: excel.Excel.ChartCollection.add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(type: Excel.ChartType, sourceData: Range, seriesBy?: Excel.ChartSeriesBy): Excel.Chart;'
    return:
      type:
      - excel.Excel.Chart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"98d77-105\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-105\">Examples</span></span>\n\n```javascript\n// Add a chart of chartType \"ColumnClustered\" on worksheet \"Charts\" \n// with sourceData from Range \"A1:B4\" and seriresBy is set to be \"auto\".\nExcel.run(function (ctx) { \n    var rangeSelection = \"A1:B4\";\n    var range = ctx.workbook.worksheets.getItem(sheetName)\n        .getRange(rangeSelection);\n    var chart = ctx.workbook.worksheets.getItem(sheetName)\n        .charts.add(\"ColumnClustered\", range, \"auto\");    return ctx.sync().then(function() {\n            console.log(\"New Chart Added\");\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: type
      description: <span data-ttu-id="98d77-106">Stellt den Typ eines Diagramms dar.</span><span class="sxs-lookup"><span data-stu-id="98d77-106">Represents the type of a chart.</span></span> <span data-ttu-id="98d77-107">Einzelheiten finden Sie unter Excel.ChartType.</span><span class="sxs-lookup"><span data-stu-id="98d77-107">See Excel.ChartType for details.</span></span>
      type:
      - excel.Excel.ChartType
    - id: sourceData
      description: <span data-ttu-id="98d77-108">Das den Quelldaten entsprechende Range-Objekt.</span><span class="sxs-lookup"><span data-stu-id="98d77-108">The Range object corresponding to the source data.</span></span>
      type:
      - Range
    - id: seriesBy
      description: <span data-ttu-id="98d77-109">Optional.</span><span class="sxs-lookup"><span data-stu-id="98d77-109">Optional.</span></span> <span data-ttu-id="98d77-110">Gibt an, dass die Möglichkeit Spalten und Zeilen als Datenreihen im Diagramm verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="98d77-110">Specifies the way columns or rows are used as data series on the chart.</span></span> <span data-ttu-id="98d77-111">Einzelheiten finden Sie unter Excel.ChartSeriesBy.</span><span class="sxs-lookup"><span data-stu-id="98d77-111">See Excel.ChartSeriesBy for details.</span></span>
      type:
      - excel.Excel.ChartSeriesBy
- uid: excel.Excel.ChartCollection.count
  summary: >-
    <span data-ttu-id="98d77-p103">Gibt die Anzahl der Diagramme im Arbeitsblatt zurück. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="98d77-p103">Returns the number of charts in the worksheet. Read-only.</span></span>


    <span data-ttu-id="98d77-114">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="98d77-114">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: count
  fullName: excel.Excel.ChartCollection.count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.ChartCollection.getCount
  summary: >-
    <span data-ttu-id="98d77-115">Gibt die Anzahl der Diagramme im Arbeitsblatt zurück.</span><span class="sxs-lookup"><span data-stu-id="98d77-115">Returns the number of charts in the worksheet.</span></span>


    <span data-ttu-id="98d77-116">\[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="98d77-116">\[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: excel.Excel.ChartCollection.getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.ChartCollection.getItem
  summary: >-
    <span data-ttu-id="98d77-p104">Ruft ein Diagramm über seinen Namen ab. Wenn mehrere Diagramme mit demselben Namen vorhanden sind, wird das erste zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="98d77-p104">Gets a chart using its name. If there are multiple charts with the same name, the first one will be returned.</span></span>


    <span data-ttu-id="98d77-119">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="98d77-119">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(name)
  fullName: excel.Excel.ChartCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(name: string): Excel.Chart;'
    return:
      type:
      - excel.Excel.Chart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"98d77-120\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-120\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var chartname = 'Chart1';\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(chartname);\n    return ctx.sync().then(function() {\n            console.log(chart.height);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var chartId = 'SamplChartId';\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(chartId);\n    return ctx.sync().then(function() {\n            console.log(chart.height);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.count - 1;\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItemAt(lastPosition);\n    return ctx.sync().then(function() {\n            console.log(chart.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: <span data-ttu-id="98d77-121">Der Name des abzurufenden Diagramms.</span><span class="sxs-lookup"><span data-stu-id="98d77-121">Name of the chart to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.ChartCollection.getItemAt
  summary: >-
    <span data-ttu-id="98d77-122">Ruft ein Diagramm anhand seiner Position in der Sammlung ab.</span><span class="sxs-lookup"><span data-stu-id="98d77-122">Gets a chart based on its position in the collection.</span></span>


    <span data-ttu-id="98d77-123">\[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="98d77-123">\[ [API set: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: excel.Excel.ChartCollection.getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Chart;'
    return:
      type:
      - excel.Excel.Chart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"98d77-124\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-124\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.count - 1;\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItemAt(lastPosition);\n    return ctx.sync().then(function() {\n            console.log(chart.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="98d77-p105">Index-Wert des abzurufenden Objekts. Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="98d77-p105">Index value of the object to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.ChartCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="98d77-127">Dient zum Abrufen eines Diagramms mit dem Namen.</span><span class="sxs-lookup"><span data-stu-id="98d77-127">Gets a chart using its name.</span></span> <span data-ttu-id="98d77-128">Wenn mehrere Diagramme mit dem gleichen Namen vorhanden sind, wird der ersten zurückgegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="98d77-128">If there are multiple charts with the same name, the first one will be returned.</span></span> <span data-ttu-id="98d77-129">Wenn das Diagramm nicht vorhanden ist, wird ein null-Objekt zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="98d77-129">If the chart does not exist, will return a null object.</span></span>


    <span data-ttu-id="98d77-130">\[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="98d77-130">\[ [API set: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(name)
  fullName: excel.Excel.ChartCollection.getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(name: string): Excel.Chart;'
    return:
      type:
      - excel.Excel.Chart
      description: ''
    parameters:
    - id: name
      description: <span data-ttu-id="98d77-131">Der Name des abzurufenden Diagramms.</span><span class="sxs-lookup"><span data-stu-id="98d77-131">Name of the chart to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.ChartCollection.items
  summary: <span data-ttu-id="98d77-132">Ruft die geladene untergeordnete Elemente in dieser Auflistung ab.</span><span class="sxs-lookup"><span data-stu-id="98d77-132">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: excel.Excel.ChartCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Chart[];'
    return:
      type:
      - Excel.Chart[]
- uid: excel.Excel.ChartCollection.load
  summary: <span data-ttu-id="98d77-133">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="98d77-133">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="98d77-134">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="98d77-134">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"98d77-135\">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-135\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"98d77-136\">`load(option?: { select?: string; expand?: string; }): Excel.ChartCollection`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-136\">`load(option?: { select?: string; expand?: string; }): Excel.ChartCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"98d77-137\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartCollection`-Nur auf Auflistungstypen verfügbar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-137\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"98d77-138\">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-138\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"98d77-139\">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-139\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"98d77-140\">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-140\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"98d77-141\">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-141\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"98d77-142\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"98d77-142\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var charts = ctx.workbook.worksheets.getItem(\"Sheet1\").charts;\n    charts.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < charts.items.length; i++)\n        {\n            console.log(charts.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of charts\nExcel.run(function (ctx) { \n    var charts = ctx.workbook.worksheets.getItem(\"Sheet1\").charts;\n    charts.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"charts: Count= \" + charts.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: excel.Excel.ChartCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="98d77-143">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="98d77-143">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.ChartCollection.toJSON
  name: toJSON()
  fullName: excel.Excel.ChartCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ChartCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.ChartCollectionData
      description: ''
