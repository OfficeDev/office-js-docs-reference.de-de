### YamlMime:UniversalReference
items:
  - uid: excel.Excel.BindingCollection
    summary: |-
      Eine Sammlung aller Binding-Objekte, die Teil der Arbeitsmappe sind.

      \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.BindingCollection
    fullName: Excel.BindingCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.BindingCollection.add
      - excel.Excel.BindingCollection.add_1
      - excel.Excel.BindingCollection.addFromNamedItem
      - excel.Excel.BindingCollection.addFromNamedItem_1
      - excel.Excel.BindingCollection.addFromSelection
      - excel.Excel.BindingCollection.addFromSelection_1
      - excel.Excel.BindingCollection.context
      - excel.Excel.BindingCollection.count
      - excel.Excel.BindingCollection.getCount
      - excel.Excel.BindingCollection.getItem
      - excel.Excel.BindingCollection.getItemAt
      - excel.Excel.BindingCollection.getItemOrNullObject
      - excel.Excel.BindingCollection.items
      - excel.Excel.BindingCollection.load
      - excel.Excel.BindingCollection.load_1
      - excel.Excel.BindingCollection.load_2
      - excel.Excel.BindingCollection.toJSON
  - uid: excel.Excel.BindingCollection.add
    summary: |-
      Fügt eine neue Bindung an einen bestimmten Bereich hinzu.

      \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'add(range, bindingType, id)'
    fullName: 'add(range, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: range
          description: Bereich für die Bindung. Kann ein Excel-Range-Objekt oder eine Zeichenfolge sein. Eine Zeichenfolge muss die vollständige Adresse einschließlich des Blattnamens enthalten.
          type:
            - Range | string
        - id: bindingType
          description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
          type:
            - excel.Excel.BindingType
        - id: id
          description: Name der Bindung.
          type:
            - string
  - uid: excel.Excel.BindingCollection.add_1
    summary: |-
      Fügt eine neue Bindung an einen bestimmten Bereich hinzu.

      \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'add(range, bindingTypeString, id)'
    fullName: 'add(range, bindingTypeString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(range: Range | string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: range
          description: Bereich für die Bindung. Kann ein Excel-Range-Objekt oder eine Zeichenfolge sein. Eine Zeichenfolge muss die vollständige Adresse einschließlich des Blattnamens enthalten.
          type:
            - Range | string
        - id: bindingTypeString
          description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: Name der Bindung.
          type:
            - string
  - uid: excel.Excel.BindingCollection.addFromNamedItem
    summary: |-
      Fügt eine neue Bindung auf Grundlage eines benannten Elements in der Arbeitsmappe hinzu. Wenn das benannte Element auf mehrere Bereiche verweist, wird der Fehler "InvalidReference" zurückgegeben.

      \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromNamedItem(name, bindingType, id)'
    fullName: 'addFromNamedItem(name, bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: name
          description: 'Name, aus dem die Bindung erstellt wird.'
          type:
            - string
        - id: bindingType
          description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
          type:
            - excel.Excel.BindingType
        - id: id
          description: Name der Bindung.
          type:
            - string
  - uid: excel.Excel.BindingCollection.addFromNamedItem_1
    summary: |-
      Fügt eine neue Bindung auf Grundlage eines benannten Elements in der Arbeitsmappe hinzu. Wenn das benannte Element auf mehrere Bereiche verweist, wird der Fehler "InvalidReference" zurückgegeben.

      \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromNamedItem(name, bindingTypeString, id)'
    fullName: 'addFromNamedItem(name, bindingTypeString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromNamedItem(name: string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: name
          description: 'Name, aus dem die Bindung erstellt wird.'
          type:
            - string
        - id: bindingTypeString
          description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: Name der Bindung.
          type:
            - string
  - uid: excel.Excel.BindingCollection.addFromSelection
    summary: |-
      Fügt eine neue Bindung basierend auf der aktuellen Auswahl hinzu. Wenn die Auswahl mehrere Bereiche enthält, wird der Fehler "InvalidReference" zurückgegeben.

      \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromSelection(bindingType, id)'
    fullName: 'addFromSelection(bindingType, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: bindingType
          description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
          type:
            - excel.Excel.BindingType
        - id: id
          description: Name der Bindung.
          type:
            - string
  - uid: excel.Excel.BindingCollection.addFromSelection_1
    summary: |-
      Fügt eine neue Bindung basierend auf der aktuellen Auswahl hinzu. Wenn die Auswahl mehrere Bereiche enthält, wird der Fehler "InvalidReference" zurückgegeben.

      \[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'addFromSelection(bindingTypeString, id)'
    fullName: 'addFromSelection(bindingTypeString, id)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFromSelection(bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: bindingTypeString
          description: Typ der Bindung. Weitere Informationen finden Sie unter Excel. BindingType.
          type:
            - '"Range" | "Table" | "Text"'
        - id: id
          description: Name der Bindung.
          type:
            - string
  - uid: excel.Excel.BindingCollection.context
    summary: Der dem Objekt zugeordnete Anforderungskontext. Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel.Excel.BindingCollection.count
    summary: |-
      Gibt die Anzahl der Bindungen in der Sammlung zurück. Schreibgeschützt.

      \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: excel.Excel.BindingCollection.getCount
    summary: |-
      Ruft die Anzahl der Bindungen in der Sammlung ab.

      \[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.BindingCollection.getItem
    summary: |-
      Ruft ein binding-Objekt anhand seiner ID ab.

      \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          // Create a table binding to monitor data changes in the table. 
          // When data is changed, the background color of the table will be changed to orange.
          function addEventHandler() {
              // Create Table1
              Excel.run(function (ctx) { 
                  ctx.workbook.tables.add("Sheet1!A1:C4", true);
                  return ctx.sync().then(function() {
                          console.log("My Diet Data Inserted!");
                  })
                  .catch(function (error) {
                          console.log(JSON.stringify(error));
                  });
              });
              //Create a new table binding for Table1
              Office.context.document.bindings.addFromNamedItemAsync(
                  "Table1", Office.CoercionType.Table, { id: "myBinding" }, function (asyncResult) {
                  if (asyncResult.status == "failed") {
                      console.log("Action failed with error: " + asyncResult.error.message);
                  }
                  else {
                      // If succeeded, then add event handler to the table binding.
                      Office.select("bindings#myBinding").addHandlerAsync(
                          Office.EventType.BindingDataChanged, onBindingDataChanged);
                  }
              });
          }
              
          // when data in the table is changed, this event will be triggered.
          function onBindingDataChanged(eventArgs) {
              Excel.run(function (ctx) { 
                  // highlight the table in orange to indicate data has been changed.
                  ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = "Orange";
                  return ctx.sync().then(function() {
                          console.log("The value in this table got changed!");
                  })
                  .catch(function (error) {
                          console.log(JSON.stringify(error));
                  });
              });
          }
          ```
      parameters:
        - id: id
          description: ID des abzurufenden Binding-Objekts.
          type:
            - string
  - uid: excel.Excel.BindingCollection.getItemAt
    summary: |-
      Ruft ein Binding-Objekt anhand seiner Position im Elementarray ab.

      \[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Excel.run(function (ctx) { 
              var lastPosition = ctx.workbook.bindings.count - 1;
              var binding = ctx.workbook.bindings.getItemAt(lastPosition);
              binding.load('type')
              return ctx.sync().then(function() {
                      console.log(binding.type); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Index-Wert des abzurufenden Objekts. Nullindiziert.
          type:
            - number
  - uid: excel.Excel.BindingCollection.getItemOrNullObject
    summary: |-
      Ruft ein Binding-Objekt anhand seiner ID ab. Wenn das Binding-Objekt nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.

      \[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: id
          description: ID des abzurufenden Binding-Objekts.
          type:
            - string
  - uid: excel.Excel.BindingCollection.items
    summary: Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Binding[];'
      return:
        type:
          - 'Excel.Binding[]'
  - uid: excel.Excel.BindingCollection.load
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.
    remarks: |-
      Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:

      `load(option?: string | string[]): Excel.BindingCollection`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.

      `load(option?: { select?: string; expand?: string; }): Excel.BindingCollection`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.BindingCollection`-Nur verfügbar für Sammlungstypen. Sie ähnelt der vorherigen Signatur. Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können. Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind. Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.BindingCollection;'
      return:
        type:
          - excel.Excel.BindingCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.BindingCollection.load_1
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.BindingCollection;'
      return:
        type:
          - excel.Excel.BindingCollection
        description: |-


          #### <a name="examples"></a>Beispiele

          ```javascript
          Excel.run(function (ctx) { 
              var bindings = ctx.workbook.bindings;
              bindings.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < bindings.items.length; i++)
                  {
                      console.log(bindings.items[i].id);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Get the number of bindings
          Excel.run(function (ctx) { 
              var bindings = ctx.workbook.bindings;
              bindings.load('count');
              return ctx.sync().then(function() {
                  console.log("Bindings: Count= " + bindings.count);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: 'Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: excel.Excel.BindingCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.BindingCollection;'
      return:
        type:
          - excel.Excel.BindingCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: excel.Excel.BindingCollection.toJSON
    summary: 'ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API-Objekt an`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->Ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche `Excel.BindingCollection` Objekt ein API-Objekt ist, `toJSON` gibt die Methode ein einfaches JavaScript-Objekt (typisiert als`Excel.Interfaces.BindingCollectionData`<!-- -->), die ein Array "Items" mit flachen Kopien aller geladenen Eigenschaften aus den Elementen der Auflistung enthält.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.BindingCollectionData
        description: ''