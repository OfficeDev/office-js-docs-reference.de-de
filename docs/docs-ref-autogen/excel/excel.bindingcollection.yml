### YamlMime:UniversalReference
ms.openlocfilehash: e6cd660ab22ab25dce1d16dd79c8ff28ef93c168
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/28/2018
ms.locfileid: "24045584"
items:
- uid: excel.Excel.BindingCollection
  summary: >-
    Eine Sammlung aller Binding-Objekte, die Teil der Arbeitsmappe sind.


    \[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.BindingCollection
  fullName: excel.Excel.BindingCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.BindingCollection.add
  - excel.Excel.BindingCollection.addFromNamedItem
  - excel.Excel.BindingCollection.addFromSelection
  - excel.Excel.BindingCollection.count
  - excel.Excel.BindingCollection.getCount
  - excel.Excel.BindingCollection.getItem
  - excel.Excel.BindingCollection.getItemAt
  - excel.Excel.BindingCollection.getItemOrNullObject
  - excel.Excel.BindingCollection.items
  - excel.Excel.BindingCollection.load
  - excel.Excel.BindingCollection.toJSON
- uid: excel.Excel.BindingCollection.add
  summary: >-
    Fügt eine neue Bindung an einen bestimmten Bereich hinzu.


    \[[API-Satz: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: add(range, bindingType, id)
  fullName: excel.Excel.BindingCollection.add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: range
      description: Bereich für die Bindung. Kann ein Excel-Range-Objekt oder eine Zeichenfolge sein. Eine Zeichenfolge muss die vollständige Adresse einschließlich des Blattnamens enthalten.
      type:
      - Range | string
    - id: bindingType
      description: Typ der Bindung. Finden Sie unter Excel.BindingType.
      type:
      - excel.Excel.BindingType
    - id: id
      description: Name der Bindung.
      type:
      - string
- uid: excel.Excel.BindingCollection.addFromNamedItem
  summary: >-
    Fügt eine neue Bindung auf Grundlage eines benannten Elements in der Arbeitsmappe hinzu. Wenn das benannte Element auf mehrere Bereiche verweist, wird der Fehler "InvalidReference" zurückgegeben.


    \[[API-Satz: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: addFromNamedItem(name, bindingType, id)
  fullName: excel.Excel.BindingCollection.addFromNamedItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: name
      description: Name, aus dem die Bindung erstellt wird.
      type:
      - string
    - id: bindingType
      description: Typ der Bindung. Finden Sie unter Excel.BindingType.
      type:
      - excel.Excel.BindingType
    - id: id
      description: Name der Bindung.
      type:
      - string
- uid: excel.Excel.BindingCollection.addFromSelection
  summary: >-
    Fügt eine neue Bindung basierend auf der aktuellen Auswahl hinzu. Wenn die Auswahl mehrere Bereiche aufweist, wird der Fehler "InvalidReference" zurückgegeben.


    \[[API-Satz: ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: addFromSelection(bindingType, id)
  fullName: excel.Excel.BindingCollection.addFromSelection
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: bindingType
      description: Typ der Bindung. Finden Sie unter Excel.BindingType.
      type:
      - excel.Excel.BindingType
    - id: id
      description: Name der Bindung.
      type:
      - string
- uid: excel.Excel.BindingCollection.count
  summary: >-
    Gibt die Anzahl der Bindungen in der Sammlung zurück. Schreibgeschützt.


    \[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: count
  fullName: excel.Excel.BindingCollection.count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.BindingCollection.getCount
  summary: >-
    Ruft die Anzahl der Bindungen in der Sammlung ab.


    \[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: excel.Excel.BindingCollection.getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.BindingCollection.getItem
  summary: >-
    Ruft ein Binding-Objekt anhand seiner ID ab.


    \[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(id)
  fullName: excel.Excel.BindingCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\n// Create a table binding to monitor data changes in the table. \n// When data is changed, the background color of the table will be changed to orange.\nfunction addEventHandler() {\n    //Create Table1\nExcel.run(function (ctx) { \n    ctx.workbook.tables.add(\"Sheet1!A1:C4\", true);\n    return ctx.sync().then(function() {\n             console.log(\"My Diet Data Inserted!\");\n    })\n    .catch(function (error) {\n             console.log(JSON.stringify(error));\n    });\n});\n    //Create a new table binding for Table1\nOffice.context.document.bindings.addFromNamedItemAsync(\n    \"Table1\", Office.CoercionType.Table, { id: \"myBinding\" }, function (asyncResult) {\n    if (asyncResult.status == \"failed\") {\n        console.log(\"Action failed with error: \" + asyncResult.error.message);\n    }\n    else {\n        // If succeeded, then add event handler to the table binding.\n        Office.select(\"bindings#myBinding\").addHandlerAsync(\n            Office.EventType.BindingDataChanged, onBindingDataChanged);\n    }\n});\n}\n    \n// when data in the table is changed, this event will be triggered.\nfunction onBindingDataChanged(eventArgs) {\nExcel.run(function (ctx) { \n    // highlight the table in orange to indicate data has been changed.\n    ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = \"Orange\";\n    return ctx.sync().then(function() {\n            console.log(\"The value in this table got changed!\");\n    })\n    .catch(function (error) {\n            console.log(JSON.stringify(error));\n    });\n});\n}\n```\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.bindings.count - 1;\n    var binding = ctx.workbook.bindings.getItemAt(lastPosition);\n    binding.load('type')\n    return ctx.sync().then(function() {\n            console.log(binding.type); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: id
      description: ID des abzurufenden Binding-Objekts.
      type:
      - string
- uid: excel.Excel.BindingCollection.getItemAt
  summary: >-
    Ruft ein Binding-Objekt anhand seiner Position im Elementarray ab.


    \[[API-Satz: ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getItemAt(index)
  fullName: excel.Excel.BindingCollection.getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.bindings.count - 1;\n    var binding = ctx.workbook.bindings.getItemAt(lastPosition);\n    binding.load('type')\n    return ctx.sync().then(function() {\n            console.log(binding.type); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: Index-Wert des abzurufenden Objekts. Nullindiziert.
      type:
      - number
- uid: excel.Excel.BindingCollection.getItemOrNullObject
  summary: >-
    Ruft ein Binding-Objekt anhand seiner ID ab. Wenn das Binding-Objekt nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.


    \[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getItemOrNullObject(id)
  fullName: excel.Excel.BindingCollection.getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: id
      description: ID des abzurufenden Binding-Objekts.
      type:
      - string
- uid: excel.Excel.BindingCollection.items
  summary: Ruft die geladene untergeordnete Elemente in dieser Auflistung ab.
  name: items
  fullName: excel.Excel.BindingCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Binding[];'
    return:
      type:
      - Excel.Binding[]
- uid: excel.Excel.BindingCollection.load
  summary: Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.
  remarks: "Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:\n\n`load(option?: { select?: string; expand?: string; }): Excel.BindingCollection`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.BindingCollection`-Nur auf Auflistungstypen verfügbar. Es ist ähnlich wie die jeweils vorhergehende Signatur. Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können. Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen. Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.\n#### <a name=\"examples\"></a>Beispiele\n\n```javascript\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < bindings.items.length; i++)\n        {\n            console.log(bindings.items[i].id);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of bindings\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"Bindings: Count= \" + bindings.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: excel.Excel.BindingCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.BindingCollection;'
    return:
      type:
      - excel.Excel.BindingCollection
      description: ''
    parameters:
    - id: option
      description: Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.
      type:
      - string | string[]
- uid: excel.Excel.BindingCollection.toJSON
  name: toJSON()
  fullName: excel.Excel.BindingCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.BindingCollectionData
      description: ''
