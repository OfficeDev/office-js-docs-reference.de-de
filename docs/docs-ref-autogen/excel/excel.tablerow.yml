### YamlMime:UniversalReference
ms.openlocfilehash: cb686f345e7a7dfa727fb9993e62d73d4e1f6137
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/13/2019
ms.locfileid: "29976236"
items:
- uid: excel.Excel.TableRow
  summary: >-
    <span data-ttu-id="a285c-101">Stellt eine Zeile in einer Tabelle dar.</span><span class="sxs-lookup"><span data-stu-id="a285c-101">Represents a row in a table.</span></span>


    <span data-ttu-id="a285c-102">Beachten Sie, dass im Gegensatz zu Bereichen oder Spalten, die angepasst werden, wenn neue Zeilen/Spalten, bevor Sie diese hinzugefügt werden, ein TableRow-Objekt den physischen Standort der Tabellenzeile, jedoch nicht die Daten darstellen.</span><span class="sxs-lookup"><span data-stu-id="a285c-102">Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them, a TableRow object represent the physical location of the table row, but not the data.</span></span> <span data-ttu-id="a285c-103">D. h., weiterhin Wenn die Daten sortiert ist oder wenn neue Zeilen hinzugefügt werden, eine Tabellenzeile am Index zeigen Sie für die sie erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="a285c-103">That is, if the data is sorted or if new rows are added, a table row will continue to point at the index for which it was created.</span></span>


    <span data-ttu-id="a285c-104">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a285c-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.TableRow
  fullName: Excel.TableRow
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TableRow.context
  - excel.Excel.TableRow.delete
  - excel.Excel.TableRow.getRange
  - excel.Excel.TableRow.index
  - excel.Excel.TableRow.load
  - excel.Excel.TableRow.load_1
  - excel.Excel.TableRow.load_2
  - excel.Excel.TableRow.set
  - excel.Excel.TableRow.set_1
  - excel.Excel.TableRow.toJSON
  - excel.Excel.TableRow.values
- uid: excel.Excel.TableRow.context
  summary: <span data-ttu-id="a285c-105">Der Anforderungskontext-zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="a285c-105">The request context associated with the object.</span></span> <span data-ttu-id="a285c-106">Dadurch wird das Add-in Prozess mit der Office-hostanwendung Prozess verbunden.</span><span class="sxs-lookup"><span data-stu-id="a285c-106">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.TableRow.delete
  summary: >-
    <span data-ttu-id="a285c-107">Löscht die Zeile aus der Tabelle.</span><span class="sxs-lookup"><span data-stu-id="a285c-107">Deletes the row from the table.</span></span>


    <span data-ttu-id="a285c-108">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a285c-108">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a285c-109\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a285c-109\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);\n    row.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.TableRow.getRange
  summary: >-
    <span data-ttu-id="a285c-110">Ruft das Bereichsobjekt ab, das mit der gesamten Zeile verknüpft ist.</span><span class="sxs-lookup"><span data-stu-id="a285c-110">Returns the range object associated with the entire row.</span></span>


    <span data-ttu-id="a285c-111">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a285c-111">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange()
  fullName: getRange()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a285c-112\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a285c-112\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(0);\n    var rowRange = row.getRange();\n    rowRange.load('address');\n    return ctx.sync().then(function() {\n        console.log(rowRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.TableRow.index
  summary: >-
    <span data-ttu-id="a285c-p103">Gibt die Indexnummer der Zeile in der Zeilenauflistung der Tabelle zurück. Nullindiziert. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a285c-p103">Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.</span></span>


    <span data-ttu-id="a285c-116">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a285c-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: index
  fullName: index
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly index: number;'
    return:
      type:
      - number
- uid: excel.Excel.TableRow.load
  summary: <span data-ttu-id="a285c-117">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="a285c-117">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a285c-118">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="a285c-118">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="a285c-119">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="a285c-119">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="a285c-120">`load(option?: string | string[]): Excel.TableRow`-Wo Option ist eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="a285c-120">`load(option?: string | string[]): Excel.TableRow` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="a285c-121">`load(option?: { select?: string; expand?: string; }): Excel.TableRow`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class="sxs-lookup"><span data-stu-id="a285c-121">`load(option?: { select?: string; expand?: string; }): Excel.TableRow` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="a285c-122">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRow`-Nur auf Auflistungstypen verfügbar.</span><span class="sxs-lookup"><span data-stu-id="a285c-122">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRow` - Only available on collection types.</span></span> <span data-ttu-id="a285c-123">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class="sxs-lookup"><span data-stu-id="a285c-123">It is similar to the preceding signature.</span></span> <span data-ttu-id="a285c-124">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class="sxs-lookup"><span data-stu-id="a285c-124">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a285c-125">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a285c-125">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a285c-126">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class="sxs-lookup"><span data-stu-id="a285c-126">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.TableRowLoadOptions): Excel.TableRow;'
    return:
      type:
      - excel.Excel.TableRow
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.TableRowLoadOptions
- uid: excel.Excel.TableRow.load_1
  summary: <span data-ttu-id="a285c-127">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="a285c-127">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a285c-128">Sie müssen Aufrufen `context.sync()` vor dem Lesen der Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="a285c-128">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.TableRow;'
    return:
      type:
      - excel.Excel.TableRow
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a285c-129\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a285c-129\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItem(0);\n    row.load('index');\n    return ctx.sync().then(function() {\n        console.log(row.index);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    var newValues = [[\"New\", \"Values\", \"For\", \"New\", \"Row\"]];\n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);\n    row.values = newValues;\n    row.load('values');\n    return ctx.sync().then(function() {\n        console.log(row.values);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="a285c-130">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="a285c-130">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.TableRow.load_2
  summary: <span data-ttu-id="a285c-131">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="a285c-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a285c-132">Sie müssen Aufrufen `context.sync()` vor dem Lesen der Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="a285c-132">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.TableRow;'
    return:
      type:
      - excel.Excel.TableRow
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: <span data-ttu-id="a285c-133">Wobei propertyNamesAndPaths.select ist eine durch Kommas getrennte Zeichenfolge, die angibt, die Eigenschaften zum Laden und propertyNamesAndPaths.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class="sxs-lookup"><span data-stu-id="a285c-133">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel.Excel.TableRow.set
  summary: <span data-ttu-id="a285c-134">Legt mehrere Eigenschaften eines Objekts zur selben Zeit fest.</span><span class="sxs-lookup"><span data-stu-id="a285c-134">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="a285c-135">Sie können entweder eine einfache-Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt des gleichen Typs übergeben.</span><span class="sxs-lookup"><span data-stu-id="a285c-135">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: >-
    <span data-ttu-id="a285c-136">Diese Methode hat die folgenden zusätzliche Signatur:</span><span class="sxs-lookup"><span data-stu-id="a285c-136">This method has the following additional signature:</span></span>


    `set(properties: Excel.TableRow): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.TableRowUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="a285c-137">Ein JavaScript-Objekt mit Eigenschaften, die an die Eigenschaften des Objekts isomorphically strukturiert werden, auf denen die Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="a285c-137">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.TableRowUpdateData
    - id: options
      description: <span data-ttu-id="a285c-138">Bietet eine Option, um Fehler zu unterdrücken, wenn schreibgeschützte Eigenschaften festgelegt werden, versucht das Properties-Objekt.</span><span class="sxs-lookup"><span data-stu-id="a285c-138">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.TableRow.set_1
  summary: <span data-ttu-id="a285c-139">Mehrere Eigenschaften festgelegt auf das Objekt zur selben Zeit, basierend auf einem vorhandenen geladen-Objekt.</span><span class="sxs-lookup"><span data-stu-id="a285c-139">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.TableRow): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.TableRow
- uid: excel.Excel.TableRow.toJSON
  summary: <span data-ttu-id="a285c-140">Überschreibt das JavaScript `toJSON()` Methode, um nützliche Ausgabe zu gewährleisten, wenn ein API-Objekt zu übergeben ist `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a285c-140">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="a285c-141">(`JSON.stringify`<!-- -->, wiederum die `toJSON` -Methode des Objekts, das es übergeben wird.) Das ursprüngliche Excel.TableRow-Objekt ist ein API-Objekt der `toJSON` -Methode gibt eine einfache JavaScript-Objekt zurück (als `Excel.Interfaces.TableRowData` <!-- -->), die flache Kopien der geladene untergeordnete Eigenschaften aus dem ursprünglichen-Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="a285c-141">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.TableRow object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableRowData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableRowData;'
    return:
      type:
      - excel.Excel.Interfaces.TableRowData
      description: ''
- uid: excel.Excel.TableRow.values
  summary: >-
    <span data-ttu-id="a285c-142">Die unformatierten Werte des angegebenen Bereichs darstellt.</span><span class="sxs-lookup"><span data-stu-id="a285c-142">Represents the raw values of the specified range.</span></span> <span data-ttu-id="a285c-143">Die zurückgegebenen Daten konnte vom Typ String, Nummer oder ein boolescher Wert sein.</span><span class="sxs-lookup"><span data-stu-id="a285c-143">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="a285c-144">Zellen, die Fehler enthalten, gibt die Fehlerzeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="a285c-144">Cells that contain an error will return the error string.</span></span>


    <span data-ttu-id="a285c-145">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a285c-145">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: values
  fullName: values
  langs:
  - typeScript
  type: property
  syntax:
    content: 'values: any[][];'
    return:
      type:
      - any[][]
