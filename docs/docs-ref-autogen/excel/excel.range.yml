### YamlMime:UniversalReference
ms.openlocfilehash: f6bded89e879a7d81ce6a638b6e7ddd606e91be4
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/20/2019
ms.locfileid: "30096234"
items:
- uid: excel.Excel.Range
  summary: >-
    <span data-ttu-id="eb75c-101">Ein Bereich stellt einen Satz einer oder mehrerer zusammenhängender Zellen wie z. B. eine Zelle, eine Zeile oder eine Spalte, ein Block von Zellen usw. dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.</span></span>


    <span data-ttu-id="eb75c-102">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.Range
  fullName: Excel.Range
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Range.address
  - excel.Excel.Range.addressLocal
  - excel.Excel.Range.autoFill
  - excel.Excel.Range.autoFill_1
  - excel.Excel.Range.calculate
  - excel.Excel.Range.cellCount
  - excel.Excel.Range.clear
  - excel.Excel.Range.clear_1
  - excel.Excel.Range.columnCount
  - excel.Excel.Range.columnHidden
  - excel.Excel.Range.columnIndex
  - excel.Excel.Range.conditionalFormats
  - excel.Excel.Range.context
  - excel.Excel.Range.convertDataTypeToText
  - excel.Excel.Range.convertToLinkedDataType
  - excel.Excel.Range.copyFrom
  - excel.Excel.Range.copyFrom_1
  - excel.Excel.Range.dataValidation
  - excel.Excel.Range.delete
  - excel.Excel.Range.delete_1
  - excel.Excel.Range.find
  - excel.Excel.Range.findOrNullObject
  - excel.Excel.Range.format
  - excel.Excel.Range.formulas
  - excel.Excel.Range.formulasLocal
  - excel.Excel.Range.formulasR1C1
  - excel.Excel.Range.getAbsoluteResizedRange
  - excel.Excel.Range.getBoundingRect
  - excel.Excel.Range.getCell
  - excel.Excel.Range.getCellProperties
  - excel.Excel.Range.getColumn
  - excel.Excel.Range.getColumnProperties
  - excel.Excel.Range.getColumnsAfter
  - excel.Excel.Range.getColumnsBefore
  - excel.Excel.Range.getEntireColumn
  - excel.Excel.Range.getEntireRow
  - excel.Excel.Range.getImage
  - excel.Excel.Range.getIntersection
  - excel.Excel.Range.getIntersectionOrNullObject
  - excel.Excel.Range.getLastCell
  - excel.Excel.Range.getLastColumn
  - excel.Excel.Range.getLastRow
  - excel.Excel.Range.getOffsetRange
  - excel.Excel.Range.getResizedRange
  - excel.Excel.Range.getRow
  - excel.Excel.Range.getRowProperties
  - excel.Excel.Range.getRowsAbove
  - excel.Excel.Range.getRowsBelow
  - excel.Excel.Range.getSpecialCells
  - excel.Excel.Range.getSpecialCells_1
  - excel.Excel.Range.getSpecialCellsOrNullObject
  - excel.Excel.Range.getSpecialCellsOrNullObject_1
  - excel.Excel.Range.getSpillingToRange
  - excel.Excel.Range.getSpillParent
  - excel.Excel.Range.getSurroundingRegion
  - excel.Excel.Range.getTables
  - excel.Excel.Range.getUsedRange
  - excel.Excel.Range.getUsedRangeOrNullObject
  - excel.Excel.Range.getVisibleView
  - excel.Excel.Range.hasSpill
  - excel.Excel.Range.hidden
  - excel.Excel.Range.hyperlink
  - excel.Excel.Range.insert
  - excel.Excel.Range.insert_1
  - excel.Excel.Range.isEntireColumn
  - excel.Excel.Range.isEntireRow
  - excel.Excel.Range.linkedDataTypeState
  - excel.Excel.Range.load
  - excel.Excel.Range.load_1
  - excel.Excel.Range.load_2
  - excel.Excel.Range.merge
  - excel.Excel.Range.numberFormat
  - excel.Excel.Range.numberFormatLocal
  - excel.Excel.Range.removeDuplicates
  - excel.Excel.Range.replaceAll
  - excel.Excel.Range.rowCount
  - excel.Excel.Range.rowHidden
  - excel.Excel.Range.rowIndex
  - excel.Excel.Range.select
  - excel.Excel.Range.set
  - excel.Excel.Range.set_1
  - excel.Excel.Range.setCellProperties
  - excel.Excel.Range.setColumnProperties
  - excel.Excel.Range.setDirty
  - excel.Excel.Range.setRowProperties
  - excel.Excel.Range.showCard
  - excel.Excel.Range.sort
  - excel.Excel.Range.style
  - excel.Excel.Range.text
  - excel.Excel.Range.toJSON
  - excel.Excel.Range.track
  - excel.Excel.Range.unmerge
  - excel.Excel.Range.untrack
  - excel.Excel.Range.values
  - excel.Excel.Range.valueTypes
  - excel.Excel.Range.worksheet
- uid: excel.Excel.Range.address
  summary: >-
    <span data-ttu-id="eb75c-103">Stellt den Range-Verweis im a1-Format dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-103">Represents the range reference in A1-style.</span></span> <span data-ttu-id="eb75c-104">Der Adresswert enthält den Blatt Verweis (beispielsweise "Sheet1! A1: B4 ").</span><span class="sxs-lookup"><span data-stu-id="eb75c-104">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="eb75c-105">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-105">Read-only.</span></span>


    <span data-ttu-id="eb75c-106">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: address
  fullName: address
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly address: string;'
    return:
      type:
      - string
- uid: excel.Excel.Range.addressLocal
  summary: >-
    <span data-ttu-id="eb75c-p102">Stellt den Bereichsbezug für den angegebenen Bereich in der Sprache des Benutzers dar. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p102">Represents range reference for the specified range in the language of the user. Read-only.</span></span>


    <span data-ttu-id="eb75c-109">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-109">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: addressLocal
  fullName: addressLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly addressLocal: string;'
    return:
      type:
      - string
- uid: excel.Excel.Range.autoFill
  name: autoFill(destinationRange, autoFillType)
  fullName: autoFill(destinationRange, autoFillType)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'autoFill(destinationRange: Range | string, autoFillType?: Excel.AutoFillType): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: destinationRange
      description: ''
      type:
      - Range | string
    - id: autoFillType
      description: ''
      type:
      - excel.Excel.AutoFillType
- uid: excel.Excel.Range.autoFill_1
  name: autoFill(destinationRange, autoFillTypeString)
  fullName: autoFill(destinationRange, autoFillTypeString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'autoFill(destinationRange: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: destinationRange
      description: ''
      type:
      - Range | string
    - id: autoFillTypeString
      description: ''
      type:
      - "\"FillDefault\" | \"FillCopy\" | \"FillSeries\" | \"FillFormats\" | \"FillValues\" | \"FillDays\" | \"FillWeekdays\" | \"FillMonths\" | \"FillYears\" | \"LinearTrend\" | \"GrowthTrend\" | \"FlashFill\""
- uid: excel.Excel.Range.calculate
  summary: >-
    <span data-ttu-id="eb75c-110">Berechnet einen Zellbereich auf einem Arbeitsblatt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-110">Calculates a range of cells on a worksheet.</span></span>


    <span data-ttu-id="eb75c-111">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate()
  fullName: calculate()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Range.cellCount
  summary: >-
    <span data-ttu-id="eb75c-p103">Anzahl der Zellen im Bereich. Diese API gibt -1 zurück, wenn die Zellenanzahl 2^31-1 (2.147.483.647) überschreitet. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p103">Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.</span></span>


    <span data-ttu-id="eb75c-115">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellCount
  fullName: cellCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellCount: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.clear
  summary: >-
    <span data-ttu-id="eb75c-116">Löschen von Bereichswerten, Format, Füllung, Rahmen usw.</span><span class="sxs-lookup"><span data-stu-id="eb75c-116">Clear range values, format, fill, border, etc.</span></span>


    <span data-ttu-id="eb75c-117">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: clear(applyTo)
  fullName: clear(applyTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-118\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-118\">Examples</span></span>\n\n```javascript\n// Below example clears format and contents of the range. \nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.clear();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: applyTo
      description: <span data-ttu-id="eb75c-119">Optional.</span><span class="sxs-lookup"><span data-stu-id="eb75c-119">Optional.</span></span> <span data-ttu-id="eb75c-120">Bestimmt den Typ der Clear-Aktion.</span><span class="sxs-lookup"><span data-stu-id="eb75c-120">Determines the type of clear action.</span></span> <span data-ttu-id="eb75c-121">Weitere Informationen finden Sie unter Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="eb75c-121">See Excel.ClearApplyTo for details.</span></span>
      type:
      - excel.Excel.ClearApplyTo
- uid: excel.Excel.Range.clear_1
  summary: >-
    <span data-ttu-id="eb75c-122">Löschen von Bereichswerten, Format, Füllung, Rahmen usw.</span><span class="sxs-lookup"><span data-stu-id="eb75c-122">Clear range values, format, fill, border, etc.</span></span>


    <span data-ttu-id="eb75c-123">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-123">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: clear(applyToString)
  fullName: clear(applyToString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: applyToString
      description: <span data-ttu-id="eb75c-124">Optional.</span><span class="sxs-lookup"><span data-stu-id="eb75c-124">Optional.</span></span> <span data-ttu-id="eb75c-125">Bestimmt den Typ der Clear-Aktion.</span><span class="sxs-lookup"><span data-stu-id="eb75c-125">Determines the type of clear action.</span></span> <span data-ttu-id="eb75c-126">Weitere Informationen finden Sie unter Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="eb75c-126">See Excel.ClearApplyTo for details.</span></span>
      type:
      - "\"All\" | \"Formats\" | \"Contents\" | \"Hyperlinks\" | \"RemoveHyperlinks\""
- uid: excel.Excel.Range.columnCount
  summary: >-
    <span data-ttu-id="eb75c-p106">Stellt die Gesamtanzahl der Spalten im Bereich dar. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p106">Represents the total number of columns in the range. Read-only.</span></span>


    <span data-ttu-id="eb75c-129">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-129">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnCount
  fullName: columnCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnCount: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.columnHidden
  summary: >-
    <span data-ttu-id="eb75c-130">Stellt dar, ob alle Spalten des aktuellen Bereichs ausgeblendet sind.</span><span class="sxs-lookup"><span data-stu-id="eb75c-130">Represents if all columns of the current range are hidden.</span></span>


    <span data-ttu-id="eb75c-131">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-131">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnHidden
  fullName: columnHidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'columnHidden: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.columnIndex
  summary: >-
    <span data-ttu-id="eb75c-p107">Stellt die Spaltenanzahl der ersten Zelle im Bereich dar. Nullindiziert. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p107">Represents the column number of the first cell in the range. Zero-indexed. Read-only.</span></span>


    <span data-ttu-id="eb75c-135">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-135">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnIndex
  fullName: columnIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnIndex: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.conditionalFormats
  summary: >-
    <span data-ttu-id="eb75c-p108">Sammlung von ConditionalFormats, die den Bereich überschneiden. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p108">Collection of ConditionalFormats that intersect the range. Read-only.</span></span>


    <span data-ttu-id="eb75c-138">\[[API-Satz: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-138">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: conditionalFormats
  fullName: conditionalFormats
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
- uid: excel.Excel.Range.context
  summary: <span data-ttu-id="eb75c-139">Der dem Objekt zugeordnete Anforderungskontext.</span><span class="sxs-lookup"><span data-stu-id="eb75c-139">The request context associated with the object.</span></span> <span data-ttu-id="eb75c-140">Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-140">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Range.convertDataTypeToText
  summary: >-
    <span data-ttu-id="eb75c-141">Wandelt die Zellbereich mit Datentypen in Text um.</span><span class="sxs-lookup"><span data-stu-id="eb75c-141">Converts the range cells with datatypes into text.</span></span>


    <span data-ttu-id="eb75c-142">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-142">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: convertDataTypeToText()
  fullName: convertDataTypeToText()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'convertDataTypeToText(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Range.convertToLinkedDataType
  summary: >-
    <span data-ttu-id="eb75c-143">Konvertiert die Range-Zellen in den verknüpften datatype-Datentyp im Arbeitsblatt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-143">Converts the range cells into linked datatype in the worksheet.</span></span>


    <span data-ttu-id="eb75c-144">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-144">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: convertToLinkedDataType(serviceID, languageCulture)
  fullName: convertToLinkedDataType(serviceID, languageCulture)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: serviceID
      description: <span data-ttu-id="eb75c-145">Die Dienst-ID, die zum Abfragen der Daten verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="eb75c-145">The Service ID which will be used to query the data.</span></span>
      type:
      - number
    - id: languageCulture
      description: <span data-ttu-id="eb75c-146">Sprach Kultur, für die der Dienst abgefragt werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb75c-146">Language Culture to query the service for.</span></span>
      type:
      - string
- uid: excel.Excel.Range.copyFrom
  summary: >-
    <span data-ttu-id="eb75c-147">Kopiert Zellendaten oder-Formatierungen aus dem Quell-oder RangeAreas in den aktuellen Range.</span><span class="sxs-lookup"><span data-stu-id="eb75c-147">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="eb75c-148">Der Ziel-Range kann unterschiedlich groß sein als der Quell-oder RangeAreas.</span><span class="sxs-lookup"><span data-stu-id="eb75c-148">The destination range can be of different size than the source range or RangeAreas.</span></span> <span data-ttu-id="eb75c-149">Das Ziel wird automatisch erweitert, wenn es kleiner als die Quelle ist.</span><span class="sxs-lookup"><span data-stu-id="eb75c-149">The destination will be expanded automatically if it is smaller than the source.</span></span>


    <span data-ttu-id="eb75c-150">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-150">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  fullName: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: sourceRange
      description: <span data-ttu-id="eb75c-151">Der Quell-oder RangeAreas, aus dem kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb75c-151">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="eb75c-152">Wenn die Quell-RangeAreas über mehrere Bereiche verfügt, muss Sie im Gliederungsformular erstellt werden, indem vollständige Zeilen oder Spalten aus einem rechteckigen Bereich entfernt werden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-152">When the source RangeAreas has multiple ranges, it must in the outline form which can be created by removing full rows or columns from a rectangular range.</span></span>
      type:
      - Range | RangeAreas | string
    - id: copyType
      description: <span data-ttu-id="eb75c-153">Der Typ der Zellendaten oder-Formatierungen, die kopiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-153">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="eb75c-154">Der Standardwert ist "All".</span><span class="sxs-lookup"><span data-stu-id="eb75c-154">Default is "All".</span></span>
      type:
      - excel.Excel.RangeCopyType
    - id: skipBlanks
      description: <span data-ttu-id="eb75c-155">True, wenn leere Zellen im Quellbereich übersprungen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-155">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="eb75c-156">Der Standardwert ist false.</span><span class="sxs-lookup"><span data-stu-id="eb75c-156">Default is false.</span></span>
      type:
      - boolean
    - id: transpose
      description: <span data-ttu-id="eb75c-157">True, wenn die Zellen im Zielbereich Transpose.</span><span class="sxs-lookup"><span data-stu-id="eb75c-157">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="eb75c-158">Der Standardwert ist false.</span><span class="sxs-lookup"><span data-stu-id="eb75c-158">Default is false.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.copyFrom_1
  summary: >-
    <span data-ttu-id="eb75c-159">Kopiert Zellendaten oder-Formatierungen aus dem Quell-oder RangeAreas in den aktuellen Range.</span><span class="sxs-lookup"><span data-stu-id="eb75c-159">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="eb75c-160">Der Ziel-Range kann unterschiedlich groß sein als der Quell-oder RangeAreas.</span><span class="sxs-lookup"><span data-stu-id="eb75c-160">The destination range can be of different size than the source range or RangeAreas.</span></span> <span data-ttu-id="eb75c-161">Das Ziel wird automatisch erweitert, wenn es kleiner als die Quelle ist.</span><span class="sxs-lookup"><span data-stu-id="eb75c-161">The destination will be expanded automatically if it is smaller than the source.</span></span>


    <span data-ttu-id="eb75c-162">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-162">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)
  fullName: copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: sourceRange
      description: <span data-ttu-id="eb75c-163">Der Quell-oder RangeAreas, aus dem kopiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb75c-163">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="eb75c-164">Wenn die Quell-RangeAreas über mehrere Bereiche verfügt, muss Sie im Gliederungsformular erstellt werden, indem vollständige Zeilen oder Spalten aus einem rechteckigen Bereich entfernt werden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-164">When the source RangeAreas has multiple ranges, it must in the outline form which can be created by removing full rows or columns from a rectangular range.</span></span>
      type:
      - Range | RangeAreas | string
    - id: copyTypeString
      description: <span data-ttu-id="eb75c-165">Der Typ der Zellendaten oder-Formatierungen, die kopiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-165">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="eb75c-166">Der Standardwert ist "All".</span><span class="sxs-lookup"><span data-stu-id="eb75c-166">Default is "All".</span></span>
      type:
      - "\"All\" | \"Formulas\" | \"Values\" | \"Formats\""
    - id: skipBlanks
      description: <span data-ttu-id="eb75c-167">True, wenn leere Zellen im Quellbereich übersprungen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-167">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="eb75c-168">Der Standardwert ist false.</span><span class="sxs-lookup"><span data-stu-id="eb75c-168">Default is false.</span></span>
      type:
      - boolean
    - id: transpose
      description: <span data-ttu-id="eb75c-169">True, wenn die Zellen im Zielbereich Transpose.</span><span class="sxs-lookup"><span data-stu-id="eb75c-169">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="eb75c-170">Der Standardwert ist false.</span><span class="sxs-lookup"><span data-stu-id="eb75c-170">Default is false.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.dataValidation
  summary: >-
    <span data-ttu-id="eb75c-171">Gibt ein Datenüberprüfungsobjekt zurück.</span><span class="sxs-lookup"><span data-stu-id="eb75c-171">Returns a data validation object.</span></span>


    <span data-ttu-id="eb75c-172">\[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-172">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataValidation
  fullName: dataValidation
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataValidation: Excel.DataValidation;'
    return:
      type:
      - excel.Excel.DataValidation
- uid: excel.Excel.Range.delete
  summary: >-
    <span data-ttu-id="eb75c-173">Löscht die einem Bereich zugeordneten Zellen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-173">Deletes the cells associated with the range.</span></span>


    <span data-ttu-id="eb75c-174">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-174">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete(shift)
  fullName: delete(shift)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(shift: Excel.DeleteShiftDirection): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: shift
      description: <span data-ttu-id="eb75c-175">Gibt an, auf welche Weise die Zellen verschoben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-175">Specifies which way to shift the cells.</span></span> <span data-ttu-id="eb75c-176">Weitere Informationen finden Sie unter Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="eb75c-176">See Excel.DeleteShiftDirection for details.</span></span>
      type:
      - excel.Excel.DeleteShiftDirection
- uid: excel.Excel.Range.delete_1
  summary: >-
    <span data-ttu-id="eb75c-177">Löscht die einem Bereich zugeordneten Zellen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-177">Deletes the cells associated with the range.</span></span>


    <span data-ttu-id="eb75c-178">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-178">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete(shiftString)
  fullName: delete(shiftString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(shiftString: "Up" | "Left"): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-179\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-179\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.delete(\"Left\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: shiftString
      description: <span data-ttu-id="eb75c-180">Gibt an, auf welche Weise die Zellen verschoben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-180">Specifies which way to shift the cells.</span></span> <span data-ttu-id="eb75c-181">Weitere Informationen finden Sie unter Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="eb75c-181">See Excel.DeleteShiftDirection for details.</span></span>
      type:
      - "\"Up\" | \"Left\""
- uid: excel.Excel.Range.find
  summary: >-
    <span data-ttu-id="eb75c-182">Sucht die angegebene Zeichenfolge basierend auf den angegebenen Kriterien.</span><span class="sxs-lookup"><span data-stu-id="eb75c-182">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="eb75c-183">Wenn der aktuelle Range größer als eine einzelne Zelle ist, wird die Suche auf diesen Wert begrenzt, sonst wird die Suche das gesamte Blatt abdecken, das nach dieser Zelle beginnt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-183">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span>


    <span data-ttu-id="eb75c-184">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-184">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: find(text, criteria)
  fullName: find(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: <span data-ttu-id="eb75c-185">Der Range, der den Suchkriterien entspricht.</span><span class="sxs-lookup"><span data-stu-id="eb75c-185">The Range which matched the search criteria.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="eb75c-186">Zeichenfolge, die gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb75c-186">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="eb75c-187">Weitere Kriterien.</span><span class="sxs-lookup"><span data-stu-id="eb75c-187">Additional Criteria.</span></span>
      type:
      - excel.Excel.SearchCriteria
- uid: excel.Excel.Range.findOrNullObject
  summary: >-
    <span data-ttu-id="eb75c-188">Sucht die angegebene Zeichenfolge basierend auf den angegebenen Kriterien.</span><span class="sxs-lookup"><span data-stu-id="eb75c-188">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="eb75c-189">Wenn der aktuelle Range größer als eine einzelne Zelle ist, wird die Suche auf diesen Wert begrenzt, sonst wird die Suche das gesamte Blatt abdecken, das nach dieser Zelle beginnt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-189">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span> <span data-ttu-id="eb75c-190">Wenn keine Übereinstimmungen vorhanden sind, gibt diese Funktion ein NULL-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="eb75c-190">If there are no matches, this function will return a null object.</span></span>


    <span data-ttu-id="eb75c-191">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-191">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: findOrNullObject(text, criteria)
  fullName: findOrNullObject(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: <span data-ttu-id="eb75c-192">Der Range, der den Suchkriterien entspricht.</span><span class="sxs-lookup"><span data-stu-id="eb75c-192">The Range which matched the search criteria.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="eb75c-193">Zeichenfolge, die gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb75c-193">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="eb75c-194">Weitere Kriterien.</span><span class="sxs-lookup"><span data-stu-id="eb75c-194">Additional Criteria.</span></span>
      type:
      - excel.Excel.SearchCriteria
- uid: excel.Excel.Range.format
  summary: >-
    <span data-ttu-id="eb75c-p124">Gibt ein Formatobjekt zurück, das die Schriftart des Bereichs, Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften verschachtelt. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p124">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties. Read-only.</span></span>


    <span data-ttu-id="eb75c-197">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-197">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: format
  fullName: format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.RangeFormat;'
    return:
      type:
      - excel.Excel.RangeFormat
- uid: excel.Excel.Range.formulas
  summary: >-
    <span data-ttu-id="eb75c-198">Stellt die Formel in der A1-Schreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-198">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="eb75c-199">Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="eb75c-199">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="eb75c-200">Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-200">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="eb75c-201">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-201">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: formulas
  fullName: formulas
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulas: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.formulasLocal
  summary: >-
    <span data-ttu-id="eb75c-202">Stellt die Formel in der a1-Notation im Sprach-und Zahlen Formatierungs Gebietsschema des Benutzers dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-202">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="eb75c-203">Beispielsweise würde die englische "= SUM (a1, 1,5)"-Formel zu "= Summe (a1; 1,5) "in Deutsch.</span><span class="sxs-lookup"><span data-stu-id="eb75c-203">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="eb75c-204">Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="eb75c-204">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="eb75c-205">Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-205">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="eb75c-206">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-206">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: formulasLocal
  fullName: formulasLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulasLocal: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.formulasR1C1
  summary: >-
    <span data-ttu-id="eb75c-207">Stellt die Formel in der R1C1-Schreibweise dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-207">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="eb75c-208">Beim Festlegen von Formeln auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="eb75c-208">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="eb75c-209">Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-209">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="eb75c-210">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-210">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: formulasR1C1
  fullName: formulasR1C1
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulasR1C1: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.getAbsoluteResizedRange
  summary: >-
    <span data-ttu-id="eb75c-211">Ruft ein Bereichsobjekt ab, das die gleiche Zelle oben links aufweist wie das aktuelle Bereichsobjekt, jedoch über eine angegebene Anzahl von Reihen uns Spalten verfügt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-211">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>


    <span data-ttu-id="eb75c-212">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-212">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getAbsoluteResizedRange(numRows, numColumns)
  fullName: getAbsoluteResizedRange(numRows, numColumns)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: numRows
      description: <span data-ttu-id="eb75c-213">Die Anzahl der Zeilen der neuen Größenklasse.</span><span class="sxs-lookup"><span data-stu-id="eb75c-213">The number of rows of the new range size.</span></span>
      type:
      - number
    - id: numColumns
      description: <span data-ttu-id="eb75c-214">Die Anzahl der Spalten der neuen Größenklasse.</span><span class="sxs-lookup"><span data-stu-id="eb75c-214">The number of columns of the new range size.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getBoundingRect
  summary: >-
    <span data-ttu-id="eb75c-p128">Ruft das kleinste Bereichsobjekt ab, das die angegebenen Bereiche umfasst. Beispielsweise das GetBoundingRect von "B2:C5" und "D10:E15" lautet "B2:E15".</span><span class="sxs-lookup"><span data-stu-id="eb75c-p128">Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>


    <span data-ttu-id="eb75c-217">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-217">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getBoundingRect(anotherRange)
  fullName: getBoundingRect(anotherRange)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-218\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-218\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:G6\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var range = range.getBoundingRect(\"G4:H8\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // Prints Sheet1!D4:H8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: anotherRange
      description: <span data-ttu-id="eb75c-219">Das Bereichsobjekt oder die Adresse oder der Bereichsname.</span><span class="sxs-lookup"><span data-stu-id="eb75c-219">The range object or address or range name.</span></span>
      type:
      - Range | string
- uid: excel.Excel.Range.getCell
  summary: >-
    <span data-ttu-id="eb75c-220">Ruft das Range-Objekt ab, das die einzelne Zelle basierend auf Zeilen-und Spaltennummern enthält.</span><span class="sxs-lookup"><span data-stu-id="eb75c-220">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="eb75c-221">Die Zelle kann außerhalb der Grenzen des übergeordneten Bereichs liegen, solange Sie sich innerhalb des Arbeitsblatt Rasters befindet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-221">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="eb75c-222">Die zurückgegebene Zelle befindet sich relativ zur oberen linken Zelle des Bereiches.</span><span class="sxs-lookup"><span data-stu-id="eb75c-222">The returned cell is located relative to the top left cell of the range.</span></span>


    <span data-ttu-id="eb75c-223">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-223">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCell(row, column)
  fullName: getCell(row, column)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-224\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-224\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var cell = range.cell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="eb75c-p130">Zeilenanzahl der abzurufenden Zelle. Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p130">Row number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
    - id: column
      description: <span data-ttu-id="eb75c-p131">Spaltenanzahl der abzurufenden Zelle. Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p131">Column number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getCellProperties
  summary: >-
    <span data-ttu-id="eb75c-229">Gibt ein 2D-Array zurück, in dem die Daten für Schriftart, Füllung, Rahmen, Ausrichtung und andere Eigenschaften der einzelnen Zellen gekapselt werden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-229">Returns a 2D array, encapsulating the data for each cell's font, fill, borders, alignment, and other properties.</span></span>


    <span data-ttu-id="eb75c-230">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-230">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getCellProperties(cellPropertiesLoadOptions)
  fullName: getCellProperties(cellPropertiesLoadOptions)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
    return:
      type:
      - OfficeExtension.ClientResult<CellProperties[][]>
      description: ''
    parameters:
    - id: cellPropertiesLoadOptions
      description: ''
      type:
      - CellPropertiesLoadOptions
- uid: excel.Excel.Range.getColumn
  summary: >-
    <span data-ttu-id="eb75c-231">Ruft eine Spalte ab, die im Bereich enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="eb75c-231">Gets a column contained in the range.</span></span>


    <span data-ttu-id="eb75c-232">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-232">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getColumn(column)
  fullName: getColumn(column)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumn(column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-233\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-233\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet19\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!B1:B8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: column
      description: <span data-ttu-id="eb75c-p132">Spaltenanzahl des abzurufenden Bereichs. Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p132">Column number of the range to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getColumnProperties
  summary: >-
    <span data-ttu-id="eb75c-236">Gibt ein eindimensionales Array zurück, in dem die Daten für Schriftart, Füllung, Rahmen, Ausrichtung und andere Eigenschaften der einzelnen Spalten gekapselt werden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-236">Returns a single-dimensional array, encapsulating the data for each column's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="eb75c-237">Für Eigenschaften, die nicht für jede Zelle innerhalb einer bestimmten Spalte konsistent sind, wird NULL zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-237">For properties that are not consistent across each cell within a given column, null will be returned.</span></span>


    <span data-ttu-id="eb75c-238">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-238">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getColumnProperties(columnPropertiesLoadOptions)
  fullName: getColumnProperties(columnPropertiesLoadOptions)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<ColumnProperties[]>
      description: ''
    parameters:
    - id: columnPropertiesLoadOptions
      description: ''
      type:
      - ColumnPropertiesLoadOptions
- uid: excel.Excel.Range.getColumnsAfter
  summary: >-
    <span data-ttu-id="eb75c-239">Ruft eine bestimmte Anzahl von Spalten rechts vom aktuellen Bereichsobjekt ab.</span><span class="sxs-lookup"><span data-stu-id="eb75c-239">Gets a certain number of columns to the right of the current Range object.</span></span>


    <span data-ttu-id="eb75c-240">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-240">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getColumnsAfter(count)
  fullName: getColumnsAfter(count)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumnsAfter(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="eb75c-p134">Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p134">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getColumnsBefore
  summary: >-
    <span data-ttu-id="eb75c-246">Ruft eine bestimmte Anzahl von Spalten links vom aktuellen Bereichsobjekt ab.</span><span class="sxs-lookup"><span data-stu-id="eb75c-246">Gets a certain number of columns to the left of the current Range object.</span></span>


    <span data-ttu-id="eb75c-247">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-247">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getColumnsBefore(count)
  fullName: getColumnsBefore(count)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumnsBefore(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="eb75c-p135">Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p135">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getEntireColumn
  summary: >-
    <span data-ttu-id="eb75c-253">Ruft ein Objekt ab, das die gesamte Spalte des Bereiches darstellt (Wenn beispielsweise der aktuelle Bereich die Zellen "B4: e11" darstellt `getEntireColumn` , ist its ein Bereich, der die Spalten "B:E" darstellt).</span><span class="sxs-lookup"><span data-stu-id="eb75c-253">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>


    <span data-ttu-id="eb75c-254">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-254">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getEntireColumn()
  fullName: getEntireColumn()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntireColumn(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-255\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-255\">Examples</span></span>\n\n```javascript\n// Note: the grid properties of the Range (values, numberFormat, formulas) \n// contains null since the Range in question is unbounded.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeEC = range.getEntireColumn();\n    rangeEC.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeEC.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getEntireRow
  summary: >-
    <span data-ttu-id="eb75c-256">Ruft ein Objekt ab, das die gesamte Zeile des Bereiches darstellt (Wenn beispielsweise der aktuelle Bereich die Zellen "B4: e11" darstellt `GetEntireRow` , ist its ein Bereich, der die zeilen "4:11" darstellt).</span><span class="sxs-lookup"><span data-stu-id="eb75c-256">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>


    <span data-ttu-id="eb75c-257">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-257">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getEntireRow()
  fullName: getEntireRow()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntireRow(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-258\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-258\">Examples</span></span>\n\n```javascript\n// Gets an object that represents the entire row of the range \n// (for example, if the current range represents cells \"B4:E11\", \n// its GetEntireRow is a range that represents rows \"4:11\").\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeER = range.getEntireRow();\n    rangeER.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeER.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getImage
  summary: >-
    <span data-ttu-id="eb75c-259">Rendert den Range als Base64-codiertes PNG-Bild.</span><span class="sxs-lookup"><span data-stu-id="eb75c-259">Renders the range as a base64-encoded png image.</span></span>


    <span data-ttu-id="eb75c-260">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-260">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getImage()
  fullName: getImage()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getImage(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: ''
- uid: excel.Excel.Range.getIntersection
  summary: >-
    <span data-ttu-id="eb75c-261">Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-261">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>


    <span data-ttu-id="eb75c-262">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-262">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getIntersection(anotherRange)
  fullName: getIntersection(anotherRange)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-263\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-263\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection(\"D4:G6\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!D4:F6\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: anotherRange
      description: <span data-ttu-id="eb75c-264">Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="eb75c-264">The range object or range address that will be used to determine the intersection of ranges.</span></span>
      type:
      - Range | string
- uid: excel.Excel.Range.getIntersectionOrNullObject
  summary: >-
    <span data-ttu-id="eb75c-p136">Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt. Wenn keine Schnittmenge gefunden wird, wird ein null-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p136">Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is found, will return a null object.</span></span>


    <span data-ttu-id="eb75c-267">\[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-267">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getIntersectionOrNullObject(anotherRange)
  fullName: getIntersectionOrNullObject(anotherRange)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-268\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-268\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: anotherRange
      description: <span data-ttu-id="eb75c-269">Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="eb75c-269">The range object or range address that will be used to determine the intersection of ranges.</span></span>
      type:
      - Range | string
- uid: excel.Excel.Range.getLastCell
  summary: >-
    <span data-ttu-id="eb75c-p137">Ruft die letzte Zelle im Bereich ab. Beispielsweise lautet die letzte Zelle des Bereichs „B2: D5“ „D5“.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p137">Gets the last cell within the range. For example, the last cell of "B2:D5" is "D5".</span></span>


    <span data-ttu-id="eb75c-272">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-272">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLastCell()
  fullName: getLastCell()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastCell(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-273\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-273\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getLastColumn
  summary: >-
    <span data-ttu-id="eb75c-p138">Ruft die letzte Spalte im Bereich ab. Beispielsweise lautet die letzte Spalte von „B2:D5“ „D2:D5“.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p138">Gets the last column within the range. For example, the last column of "B2:D5" is "D2:D5".</span></span>


    <span data-ttu-id="eb75c-276">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-276">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLastColumn()
  fullName: getLastColumn()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastColumn(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-277\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-277\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F1:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getLastRow
  summary: >-
    <span data-ttu-id="eb75c-p139">Ruft die letzte Zeile im Bereich ab. Beispielsweise lautet die letzte Zelle des Bereichs "B2: D5" "B5:D5".</span><span class="sxs-lookup"><span data-stu-id="eb75c-p139">Gets the last row within the range. For example, the last row of "B2:D5" is "B5:D5".</span></span>


    <span data-ttu-id="eb75c-280">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-280">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLastRow()
  fullName: getLastRow()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastRow(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-281\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-281\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A8:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getOffsetRange
  summary: >-
    <span data-ttu-id="eb75c-p140">Ruft ein Objekt ab, das einen Bereich darstellt, der aus dem angegebenen Bereich versetzt ist. Die Dimension des zurückgegebenen Bereichs entspricht diesem Bereich. Wenn der resultierende Bereich außerhalb des Arbeitsblatt-Rasters erzwungen wird, wird ein Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p140">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>


    <span data-ttu-id="eb75c-285">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-285">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOffsetRange(rowOffset, columnOffset)
  fullName: getOffsetRange(rowOffset, columnOffset)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-286\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-286\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:F6\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!H3:K5\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: rowOffset
      description: <span data-ttu-id="eb75c-p141">Die Anzahl an Zeilen (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p141">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>
      type:
      - number
    - id: columnOffset
      description: <span data-ttu-id="eb75c-p142">Die Anzahl an Spalten (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p142">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getResizedRange
  summary: >-
    <span data-ttu-id="eb75c-291">Ruft ein Range-Objekt ähnlich dem aktuellen Range-Objekt ab, dessen untere rechte Ecke jedoch um eine bestimmte Anzahl von Zeilen und Spalten erweitert (oder verkleinert) ist.</span><span class="sxs-lookup"><span data-stu-id="eb75c-291">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>


    <span data-ttu-id="eb75c-292">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-292">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getResizedRange(deltaRows, deltaColumns)
  fullName: getResizedRange(deltaRows, deltaColumns)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: deltaRows
      description: <span data-ttu-id="eb75c-p143">Die Anzahl von Zeilen, um die die untere rechte Ecke relativ zum aktuellen Bereich zu erweitern ist. Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verkleinern.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p143">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>
      type:
      - number
    - id: deltaColumns
      description: <span data-ttu-id="eb75c-295">Die Anzahl der Spalten, nach denen die untere rechte Ecke relativ zum aktuellen Bereich erweitert werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb75c-295">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="eb75c-296">Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verringern.</span><span class="sxs-lookup"><span data-stu-id="eb75c-296">Use a positive number to expand the range, or a negative number to decrease it.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getRow
  summary: >-
    <span data-ttu-id="eb75c-297">Ruft eine Zelle ab, die im Bereich enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="eb75c-297">Gets a row contained in the range.</span></span>


    <span data-ttu-id="eb75c-298">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-298">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRow(row)
  fullName: getRow(row)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRow(row: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-299\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-299\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A2:F2\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="eb75c-p145">Zeilenanzahl des abzurufenden Bereichs. Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p145">Row number of the range to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getRowProperties
  summary: >-
    <span data-ttu-id="eb75c-302">Gibt ein eindimensionales Array zurück, in dem die Daten für Schriftart, Füllung, Rahmen, Ausrichtung und andere Eigenschaften der einzelnen Zeilen gekapselt werden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-302">Returns a single-dimensional array, encapsulating the data for each row's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="eb75c-303">Für Eigenschaften, die nicht für jede Zelle innerhalb einer bestimmten Zeile konsistent sind, wird NULL zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-303">For properties that are not consistent across each cell within a given row, null will be returned.</span></span>


    <span data-ttu-id="eb75c-304">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-304">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getRowProperties(rowPropertiesLoadOptions)
  fullName: getRowProperties(rowPropertiesLoadOptions)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<RowProperties[]>
      description: ''
    parameters:
    - id: rowPropertiesLoadOptions
      description: ''
      type:
      - RowPropertiesLoadOptions
- uid: excel.Excel.Range.getRowsAbove
  summary: >-
    <span data-ttu-id="eb75c-305">Ruft eine bestimmte Anzahl von Zeilen oberhalb vom aktuellen Bereichsobjekt ab.</span><span class="sxs-lookup"><span data-stu-id="eb75c-305">Gets a certain number of rows above the current Range object.</span></span>


    <span data-ttu-id="eb75c-306">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-306">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRowsAbove(count)
  fullName: getRowsAbove(count)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRowsAbove(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="eb75c-p147">Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p147">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getRowsBelow
  summary: >-
    <span data-ttu-id="eb75c-312">Ruft eine bestimmte Anzahl von Zeilen unterhalb vom aktuellen Bereichsobjekt ab.</span><span class="sxs-lookup"><span data-stu-id="eb75c-312">Gets a certain number of rows below the current Range object.</span></span>


    <span data-ttu-id="eb75c-313">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-313">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRowsBelow(count)
  fullName: getRowsBelow(count)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRowsBelow(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="eb75c-p148">Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p148">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getSpecialCells
  summary: >-
    <span data-ttu-id="eb75c-319">Ruft das RangeAreas-Objekt ab, das einen oder mehrere rechteckige Bereiche umfasst, das alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-319">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="eb75c-320">Wenn keine speziellen Zellen gefunden werden, wird ein ItemNotFound-Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="eb75c-320">If no special cells are found, an ItemNotFound error will be thrown.</span></span>


    <span data-ttu-id="eb75c-321">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-321">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getSpecialCells(cellType, cellValueType)
  fullName: getSpecialCells(cellType, cellValueType)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: ''
    parameters:
    - id: cellType
      description: <span data-ttu-id="eb75c-322">Der Typ der einzuschließenden Zellen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-322">The type of cells to include.</span></span>
      type:
      - excel.Excel.SpecialCellType
    - id: cellValueType
      description: <span data-ttu-id="eb75c-323">Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Zelltypen in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-323">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="eb75c-324">Diese Werte können kombiniert werden, um mehr als einen Typ zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-324">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="eb75c-325">Der Standard ist die Auswahl aller Konstanten oder Formeln unabhängig vom Typ.</span><span class="sxs-lookup"><span data-stu-id="eb75c-325">The default is to select all constants or formulas, no matter what the type.</span></span>
      type:
      - excel.Excel.SpecialCellValueType
- uid: excel.Excel.Range.getSpecialCells_1
  summary: >-
    <span data-ttu-id="eb75c-326">Ruft das RangeAreas-Objekt ab, das einen oder mehrere rechteckige Bereiche umfasst, das alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-326">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="eb75c-327">Wenn keine speziellen Zellen gefunden werden, wird ein ItemNotFound-Fehler ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="eb75c-327">If no special cells are found, an ItemNotFound error will be thrown.</span></span>


    <span data-ttu-id="eb75c-328">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-328">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getSpecialCells(cellTypeString, cellValueType)
  fullName: getSpecialCells(cellTypeString, cellValueType)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Comments" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: ''
    parameters:
    - id: cellTypeString
      description: <span data-ttu-id="eb75c-329">Der Typ der einzuschließenden Zellen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-329">The type of cells to include.</span></span>
      type:
      - "\"ConditionalFormats\" | \"DataValidations\" | \"Blanks\" | \"Comments\" | \"Constants\" | \"Formulas\" | \"SameConditionalFormat\" | \"SameDataValidation\" | \"Visible\""
    - id: cellValueType
      description: <span data-ttu-id="eb75c-330">Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Zelltypen in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-330">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="eb75c-331">Diese Werte können kombiniert werden, um mehr als einen Typ zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-331">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="eb75c-332">Der Standard ist die Auswahl aller Konstanten oder Formeln unabhängig vom Typ.</span><span class="sxs-lookup"><span data-stu-id="eb75c-332">The default is to select all constants or formulas, no matter what the type.</span></span>
      type:
      - "\"All\" | \"Errors\" | \"ErrorsLogical\" | \"ErrorsNumbers\" | \"ErrorsText\" | \"ErrorsLogicalNumber\" | \"ErrorsLogicalText\" | \"ErrorsNumberText\" | \"Logical\" | \"LogicalNumbers\" | \"LogicalText\" | \"LogicalNumbersText\" | \"Numbers\" | \"NumbersText\" | \"Text\""
- uid: excel.Excel.Range.getSpecialCellsOrNullObject
  summary: >-
    <span data-ttu-id="eb75c-333">Ruft das RangeAreas-Objekt mit einem oder mehreren Bereichen ab, das alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-333">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="eb75c-334">Wenn keine speziellen Zellen gefunden werden, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-334">If no special cells are found, a null object will be returned.</span></span>


    <span data-ttu-id="eb75c-335">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-335">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getSpecialCellsOrNullObject(cellType, cellValueType)
  fullName: getSpecialCellsOrNullObject(cellType, cellValueType)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: ''
    parameters:
    - id: cellType
      description: <span data-ttu-id="eb75c-336">Der Typ der einzuschließenden Zellen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-336">The type of cells to include.</span></span>
      type:
      - excel.Excel.SpecialCellType
    - id: cellValueType
      description: <span data-ttu-id="eb75c-337">Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Zelltypen in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-337">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="eb75c-338">Diese Werte können kombiniert werden, um mehr als einen Typ zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-338">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="eb75c-339">Der Standard ist die Auswahl aller Konstanten oder Formeln unabhängig vom Typ.</span><span class="sxs-lookup"><span data-stu-id="eb75c-339">The default is to select all constants or formulas, no matter what the type.</span></span>
      type:
      - excel.Excel.SpecialCellValueType
- uid: excel.Excel.Range.getSpecialCellsOrNullObject_1
  summary: >-
    <span data-ttu-id="eb75c-340">Ruft das RangeAreas-Objekt mit einem oder mehreren Bereichen ab, das alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-340">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="eb75c-341">Wenn keine speziellen Zellen gefunden werden, wird ein NULL-Objekt zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-341">If no special cells are found, a null object will be returned.</span></span>


    <span data-ttu-id="eb75c-342">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-342">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getSpecialCellsOrNullObject(cellTypeString, cellValueType)
  fullName: getSpecialCellsOrNullObject(cellTypeString, cellValueType)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Comments" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: ''
    parameters:
    - id: cellTypeString
      description: <span data-ttu-id="eb75c-343">Der Typ der einzuschließenden Zellen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-343">The type of cells to include.</span></span>
      type:
      - "\"ConditionalFormats\" | \"DataValidations\" | \"Blanks\" | \"Comments\" | \"Constants\" | \"Formulas\" | \"SameConditionalFormat\" | \"SameDataValidation\" | \"Visible\""
    - id: cellValueType
      description: <span data-ttu-id="eb75c-344">Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Zelltypen in das Ergebnis eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-344">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="eb75c-345">Diese Werte können kombiniert werden, um mehr als einen Typ zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-345">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="eb75c-346">Der Standard ist die Auswahl aller Konstanten oder Formeln unabhängig vom Typ.</span><span class="sxs-lookup"><span data-stu-id="eb75c-346">The default is to select all constants or formulas, no matter what the type.</span></span>
      type:
      - "\"All\" | \"Errors\" | \"ErrorsLogical\" | \"ErrorsNumbers\" | \"ErrorsText\" | \"ErrorsLogicalNumber\" | \"ErrorsLogicalText\" | \"ErrorsNumberText\" | \"Logical\" | \"LogicalNumbers\" | \"LogicalText\" | \"LogicalNumbersText\" | \"Numbers\" | \"NumbersText\" | \"Text\""
- uid: excel.Excel.Range.getSpillingToRange
  summary: >-
    <span data-ttu-id="eb75c-347">Ruft das Range-Objekt ab, das den Spill-Range enthält, wenn es für eine Anchor-Zelle aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="eb75c-347">Gets the range object containing the spill range when called on an anchor cell.</span></span> <span data-ttu-id="eb75c-348">Schlägt fehl, wenn Sie auf einen Range mit mehr als einer Zelle angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="eb75c-348">Fails if applied to a range with more than one cell.</span></span> <span data-ttu-id="eb75c-349">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-349">Read only.</span></span>


    <span data-ttu-id="eb75c-350">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-350">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getSpillingToRange()
  fullName: getSpillingToRange()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSpillingToRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.Range.getSpillParent
  summary: >-
    <span data-ttu-id="eb75c-351">Ruft das Range-Objekt ab, das die Anchor-Zelle für eine Zelle enthält, in die es verschüttet wird.</span><span class="sxs-lookup"><span data-stu-id="eb75c-351">Gets the range object containing the anchor cell for a cell getting spilled into.</span></span> <span data-ttu-id="eb75c-352">Schlägt fehl, wenn Sie auf einen Range mit mehr als einer Zelle angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="eb75c-352">Fails if applied to a range with more than one cell.</span></span> <span data-ttu-id="eb75c-353">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-353">Read only.</span></span>


    <span data-ttu-id="eb75c-354">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-354">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getSpillParent()
  fullName: getSpillParent()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSpillParent(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.Range.getSurroundingRegion
  summary: >-
    <span data-ttu-id="eb75c-355">Gibt ein Bereichsobjekt zurück, das die umgebenden Region für die Zelle oben links in diesem Bereich darstellt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-355">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id="eb75c-356">Eine umgebende Region ist ein Bereich, der von einer Kombination von leeren Zeilen und leeren Spalten relativ zu diesem Bereich begrenzt wird.</span><span class="sxs-lookup"><span data-stu-id="eb75c-356">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>


    <span data-ttu-id="eb75c-357">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-357">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getSurroundingRegion()
  fullName: getSurroundingRegion()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSurroundingRegion(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.Range.getTables
  summary: >-
    <span data-ttu-id="eb75c-358">Ruft eine bereichsbezogene Auflistung von Tabellen ab, die mit dem Bereich überlappen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-358">Gets a scoped collection of tables that overlap with the range.</span></span>


    <span data-ttu-id="eb75c-359">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-359">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getTables(fullyContained)
  fullName: getTables(fullyContained)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
    return:
      type:
      - excel.Excel.TableScopedCollection
      description: ''
    parameters:
    - id: fullyContained
      description: <span data-ttu-id="eb75c-360">Wenn true, werden nur Tabellen zurückgegeben, die vollständig innerhalb der Bereichsgrenzen enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="eb75c-360">If true, returns only tables that are fully contained within the range bounds.</span></span> <span data-ttu-id="eb75c-361">Der Standardwert ist false.</span><span class="sxs-lookup"><span data-stu-id="eb75c-361">The default value is false.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.getUsedRange
  summary: >-
    <span data-ttu-id="eb75c-p161">Gibt den verwendeten Bereich des angegebenen Bereichsobjekts zurück. Wenn keine verwendeten Zellen innerhalb des Bereichs vorhanden sind, löst diese Funktion einen „ItemNotFound“-Fehler aus.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p161">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>


    <span data-ttu-id="eb75c-364">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-364">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRange(valuesOnly)
  fullName: getUsedRange(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-365\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-365\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeUR = range.getUsedRange();\n    rangeUR.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeUR.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: valuesOnly
      description: '<span data-ttu-id="eb75c-366">Betrachtet nur Zellen mit Werten als verwendet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-366">Considers only cells with values as used cells.</span></span> <span data-ttu-id="eb75c-367">\[API-Satz: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-367">\[Api set: ExcelApi 1.2\]</span></span>'
      type:
      - boolean
- uid: excel.Excel.Range.getUsedRangeOrNullObject
  summary: >-
    <span data-ttu-id="eb75c-p163">Gibt den verwendeten Bereich des angegebenen Bereichsobjekts zurück. Wenn keine verwendeten Zellen innerhalb des Bereichs vorhanden sind, gibt diese Funktion ein NULL-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p163">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>


    <span data-ttu-id="eb75c-370">\[[API-Satz: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-370">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: getUsedRangeOrNullObject(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-371\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-371\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(\n        true /* valuesOnly */\n    );\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n        console.log(\"Need Data to Make Chart\");\n        console.log(\"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\");\n    } else {\n        const chart = sheet.charts.add(\n            Excel.ChartType.columnClustered,\n            dataRange,\n            \"Columns\"\n        );\n        chart.setPosition(\"A15\", \"F30\");\n        chart.title.text = \"Quarterly sales chart\";\n        chart.legend.position = \"Right\";\n        chart.legend.format.fill.setSolidColor(\"white\");\n        chart.dataLabels.format.font.size = 15;\n        chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: valuesOnly
      description: <span data-ttu-id="eb75c-372">Betrachtet nur Zellen mit Werten als verwendet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-372">Considers only cells with values as used cells.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.getVisibleView
  summary: >-
    <span data-ttu-id="eb75c-373">Stellt die sichtbaren Zeilen des aktuellen Bereichs dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-373">Represents the visible rows of the current range.</span></span>


    <span data-ttu-id="eb75c-374">\[[API-Satz: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-374">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getVisibleView()
  fullName: getVisibleView()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getVisibleView(): Excel.RangeView;'
    return:
      type:
      - excel.Excel.RangeView
      description: ''
- uid: excel.Excel.Range.hasSpill
  summary: >-
    <span data-ttu-id="eb75c-375">Stellt dar, ob alle Zellen einen Überlauf Rahmen aufweisen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-375">Represents if all cells have a spill border.</span></span> <span data-ttu-id="eb75c-376">Gibt true zurück, wenn alle Zellen einen Spill-Rahmen haben, oder false, wenn alle Zellen keinen verschütten-Rahmen haben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-376">Returns true if all cells have a spill border, or false if all cells do not have a spill border.</span></span> <span data-ttu-id="eb75c-377">Gibt NULL zurück, wenn es Zellen mit und ohne Überlauf Ränder innerhalb des Bereiches gibt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-377">Returns null if there are cells both with and without spill borders within the range.</span></span>


    <span data-ttu-id="eb75c-378">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-378">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: hasSpill
  fullName: hasSpill
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly hasSpill: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.hidden
  summary: >-
    <span data-ttu-id="eb75c-p165">Stellt dar, ob alle Zellen des aktuellen Bereichs ausgeblendet sind. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p165">Represents if all cells of the current range are hidden. Read-only.</span></span>


    <span data-ttu-id="eb75c-381">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-381">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: hidden
  fullName: hidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly hidden: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.hyperlink
  summary: >-
    <span data-ttu-id="eb75c-382">Stellt den Hyperlink für den aktuellen Zeitraum dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-382">Represents the hyperlink for the current range.</span></span>


    <span data-ttu-id="eb75c-383">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-383">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: hyperlink
  fullName: hyperlink
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hyperlink: Excel.RangeHyperlink;'
    return:
      type:
      - excel.Excel.RangeHyperlink
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-384\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-384\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Range.insert
  summary: >-
    <span data-ttu-id="eb75c-p166">Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues Bereichsobjekt in dem nun leeren Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p166">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>


    <span data-ttu-id="eb75c-387">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-387">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: insert(shift)
  fullName: insert(shift)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-388\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-388\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.insert();\n    return ctx.sync(); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: shift
      description: <span data-ttu-id="eb75c-389">Gibt an, auf welche Weise die Zellen verschoben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-389">Specifies which way to shift the cells.</span></span> <span data-ttu-id="eb75c-390">Weitere Informationen finden Sie unter Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="eb75c-390">See Excel.InsertShiftDirection for details.</span></span>
      type:
      - excel.Excel.InsertShiftDirection
- uid: excel.Excel.Range.insert_1
  summary: >-
    <span data-ttu-id="eb75c-p168">Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues Bereichsobjekt in dem nun leeren Bereich zurück.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p168">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>


    <span data-ttu-id="eb75c-393">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-393">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: insert(shiftString)
  fullName: insert(shiftString)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: shiftString
      description: <span data-ttu-id="eb75c-394">Gibt an, auf welche Weise die Zellen verschoben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-394">Specifies which way to shift the cells.</span></span> <span data-ttu-id="eb75c-395">Weitere Informationen finden Sie unter Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="eb75c-395">See Excel.InsertShiftDirection for details.</span></span>
      type:
      - "\"Down\" | \"Right\""
- uid: excel.Excel.Range.isEntireColumn
  summary: >-
    <span data-ttu-id="eb75c-396">Gibt an, ob der angegebene Bereich eine ganze Spalte ist.</span><span class="sxs-lookup"><span data-stu-id="eb75c-396">Represents if the current range is an entire column.</span></span> <span data-ttu-id="eb75c-397">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-397">Read-only.</span></span>


    <span data-ttu-id="eb75c-398">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-398">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: isEntireColumn
  fullName: isEntireColumn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEntireColumn: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.isEntireRow
  summary: >-
    <span data-ttu-id="eb75c-399">Gibt an, ob der angegebene Bereich eine ganze Zeile ist.</span><span class="sxs-lookup"><span data-stu-id="eb75c-399">Represents if the current range is an entire row.</span></span> <span data-ttu-id="eb75c-400">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-400">Read-only.</span></span>


    <span data-ttu-id="eb75c-401">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-401">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: isEntireRow
  fullName: isEntireRow
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEntireRow: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.linkedDataTypeState
  summary: >-
    <span data-ttu-id="eb75c-402">Stellt den Datentyp Status der einzelnen Zellen dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-402">Represents the data type state of each cell.</span></span> <span data-ttu-id="eb75c-403">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-403">Read-only.</span></span>


    <span data-ttu-id="eb75c-404">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-404">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: linkedDataTypeState
  fullName: linkedDataTypeState
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
    return:
      type:
      - Excel.LinkedDataTypeState[][]
- uid: excel.Excel.Range.load
  summary: <span data-ttu-id="eb75c-405">Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="eb75c-405">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="eb75c-406">Sie müssen "context. Sync ()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-406">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="eb75c-407">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="eb75c-407">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="eb75c-408">`load(option?: string | string[]): Excel.Range`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-408">`load(option?: string | string[]): Excel.Range` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="eb75c-409">`load(option?: { select?: string; expand?: string; }): Excel.Range`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-409">`load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="eb75c-410">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`-Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-410">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types.</span></span> <span data-ttu-id="eb75c-411">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="eb75c-411">It is similar to the preceding signature.</span></span> <span data-ttu-id="eb75c-412">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können.</span><span class="sxs-lookup"><span data-stu-id="eb75c-412">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="eb75c-413">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="eb75c-413">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="eb75c-414">Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-414">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.RangeLoadOptions
- uid: excel.Excel.Range.load_1
  summary: <span data-ttu-id="eb75c-415">Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="eb75c-415">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="eb75c-416">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-416">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-417\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-417\">Examples</span></span>\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\"; \n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var rangeName = 'MyRange';\n    var range = ctx.workbook.names.getItem(rangeName).range;\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// The example below sets number-format, values and formulas on a grid that contains 2x3 grid.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:G7\";\n    var numberFormat = [[null, \"d-mmm\"], [null, \"d-mmm\"], [null, null]]\n    var values = [[\"Today\", 42147], [\"Tomorrow\", \"5/24\"], [\"Difference in days\", null]];\n    var formulas = [[null,null], [null,null], [null,\"=G6-G5\"]];\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.numberFormat = numberFormat;\n    range.values = values;\n    range.formulas= formulas;\n    range.load('text');\n    return ctx.sync().then(function() {\n        console.log(range.text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="eb75c-418">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-418">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Range.load_2
  summary: <span data-ttu-id="eb75c-419">Warteschlangen bis ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="eb75c-419">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="eb75c-420">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-420">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: <span data-ttu-id="eb75c-421">Wobei propertyNamesAndPaths. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-421">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel.Excel.Range.merge
  summary: >-
    <span data-ttu-id="eb75c-422">Führt die Zellen des Bereichs in einen Bereich im Arbeitsblatt zusammen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-422">Merge the range cells into one region in the worksheet.</span></span>


    <span data-ttu-id="eb75c-423">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-423">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: merge(across)
  fullName: merge(across)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'merge(across?: boolean): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-424\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-424\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.merge(true);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: across
      description: <span data-ttu-id="eb75c-p177">Optional. Mit „true“ werden Zellen in allen Zeilen des angegebenen Bereichs als einzelne zusammengeführte Zellen zusammengeführt. Der Standardwert lautet „false“.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p177">Optional. Set true to merge cells in each row of the specified range as separate merged cells. The default value is false.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.numberFormat
  summary: >-
    <span data-ttu-id="eb75c-428">Stellt den Zahlenformatcode von Excel für den angegebenen Range dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-428">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="eb75c-429">Beim Festlegen des Zahlenformats auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="eb75c-429">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="eb75c-430">Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-430">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="eb75c-431">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-431">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: numberFormat
  fullName: numberFormat
  langs:
  - typeScript
  type: property
  syntax:
    content: 'numberFormat: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.numberFormatLocal
  summary: >-
    <span data-ttu-id="eb75c-432">Stellt den Zahlenformatcode in Excel für einen bestimmten Bereich als Zeichenfolge in der Sprache des Benutzers dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-432">Represents Excel's number format code for the given range as a string in the language of the user.</span></span> <span data-ttu-id="eb75c-433">Beim Festlegen des Zahlenformats lokal auf einen Bereich kann das value-Argument entweder ein einzelner Wert (eine Zeichenfolge) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="eb75c-433">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="eb75c-434">Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-434">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="eb75c-435">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-435">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: numberFormatLocal
  fullName: numberFormatLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'numberFormatLocal: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.removeDuplicates
  summary: >-
    <span data-ttu-id="eb75c-436">Entfernt doppelte Werte aus dem durch die Spalten angegebenen Range.</span><span class="sxs-lookup"><span data-stu-id="eb75c-436">Removes duplicate values from the range specified by the columns.</span></span>


    <span data-ttu-id="eb75c-437">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-437">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: removeDuplicates(columns, includesHeader)
  fullName: removeDuplicates(columns, includesHeader)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
    return:
      type:
      - excel.Excel.RemoveDuplicatesResult
      description: <span data-ttu-id="eb75c-438">Das resultierende Objekt, das die Anzahl der entfernten Zeilen und die Anzahl der verbleibenden eindeutigen Zeilen enthält.</span><span class="sxs-lookup"><span data-stu-id="eb75c-438">The resulting object that contains the number of rows removed and the number of remaining unique rows.</span></span>
    parameters:
    - id: columns
      description: <span data-ttu-id="eb75c-439">Die Spalten innerhalb des Bereiches, die Duplikate enthalten können.</span><span class="sxs-lookup"><span data-stu-id="eb75c-439">The columns inside the range that may contain duplicates.</span></span> <span data-ttu-id="eb75c-440">Mindestens eine Spalte muss angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-440">At least one column needs to be specified.</span></span> <span data-ttu-id="eb75c-441">Null-indiziert.</span><span class="sxs-lookup"><span data-stu-id="eb75c-441">Zero-indexed.</span></span>
      type:
      - number[]
    - id: includesHeader
      description: <span data-ttu-id="eb75c-442">True, wenn die Eingabedaten den Header enthalten.</span><span class="sxs-lookup"><span data-stu-id="eb75c-442">True if the input data contains header.</span></span> <span data-ttu-id="eb75c-443">Der Standardwert ist false.</span><span class="sxs-lookup"><span data-stu-id="eb75c-443">Default is false.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.replaceAll
  summary: >-
    <span data-ttu-id="eb75c-444">Sucht und ersetzt die angegebene Zeichenfolge basierend auf den im aktuellen Bereich angegebenen Kriterien.</span><span class="sxs-lookup"><span data-stu-id="eb75c-444">Finds and replaces the given string based on the criteria specified within the current range.</span></span>


    <span data-ttu-id="eb75c-445">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-445">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: replaceAll(text, replacement, criteria)
  fullName: replaceAll(text, replacement, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: <span data-ttu-id="eb75c-446">Die Anzahl der ausgeführten Ersetzungen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-446">The number of replacements performed.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="eb75c-447">Zeichenfolge, die gesucht werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb75c-447">String to find.</span></span>
      type:
      - string
    - id: replacement
      description: <span data-ttu-id="eb75c-448">Die Zeichenfolge, durch die das Original ersetzt werden soll.</span><span class="sxs-lookup"><span data-stu-id="eb75c-448">String to replace the original with.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="eb75c-449">Weitere Kriterien zum ersetzen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-449">Additional Replace Criteria.</span></span>
      type:
      - excel.Excel.ReplaceCriteria
- uid: excel.Excel.Range.rowCount
  summary: >-
    <span data-ttu-id="eb75c-p182">Gibt die Anzahl der Zeilen im Bereich zurück. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p182">Returns the total number of rows in the range. Read-only.</span></span>


    <span data-ttu-id="eb75c-452">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-452">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowCount
  fullName: rowCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowCount: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.rowHidden
  summary: >-
    <span data-ttu-id="eb75c-453">Stellt dar, ob alle Zeilen des aktuellen Bereichs ausgeblendet sind.</span><span class="sxs-lookup"><span data-stu-id="eb75c-453">Represents if all rows of the current range are hidden.</span></span>


    <span data-ttu-id="eb75c-454">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-454">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowHidden
  fullName: rowHidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rowHidden: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.rowIndex
  summary: >-
    <span data-ttu-id="eb75c-p183">Gibt die Spaltenanzahl der ersten Zelle im Bereich zurück. Nullindiziert. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p183">Returns the row number of the first cell in the range. Zero-indexed. Read-only.</span></span>


    <span data-ttu-id="eb75c-458">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-458">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowIndex
  fullName: rowIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.select
  summary: >-
    <span data-ttu-id="eb75c-459">Wählt den angegebenen Bereich in der Excel-Benutzeroberfläche aus.</span><span class="sxs-lookup"><span data-stu-id="eb75c-459">Selects the specified range in the Excel UI.</span></span>


    <span data-ttu-id="eb75c-460">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-460">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: select()
  fullName: select()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-461\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-461\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.select();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.set
  summary: <span data-ttu-id="eb75c-462">Legt mehrere Eigenschaften eines Objekts gleichzeitig fest.</span><span class="sxs-lookup"><span data-stu-id="eb75c-462">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="eb75c-463">Sie können entweder ein plain-Objekt mit den entsprechenden Eigenschaften oder ein anderes API-Objekt desselben Typs weitergeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-463">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: "<span data-ttu-id=\"eb75c-464\">Diese Methode hat die folgende zusätzliche Signatur:</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-464\">This method has the following additional signature:</span></span>\n\n`set(properties: Excel.Range): void`\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-465\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-465\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const range = sheet.getRange(\"B2:E2\");\n    range.set({\n        format: {\n            fill: {\n                color: \"#4472C4\"\n            },\n            font: {\n                name: \"Verdana\",\n                color: \"white\"\n            }\n        }\n    })\n    range.format.autofitColumns();\n    await context.sync();\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const sourceRange = sheet.getRange(\"B2:E2\");\n    sourceRange.load(\"format/fill/color, format/font/name, format/font/color\");\n    await context.sync();\n\n    // Set properties based on the loaded and synced \n    // source range.\n    const targetRange = sheet.getRange(\"B7:E7\");\n    targetRange.set(sourceRange); \n    targetRange.format.autofitColumns();\n    await context.sync();\n});\n```"
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="eb75c-466">Ein JavaScript-Objekt mit Eigenschaften, die isomorphically strukturiert sind, um die Eigenschaften des Objekts, für das die Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="eb75c-466">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.RangeUpdateData
    - id: options
      description: <span data-ttu-id="eb75c-467">Bietet eine Option zum Unterdrücken von Fehlern, wenn das Properties-Objekt versucht, schreibgeschützte Eigenschaften festzulegen.</span><span class="sxs-lookup"><span data-stu-id="eb75c-467">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.Range.set_1
  summary: <span data-ttu-id="eb75c-468">Legt mehrere Eigenschaften für das Objekt auf der Grundlage eines vorhandenen geladenen Objekts zur gleichen Zeit fest.</span><span class="sxs-lookup"><span data-stu-id="eb75c-468">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.Range): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.Range
- uid: excel.Excel.Range.setCellProperties
  summary: >-
    <span data-ttu-id="eb75c-469">Aktualisiert den Bereich basierend auf einem 2D-Array von Zelleigenschaften, wobei Elemente wie Schriftart, Füllung, Rahmen, Ausrichtung usw. gekapselt werden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-469">Updates the range based on a 2D array of cell properties , encapsulating things like font, fill, borders, alignment, and so forth.</span></span>


    <span data-ttu-id="eb75c-470">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-470">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: setCellProperties(cellPropertiesData)
  fullName: setCellProperties(cellPropertiesData)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: cellPropertiesData
      description: ''
      type:
      - SettableCellProperties[][]
- uid: excel.Excel.Range.setColumnProperties
  summary: >-
    <span data-ttu-id="eb75c-471">Aktualisiert den Bereich basierend auf einem eindimensionalen Array von Spalteneigenschaften, wobei Elemente wie Schriftart, Füllung, Rahmen, Ausrichtung usw. gekapselt werden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-471">Updates the range based on a single-dimensional array of column properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>


    <span data-ttu-id="eb75c-472">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-472">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: setColumnProperties(columnPropertiesData)
  fullName: setColumnProperties(columnPropertiesData)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: columnPropertiesData
      description: ''
      type:
      - SettableColumnProperties[]
- uid: excel.Excel.Range.setDirty
  summary: >-
    <span data-ttu-id="eb75c-473">Legen Sie einen neu zu berechnenden Range-Wert fest, wenn die nächste Neuberechnung erfolgt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-473">Set a range to be recalculated when the next recalculation occurs.</span></span>


    <span data-ttu-id="eb75c-474">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-474">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: setDirty()
  fullName: setDirty()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setDirty(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Range.setRowProperties
  summary: >-
    <span data-ttu-id="eb75c-475">Aktualisiert den Bereich basierend auf einem eindimensionalen Array von Zeileneigenschaften, wobei Elemente wie Schriftart, Füllung, Rahmen, Ausrichtung usw. gekapselt werden.</span><span class="sxs-lookup"><span data-stu-id="eb75c-475">Updates the range based on a single-dimensional array of row properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>


    <span data-ttu-id="eb75c-476">\[[API-Satz: EXCELAPI Beta (nur Vorschau)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-476">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: setRowProperties(rowPropertiesData)
  fullName: setRowProperties(rowPropertiesData)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: rowPropertiesData
      description: ''
      type:
      - SettableRowProperties[]
- uid: excel.Excel.Range.showCard
  summary: >-
    <span data-ttu-id="eb75c-477">Zeigt die Karte für eine aktive Zelle an, wenn sie einen hohen Wertinhalt hat.</span><span class="sxs-lookup"><span data-stu-id="eb75c-477">Displays the card for an active cell if it has rich value content.</span></span>


    <span data-ttu-id="eb75c-478">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-478">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showCard()
  fullName: showCard()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'showCard(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Range.sort
  summary: >-
    <span data-ttu-id="eb75c-p185">Stellt die Bereichssortierung des aktuellen Bereichs dar. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p185">Represents the range sort of the current range. Read-only.</span></span>


    <span data-ttu-id="eb75c-481">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-481">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: sort
  fullName: sort
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly sort: Excel.RangeSort;'
    return:
      type:
      - excel.Excel.RangeSort
- uid: excel.Excel.Range.style
  summary: >-
    <span data-ttu-id="eb75c-482">Stellt die Formatvorlage des aktuellen Bereichs dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-482">Represents the style of the current range.</span></span> <span data-ttu-id="eb75c-483">Wenn die Formatvorlagen der Zellen inkonsistent sind, wird NULL zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-483">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id="eb75c-484">Für benutzerdefinierte Formatvorlagen wird der Formatvorlagenname zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-484">For custom styles, the style name will be returned.</span></span> <span data-ttu-id="eb75c-485">Bei integrierten Formatvorlagen wird eine Zeichenfolge zurückgegeben, die einen Wert in der Builtstyle-Enumeration darstellt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-485">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>


    <span data-ttu-id="eb75c-486">\[[API-Satz: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-486">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: style
  fullName: style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-487\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-487\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let worksheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = worksheet.getRange(\"A1:E1\");\n\n    // Apply built-in style. \n    // Styles are in the Home tab ribbon.\n    range.style = Excel.BuiltInStyle.neutral;\n    range.format.horizontalAlignment = \"Right\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Range.text
  summary: >-
    <span data-ttu-id="eb75c-488">Textwerte des angegebenen Zeitraums.</span><span class="sxs-lookup"><span data-stu-id="eb75c-488">Text values of the specified range.</span></span> <span data-ttu-id="eb75c-489">Der Textwert ist nicht von der Zellenbreite abhängig.</span><span class="sxs-lookup"><span data-stu-id="eb75c-489">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="eb75c-490">Die \# in der Excel-Benutzeroberfläche auftretende Zeichenersetzung wirkt sich nicht auf den von der API zurückgegebenen Textwert aus.</span><span class="sxs-lookup"><span data-stu-id="eb75c-490">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="eb75c-491">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-491">Read-only.</span></span>


    <span data-ttu-id="eb75c-492">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-492">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: text
  fullName: text
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly text: string[][];'
    return:
      type:
      - string[][]
- uid: excel.Excel.Range.toJSON
  summary: <span data-ttu-id="eb75c-493">ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API `JSON.stringify()` <!-- -->-Objekt an übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="eb75c-493">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="eb75c-494">(`JSON.stringify`<!-- -->ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche Excel. Range-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt `Excel.Interfaces.RangeData` <!-- -->(typisiert als) zurück, das flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="eb75c-494">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeData;'
    return:
      type:
      - excel.Excel.Interfaces.RangeData
      description: ''
- uid: excel.Excel.Range.track
  summary: <span data-ttu-id="eb75c-495">Verfolgen Sie das Objekt für die automatische Anpassung basierend auf den umgebenden Änderungen im Dokument.</span><span class="sxs-lookup"><span data-stu-id="eb75c-495">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="eb75c-496">Dieser Aufruf ist eine Kurzform für Context. trackedObjects. Add (ThisObject).</span><span class="sxs-lookup"><span data-stu-id="eb75c-496">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="eb75c-497">Wenn Sie dieses Objekt in ". Sync"-aufrufen und außerhalb der sequenziellen Ausführung eines Batches ". Run" verwenden und beim Festlegen einer Eigenschaft oder beim Aufrufen einer Methode für das Objekt einen "InvalidObjectPath"-Fehler erhalten, muss das Objekt dem nachverfolgten Objekt hinzugefügt worden sein. -Auflistung beim ersten Erstellen des Objekts.</span><span class="sxs-lookup"><span data-stu-id="eb75c-497">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>
  name: track()
  fullName: track()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.Range.unmerge
  summary: >-
    <span data-ttu-id="eb75c-498">Hebt den Zellverbund des Bereichs in einzelne Zellen auf.</span><span class="sxs-lookup"><span data-stu-id="eb75c-498">Unmerge the range cells into separate cells.</span></span>


    <span data-ttu-id="eb75c-499">\[[API-Satz: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-499">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: unmerge()
  fullName: unmerge()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'unmerge(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-500\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-500\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.untrack
  summary: <span data-ttu-id="eb75c-501">Freigeben des Speichers, der diesem Objekt zugeordnet ist, sofern es zuvor nachverfolgt wurde.</span><span class="sxs-lookup"><span data-stu-id="eb75c-501">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="eb75c-502">Dieser Aufruf ist eine Kurzform für Context. trackedObjects. Remove (ThisObject).</span><span class="sxs-lookup"><span data-stu-id="eb75c-502">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="eb75c-503">Wenn viele nachverfolgte Objekte die Hostanwendung verlangsamen, denken Sie daran, alle von Ihnen hinzugefügten Objekte freizugeben, nachdem Sie Sie fertig verwendet haben.</span><span class="sxs-lookup"><span data-stu-id="eb75c-503">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id="eb75c-504">Sie müssen "context. Sync ()" aufrufen, bevor die Speicherfreigabe wirksam wird.</span><span class="sxs-lookup"><span data-stu-id="eb75c-504">You will need to call "context.sync()" before the memory release takes effect.</span></span>
  name: untrack()
  fullName: untrack()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"eb75c-505\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb75c-505\">Examples</span></span>\n\n```typescript\nExcel.run(async (context) => {\n    const largeRange = context.workbook.getSelectedRange();\n    largeRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n\n    for (let i = 0; i < largeRange.rowCount; i++) {\n        for (let j = 0; j < largeRange.columnCount; j++) {\n            let cell = largeRange.getCell(i, j);\n            cell.values = [[i *j]];\n\n            // call untrack() to release the range from memory\n            cell.untrack();\n        }\n    }\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Range.values
  summary: >-
    <span data-ttu-id="eb75c-506">Stellt die unformatierten Werte des angegebenen Zeitraums dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-506">Represents the raw values of the specified range.</span></span> <span data-ttu-id="eb75c-507">Die zurückgegebenen Daten können vom Typ String, Number oder Boolean sein.</span><span class="sxs-lookup"><span data-stu-id="eb75c-507">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="eb75c-508">Zellen, die einen Fehler enthalten, geben die Fehlerzeichenfolge zurück.</span><span class="sxs-lookup"><span data-stu-id="eb75c-508">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="eb75c-509">Beim Festlegen von Werten für einen Bereich kann das value-Argument entweder ein einzelner Wert (String, Number oder Boolean) oder ein zweidimensionales Array sein.</span><span class="sxs-lookup"><span data-stu-id="eb75c-509">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="eb75c-510">Wenn das Argument ein einzelner Wert ist, wird es auf alle Zellen im Bereich angewendet.</span><span class="sxs-lookup"><span data-stu-id="eb75c-510">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="eb75c-511">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-511">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: values
  fullName: values
  langs:
  - typeScript
  type: property
  syntax:
    content: 'values: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.valueTypes
  summary: >-
    <span data-ttu-id="eb75c-512">Stellt den Datentyp der einzelnen Zellen dar.</span><span class="sxs-lookup"><span data-stu-id="eb75c-512">Represents the type of data of each cell.</span></span> <span data-ttu-id="eb75c-513">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-513">Read-only.</span></span>


    <span data-ttu-id="eb75c-514">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-514">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: valueTypes
  fullName: valueTypes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly valueTypes: Excel.RangeValueType[][];'
    return:
      type:
      - Excel.RangeValueType[][]
- uid: excel.Excel.Range.worksheet
  summary: >-
    <span data-ttu-id="eb75c-p193">Das Arbeitsblatt, das den aktuellen Bereich enthält. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="eb75c-p193">The worksheet containing the current range. Read-only.</span></span>


    <span data-ttu-id="eb75c-517">\[[API-Satz: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eb75c-517">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: worksheet
  fullName: worksheet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
