### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPart
    summary: |-
      <span data-ttu-id="70151-101">Stellt ein benutzerdefiniertes XML-Webpart-Objekt in einer Arbeitsmappe dar.</span><span class="sxs-lookup"><span data-stu-id="70151-101">Represents a custom XML part object in a workbook.</span></span>

      <span data-ttu-id="70151-102">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70151-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPart
    fullName: Excel.CustomXmlPart
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.CustomXmlPart.context
      - excel.Excel.CustomXmlPart.delete
      - excel.Excel.CustomXmlPart.getXml
      - excel.Excel.CustomXmlPart.id
      - excel.Excel.CustomXmlPart.load
      - excel.Excel.CustomXmlPart.load_1
      - excel.Excel.CustomXmlPart.load_2
      - excel.Excel.CustomXmlPart.namespaceUri
      - excel.Excel.CustomXmlPart.setXml
      - excel.Excel.CustomXmlPart.toJSON
  - uid: excel.Excel.CustomXmlPart.context
    summary: <span data-ttu-id="70151-103">Der dem Objekt zugeordnete Anforderungskontext.</span><span class="sxs-lookup"><span data-stu-id="70151-103">The request context associated with the object.</span></span> <span data-ttu-id="70151-104">Dadurch wird der Prozess des Add-Ins mit dem Prozess der Office-Hostanwendung verbunden.</span><span class="sxs-lookup"><span data-stu-id="70151-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel.Excel.CustomXmlPart.delete
    summary: |-
      <span data-ttu-id="70151-105">Löscht die benutzerdefinierte XML-Komponente.</span><span class="sxs-lookup"><span data-stu-id="70151-105">Deletes the custom XML part.</span></span>

      <span data-ttu-id="70151-106">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70151-106">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="70151-107">Beispiele</span><span class="sxs-lookup"><span data-stu-id="70151-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
  - uid: excel.Excel.CustomXmlPart.getXml
    summary: |-
      <span data-ttu-id="70151-108">Ruft den vollständigen XML-Inhalt der benutzerdefinierten XML-Komponente ab.</span><span class="sxs-lookup"><span data-stu-id="70151-108">Gets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="70151-109">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70151-109">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getXml()
    fullName: getXml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="70151-110">Beispiele</span><span class="sxs-lookup"><span data-stu-id="70151-110">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPart.id
    summary: |-
      <span data-ttu-id="70151-111">Die ID des benutzerdefinierten XML-Parts.</span><span class="sxs-lookup"><span data-stu-id="70151-111">The custom XML part's ID.</span></span> <span data-ttu-id="70151-112">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="70151-112">Read-only.</span></span>

      <span data-ttu-id="70151-113">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70151-113">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="70151-114">Beispiele</span><span class="sxs-lookup"><span data-stu-id="70151-114">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
  - uid: excel.Excel.CustomXmlPart.load
    summary: <span data-ttu-id="70151-115">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="70151-115">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="70151-116">Vor dem Lesen der Eigenschaften müssen Sie "context.sync()" aufrufen.</span><span class="sxs-lookup"><span data-stu-id="70151-116">You must call "context.sync()" before reading the properties.</span></span>
    remarks: |-
      <span data-ttu-id="70151-117">Zusätzlich zu dieser Signatur verfügt diese Methode über die folgenden Signaturen:</span><span class="sxs-lookup"><span data-stu-id="70151-117">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="70151-118">`load(option?: string | string[]): Excel.CustomXmlPart`-Wobei Option eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen ist, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="70151-118">`load(option?: string | string[]): Excel.CustomXmlPart` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="70151-119">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart`-Wobei Option. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und Options. Expand ist eine durch Kommas getrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="70151-119">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="70151-120">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart`-Nur verfügbar für Sammlungstypen.</span><span class="sxs-lookup"><span data-stu-id="70151-120">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart` - Only available on collection types.</span></span> <span data-ttu-id="70151-121">Sie ähnelt der vorherigen Signatur.</span><span class="sxs-lookup"><span data-stu-id="70151-121">It is similar to the preceding signature.</span></span> <span data-ttu-id="70151-122">Option. Top gibt die maximale Anzahl von Sammlungselementen an, die in das Ergebnis eingeschlossen werden können.</span><span class="sxs-lookup"><span data-stu-id="70151-122">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="70151-123">Option. Skip gibt die Anzahl der Elemente an, die übersprungen werden sollen und nicht im Ergebnis enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="70151-123">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="70151-124">Wenn Option. Top angegeben wird, wird das Resultset nach dem Überspringen der angegebenen Anzahl von Elementen gestartet.</span><span class="sxs-lookup"><span data-stu-id="70151-124">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartLoadOptions): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.CustomXmlPartLoadOptions
  - uid: excel.Excel.CustomXmlPart.load_1
    summary: <span data-ttu-id="70151-125">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="70151-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="70151-126">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="70151-126">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: propertyNames
          description: '<span data-ttu-id="70151-127">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="70151-127">A comma-delimited string or an array of strings that specify the properties to load.</span></span>'
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPart.load_2
    summary: <span data-ttu-id="70151-128">Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein.</span><span class="sxs-lookup"><span data-stu-id="70151-128">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="70151-129">Sie müssen vor `context.sync()` dem Lesen der Eigenschaften anrufen.</span><span class="sxs-lookup"><span data-stu-id="70151-129">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="70151-130">Wobei propertyNamesAndPaths. Select eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Eigenschaften angibt, und propertyNamesAndPaths. Expand eine durch Kommas getrennte Zeichenfolge ist, die die zu ladenden Navigationseigenschaften angibt.</span><span class="sxs-lookup"><span data-stu-id="70151-130">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.CustomXmlPart.namespaceUri
    summary: |-
      <span data-ttu-id="70151-131">Der Namespace-URI des benutzerdefinierten XML-Parts.</span><span class="sxs-lookup"><span data-stu-id="70151-131">The custom XML part's namespace URI.</span></span> <span data-ttu-id="70151-132">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="70151-132">Read-only.</span></span>

      <span data-ttu-id="70151-133">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70151-133">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: namespaceUri
    fullName: namespaceUri
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly namespaceUri: string;'
      return:
        type:
          - string
  - uid: excel.Excel.CustomXmlPart.setXml
    summary: |-
      <span data-ttu-id="70151-134">Legt den vollständigen XML-Inhalt der benutzerdefinierten XML-Komponente fest.</span><span class="sxs-lookup"><span data-stu-id="70151-134">Sets the custom XML part's full XML content.</span></span>

      <span data-ttu-id="70151-135">\[[API-Satz: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="70151-135">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setXml(xml)
    fullName: setXml(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setXml(xml: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="70151-136">Beispiele</span><span class="sxs-lookup"><span data-stu-id="70151-136">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="70151-137">XML-Inhalt für das Webpart.</span><span class="sxs-lookup"><span data-stu-id="70151-137">XML content for the part.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPart.toJSON
    summary: '<span data-ttu-id="70151-138">ÜberSchreibt die `toJSON()` JavaScript-Methode, um eine nützlichere Ausgabe bereitzustellen, wenn ein API-Objekt an`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="70151-138">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="70151-139">.</span><span class="sxs-lookup"><span data-stu-id="70151-139"></span></span> <span data-ttu-id="70151-140">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="70151-140"></span></span><!-- --><span data-ttu-id="70151-141">Ruft wiederum die `toJSON` Methode des Objekts auf, das übergeben wird.) Während das ursprüngliche Excel. CustomXmlPart-Objekt ein API-Objekt ist `toJSON` , gibt die Methode ein einfaches JavaScript-Objekt zurück (typisiert als`Excel.Interfaces.CustomXmlPartData`</span><span class="sxs-lookup"><span data-stu-id="70151-141">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.CustomXmlPart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartData`</span></span><!-- --><span data-ttu-id="70151-142">), die flache Kopien aller geladenen untergeordneten Eigenschaften aus dem ursprünglichen Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="70151-142">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartData
        description: ''