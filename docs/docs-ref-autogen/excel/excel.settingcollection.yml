### YamlMime:UniversalReference
ms.openlocfilehash: 5621d142189bc646ab6d9806da0fe6502f740db3
ms.sourcegitcommit: 262b7c417245b7b61a57d53eee33a477a722ca6e
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 09/28/2018
ms.locfileid: "24045786"
items:
- uid: excel.Excel.SettingCollection
  summary: >-
    Stellt eine Auflistung von Schlüssel-Wert-Paar-Objekten, die Teil der Arbeitsmappe sind festlegen. Der Bereich ist auf pro Datei und add-Ins (im Aufgabenbereich oder Inhalte) Kombination beschränkt.


    \[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.SettingCollection
  fullName: excel.Excel.SettingCollection
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.SettingCollection.add
  - excel.Excel.SettingCollection.getCount
  - excel.Excel.SettingCollection.getItem
  - excel.Excel.SettingCollection.getItemOrNullObject
  - excel.Excel.SettingCollection.items
  - excel.Excel.SettingCollection.load
  - excel.Excel.SettingCollection.onSettingsChanged
  - excel.Excel.SettingCollection.toJSON
- uid: excel.Excel.SettingCollection.add
  summary: >-
    Legt die angegebene Einstellung fest oder fügt sie zur Arbeitsmappe hinzu.


    \[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: add(key, value)
  fullName: excel.Excel.SettingCollection.add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(key: string, value: string | number | boolean | Date | Array<any> | any): Excel.Setting;'
    return:
      type:
      - excel.Excel.Setting
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings; \n    settings.onSettingsChanged.add(onChangedSetting);\n    OfficeHelpers.UI.notify(\"Handler registered\", \"\");\n\n    await context.sync();\n});\n```"
    parameters:
    - id: key
      description: Der Schlüssel der neuen Einstellung.
      type:
      - string
    - id: value
      description: Der Wert der neuen Einstellung.
      type:
      - string | number | boolean | Date | Array<any> | any
- uid: excel.Excel.SettingCollection.getCount
  summary: >-
    Ruft die Anzahl der Einstellungen in der Sammlung ab.


    \[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: excel.Excel.SettingCollection.getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.SettingCollection.getItem
  summary: >-
    Ruft einen Setting-Eintrag über den Schlüssel ab.


    \[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(key)
  fullName: excel.Excel.SettingCollection.getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Setting;'
    return:
      type:
      - excel.Excel.Setting
      description: ''
    parameters:
    - id: key
      description: Schlüssel der Einstellung.
      type:
      - string
- uid: excel.Excel.SettingCollection.getItemOrNullObject
  summary: >-
    Ruft einen Setting-Eintrag über den Schlüssel ab. Wenn das Setting-Objekt nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.


    \[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getItemOrNullObject(key)
  fullName: excel.Excel.SettingCollection.getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Setting;'
    return:
      type:
      - excel.Excel.Setting
      description: "\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    let needsReview = settings.getItem(\"NeedsReview\");\n    needsReview.delete();\n    needsReview = settings.getItemOrNullObject(\"NeedsReview\");\n\n    await context.sync();\n\n    if (needsReview.isNullObject) {\n        OfficeHelpers.UI.notify(\"The setting has been deleted\");\n    } else {\n        OfficeHelpers.UI.notify(\"The setting was not deleted\");\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: key
      description: Der Schlüssel der Einstellung.
      type:
      - string
- uid: excel.Excel.SettingCollection.items
  summary: Ruft die geladene untergeordnete Elemente in dieser Auflistung ab.
  name: items
  fullName: excel.Excel.SettingCollection.items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Setting[];'
    return:
      type:
      - Excel.Setting[]
- uid: excel.Excel.SettingCollection.load
  summary: Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts. Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.
  remarks: >-
    Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:


    `load(option?: { select?: string; expand?: string; }): Excel.SettingCollection`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.SettingCollection`-Nur auf Auflistungstypen verfügbar. Es ist ähnlich wie die jeweils vorhergehende Signatur. Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können. Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen. Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.
  name: load(option)
  fullName: excel.Excel.SettingCollection.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.SettingCollection;'
    return:
      type:
      - excel.Excel.SettingCollection
      description: ''
    parameters:
    - id: option
      description: Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.
      type:
      - string | string[]
- uid: excel.Excel.SettingCollection.onSettingsChanged
  summary: >-
    Tritt ein, wenn die Einstellungen im Dokument geändert werden.


    \[[API-Satz: ExcelApi 1.4](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: onSettingsChanged
  fullName: excel.Excel.SettingCollection.onSettingsChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSettingsChanged: OfficeExtension.EventHandlers<Excel.SettingsChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.SettingsChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a>Examples\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings; \n    settings.onSettingsChanged.add(onChangedSetting);\n    OfficeHelpers.UI.notify(\"Handler registered\", \"\");\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.SettingCollection.toJSON
  name: toJSON()
  fullName: excel.Excel.SettingCollection.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.SettingCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.SettingCollectionData
      description: ''
