### YamlMime:UniversalReference
ms.openlocfilehash: efb39ea42fdae27ca80f36f73f9871f8d5b578d0
ms.sourcegitcommit: a68606173477c7fb4069880eea941766c7d8c50d
ms.translationtype: MT
ms.contentlocale: de-DE
ms.lasthandoff: 02/01/2019
ms.locfileid: "29704485"
items:
- uid: excel.Excel.Worksheet
  summary: >-
    <span data-ttu-id="a8781-p101">Ein Excel-Arbeitsblatt ist ein Raster von Zellen. Es kann Daten, Tabellen, Diagramme usw. enthalten.</span><span class="sxs-lookup"><span data-stu-id="a8781-p101">An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.</span></span>


    <span data-ttu-id="a8781-103">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.Worksheet
  fullName: Excel.Worksheet
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Worksheet.activate
  - excel.Excel.Worksheet.calculate
  - excel.Excel.Worksheet.charts
  - excel.Excel.Worksheet.context
  - excel.Excel.Worksheet.copy
  - excel.Excel.Worksheet.delete
  - excel.Excel.Worksheet.freezePanes
  - excel.Excel.Worksheet.getCell
  - excel.Excel.Worksheet.getNext
  - excel.Excel.Worksheet.getNextOrNullObject
  - excel.Excel.Worksheet.getPrevious
  - excel.Excel.Worksheet.getPreviousOrNullObject
  - excel.Excel.Worksheet.getRange
  - excel.Excel.Worksheet.getRangeByIndexes
  - excel.Excel.Worksheet.getUsedRange
  - excel.Excel.Worksheet.getUsedRangeOrNullObject
  - excel.Excel.Worksheet.id
  - excel.Excel.Worksheet.load
  - excel.Excel.Worksheet.name
  - excel.Excel.Worksheet.names
  - excel.Excel.Worksheet.onActivated
  - excel.Excel.Worksheet.onCalculated
  - excel.Excel.Worksheet.onChanged
  - excel.Excel.Worksheet.onDeactivated
  - excel.Excel.Worksheet.onSelectionChanged
  - excel.Excel.Worksheet.pivotTables
  - excel.Excel.Worksheet.position
  - excel.Excel.Worksheet.protection
  - excel.Excel.Worksheet.showGridlines
  - excel.Excel.Worksheet.showHeadings
  - excel.Excel.Worksheet.standardHeight
  - excel.Excel.Worksheet.standardWidth
  - excel.Excel.Worksheet.tabColor
  - excel.Excel.Worksheet.tables
  - excel.Excel.Worksheet.toJSON
  - excel.Excel.Worksheet.visibility
- uid: excel.Excel.Worksheet.activate
  summary: >-
    <span data-ttu-id="a8781-104">Aktivieren Sie das Arbeitsblatt in der Excel-Benutzeroberfläche.</span><span class="sxs-lookup"><span data-stu-id="a8781-104">Activate the worksheet in the Excel UI.</span></span>


    <span data-ttu-id="a8781-105">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-105">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: activate()
  fullName: activate
  langs:
  - typeScript
  type: method
  syntax:
    content: 'activate(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-106\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-106\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.calculate
  summary: >-
    <span data-ttu-id="a8781-107">Berechnet alle Zellen auf einem Arbeitsblatt.</span><span class="sxs-lookup"><span data-stu-id="a8781-107">Calculates all cells on a worksheet.</span></span>


    <span data-ttu-id="a8781-108">\[[API-Satz: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-108">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate(markAllDirty)
  fullName: calculate
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: markAllDirty
      description: <span data-ttu-id="a8781-109">True, um alle als geändert markiert.</span><span class="sxs-lookup"><span data-stu-id="a8781-109">True, to mark all as dirty.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.charts
  summary: >-
    <span data-ttu-id="a8781-p102">Gibt die Sammlung von Diagrammen zurück, die Teil des Arbeitsblatts sind. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a8781-p102">Returns collection of charts that are part of the worksheet. Read-only.</span></span>


    <span data-ttu-id="a8781-112">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-112">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: charts
  fullName: charts
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
- uid: excel.Excel.Worksheet.context
  summary: <span data-ttu-id="a8781-113">Der Anforderungskontext-zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="a8781-113">The request context associated with the object.</span></span> <span data-ttu-id="a8781-114">Dadurch wird das Add-in Prozess mit der Office-hostanwendung Prozess verbunden.</span><span class="sxs-lookup"><span data-stu-id="a8781-114">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Worksheet.copy
  summary: >-
    <span data-ttu-id="a8781-115">Kopiert eine Arbeitsmappe, und platziert sie an der angegebenen Position.</span><span class="sxs-lookup"><span data-stu-id="a8781-115">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="a8781-116">Gibt die kopierte Arbeitsmappe zurück.</span><span class="sxs-lookup"><span data-stu-id="a8781-116">Return the copied worksheet.</span></span>


    <span data-ttu-id="a8781-117">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-117">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionType, relativeTo)
  fullName: copy
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-118\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-118\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(\"End\")\n\n    sampleSheet.load(\"name\");\n    copiedSheet.load(\"name\");\n\n    await context.sync();\n\n    console.log(\"'\" + sampleSheet.name + \"' was copied to '\" + copiedSheet.name + \"'\")\n});\n```"
    parameters:
    - id: positionType
      description: <span data-ttu-id="a8781-119">Optional.</span><span class="sxs-lookup"><span data-stu-id="a8781-119">Optional.</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="a8781-120">Optional.</span><span class="sxs-lookup"><span data-stu-id="a8781-120">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.delete
  summary: >-
    <span data-ttu-id="a8781-121">Löscht das Arbeitsblatt aus der Arbeitsmappe.</span><span class="sxs-lookup"><span data-stu-id="a8781-121">Deletes the worksheet from the workbook.</span></span>


    <span data-ttu-id="a8781-122">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-122">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-123\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-123\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.freezePanes
  summary: >-
    <span data-ttu-id="a8781-124">Ruft ein Objekt, das zum Bearbeiten der fixierten Fensterbereiche auf dem Arbeitsblatt verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="a8781-124">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="a8781-125">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a8781-125">Read-only.</span></span>


    <span data-ttu-id="a8781-126">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-126">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: freezePanes
  fullName: freezePanes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
    return:
      type:
      - excel.Excel.WorksheetFreezePanes
- uid: excel.Excel.Worksheet.getCell
  summary: >-
    <span data-ttu-id="a8781-p106">Ruft das Bereichsobjekt ab, das die einzelne Zelle basierend auf Zeilen- und Spaltenanzahl enthält. Die Zelle kann sich außerhalb seines übergeordneten Bereichs befinden, solange es im Arbeitsblatt-Raster bleibt.</span><span class="sxs-lookup"><span data-stu-id="a8781-p106">Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>


    <span data-ttu-id="a8781-129">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-129">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCell(row, column)
  fullName: getCell
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-130\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-130\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="a8781-p107">Die Zeilenanzahl der abzurufenden Zelle. Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="a8781-p107">The row number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
    - id: column
      description: <span data-ttu-id="a8781-p108">Die Spaltenzahl der abzurufenden Zelle. Nullindiziert.</span><span class="sxs-lookup"><span data-stu-id="a8781-p108">the column number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getNext
  summary: >-
    <span data-ttu-id="a8781-p109">Ruft das Arbeitsblatt nach dem aktuellen ab. Wenn es keine nachfolgenden Arbeitsblätter gibt, löst diese Methode einen Fehler aus.</span><span class="sxs-lookup"><span data-stu-id="a8781-p109">Gets the worksheet that follows this one. If there are no worksheets following this one, this method will throw an error.</span></span>


    <span data-ttu-id="a8781-137">\[[API-Satz: 1,5 ExcelApi](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-137">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNext(visibleOnly)
  fullName: getNext
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-138\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-138\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="a8781-p110">Optional. Wenn „true“, werden nur die sichtbaren Arbeitsblätter berücksichtigt und alle ausgeblendeten übersprungen.</span><span class="sxs-lookup"><span data-stu-id="a8781-p110">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getNextOrNullObject
  summary: >-
    <span data-ttu-id="a8781-p111">Ruft das Arbeitsblatt nach dem aktuellen ab. Wenn es keine nachfolgenden Arbeitsblätter gibt, löst diese Methode ein Objekt des Typs „Null“ aus.</span><span class="sxs-lookup"><span data-stu-id="a8781-p111">Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a null object.</span></span>


    <span data-ttu-id="a8781-143">\[[API-Satz: 1,5 ExcelApi](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-143">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNextOrNullObject(visibleOnly)
  fullName: getNextOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="a8781-p112">Optional. Wenn „true“, werden nur die sichtbaren Arbeitsblätter berücksichtigt und alle ausgeblendeten übersprungen.</span><span class="sxs-lookup"><span data-stu-id="a8781-p112">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPrevious
  summary: >-
    <span data-ttu-id="a8781-p113">Ruft das Arbeitsblatt vor dem aktuellen ab. Wenn es keine vorhergehenden Arbeitsblätter gibt, löst diese Methode einen Fehler aus.</span><span class="sxs-lookup"><span data-stu-id="a8781-p113">Gets the worksheet that precedes this one. If there are no previous worksheets, this method will throw an error.</span></span>


    <span data-ttu-id="a8781-148">\[[API-Satz: 1,5 ExcelApi](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-148">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPrevious(visibleOnly)
  fullName: getPrevious
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-149\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-149\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    console.log(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="a8781-p114">Optional. Wenn „true“, werden nur die sichtbaren Arbeitsblätter berücksichtigt und alle ausgeblendeten übersprungen.</span><span class="sxs-lookup"><span data-stu-id="a8781-p114">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPreviousOrNullObject
  summary: >-
    <span data-ttu-id="a8781-p115">Ruft das Arbeitsblatt vor dem aktuellen ab. Wenn es keine vorhergehenden Arbeitsblätter gibt, löst diese Methode ein Objekt des Typs „Null“ aus.</span><span class="sxs-lookup"><span data-stu-id="a8781-p115">Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null objet.</span></span>


    <span data-ttu-id="a8781-154">\[[API-Satz: 1,5 ExcelApi](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-154">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPreviousOrNullObject(visibleOnly)
  fullName: getPreviousOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="a8781-p116">Optional. Wenn „true“, werden nur die sichtbaren Arbeitsblätter berücksichtigt und alle ausgeblendeten übersprungen.</span><span class="sxs-lookup"><span data-stu-id="a8781-p116">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getRange
  summary: >-
    <span data-ttu-id="a8781-157">Ruft das Range-Objekt, das einen einzelnen rechteckigen Block von Zellen, Namen oder die Adresse darstellt.</span><span class="sxs-lookup"><span data-stu-id="a8781-157">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>


    <span data-ttu-id="a8781-158">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-158">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange(address)
  fullName: getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-159\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-159\">Examples</span></span>\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="a8781-160">Optional.</span><span class="sxs-lookup"><span data-stu-id="a8781-160">Optional.</span></span> <span data-ttu-id="a8781-161">Die Zeichenfolge, die die Adresse oder den Namen des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="a8781-161">The string representing the address or name of the range.</span></span> <span data-ttu-id="a8781-162">Beispielsweise "A1: B2".</span><span class="sxs-lookup"><span data-stu-id="a8781-162">For example, "A1:B2".</span></span> <span data-ttu-id="a8781-163">Wenn nicht angegeben, wird der gesamte Arbeitsblattbereich zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="a8781-163">If not specified, the entire worksheet range is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getRangeByIndexes
  summary: >-
    <span data-ttu-id="a8781-164">Ruft das Bereichsobjekt, beginnend an einem bestimmten Zeilen- und Spaltenindex, das eine bestimmte Anzahl von Zeilen und Spalten umfasst.</span><span class="sxs-lookup"><span data-stu-id="a8781-164">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>


    <span data-ttu-id="a8781-165">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-165">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  fullName: getRangeByIndexes
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: startRow
      description: <span data-ttu-id="a8781-166">Starten Sie die Zeile (0 (null) indiziert).</span><span class="sxs-lookup"><span data-stu-id="a8781-166">Start row (zero-indexed).</span></span>
      type:
      - number
    - id: startColumn
      description: <span data-ttu-id="a8781-167">Spalte (0 (null) indiziert) zu starten.</span><span class="sxs-lookup"><span data-stu-id="a8781-167">Start column (zero-indexed).</span></span>
      type:
      - number
    - id: rowCount
      description: <span data-ttu-id="a8781-168">Anzahl der Zeilen im Bereich eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="a8781-168">Number of rows to include in the range.</span></span>
      type:
      - number
    - id: columnCount
      description: <span data-ttu-id="a8781-169">Anzahl der Spalten im Bereich eingeschlossen werden.</span><span class="sxs-lookup"><span data-stu-id="a8781-169">Number of columns to include in the range.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getUsedRange
  summary: >-
    <span data-ttu-id="a8781-170">Der verwendete Bereich wird der kleinste Bereich, der alle Zellen umfasst, deren Wert oder Formatierung zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="a8781-170">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="a8781-171">Wenn das gesamte Arbeitsblatt leer ist, gibt diese Funktion die linke obere Zelle zurück (d. h. wird dadurch *nicht* löst einen Fehler).</span><span class="sxs-lookup"><span data-stu-id="a8781-171">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>


    <span data-ttu-id="a8781-172">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-172">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRange(valuesOnly)
  fullName: getUsedRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-173\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-173\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: valuesOnly
      description: '<span data-ttu-id="a8781-174">Optional.</span><span class="sxs-lookup"><span data-stu-id="a8781-174">Optional.</span></span> <span data-ttu-id="a8781-175">Bei true betrachtet nur Zellen mit Werten als verwendeten Zellen (Formatierung wird ignoriert).</span><span class="sxs-lookup"><span data-stu-id="a8781-175">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="a8781-176">\[API-Satz: ExcelApi 1.2\]</span><span class="sxs-lookup"><span data-stu-id="a8781-176">\[Api set: ExcelApi 1.2\]</span></span>'
      type:
      - boolean
- uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
  summary: >-
    <span data-ttu-id="a8781-p120">Der verwendete Bereich ist der kleinste Bereich, der mindestens eine der Zellen umfasst, die einen Wert enthalten oder denen eine Formatierung zugewiesen wurde. Wenn das gesamte Arbeitsblatt leer ist, gibt diese Funktion ein NULL-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="a8781-p120">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>


    <span data-ttu-id="a8781-179">\[[API-Satz: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-179">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: getUsedRangeOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: valuesOnly
      description: <span data-ttu-id="a8781-p121">Optional. Betrachtet nur Zellen mit Werten als verwendet.</span><span class="sxs-lookup"><span data-stu-id="a8781-p121">Optional. Considers only cells with values as used cells.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.id
  summary: >-
    <span data-ttu-id="a8781-p122">Gibt einen Wert zurück, der das Arbeitsblatt in einer bestimmten Arbeitsmappe eindeutig identifiziert. Der Wert des Bezeichners bleibt unverändert, auch wenn das Arbeitsblatt umbenannt oder verschoben wird. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a8781-p122">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>


    <span data-ttu-id="a8781-185">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-185">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.load
  summary: <span data-ttu-id="a8781-186">Warteschlangen ein Befehl zum Laden der angegebenen Eigenschaften des Objekts.</span><span class="sxs-lookup"><span data-stu-id="a8781-186">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a8781-187">Sie müssen "context.sync()" aufrufen, bevor Sie die Eigenschaften lesen.</span><span class="sxs-lookup"><span data-stu-id="a8781-187">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"a8781-188\">Zusätzlich zu dieser Signatur hat diese Methode die folgenden Signaturen:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-188\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"a8781-189\">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Option.select ist eine durch Trennzeichen getrennte Zeichenfolge, die die Eigenschaften zum Laden gibt an, wobei options.expand ist eine durch Kommas getrennte Zeichenfolge, die Navigationseigenschaften zum Laden angibt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-189\">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"a8781-190\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`-Nur auf Auflistungstypen verfügbar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-190\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id=\"a8781-191\">Es ist ähnlich wie die jeweils vorhergehende Signatur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-191\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"a8781-192\">Option.Top gibt die maximale Anzahl der Auflistungselemente, die im Ergebnis enthalten sein können.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-192\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"a8781-193\">Option.Skip gibt die Anzahl der Elemente, die übersprungen und nicht in das Ergebnis eingeschlossen werden sollen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-193\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"a8781-194\">Wenn option.top angegeben wird, wird das Resultset starten, nachdem die angegebene Anzahl von Elementen übersprungen wird.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-194\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-195\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-195\">Examples</span></span>\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="a8781-196">Eine durch Kommas getrennte Zeichenfolge oder ein Array von Zeichenfolgen, die zum Laden die Eigenschaften angeben.</span><span class="sxs-lookup"><span data-stu-id="a8781-196">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Worksheet.name
  summary: >-
    <span data-ttu-id="a8781-197">Der Anzeigename des Arbeitsblatts.</span><span class="sxs-lookup"><span data-stu-id="a8781-197">The display name of the worksheet.</span></span>


    <span data-ttu-id="a8781-198">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-198">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: name
  fullName: name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.names
  summary: >-
    <span data-ttu-id="a8781-p125">Auflistung von Namen im Bereich des aktuellen Arbeitsblatts. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a8781-p125">Collection of names scoped to the current worksheet. Read-only.</span></span>


    <span data-ttu-id="a8781-201">\[[API-Satz: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-201">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: names
  fullName: names
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type:
      - excel.Excel.NamedItemCollection
- uid: excel.Excel.Worksheet.onActivated
  summary: >-
    <span data-ttu-id="a8781-202">Tritt auf, wenn das Arbeitsblatt aktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="a8781-202">Occurs when the worksheet is activated.</span></span>


    <span data-ttu-id="a8781-203">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-203">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-204\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-204\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onActivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The activated worksheet ID is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onCalculated
  summary: >-
    <span data-ttu-id="a8781-205">Tritt auf, wenn das Arbeitsblatt berechnet wird.</span><span class="sxs-lookup"><span data-stu-id="a8781-205">Occurs when the worksheet is calculated.</span></span>


    <span data-ttu-id="a8781-206">\[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-206">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-207\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-207\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onCalculated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The worksheet has recalculated.\");\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onChanged
  summary: >-
    <span data-ttu-id="a8781-208">Tritt auf, wenn die Daten auf ein bestimmtes Arbeitsblatt geändert.</span><span class="sxs-lookup"><span data-stu-id="a8781-208">Occurs when data changed on a specific worksheet.</span></span>


    <span data-ttu-id="a8781-209">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-209">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-210\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-210\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event.\");\n});\n```"
- uid: excel.Excel.Worksheet.onDeactivated
  summary: >-
    <span data-ttu-id="a8781-211">Tritt auf, wenn das Arbeitsblatt deaktiviert wird.</span><span class="sxs-lookup"><span data-stu-id="a8781-211">Occurs when the worksheet is deactivated.</span></span>


    <span data-ttu-id="a8781-212">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-212">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-213\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-213\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onDeactivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The deactivated worksheet is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onSelectionChanged
  summary: >-
    <span data-ttu-id="a8781-214">Tritt auf, wenn die Auswahl für ein bestimmtes Arbeitsblatt geändert wird.</span><span class="sxs-lookup"><span data-stu-id="a8781-214">Occurs when the selection changes on a specific worksheet.</span></span>


    <span data-ttu-id="a8781-215">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-215">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-216\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-216\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onSelectionChanged.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The selected range has changed to: \" + event.address);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.pivotTables
  summary: >-
    <span data-ttu-id="a8781-p126">Die Sammlung von PivotTables, die Teil des Arbeitsblatts sind. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a8781-p126">Collection of PivotTables that are part of the worksheet. Read-only.</span></span>


    <span data-ttu-id="a8781-219">\[[API-Satz: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-219">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: pivotTables
  fullName: pivotTables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type:
      - excel.Excel.PivotTableCollection
- uid: excel.Excel.Worksheet.position
  summary: >-
    <span data-ttu-id="a8781-220">Die nullbasiert Position des Arbeitsblatts in der Arbeitsmappe.</span><span class="sxs-lookup"><span data-stu-id="a8781-220">The zero-based position of the worksheet within the workbook.</span></span>


    <span data-ttu-id="a8781-221">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-221">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: position
  fullName: position
  langs:
  - typeScript
  type: property
  syntax:
    content: 'position: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.protection
  summary: >-
    <span data-ttu-id="a8781-p127">Gibt das Arbeitsblattschutz-Objekt für ein Arbeitsblatt zurück. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a8781-p127">Returns sheet protection object for a worksheet. Read-only.</span></span>


    <span data-ttu-id="a8781-224">\[[API-Satz: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-224">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: protection
  fullName: protection
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type:
      - excel.Excel.WorksheetProtection
- uid: excel.Excel.Worksheet.showGridlines
  summary: >-
    <span data-ttu-id="a8781-225">Ruft die Gitternetzlinien-Kennzeichnung des Arbeitsblatts ab, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="a8781-225">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="a8781-226">Dieses Kennzeichen bestimmt, ob Gitternetzlinien für den Benutzer sichtbar sind.</span><span class="sxs-lookup"><span data-stu-id="a8781-226">This flag determines whether gridlines are visible to the user.</span></span>


    <span data-ttu-id="a8781-227">\[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-227">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showGridlines
  fullName: showGridlines
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-228\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-228\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.showHeadings
  summary: >-
    <span data-ttu-id="a8781-229">Ruft die Überschriftenkennzeichnung des Arbeitsblatts ab, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="a8781-229">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="a8781-230">Dieses Kennzeichen bestimmt, ob Überschriften für den Benutzer sichtbar sind.</span><span class="sxs-lookup"><span data-stu-id="a8781-230">This flag determines whether headings are visible to the user.</span></span>


    <span data-ttu-id="a8781-231">\[[API-Satz: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-231">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showHeadings
  fullName: showHeadings
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.standardHeight
  summary: >-
    <span data-ttu-id="a8781-232">Gibt die Standardhöhe (Standard) aller Zeilen in der Arbeitsmappe in Punkt zurück.</span><span class="sxs-lookup"><span data-stu-id="a8781-232">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="a8781-233">Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a8781-233">Read-only.</span></span>


    <span data-ttu-id="a8781-234">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-234">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardHeight
  fullName: standardHeight
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.standardWidth
  summary: >-
    <span data-ttu-id="a8781-235">Gibt die Standardbreite (Standard) aller Spalten in der Arbeitsmappe zurück oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="a8781-235">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="a8781-236">Eine Einheit der Spaltenbreite entspricht der Breite eines Zeichens in der Formatvorlage „Normal“.</span><span class="sxs-lookup"><span data-stu-id="a8781-236">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="a8781-237">Für proportionale Schriftarten wird die Breite des Zeichens 0 (null) verwendet.</span><span class="sxs-lookup"><span data-stu-id="a8781-237">For proportional fonts, the width of the character 0 (zero) is used.</span></span>


    <span data-ttu-id="a8781-238">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-238">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardWidth
  fullName: standardWidth
  langs:
  - typeScript
  type: property
  syntax:
    content: 'standardWidth: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.tabColor
  summary: >-
    <span data-ttu-id="a8781-239">Ruft die Farbe der Registerkarte in der Arbeitsmappe ab oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="a8781-239">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="a8781-240">Wenn Sie die Registerkarte Farbe abrufen, wenn das Arbeitsblatt nicht sichtbar ist, wird der Wert null sein.</span><span class="sxs-lookup"><span data-stu-id="a8781-240">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="a8781-241">Wenn das Arbeitsblatt sichtbar ist, aber die Registerkarte Farbe auf automatisch festgelegt ist, wird eine leere Zeichenfolge zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="a8781-241">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="a8781-242">Andernfalls wird die-Eigenschaft festgelegt werden, auf eine Farbe, in der Form "\#123456" beim Festlegen der Farben, verwenden Sie einen leeren Zeichenfolgen andernfalls eine Farbe "automatisch" oder eine echte Farbe festlegen.</span><span class="sxs-lookup"><span data-stu-id="a8781-242">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>


    <span data-ttu-id="a8781-243">\[[API-Satz: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-243">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tabColor
  fullName: tabColor
  langs:
  - typeScript
  type: property
  syntax:
    content: 'tabColor: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"a8781-244\">Beispiele</span><span class=\"sxs-lookup\"><span data-stu-id=\"a8781-244\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.tables
  summary: >-
    <span data-ttu-id="a8781-p133">Gibt die Sammlung von Tabellen zurück, die Teil des Arbeitsblatts sind. Schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="a8781-p133">Collection of tables that are part of the worksheet. Read-only.</span></span>


    <span data-ttu-id="a8781-247">\[[API-Satz: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a8781-247">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tables
  fullName: tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
- uid: excel.Excel.Worksheet.toJSON
  summary: <span data-ttu-id="a8781-248">Überschreibt das JavaScript `toJSON()` Methode, um nützliche Ausgabe zu gewährleisten, wenn ein API-Objekt zu übergeben ist `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="a8781-248">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="a8781-249">(`JSON.stringify`<!-- -->, wiederum die `toJSON` -Methode des Objekts, das es übergeben wird.) Das ursprüngliche Excel.Worksheet-Objekt ein API-Objekt ist die `toJSON` -Methode gibt eine einfache JavaScript-Objekt zurück (eine Typisierung als `Excel.Interfaces.WorksheetData` <!-- -->), die flache Kopien der geladene untergeordnete Eigenschaften aus dem ursprünglichen-Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="a8781-249">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetData
      description: ''
- uid: excel.Excel.Worksheet.visibility
  summary: >-
    <span data-ttu-id="a8781-250">Die Sichtbarkeit des Arbeitsblatts ein.</span><span class="sxs-lookup"><span data-stu-id="a8781-250">The Visibility of the worksheet.</span></span>


    <span data-ttu-id="a8781-251">\[[API-Satz: ExcelApi 1.1 zum Lesen von Sichtbarkeit; 1.2 zum Festlegen von darauf verweisen](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="a8781-251">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="a8781-252">\]</span><span class="sxs-lookup"><span data-stu-id="a8781-252"></span></span>
  name: visibility
  fullName: visibility
  langs:
  - typeScript
  type: property
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type:
      - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
